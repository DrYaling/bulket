#pragma warning( disable : 4883 )
#include "Binder.h"
#include "CoreUObject/Public/UObject/Object.h"
#include "Engine/Classes/GameFramework/Actor.h"
#include "Engine/Classes/GameFramework/Pawn.h"
#include "Engine/Classes/GameFramework/Controller.h"
#include "Engine/Classes/GameFramework/PlayerController.h"
#include "Core/Public/Math/RandomStream.h"
#include "Engine/Classes/Kismet/GameplayStatics.h"
#include "Engine/Classes/GameFramework/Character.h"
#include "Engine/Classes/GameFramework/GameModeBase.h"
#include "Engine/Classes/Components/SceneComponent.h"
#include "Engine/Classes/Components/ActorComponent.h"
#include "Engine/Classes/Engine/World.h"
#include "Engine/Classes/Components/PrimitiveComponent.h"
#include "Engine/Classes/Animation/AnimInstance.h"
#include "Engine/Classes/Kismet/KismetSystemLibrary.h"
#include "Engine/Classes/Animation/AnimMontage.h"
#include "Engine/Classes/Components/SkeletalMeshComponent.h"
#include "Engine/Classes/Components/CapsuleComponent.h"
#include "Engine/Classes/GameFramework/CharacterMovementComponent.h"

using reset_rust_string_handler = void (*)(RefString utfstr, const char* c_str, uint32 size);
reset_rust_string_handler reset_rust_string = nullptr;
//thread unsafe
void ResetFStringBuffer(const FString& fstr, RefString& utfstr) {
    if (reset_rust_string) {
        auto pSendData = fstr.GetCharArray().GetData();
        char* dst = (char*)TCHAR_TO_UTF8(pSendData);
        if (dst) {
            const uint32 dataSize = strlen(dst);
            reset_rust_string(utfstr, dst, dataSize);
        }
        else {
            reset_rust_string(utfstr, "", 0);
        }
    }
}
void ResetFTextBuffer(const FText& fstr, RefString& utfstr) {
    ResetFStringBuffer(fstr.ToString(), utfstr);
}
using create_native_string_handler = char* (*)(const char* c_str, uint32);
create_native_string_handler create_native_string = nullptr;

FString Utf82FString(const NativeString& utfstr) {
    if (utfstr.utfStr && utfstr.size > 0)
        return FString(utfstr.size, RSTR_TO_TCHAR(utfstr.utfStr, utfstr.size));
    else
        return FString();
}
FString Utf8Ref2FString(const RefString& utfstr) {
    if (utfstr.utfStr && utfstr.size > 0)
        return FString(utfstr.size, RSTR_TO_TCHAR(utfstr.utfStr, utfstr.size));
    else
        return FString();
}
const char* FString2Utf8(FString fstr) {
    if (create_native_string == nullptr) {
        return nullptr;
    }
    TCHAR* pSendData = fstr.GetCharArray().GetData();
    const char* dst = (const char*)TCHAR_TO_UTF8(pSendData);
    auto const dataSize = strlen(dst);
    char* buffer = create_native_string(dst, dataSize);
    // UE_LOG(LogTemp, Display, TEXT("FString2Utf8 %s,ptr %p, size %d"), *fstr, buffer, dataSize);
    return buffer;
}
FName Utf82FName(const NativeString& utfstr) {
    auto fstr = Utf82FString(utfstr);
    return FName(*fstr);
}
const char* FName2Utf8(FName fname) {
    auto fstr = fname.ToString();
    return FString2Utf8(fstr);
}
FText Utf82FText(const NativeString& utfstr) {
    auto fstr = Utf82FString(utfstr);
    return FText::FromString(fstr);
}
FText Utf8Ref2FText(const RefString& utfstr) {
    auto fstr = Utf8Ref2FString(utfstr);
    return FText::FromString(fstr);
}
const char* FText2Utf8(FText text) {
    auto fstr = text.ToString();
    return FString2Utf8(fstr);
}
extern "C"{
	void uapi_UObject_AbortInsideMemberFunction(void* target){	
		((UObject*)target)->AbortInsideMemberFunction();	
	}
	bool uapi_UObject_AreNativePropertiesIdenticalTo(void* target, UObject* Other){	
		auto result = ((UObject*)target)->AreNativePropertiesIdenticalTo(Other);	
		return result;	
	}
	void uapi_UObject_BeginCacheForCookedPlatformData(void* target, ITargetPlatform* TargetPlatform){	
		((UObject*)target)->BeginCacheForCookedPlatformData(TargetPlatform);	
	}
	void uapi_UObject_BeginDestroy(void* target){	
		((UObject*)target)->BeginDestroy();	
	}
	bool uapi_UObject_CallRemoteFunction(void* target, UFunction* Function, void* Parms, FOutParmRec* OutParms, FFrame* Stack){	
		auto result = ((UObject*)target)->CallRemoteFunction(Function, Parms, OutParms, Stack);	
		return result;	
	}
	bool uapi_UObject_CanCreateInCurrentContext(UObject* Template){	
		auto result = (UObject::CanCreateInCurrentContext(Template));	
		return result;	
	}
	bool uapi_UObject_CanEditChange(void* target, FProperty* InProperty){	
		auto result = ((UObject*)target)->CanEditChange(InProperty);	
		return result;	
	}
	bool uapi_UObject_CanModify(void* target){	
		auto result = ((UObject*)target)->CanModify();	
		return result;	
	}
	bool uapi_UObject_CheckDefaultSubobjects(void* target, bool bForceCheck){	
		auto result = ((UObject*)target)->CheckDefaultSubobjects(bForceCheck);	
		return result;	
	}
	void uapi_UObject_ClearAllCachedCookedPlatformData(void* target){	
		((UObject*)target)->ClearAllCachedCookedPlatformData();	
	}
	void uapi_UObject_ClearCachedCookedPlatformData(void* target, ITargetPlatform* TargetPlatform){	
		((UObject*)target)->ClearCachedCookedPlatformData(TargetPlatform);	
	}
	bool uapi_UObject_ConditionalBeginDestroy(void* target){	
		auto result = ((UObject*)target)->ConditionalBeginDestroy();	
		return result;	
	}
	bool uapi_UObject_ConditionalFinishDestroy(void* target){	
		auto result = ((UObject*)target)->ConditionalFinishDestroy();	
		return result;	
	}
	void uapi_UObject_ConditionalPostLoad(void* target){	
		((UObject*)target)->ConditionalPostLoad();	
	}
	void uapi_UObject_ConditionalPostLoadSubobjects(void* target, FObjectInstancingGraph* OuterInstanceGraph){	
		((UObject*)target)->ConditionalPostLoadSubobjects(OuterInstanceGraph);	
	}
	void uapi_UObject_DestroyNonNativeProperties(void* target){	
		((UObject*)target)->DestroyNonNativeProperties();	
	}
	void uapi_UObject_ExecuteUbergraph(void* target, int32 EntryPoint){	
		((UObject*)target)->ExecuteUbergraph(EntryPoint);	
	}
	void* uapi_UObject_FindFunction(void* target, UName InName){	
		auto result = (void*)((UObject*)target)->FindFunction(ToFName(InName));	
		return result;	
	}
	void* uapi_UObject_FindFunctionChecked(void* target, UName InName){	
		auto result = (void*)((UObject*)target)->FindFunctionChecked(ToFName(InName));	
		return result;	
	}
	void uapi_UObject_FinishDestroy(void* target){	
		((UObject*)target)->FinishDestroy();	
	}
	void* uapi_UObject_GetArchetype(void* target){	
		auto result = (void*)((UObject*)target)->GetArchetype();	
		return result;	
	}
	void* uapi_UObject_GetConfigOverridePlatform(void* target){	
		auto result = (void*)((UObject*)target)->GetConfigOverridePlatform();	
		return result;	
	}
	const char* uapi_UObject_GetDefaultConfigFilename(void* target){	
		auto result = FString2Utf8(((UObject*)target)->GetDefaultConfigFilename());	
		return result;	
	}
	const char* uapi_UObject_GetDesc(void* target){	
		auto result = FString2Utf8(((UObject*)target)->GetDesc());	
		return result;	
	}
	const char* uapi_UObject_GetDetailedInfo(void* target){	
		auto result = FString2Utf8(((UObject*)target)->GetDetailedInfo());	
		return result;	
	}
	UName uapi_UObject_GetExporterName(void* target){	
		auto result = ToUName(((UObject*)target)->GetExporterName());	
		return result;	
	}
	const char* uapi_UObject_GetGlobalUserConfigFilename(void* target){	
		auto result = FString2Utf8(((UObject*)target)->GetGlobalUserConfigFilename());	
		return result;	
	}
	uint64 uapi_UObject_GetNetPushIdDynamic(void* target){	
		auto result = ((UObject*)target)->GetNetPushIdDynamic();	
		return result;	
	}
	const char* uapi_UObject_GetProjectUserConfigFilename(void* target){	
		auto result = FString2Utf8(((UObject*)target)->GetProjectUserConfigFilename());	
		return result;	
	}
	void* uapi_UObject_GetSparseClassDataStruct(void* target){	
		auto result = (void*)((UObject*)target)->GetSparseClassDataStruct();	
		return result;	
	}
	void* uapi_UObject_GetWorld(void* target){	
		auto result = (void*)((UObject*)target)->GetWorld();	
		return result;	
	}
	void* uapi_UObject_GetWorldChecked(void* target, bool& bSupported){	
		auto result = (void*)((UObject*)target)->GetWorldChecked(bSupported);	
		return result;	
	}
	bool uapi_UObject_HasNonEditorOnlyReferences(void* target){	
		auto result = ((UObject*)target)->HasNonEditorOnlyReferences();	
		return result;	
	}
	bool uapi_UObject_ImplementsGetWorld(void* target){	
		auto result = ((UObject*)target)->ImplementsGetWorld();	
		return result;	
	}
	void uapi_UObject_ImportCustomProperties(void* target, TCHAR* SourceText, FFeedbackContext* Warn){	
		((UObject*)target)->ImportCustomProperties(SourceText, Warn);	
	}
	void uapi_UObject_InstanceSubobjectTemplates(void* target, FObjectInstancingGraph* InstanceGraph){	
		((UObject*)target)->InstanceSubobjectTemplates(InstanceGraph);	
	}
	bool uapi_UObject_IsAsset(void* target){	
		auto result = ((UObject*)target)->IsAsset();	
		return result;	
	}
	bool uapi_UObject_IsBasedOnArchetype(void* target, UObject* SomeObject){	
		auto result = ((UObject*)target)->IsBasedOnArchetype(SomeObject);	
		return result;	
	}
	bool uapi_UObject_IsCachedCookedPlatformDataLoaded(void* target, ITargetPlatform* TargetPlatform){	
		auto result = ((UObject*)target)->IsCachedCookedPlatformDataLoaded(TargetPlatform);	
		return result;	
	}
	bool uapi_UObject_IsDestructionThreadSafe(void* target){	
		auto result = ((UObject*)target)->IsDestructionThreadSafe();	
		return result;	
	}
	bool uapi_UObject_IsEditorOnly(void* target){	
		auto result = ((UObject*)target)->IsEditorOnly();	
		return result;	
	}
	bool uapi_UObject_IsFullNameStableForNetworking(void* target){	
		auto result = ((UObject*)target)->IsFullNameStableForNetworking();	
		return result;	
	}
	bool uapi_UObject_IsInBlueprint(void* target){	
		auto result = ((UObject*)target)->IsInBlueprint();	
		return result;	
	}
	bool uapi_UObject_IsLocalizedResource(void* target){	
		auto result = ((UObject*)target)->IsLocalizedResource();	
		return result;	
	}
	bool uapi_UObject_IsNameStableForNetworking(void* target){	
		auto result = ((UObject*)target)->IsNameStableForNetworking();	
		return result;	
	}
	bool uapi_UObject_IsPostLoadThreadSafe(void* target){	
		auto result = ((UObject*)target)->IsPostLoadThreadSafe();	
		return result;	
	}
	bool uapi_UObject_IsReadyForAsyncPostLoad(void* target){	
		auto result = ((UObject*)target)->IsReadyForAsyncPostLoad();	
		return result;	
	}
	bool uapi_UObject_IsReadyForFinishDestroy(void* target){	
		auto result = ((UObject*)target)->IsReadyForFinishDestroy();	
		return result;	
	}
	bool uapi_UObject_IsSafeForRootSet(void* target){	
		auto result = ((UObject*)target)->IsSafeForRootSet();	
		return result;	
	}
	bool uapi_UObject_IsSelected(void* target){	
		auto result = ((UObject*)target)->IsSelected();	
		return result;	
	}
	bool uapi_UObject_IsSupportedForNetworking(void* target){	
		auto result = ((UObject*)target)->IsSupportedForNetworking();	
		return result;	
	}
	void uapi_UObject_LoadConfig(void* target, UClass* ConfigClass, TCHAR* Filename, uint32 PropagationFlags, FProperty* PropertyToLoad){	
		((UObject*)target)->LoadConfig(ConfigClass, Filename, PropagationFlags, PropertyToLoad);	
	}
	void uapi_UObject_MarkAsEditorOnlySubobject(void* target){	
		((UObject*)target)->MarkAsEditorOnlySubobject();	
	}
	bool uapi_UObject_Modify(void* target, bool bAlwaysMarkDirty){	
		auto result = ((UObject*)target)->Modify(bAlwaysMarkDirty);	
		return result;	
	}
	void uapi_UObject_MoveDataToSparseClassDataStruct(void* target){	
		((UObject*)target)->MoveDataToSparseClassDataStruct();	
	}
	bool uapi_UObject_NeedsLoadForClient(void* target){	
		auto result = ((UObject*)target)->NeedsLoadForClient();	
		return result;	
	}
	bool uapi_UObject_NeedsLoadForEditorGame(void* target){	
		auto result = ((UObject*)target)->NeedsLoadForEditorGame();	
		return result;	
	}
	bool uapi_UObject_NeedsLoadForServer(void* target){	
		auto result = ((UObject*)target)->NeedsLoadForServer();	
		return result;	
	}
	bool uapi_UObject_NeedsLoadForTargetPlatform(void* target, ITargetPlatform* TargetPlatform){	
		auto result = ((UObject*)target)->NeedsLoadForTargetPlatform(TargetPlatform);	
		return result;	
	}
	void uapi_UObject_ParseParms(void* target, TCHAR* Parms){	
		((UObject*)target)->ParseParms(Parms);	
	}
	void uapi_UObject_PostCDOContruct(void* target){	
		((UObject*)target)->PostCDOContruct();	
	}
	void uapi_UObject_PostDuplicate(void* target, bool bDuplicateForPIE){	
		((UObject*)target)->PostDuplicate(bDuplicateForPIE);	
	}
	void uapi_UObject_PostEditChange(void* target){	
		((UObject*)target)->PostEditChange();	
	}
	void uapi_UObject_PostEditImport(void* target){	
		((UObject*)target)->PostEditImport();	
	}
	void uapi_UObject_PostEditUndo(void* target){	
		((UObject*)target)->PostEditUndo();	
	}
	void uapi_UObject_PostInitProperties(void* target){	
		((UObject*)target)->PostInitProperties();	
	}
	void uapi_UObject_PostInterpChange(void* target, FProperty* PropertyThatChanged){	
		((UObject*)target)->PostInterpChange(PropertyThatChanged);	
	}
	void uapi_UObject_PostLinkerChange(void* target){	
		((UObject*)target)->PostLinkerChange();	
	}
	void uapi_UObject_PostLoad(void* target){	
		((UObject*)target)->PostLoad();	
	}
	void uapi_UObject_PostLoadSubobjects(void* target, FObjectInstancingGraph* OuterInstanceGraph){	
		((UObject*)target)->PostLoadSubobjects(OuterInstanceGraph);	
	}
	void uapi_UObject_PostNetReceive(void* target){	
		((UObject*)target)->PostNetReceive();	
	}
	void uapi_UObject_PostReinitProperties(void* target){	
		((UObject*)target)->PostReinitProperties();	
	}
	void uapi_UObject_PostReloadConfig(void* target, FProperty* PropertyThatWasLoaded){	
		((UObject*)target)->PostReloadConfig(PropertyThatWasLoaded);	
	}
	void uapi_UObject_PostRename(void* target, UObject* OldOuter, UName OldName){	
		((UObject*)target)->PostRename(OldOuter, ToFName(OldName));	
	}
	void uapi_UObject_PostRepNotifies(void* target){	
		((UObject*)target)->PostRepNotifies();	
	}
	void uapi_UObject_PreDestroyFromReplication(void* target){	
		((UObject*)target)->PreDestroyFromReplication();	
	}
	void uapi_UObject_PreEditChange(void* target, FProperty* PropertyAboutToChange){	
		((UObject*)target)->PreEditChange(PropertyAboutToChange);	
	}
	void uapi_UObject_PreEditUndo(void* target){	
		((UObject*)target)->PreEditUndo();	
	}
	void uapi_UObject_PreNetReceive(void* target){	
		((UObject*)target)->PreNetReceive();	
	}
	void* uapi_UObject_RegenerateClass(void* target, UClass* ClassToRegenerate, UObject* PreviousCDO){	
		auto result = (void*)((UObject*)target)->RegenerateClass(ClassToRegenerate, PreviousCDO);	
		return result;	
	}
	void uapi_UObject_ReinitializeProperties(void* target, UObject* SourceObject, FObjectInstancingGraph* InstanceGraph){	
		((UObject*)target)->ReinitializeProperties(SourceObject, InstanceGraph);	
	}
	void uapi_UObject_ReloadConfig(void* target, UClass* ConfigClass, TCHAR* Filename, uint32 PropagationFlags, FProperty* PropertyToLoad){	
		((UObject*)target)->ReloadConfig(ConfigClass, Filename, PropagationFlags, PropertyToLoad);	
	}
	void uapi_UObject_SaveConfig(void* target, uint64 Flags, TCHAR* Filename, FConfigCacheIni* Config, bool bAllowCopyToDefaultObject){	
		((UObject*)target)->SaveConfig(Flags, Filename, Config, bAllowCopyToDefaultObject);	
	}
	void uapi_UObject_SetLinker(void* target, FLinkerLoad* LinkerLoad, int32 LinkerIndex, bool bShouldDetachExisting){	
		((UObject*)target)->SetLinker(LinkerLoad, LinkerIndex, bShouldDetachExisting);	
	}
	void uapi_UObject_ShutdownAfterError(void* target){	
		((UObject*)target)->ShutdownAfterError();	
	}
	void uapi_UObject_UpdateGlobalUserConfigFile(void* target){	
		((UObject*)target)->UpdateGlobalUserConfigFile();	
	}
	void uapi_UObject_UpdateProjectUserConfigFile(void* target){	
		((UObject*)target)->UpdateProjectUserConfigFile();	
	}
	void uapi_UObject_WillNeverCacheCookedPlatformDataAgain(void* target){	
		((UObject*)target)->WillNeverCacheCookedPlatformDataAgain();	
	}
	bool uapi_AActor_ActorHasTag(void* target, UName Tag){	
		auto result = ((AActor*)target)->ActorHasTag(ToFName(Tag));	
		return result;	
	}
	Transform uapi_AActor_ActorToWorld(void* target){	
		auto result = ToTransform(((AActor*)target)->ActorToWorld());	
		return result;	
	}
	bool uapi_AActor_AddDataLayer(void* target, UDataLayerAsset* DataLayerAsset){	
		auto result = ((AActor*)target)->AddDataLayer(DataLayerAsset);	
		return result;	
	}
	void uapi_AActor_AddInstanceComponent(void* target, UActorComponent* Component){	
		((AActor*)target)->AddInstanceComponent(Component);	
	}
	void uapi_AActor_AddOwnedComponent(void* target, UActorComponent* Component){	
		((AActor*)target)->AddOwnedComponent(Component);	
	}
	void uapi_AActor_AddTickPrerequisiteActor(void* target, AActor* PrerequisiteActor){	
		((AActor*)target)->AddTickPrerequisiteActor(PrerequisiteActor);	
	}
	void uapi_AActor_AddTickPrerequisiteComponent(void* target, UActorComponent* PrerequisiteComponent){	
		((AActor*)target)->AddTickPrerequisiteComponent(PrerequisiteComponent);	
	}
	bool uapi_AActor_AllowReceiveTickEventOnDedicatedServer(void* target){	
		auto result = ((AActor*)target)->AllowReceiveTickEventOnDedicatedServer();	
		return result;	
	}
	void uapi_AActor_AsyncPhysicsTickActor(void* target, float DeltaTime, float SimTime){	
		((AActor*)target)->AsyncPhysicsTickActor(DeltaTime, SimTime);	
	}
	void uapi_AActor_BecomeViewTarget(void* target, APlayerController* PC){	
		((AActor*)target)->BecomeViewTarget(PC);	
	}
	void uapi_AActor_CallPreReplication(void* target, UNetDriver* NetDriver){	
		((AActor*)target)->CallPreReplication(NetDriver);	
	}
	bool uapi_AActor_CallRemoteFunction(void* target, UFunction* Function, void* Parameters, FOutParmRec* OutParms, FFrame* Stack){	
		auto result = ((AActor*)target)->CallRemoteFunction(Function, Parameters, OutParms, Stack);	
		return result;	
	}
	bool uapi_AActor_CanBeBaseForCharacter(void* target, APawn* Pawn){	
		auto result = ((AActor*)target)->CanBeBaseForCharacter(Pawn);	
		return result;	
	}
	bool uapi_AActor_CanBeDamaged(void* target){	
		auto result = ((AActor*)target)->CanBeDamaged();	
		return result;	
	}
	bool uapi_AActor_CanBeInCluster(void* target){	
		auto result = ((AActor*)target)->CanBeInCluster();	
		return result;	
	}
	bool uapi_AActor_CanChangeIsSpatiallyLoadedFlag(void* target){	
		auto result = ((AActor*)target)->CanChangeIsSpatiallyLoadedFlag();	
		return result;	
	}
	bool uapi_AActor_CanEditChange(void* target, FProperty* InProperty){	
		auto result = ((AActor*)target)->CanEditChange(InProperty);	
		return result;	
	}
	bool uapi_AActor_CanEditChangeComponent(void* target, UActorComponent* Component, FProperty* InProperty){	
		auto result = ((AActor*)target)->CanEditChangeComponent(Component, InProperty);	
		return result;	
	}
	bool uapi_AActor_CanEverTick(void* target){	
		auto result = ((AActor*)target)->CanEverTick();	
		return result;	
	}
	bool uapi_AActor_CanPlayFromHere(void* target){	
		auto result = ((AActor*)target)->CanPlayFromHere();	
		return result;	
	}
	void uapi_AActor_CheckComponentInstanceName(void* target, UName InName){	
		((AActor*)target)->CheckComponentInstanceName(ToFName(InName));	
	}
	bool uapi_AActor_CheckDefaultSubobjectsInternal(void* target){	
		auto result = ((AActor*)target)->CheckDefaultSubobjectsInternal();	
		return result;	
	}
	void uapi_AActor_CheckForDeprecated(void* target){	
		((AActor*)target)->CheckForDeprecated();	
	}
	void uapi_AActor_CheckForErrors(void* target){	
		((AActor*)target)->CheckForErrors();	
	}
	bool uapi_AActor_CheckStillInWorld(void* target){	
		auto result = ((AActor*)target)->CheckStillInWorld();	
		return result;	
	}
	void uapi_AActor_ClearActorLabel(void* target){	
		((AActor*)target)->ClearActorLabel();	
	}
	void uapi_AActor_ClearComponentOverlaps(void* target){	
		((AActor*)target)->ClearComponentOverlaps();	
	}
	void uapi_AActor_ClearCrossLevelReferences(void* target){	
		((AActor*)target)->ClearCrossLevelReferences();	
	}
	void uapi_AActor_ClearInstanceComponents(void* target, bool bDestroyComponents){	
		((AActor*)target)->ClearInstanceComponents(bDestroyComponents);	
	}
	bool uapi_AActor_ContainsDataLayer(void* target, UDataLayerAsset* DataLayerAsset){	
		auto result = ((AActor*)target)->ContainsDataLayer(DataLayerAsset);	
		return result;	
	}
	void uapi_AActor_CopyRemoteRoleFrom(void* target, AActor* CopyFromActor){	
		((AActor*)target)->CopyRemoteRoleFrom(CopyFromActor);	
	}
	void* uapi_AActor_CreateComponentFromTemplate(void* target, UActorComponent* Template, UName InName){	
		auto result = (void*)((AActor*)target)->CreateComponentFromTemplate(Template, ToFName(InName));	
		return result;	
	}
	void* uapi_AActor_CreateComponentFromTemplateData(void* target, FBlueprintCookedComponentInstancingData* TemplateData, UName InName){	
		auto result = (void*)((AActor*)target)->CreateComponentFromTemplateData(TemplateData, ToFName(InName));	
		return result;	
	}
	bool uapi_AActor_CreateOrUpdateActorFolder(void* target){	
		auto result = ((AActor*)target)->CreateOrUpdateActorFolder();	
		return result;	
	}
	void uapi_AActor_DebugShowComponentHierarchy(void* target, TCHAR* Info, bool bShowPosition){	
		((AActor*)target)->DebugShowComponentHierarchy(Info, bShowPosition);	
	}
	void uapi_AActor_DebugShowOneComponentHierarchy(void* target, USceneComponent* SceneComp, int32& NestLevel, bool bShowPosition){	
		((AActor*)target)->DebugShowOneComponentHierarchy(SceneComp, NestLevel, bShowPosition);	
	}
	bool uapi_AActor_Destroy(void* target, bool bNetForce, bool bShouldModifyLevel){	
		auto result = ((AActor*)target)->Destroy(bNetForce, bShouldModifyLevel);	
		return result;	
	}
	void uapi_AActor_DestroyConstructedComponents(void* target){	
		((AActor*)target)->DestroyConstructedComponents();	
	}
	bool uapi_AActor_DestroyNetworkActorHandled(void* target){	
		auto result = ((AActor*)target)->DestroyNetworkActorHandled();	
		return result;	
	}
	void uapi_AActor_Destroyed(void* target){	
		((AActor*)target)->Destroyed();	
	}
	void uapi_AActor_DisableComponentsSimulatePhysics(void* target){	
		((AActor*)target)->DisableComponentsSimulatePhysics();	
	}
	void uapi_AActor_DisableInput(void* target, APlayerController* PlayerController){	
		((AActor*)target)->DisableInput(PlayerController);	
	}
	void uapi_AActor_DispatchBeginPlay(void* target, bool bFromLevelStreaming){	
		((AActor*)target)->DispatchBeginPlay(bFromLevelStreaming);	
	}
	void uapi_AActor_EditorReplacedActor(void* target, AActor* OldActor){	
		((AActor*)target)->EditorReplacedActor(OldActor);	
	}
	void uapi_AActor_EnableInput(void* target, APlayerController* PlayerController){	
		((AActor*)target)->EnableInput(PlayerController);	
	}
	void uapi_AActor_EndViewTarget(void* target, APlayerController* PC){	
		((AActor*)target)->EndViewTarget(PC);	
	}
	void uapi_AActor_ExchangeNetRoles(void* target, bool bRemoteOwner){	
		((AActor*)target)->ExchangeNetRoles(bRemoteOwner);	
	}
	void* uapi_AActor_FindActorInPackage(UPackage* InPackage){	
		auto result = (void*)(AActor::FindActorInPackage(InPackage));	
		return result;	
	}
	void uapi_AActor_FinishAndRegisterComponent(void* target, UActorComponent* Component){	
		((AActor*)target)->FinishAndRegisterComponent(Component);	
	}
	void uapi_AActor_FixupActorFolder(void* target){	
		((AActor*)target)->FixupActorFolder();	
	}
	void uapi_AActor_FixupDataLayers(void* target, bool bRevertChangesOnLockedDataLayer){	
		((AActor*)target)->FixupDataLayers(bRevertChangesOnLockedDataLayer);	
	}
	void uapi_AActor_FlushNetDormancy(void* target){	
		((AActor*)target)->FlushNetDormancy();	
	}
	void uapi_AActor_ForceNetRelevant(void* target){	
		((AActor*)target)->ForceNetRelevant();	
	}
	void uapi_AActor_ForceNetUpdate(void* target){	
		((AActor*)target)->ForceNetUpdate();	
	}
	void uapi_AActor_ForcePropertyCompare(void* target){	
		((AActor*)target)->ForcePropertyCompare();	
	}
	void uapi_AActor_GatherCurrentMovement(void* target){	
		((AActor*)target)->GatherCurrentMovement();	
	}
	bool uapi_AActor_GetActorEnableCollision(void* target){	
		auto result = ((AActor*)target)->GetActorEnableCollision();	
		return result;	
	}
	Vector3 uapi_AActor_GetActorForwardVector(void* target){	
		auto result = ToVector3(((AActor*)target)->GetActorForwardVector());	
		return result;	
	}
	Uuid uapi_AActor_GetActorGuid(void* target){	
		auto result = ToUuid(((AActor*)target)->GetActorGuid());	
		return result;	
	}
	Vector3 uapi_AActor_GetActorLocation(void* target){	
		auto result = ToVector3(((AActor*)target)->GetActorLocation());	
		return result;	
	}
	const char* uapi_AActor_GetActorNameOrLabel(void* target){	
		auto result = FString2Utf8(((AActor*)target)->GetActorNameOrLabel());	
		return result;	
	}
	Quaternion uapi_AActor_GetActorQuat(void* target){	
		auto result = ToQuaternion(((AActor*)target)->GetActorQuat());	
		return result;	
	}
	Vector3 uapi_AActor_GetActorRelativeScale3D(void* target){	
		auto result = ToVector3(((AActor*)target)->GetActorRelativeScale3D());	
		return result;	
	}
	Vector3 uapi_AActor_GetActorRightVector(void* target){	
		auto result = ToVector3(((AActor*)target)->GetActorRightVector());	
		return result;	
	}
	Rotator uapi_AActor_GetActorRotation(void* target){	
		auto result = ToRotator(((AActor*)target)->GetActorRotation());	
		return result;	
	}
	Vector3 uapi_AActor_GetActorScale(void* target){	
		auto result = ToVector3(((AActor*)target)->GetActorScale());	
		return result;	
	}
	Vector3 uapi_AActor_GetActorScale3D(void* target){	
		auto result = ToVector3(((AActor*)target)->GetActorScale3D());	
		return result;	
	}
	float uapi_AActor_GetActorTickInterval(void* target){	
		auto result = ((AActor*)target)->GetActorTickInterval();	
		return result;	
	}
	float uapi_AActor_GetActorTimeDilation(void* target){	
		auto result = ((AActor*)target)->GetActorTimeDilation();	
		return result;	
	}
	float uapi_AActor_GetActorTimeDilation2(void* target, UWorld* ActorWorld){	
		auto result = ((AActor*)target)->GetActorTimeDilation(*ActorWorld);	
		return result;	
	}
	Transform uapi_AActor_GetActorTransform(void* target){	
		auto result = ToTransform(((AActor*)target)->GetActorTransform());	
		return result;	
	}
	Vector3 uapi_AActor_GetActorUpVector(void* target){	
		auto result = ToVector3(((AActor*)target)->GetActorUpVector());	
		return result;	
	}
	void* uapi_AActor_GetAttachParentActor(void* target){	
		auto result = (void*)((AActor*)target)->GetAttachParentActor();	
		return result;	
	}
	UName uapi_AActor_GetAttachParentSocketName(void* target){	
		auto result = ToUName(((AActor*)target)->GetAttachParentSocketName());	
		return result;	
	}
	bool uapi_AActor_GetAutoDestroyWhenFinished(void* target){	
		auto result = ((AActor*)target)->GetAutoDestroyWhenFinished();	
		return result;	
	}
	UName uapi_AActor_GetCanBeDamagedPropertyName(){	
		auto result = ToUName((AActor::GetCanBeDamagedPropertyName()));	
		return result;	
	}
	void uapi_AActor_GetComponentsBoundingCylinder(void* target, float& CollisionRadius, float& CollisionHalfHeight, bool bNonColliding, bool bIncludeFromChildActors){	
		((AActor*)target)->GetComponentsBoundingCylinder(CollisionRadius, CollisionHalfHeight, bNonColliding, bIncludeFromChildActors);	
	}
	Uuid uapi_AActor_GetContentBundleGuid(void* target){	
		auto result = ToUuid(((AActor*)target)->GetContentBundleGuid());	
		return result;	
	}
	UName uapi_AActor_GetCustomIconName(void* target){	
		auto result = ToUName(((AActor*)target)->GetCustomIconName());	
		return result;	
	}
	UName uapi_AActor_GetDataLayerAssetsPropertyName(){	
		auto result = ToUName((AActor::GetDataLayerAssetsPropertyName()));	
		return result;	
	}
	const char* uapi_AActor_GetDefaultActorLabel(void* target){	
		auto result = FString2Utf8(((AActor*)target)->GetDefaultActorLabel());	
		return result;	
	}
	void* uapi_AActor_GetDefaultAttachComponent(void* target){	
		auto result = (void*)((AActor*)target)->GetDefaultAttachComponent();	
		return result;	
	}
	float uapi_AActor_GetDistanceTo(void* target, AActor* OtherActor){	
		auto result = ((AActor*)target)->GetDistanceTo(OtherActor);	
		return result;	
	}
	float uapi_AActor_GetDotProductTo(void* target, AActor* OtherActor){	
		auto result = ((AActor*)target)->GetDotProductTo(OtherActor);	
		return result;	
	}
	Uuid uapi_AActor_GetFolderGuid(void* target, bool bDirectAccess){	
		auto result = ToUuid(((AActor*)target)->GetFolderGuid(bDirectAccess));	
		return result;	
	}
	UName uapi_AActor_GetFolderPath(void* target){	
		auto result = ToUName(((AActor*)target)->GetFolderPath());	
		return result;	
	}
	int32 uapi_AActor_GetFunctionCallspace(void* target, UFunction* Function, FFrame* Stack){	
		auto result = ((AActor*)target)->GetFunctionCallspace(Function, Stack);	
		return result;	
	}
	void* uapi_AActor_GetGameInstance(void* target){	
		auto result = (void*)((AActor*)target)->GetGameInstance();	
		return result;	
	}
	float uapi_AActor_GetGameTimeSinceCreation(void* target){	
		auto result = ((AActor*)target)->GetGameTimeSinceCreation();	
		return result;	
	}
	void* uapi_AActor_GetHLODLayer(void* target){	
		auto result = (void*)((AActor*)target)->GetHLODLayer();	
		return result;	
	}
	UName uapi_AActor_GetHLODLayerPropertyName(){	
		auto result = ToUName((AActor::GetHLODLayerPropertyName()));	
		return result;	
	}
	UName uapi_AActor_GetHiddenPropertyName(){	
		auto result = ToUName((AActor::GetHiddenPropertyName()));	
		return result;	
	}
	float uapi_AActor_GetHorizontalDistanceTo(void* target, AActor* OtherActor){	
		auto result = ((AActor*)target)->GetHorizontalDistanceTo(OtherActor);	
		return result;	
	}
	float uapi_AActor_GetHorizontalDotProductTo(void* target, AActor* OtherActor){	
		auto result = ((AActor*)target)->GetHorizontalDotProductTo(OtherActor);	
		return result;	
	}
	const char* uapi_AActor_GetHumanReadableName(void* target){	
		auto result = FString2Utf8(((AActor*)target)->GetHumanReadableName());	
		return result;	
	}
	float uapi_AActor_GetInputAxisValue(void* target, UName InputAxisName){	
		auto result = ((AActor*)target)->GetInputAxisValue(ToFName(InputAxisName));	
		return result;	
	}
	void* uapi_AActor_GetInstigator(void* target){	
		auto result = (void*)((AActor*)target)->GetInstigator();	
		return result;	
	}
	void* uapi_AActor_GetInstigatorController(void* target){	
		auto result = (void*)((AActor*)target)->GetInstigatorController();	
		return result;	
	}
	UName uapi_AActor_GetInstigatorPropertyName(){	
		auto result = ToUName((AActor::GetInstigatorPropertyName()));	
		return result;	
	}
	bool uapi_AActor_GetIsReplicated(void* target){	
		auto result = ((AActor*)target)->GetIsReplicated();	
		return result;	
	}
	bool uapi_AActor_GetIsSpatiallyLoaded(void* target){	
		auto result = ((AActor*)target)->GetIsSpatiallyLoaded();	
		return result;	
	}
	UName uapi_AActor_GetIsSpatiallyLoadedPropertyName(){	
		auto result = ToUName((AActor::GetIsSpatiallyLoadedPropertyName()));	
		return result;	
	}
	float uapi_AActor_GetLastRenderTime(void* target){	
		auto result = ((AActor*)target)->GetLastRenderTime();	
		return result;	
	}
	void* uapi_AActor_GetLevel(void* target){	
		auto result = (void*)((AActor*)target)->GetLevel();	
		return result;	
	}
	Transform uapi_AActor_GetLevelTransform(void* target){	
		auto result = ToTransform(((AActor*)target)->GetLevelTransform());	
		return result;	
	}
	float uapi_AActor_GetLifeSpan(void* target){	
		auto result = ((AActor*)target)->GetLifeSpan();	
		return result;	
	}
	void* uapi_AActor_GetNetConnection(void* target){	
		auto result = (void*)((AActor*)target)->GetNetConnection();	
		return result;	
	}
	void* uapi_AActor_GetNetDriver(void* target){	
		auto result = (void*)((AActor*)target)->GetNetDriver();	
		return result;	
	}
	UName uapi_AActor_GetNetDriverName(void* target){	
		auto result = ToUName(((AActor*)target)->GetNetDriverName());	
		return result;	
	}
	void* uapi_AActor_GetNetOwner(void* target){	
		auto result = (void*)((AActor*)target)->GetNetOwner();	
		return result;	
	}
	void* uapi_AActor_GetNetOwningPlayer(void* target){	
		auto result = (void*)((AActor*)target)->GetNetOwningPlayer();	
		return result;	
	}
	int32 uapi_AActor_GetNumUncachedStaticLightingInteractions(void* target){	
		auto result = ((AActor*)target)->GetNumUncachedStaticLightingInteractions();	
		return result;	
	}
	void* uapi_AActor_GetOwner(void* target){	
		auto result = (void*)((AActor*)target)->GetOwner();	
		return result;	
	}
	void* uapi_AActor_GetParentActor(void* target){	
		auto result = (void*)((AActor*)target)->GetParentActor();	
		return result;	
	}
	void* uapi_AActor_GetParentComponent(void* target){	
		auto result = (void*)((AActor*)target)->GetParentComponent();	
		return result;	
	}
	void* uapi_AActor_GetPhysicsVolume(void* target){	
		auto result = (void*)((AActor*)target)->GetPhysicsVolume();	
		return result;	
	}
	Vector3 uapi_AActor_GetPivotOffset(void* target){	
		auto result = ToVector3(((AActor*)target)->GetPivotOffset());	
		return result;	
	}
	Vector3 uapi_AActor_GetPlacementExtent(void* target){	
		auto result = ToVector3(((AActor*)target)->GetPlacementExtent());	
		return result;	
	}
	int32 uapi_AActor_GetRayTracingGroupId(void* target){	
		auto result = ((AActor*)target)->GetRayTracingGroupId();	
		return result;	
	}
	UName uapi_AActor_GetReplicateMovementPropertyName(){	
		auto result = ToUName((AActor::GetReplicateMovementPropertyName()));	
		return result;	
	}
	UName uapi_AActor_GetRolePropertyName(){	
		auto result = ToUName((AActor::GetRolePropertyName()));	
		return result;	
	}
	void* uapi_AActor_GetRootComponent(void* target){	
		auto result = (void*)((AActor*)target)->GetRootComponent();	
		return result;	
	}
	void* uapi_AActor_GetRootSelectionParent(void* target){	
		auto result = (void*)((AActor*)target)->GetRootSelectionParent();	
		return result;	
	}
	UName uapi_AActor_GetRuntimeGrid(void* target){	
		auto result = ToUName(((AActor*)target)->GetRuntimeGrid());	
		return result;	
	}
	UName uapi_AActor_GetRuntimeGridPropertyName(){	
		auto result = ToUName((AActor::GetRuntimeGridPropertyName()));	
		return result;	
	}
	void* uapi_AActor_GetSceneOutlinerParent(void* target){	
		auto result = (void*)((AActor*)target)->GetSceneOutlinerParent();	
		return result;	
	}
	void* uapi_AActor_GetSelectionParent(void* target){	
		auto result = (void*)((AActor*)target)->GetSelectionParent();	
		return result;	
	}
	void uapi_AActor_GetSimpleCollisionCylinder(void* target, float& CollisionRadius, float& CollisionHalfHeight){	
		((AActor*)target)->GetSimpleCollisionCylinder(CollisionRadius, CollisionHalfHeight);	
	}
	Vector3 uapi_AActor_GetSimpleCollisionCylinderExtent(void* target){	
		auto result = ToVector3(((AActor*)target)->GetSimpleCollisionCylinderExtent());	
		return result;	
	}
	float uapi_AActor_GetSimpleCollisionHalfHeight(void* target){	
		auto result = ((AActor*)target)->GetSimpleCollisionHalfHeight();	
		return result;	
	}
	float uapi_AActor_GetSimpleCollisionRadius(void* target){	
		auto result = ((AActor*)target)->GetSimpleCollisionRadius();	
		return result;	
	}
	float uapi_AActor_GetSquaredDistanceTo(void* target, AActor* OtherActor){	
		auto result = ((AActor*)target)->GetSquaredDistanceTo(OtherActor);	
		return result;	
	}
	float uapi_AActor_GetSquaredHorizontalDistanceTo(void* target, AActor* OtherActor){	
		auto result = ((AActor*)target)->GetSquaredHorizontalDistanceTo(OtherActor);	
		return result;	
	}
	Vector3 uapi_AActor_GetTargetLocation(void* target, AActor* RequestedBy){	
		auto result = ToVector3(((AActor*)target)->GetTargetLocation(RequestedBy));	
		return result;	
	}
	bool uapi_AActor_GetTearOff(void* target){	
		auto result = ((AActor*)target)->GetTearOff();	
		return result;	
	}
	bool uapi_AActor_GetTickableWhenPaused(void* target){	
		auto result = ((AActor*)target)->GetTickableWhenPaused();	
		return result;	
	}
	Transform uapi_AActor_GetTransform(void* target){	
		auto result = ToTransform(((AActor*)target)->GetTransform());	
		return result;	
	}
	Vector3 uapi_AActor_GetVelocity(void* target){	
		auto result = ToVector3(((AActor*)target)->GetVelocity());	
		return result;	
	}
	float uapi_AActor_GetVerticalDistanceTo(void* target, AActor* OtherActor){	
		auto result = ((AActor*)target)->GetVerticalDistanceTo(OtherActor);	
		return result;	
	}
	void* uapi_AActor_GetWorld(void* target){	
		auto result = (void*)((AActor*)target)->GetWorld();	
		return result;	
	}
	void* uapi_AActor_GetWorldSettings(void* target){	
		auto result = (void*)((AActor*)target)->GetWorldSettings();	
		return result;	
	}
	void uapi_AActor_HandleRegisterComponentWithWorld(void* target, UActorComponent* Component){	
		((AActor*)target)->HandleRegisterComponentWithWorld(Component);	
	}
	bool uapi_AActor_HasActiveCameraComponent(void* target){	
		auto result = ((AActor*)target)->HasActiveCameraComponent();	
		return result;	
	}
	bool uapi_AActor_HasActivePawnControlCameraComponent(void* target){	
		auto result = ((AActor*)target)->HasActivePawnControlCameraComponent();	
		return result;	
	}
	bool uapi_AActor_HasActorBegunPlay(void* target){	
		auto result = ((AActor*)target)->HasActorBegunPlay();	
		return result;	
	}
	bool uapi_AActor_HasActorRegisteredAllComponents(void* target){	
		auto result = ((AActor*)target)->HasActorRegisteredAllComponents();	
		return result;	
	}
	bool uapi_AActor_HasAuthority(void* target){	
		auto result = ((AActor*)target)->HasAuthority();	
		return result;	
	}
	bool uapi_AActor_HasDataLayers(void* target){	
		auto result = ((AActor*)target)->HasDataLayers();	
		return result;	
	}
	bool uapi_AActor_HasDeferredComponentRegistration(void* target){	
		auto result = ((AActor*)target)->HasDeferredComponentRegistration();	
		return result;	
	}
	bool uapi_AActor_HasLocalNetOwner(void* target){	
		auto result = ((AActor*)target)->HasLocalNetOwner();	
		return result;	
	}
	bool uapi_AActor_HasNetOwner(void* target){	
		auto result = ((AActor*)target)->HasNetOwner();	
		return result;	
	}
	bool uapi_AActor_HasNonTrivialUserConstructionScript(void* target){	
		auto result = ((AActor*)target)->HasNonTrivialUserConstructionScript();	
		return result;	
	}
	bool uapi_AActor_HasValidRootComponent(void* target){	
		auto result = ((AActor*)target)->HasValidRootComponent();	
		return result;	
	}
	bool uapi_AActor_IncrementalRegisterComponents(void* target, int32 NumComponentsToRegister, FRegisterComponentContext* Context){	
		auto result = ((AActor*)target)->IncrementalRegisterComponents(NumComponentsToRegister, Context);	
		return result;	
	}
	void uapi_AActor_InitializeComponents(void* target){	
		((AActor*)target)->InitializeComponents();	
	}
	void uapi_AActor_InvalidateLightingCache(void* target){	
		((AActor*)target)->InvalidateLightingCache();	
	}
	void uapi_AActor_InvalidateLightingCacheDetailed(void* target, bool bTranslationOnly){	
		((AActor*)target)->InvalidateLightingCacheDetailed(bTranslationOnly);	
	}
	bool uapi_AActor_IsActorBeginningPlay(void* target){	
		auto result = ((AActor*)target)->IsActorBeginningPlay();	
		return result;	
	}
	bool uapi_AActor_IsActorBeginningPlayFromLevelStreaming(void* target){	
		auto result = ((AActor*)target)->IsActorBeginningPlayFromLevelStreaming();	
		return result;	
	}
	bool uapi_AActor_IsActorBeingDestroyed(void* target){	
		auto result = ((AActor*)target)->IsActorBeingDestroyed();	
		return result;	
	}
	bool uapi_AActor_IsActorComponentReplicatedSubObjectRegistered(void* target, UActorComponent* OwnerComponent, UObject* SubObject){	
		auto result = ((AActor*)target)->IsActorComponentReplicatedSubObjectRegistered(OwnerComponent, SubObject);	
		return result;	
	}
	bool uapi_AActor_IsActorInitialized(void* target){	
		auto result = ((AActor*)target)->IsActorInitialized();	
		return result;	
	}
	bool uapi_AActor_IsActorLabelEditable(void* target){	
		auto result = ((AActor*)target)->IsActorLabelEditable();	
		return result;	
	}
	bool uapi_AActor_IsActorOrSelectionParentSelected(void* target){	
		auto result = ((AActor*)target)->IsActorOrSelectionParentSelected();	
		return result;	
	}
	bool uapi_AActor_IsActorTickEnabled(void* target){	
		auto result = ((AActor*)target)->IsActorTickEnabled();	
		return result;	
	}
	bool uapi_AActor_IsAsset(void* target){	
		auto result = ((AActor*)target)->IsAsset();	
		return result;	
	}
	bool uapi_AActor_IsAttachedTo(void* target, AActor* Other){	
		auto result = ((AActor*)target)->IsAttachedTo(Other);	
		return result;	
	}
	bool uapi_AActor_IsBasedOnActor(void* target, AActor* Other){	
		auto result = ((AActor*)target)->IsBasedOnActor(Other);	
		return result;	
	}
	bool uapi_AActor_IsChildActor(void* target){	
		auto result = ((AActor*)target)->IsChildActor();	
		return result;	
	}
	bool uapi_AActor_IsComponentRelevantForNavigation(void* target, UActorComponent* Component){	
		auto result = ((AActor*)target)->IsComponentRelevantForNavigation(Component);	
		return result;	
	}
	bool uapi_AActor_IsDefaultPreviewEnabled(void* target){	
		auto result = ((AActor*)target)->IsDefaultPreviewEnabled();	
		return result;	
	}
	bool uapi_AActor_IsEditable(void* target){	
		auto result = ((AActor*)target)->IsEditable();	
		return result;	
	}
	bool uapi_AActor_IsEditorOnly(void* target){	
		auto result = ((AActor*)target)->IsEditorOnly();	
		return result;	
	}
	bool uapi_AActor_IsForceExternalActorLevelReferenceForPIE(void* target){	
		auto result = ((AActor*)target)->IsForceExternalActorLevelReferenceForPIE();	
		return result;	
	}
	bool uapi_AActor_IsHLODRelevant(void* target){	
		auto result = ((AActor*)target)->IsHLODRelevant();	
		return result;	
	}
	bool uapi_AActor_IsHidden(void* target){	
		auto result = ((AActor*)target)->IsHidden();	
		return result;	
	}
	bool uapi_AActor_IsHiddenEd(void* target){	
		auto result = ((AActor*)target)->IsHiddenEd();	
		return result;	
	}
	bool uapi_AActor_IsHiddenEdAtStartup(void* target){	
		auto result = ((AActor*)target)->IsHiddenEdAtStartup();	
		return result;	
	}
	bool uapi_AActor_IsInEditingLevelInstance(void* target){	
		auto result = ((AActor*)target)->IsInEditingLevelInstance();	
		return result;	
	}
	bool uapi_AActor_IsInLevel(void* target, ULevel* TestLevel){	
		auto result = ((AActor*)target)->IsInLevel(TestLevel);	
		return result;	
	}
	bool uapi_AActor_IsInPersistentLevel(void* target, bool bIncludeLevelStreamingPersistent){	
		auto result = ((AActor*)target)->IsInPersistentLevel(bIncludeLevelStreamingPersistent);	
		return result;	
	}
	bool uapi_AActor_IsLevelBoundsRelevant(void* target){	
		auto result = ((AActor*)target)->IsLevelBoundsRelevant();	
		return result;	
	}
	bool uapi_AActor_IsListedInSceneOutliner(void* target){	
		auto result = ((AActor*)target)->IsListedInSceneOutliner();	
		return result;	
	}
	bool uapi_AActor_IsLockLocation(void* target){	
		auto result = ((AActor*)target)->IsLockLocation();	
		return result;	
	}
	bool uapi_AActor_IsMainPackageActor(void* target){	
		auto result = ((AActor*)target)->IsMainPackageActor();	
		return result;	
	}
	bool uapi_AActor_IsNameStableForNetworking(void* target){	
		auto result = ((AActor*)target)->IsNameStableForNetworking();	
		return result;	
	}
	bool uapi_AActor_IsNetStartupActor(void* target){	
		auto result = ((AActor*)target)->IsNetStartupActor();	
		return result;	
	}
	bool uapi_AActor_IsOverlappingActor(void* target, AActor* Other){	
		auto result = ((AActor*)target)->IsOverlappingActor(Other);	
		return result;	
	}
	bool uapi_AActor_IsOwnedBy(void* target, AActor* TestOwner){	
		auto result = ((AActor*)target)->IsOwnedBy(TestOwner);	
		return result;	
	}
	bool uapi_AActor_IsPendingKillPending(void* target){	
		auto result = ((AActor*)target)->IsPendingKillPending();	
		return result;	
	}
	bool uapi_AActor_IsReadyForFinishDestroy(void* target){	
		auto result = ((AActor*)target)->IsReadyForFinishDestroy();	
		return result;	
	}
	bool uapi_AActor_IsRelevancyOwnerFor(void* target, AActor* ReplicatedActor, AActor* ActorOwner, AActor* ConnectionActor){	
		auto result = ((AActor*)target)->IsRelevancyOwnerFor(ReplicatedActor, ActorOwner, ConnectionActor);	
		return result;	
	}
	bool uapi_AActor_IsReplicatedActorComponentRegistered(void* target, UActorComponent* ReplicatedComponent){	
		auto result = ((AActor*)target)->IsReplicatedActorComponentRegistered(ReplicatedComponent);	
		return result;	
	}
	bool uapi_AActor_IsReplicatedSubObjectRegistered(void* target, UObject* SubObject){	
		auto result = ((AActor*)target)->IsReplicatedSubObjectRegistered(SubObject);	
		return result;	
	}
	bool uapi_AActor_IsReplicatingMovement(void* target){	
		auto result = ((AActor*)target)->IsReplicatingMovement();	
		return result;	
	}
	bool uapi_AActor_IsRootComponentCollisionRegistered(void* target){	
		auto result = ((AActor*)target)->IsRootComponentCollisionRegistered();	
		return result;	
	}
	bool uapi_AActor_IsRootComponentMovable(void* target){	
		auto result = ((AActor*)target)->IsRootComponentMovable();	
		return result;	
	}
	bool uapi_AActor_IsRootComponentStatic(void* target){	
		auto result = ((AActor*)target)->IsRootComponentStatic();	
		return result;	
	}
	bool uapi_AActor_IsRootComponentStationary(void* target){	
		auto result = ((AActor*)target)->IsRootComponentStationary();	
		return result;	
	}
	bool uapi_AActor_IsRunningUserConstructionScript(void* target){	
		auto result = ((AActor*)target)->IsRunningUserConstructionScript();	
		return result;	
	}
	bool uapi_AActor_IsRuntimeOnly(void* target){	
		auto result = ((AActor*)target)->IsRuntimeOnly();	
		return result;	
	}
	bool uapi_AActor_IsSelectable(void* target){	
		auto result = ((AActor*)target)->IsSelectable();	
		return result;	
	}
	bool uapi_AActor_IsSelectedInEditor(void* target){	
		auto result = ((AActor*)target)->IsSelectedInEditor();	
		return result;	
	}
	bool uapi_AActor_IsSelectionChild(void* target){	
		auto result = ((AActor*)target)->IsSelectionChild();	
		return result;	
	}
	bool uapi_AActor_IsSelectionParentOfAttachedActors(void* target){	
		auto result = ((AActor*)target)->IsSelectionParentOfAttachedActors();	
		return result;	
	}
	bool uapi_AActor_IsSupportedForNetworking(void* target){	
		auto result = ((AActor*)target)->IsSupportedForNetworking();	
		return result;	
	}
	bool uapi_AActor_IsTemporarilyHiddenInEditor(void* target, bool bIncludeParent){	
		auto result = ((AActor*)target)->IsTemporarilyHiddenInEditor(bIncludeParent);	
		return result;	
	}
	bool uapi_AActor_IsUserManaged(void* target){	
		auto result = ((AActor*)target)->IsUserManaged();	
		return result;	
	}
	bool uapi_AActor_IsUsingRegisteredSubObjectList(void* target){	
		auto result = ((AActor*)target)->IsUsingRegisteredSubObjectList();	
		return result;	
	}
	void uapi_AActor_K2_DestroyActor(void* target){	
		((AActor*)target)->K2_DestroyActor();	
	}
	Vector3 uapi_AActor_K2_GetActorLocation(void* target){	
		auto result = ToVector3(((AActor*)target)->K2_GetActorLocation());	
		return result;	
	}
	Rotator uapi_AActor_K2_GetActorRotation(void* target){	
		auto result = ToRotator(((AActor*)target)->K2_GetActorRotation());	
		return result;	
	}
	void* uapi_AActor_K2_GetRootComponent(void* target){	
		auto result = (void*)((AActor*)target)->K2_GetRootComponent();	
		return result;	
	}
	void uapi_AActor_K2_OnBecomeViewTarget(void* target, APlayerController* PC){	
		((AActor*)target)->K2_OnBecomeViewTarget(PC);	
	}
	void uapi_AActor_K2_OnEndViewTarget(void* target, APlayerController* PC){	
		((AActor*)target)->K2_OnEndViewTarget(PC);	
	}
	void uapi_AActor_K2_OnReset(void* target){	
		((AActor*)target)->K2_OnReset();	
	}
	bool uapi_AActor_K2_SetActorRotation(void* target, Rotator NewRotation, bool bTeleportPhysics){	
		auto result = ((AActor*)target)->K2_SetActorRotation(ToFRotator(NewRotation), bTeleportPhysics);	
		return result;	
	}
	bool uapi_AActor_K2_TeleportTo(void* target, Vector3 DestLocation, Rotator DestRotation){	
		auto result = ((AActor*)target)->K2_TeleportTo(ToFVector(DestLocation), ToFRotator(DestRotation));	
		return result;	
	}
	void uapi_AActor_LifeSpanExpired(void* target){	
		((AActor*)target)->LifeSpanExpired();	
	}
	void uapi_AActor_MakeNoise(void* target, float Loudness, APawn* NoiseInstigator, Vector3 NoiseLocation, float MaxRange, UName Tag){	
		((AActor*)target)->MakeNoise(Loudness, NoiseInstigator, ToFVector(NoiseLocation), MaxRange, ToFName(Tag));	
	}
	void uapi_AActor_MarkComponentsAsPendingKill(void* target){	
		((AActor*)target)->MarkComponentsAsPendingKill();	
	}
	void uapi_AActor_MarkComponentsRenderStateDirty(void* target){	
		((AActor*)target)->MarkComponentsRenderStateDirty();	
	}
	bool uapi_AActor_Modify(void* target, bool bAlwaysMarkDirty){	
		auto result = ((AActor*)target)->Modify(bAlwaysMarkDirty);	
		return result;	
	}
	bool uapi_AActor_NeedsLoadForTargetPlatform(void* target, ITargetPlatform* TargetPlatform){	
		auto result = ((AActor*)target)->NeedsLoadForTargetPlatform(TargetPlatform);	
		return result;	
	}
	void uapi_AActor_NotifyActorBeginCursorOver(void* target){	
		((AActor*)target)->NotifyActorBeginCursorOver();	
	}
	void uapi_AActor_NotifyActorBeginOverlap(void* target, AActor* OtherActor){	
		((AActor*)target)->NotifyActorBeginOverlap(OtherActor);	
	}
	void uapi_AActor_NotifyActorEndCursorOver(void* target){	
		((AActor*)target)->NotifyActorEndCursorOver();	
	}
	void uapi_AActor_NotifyActorEndOverlap(void* target, AActor* OtherActor){	
		((AActor*)target)->NotifyActorEndOverlap(OtherActor);	
	}
	void uapi_AActor_OnNetCleanup(void* target, UNetConnection* Connection){	
		((AActor*)target)->OnNetCleanup(Connection);	
	}
	void uapi_AActor_OnPlayFromHere(void* target){	
		((AActor*)target)->OnPlayFromHere();	
	}
	void uapi_AActor_OnRep_AttachmentReplication(void* target){	
		((AActor*)target)->OnRep_AttachmentReplication();	
	}
	void uapi_AActor_OnRep_Instigator(void* target){	
		((AActor*)target)->OnRep_Instigator();	
	}
	void uapi_AActor_OnRep_ReplicateMovement(void* target){	
		((AActor*)target)->OnRep_ReplicateMovement();	
	}
	void uapi_AActor_OnRep_ReplicatedMovement(void* target){	
		((AActor*)target)->OnRep_ReplicatedMovement();	
	}
	void uapi_AActor_OnReplicationPausedChanged(void* target, bool bIsReplicationPaused){	
		((AActor*)target)->OnReplicationPausedChanged(bIsReplicationPaused);	
	}
	void uapi_AActor_OnSubobjectCreatedFromReplication(void* target, UObject* NewSubobject){	
		((AActor*)target)->OnSubobjectCreatedFromReplication(NewSubobject);	
	}
	void uapi_AActor_OnSubobjectDestroyFromReplication(void* target, UObject* Subobject){	
		((AActor*)target)->OnSubobjectDestroyFromReplication(Subobject);	
	}
	bool uapi_AActor_OpenAssetEditor(void* target){	
		auto result = ((AActor*)target)->OpenAssetEditor();	
		return result;	
	}
	void uapi_AActor_OutsideWorldBounds(void* target){	
		((AActor*)target)->OutsideWorldBounds();	
	}
	bool uapi_AActor_OwnsComponent(void* target, UActorComponent* Component){	
		auto result = ((AActor*)target)->OwnsComponent(Component);	
		return result;	
	}
	void uapi_AActor_PostActorConstruction(void* target){	
		((AActor*)target)->PostActorConstruction();	
	}
	void uapi_AActor_PostActorCreated(void* target){	
		((AActor*)target)->PostActorCreated();	
	}
	void uapi_AActor_PostEditImport(void* target){	
		((AActor*)target)->PostEditImport();	
	}
	void uapi_AActor_PostEditMove(void* target, bool bFinished){	
		((AActor*)target)->PostEditMove(bFinished);	
	}
	void uapi_AActor_PostEditUndo(void* target){	
		((AActor*)target)->PostEditUndo();	
	}
	void uapi_AActor_PostInitProperties(void* target){	
		((AActor*)target)->PostInitProperties();	
	}
	void uapi_AActor_PostInitializeComponents(void* target){	
		((AActor*)target)->PostInitializeComponents();	
	}
	void uapi_AActor_PostLoad(void* target){	
		((AActor*)target)->PostLoad();	
	}
	void uapi_AActor_PostLoadSubobjects(void* target, FObjectInstancingGraph* OuterInstanceGraph){	
		((AActor*)target)->PostLoadSubobjects(OuterInstanceGraph);	
	}
	void uapi_AActor_PostNetInit(void* target){	
		((AActor*)target)->PostNetInit();	
	}
	void uapi_AActor_PostNetReceive(void* target){	
		((AActor*)target)->PostNetReceive();	
	}
	void uapi_AActor_PostNetReceiveLocationAndRotation(void* target){	
		((AActor*)target)->PostNetReceiveLocationAndRotation();	
	}
	void uapi_AActor_PostNetReceivePhysicState(void* target){	
		((AActor*)target)->PostNetReceivePhysicState();	
	}
	void uapi_AActor_PostNetReceiveRole(void* target){	
		((AActor*)target)->PostNetReceiveRole();	
	}
	void uapi_AActor_PostRegisterAllComponents(void* target){	
		((AActor*)target)->PostRegisterAllComponents();	
	}
	void uapi_AActor_PostRename(void* target, UObject* OldOuter, UName OldName){	
		((AActor*)target)->PostRename(OldOuter, ToFName(OldName));	
	}
	void uapi_AActor_PostRenderFor(void* target, APlayerController* PC, UCanvas* Canvas, Vector3 CameraPosition, Vector3 CameraDir){	
		((AActor*)target)->PostRenderFor(PC, Canvas, ToFVector(CameraPosition), ToFVector(CameraDir));	
	}
	void uapi_AActor_PostUnregisterAllComponents(void* target){	
		((AActor*)target)->PostUnregisterAllComponents();	
	}
	void uapi_AActor_PreEditChange(void* target, FProperty* PropertyThatWillChange){	
		((AActor*)target)->PreEditChange(PropertyThatWillChange);	
	}
	void uapi_AActor_PreEditUndo(void* target){	
		((AActor*)target)->PreEditUndo();	
	}
	void uapi_AActor_PreInitializeComponents(void* target){	
		((AActor*)target)->PreInitializeComponents();	
	}
	void uapi_AActor_PreNetReceive(void* target){	
		((AActor*)target)->PreNetReceive();	
	}
	void uapi_AActor_PreRegisterAllComponents(void* target){	
		((AActor*)target)->PreRegisterAllComponents();	
	}
	void uapi_AActor_PrestreamTextures(void* target, float Seconds, bool bEnableStreaming, int32 CinematicTextureGroups){	
		((AActor*)target)->PrestreamTextures(Seconds, bEnableStreaming, CinematicTextureGroups);	
	}
	void uapi_AActor_ProcessEvent(void* target, UFunction* Function, void* Parameters){	
		((AActor*)target)->ProcessEvent(Function, Parameters);	
	}
	void uapi_AActor_PushLevelInstanceEditingStateToProxies(void* target, bool bInEditingState){	
		((AActor*)target)->PushLevelInstanceEditingStateToProxies(bInEditingState);	
	}
	void uapi_AActor_PushSelectionToProxies(void* target){	
		((AActor*)target)->PushSelectionToProxies();	
	}
	void uapi_AActor_ReceiveActorBeginCursorOver(void* target){	
		((AActor*)target)->ReceiveActorBeginCursorOver();	
	}
	void uapi_AActor_ReceiveActorBeginOverlap(void* target, AActor* OtherActor){	
		((AActor*)target)->ReceiveActorBeginOverlap(OtherActor);	
	}
	void uapi_AActor_ReceiveActorEndCursorOver(void* target){	
		((AActor*)target)->ReceiveActorEndCursorOver();	
	}
	void uapi_AActor_ReceiveActorEndOverlap(void* target, AActor* OtherActor){	
		((AActor*)target)->ReceiveActorEndOverlap(OtherActor);	
	}
	void uapi_AActor_ReceiveAnyDamage(void* target, float Damage, UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser){	
		((AActor*)target)->ReceiveAnyDamage(Damage, DamageType, InstigatedBy, DamageCauser);	
	}
	void uapi_AActor_ReceiveAsyncPhysicsTick(void* target, float DeltaSeconds, float SimSeconds){	
		((AActor*)target)->ReceiveAsyncPhysicsTick(DeltaSeconds, SimSeconds);	
	}
	void uapi_AActor_ReceiveDestroyed(void* target){	
		((AActor*)target)->ReceiveDestroyed();	
	}
	void uapi_AActor_ReceiveTick(void* target, float DeltaSeconds){	
		((AActor*)target)->ReceiveTick(DeltaSeconds);	
	}
	void uapi_AActor_RegisterAllActorTickFunctions(void* target, bool bRegister, bool bDoComponents){	
		((AActor*)target)->RegisterAllActorTickFunctions(bRegister, bDoComponents);	
	}
	void uapi_AActor_RegisterAllComponents(void* target){	
		((AActor*)target)->RegisterAllComponents();	
	}
	void uapi_AActor_RemoveActorComponentReplicatedSubObject(void* target, UActorComponent* OwnerComponent, UObject* SubObject){	
		((AActor*)target)->RemoveActorComponentReplicatedSubObject(OwnerComponent, SubObject);	
	}
	bool uapi_AActor_RemoveAllDataLayers(void* target){	
		auto result = ((AActor*)target)->RemoveAllDataLayers();	
		return result;	
	}
	bool uapi_AActor_RemoveDataLayer(void* target, UDataLayerAsset* DataLayerAsset){	
		auto result = ((AActor*)target)->RemoveDataLayer(DataLayerAsset);	
		return result;	
	}
	void uapi_AActor_RemoveInstanceComponent(void* target, UActorComponent* Component){	
		((AActor*)target)->RemoveInstanceComponent(Component);	
	}
	void uapi_AActor_RemoveOwnedComponent(void* target, UActorComponent* Component){	
		((AActor*)target)->RemoveOwnedComponent(Component);	
	}
	void uapi_AActor_RemoveReplicatedSubObject(void* target, UObject* SubObject){	
		((AActor*)target)->RemoveReplicatedSubObject(SubObject);	
	}
	void uapi_AActor_RemoveTickPrerequisiteActor(void* target, AActor* PrerequisiteActor){	
		((AActor*)target)->RemoveTickPrerequisiteActor(PrerequisiteActor);	
	}
	void uapi_AActor_RemoveTickPrerequisiteComponent(void* target, UActorComponent* PrerequisiteComponent){	
		((AActor*)target)->RemoveTickPrerequisiteComponent(PrerequisiteComponent);	
	}
	bool uapi_AActor_ReplicateSubobjects(void* target, UActorChannel* Channel, FOutBunch* Bunch, FReplicationFlags* RepFlags){	
		auto result = ((AActor*)target)->ReplicateSubobjects(Channel, Bunch, RepFlags);	
		return result;	
	}
	void uapi_AActor_ReregisterAllComponents(void* target){	
		((AActor*)target)->ReregisterAllComponents();	
	}
	bool uapi_AActor_ReregisterComponentsWhenModified(void* target){	
		auto result = ((AActor*)target)->ReregisterComponentsWhenModified();	
		return result;	
	}
	void uapi_AActor_RerunConstructionScripts(void* target){	
		((AActor*)target)->RerunConstructionScripts();	
	}
	void uapi_AActor_Reset(void* target){	
		((AActor*)target)->Reset();	
	}
	void uapi_AActor_ResetOwnedComponents(void* target){	
		((AActor*)target)->ResetOwnedComponents();	
	}
	void uapi_AActor_ResetPropertiesForConstruction(void* target){	
		((AActor*)target)->ResetPropertiesForConstruction();	
	}
	void uapi_AActor_RewindForReplay(void* target){	
		((AActor*)target)->RewindForReplay();	
	}
	void uapi_AActor_SeedAllRandomStreams(void* target){	
		((AActor*)target)->SeedAllRandomStreams();	
	}
	void uapi_AActor_SetActorEnableCollision(void* target, bool bNewActorEnableCollision){	
		((AActor*)target)->SetActorEnableCollision(bNewActorEnableCollision);	
	}
	void uapi_AActor_SetActorHiddenInGame(void* target, bool bNewHidden){	
		((AActor*)target)->SetActorHiddenInGame(bNewHidden);	
	}
	void uapi_AActor_SetActorRelativeScale3D(void* target, Vector3 NewRelativeScale){	
		((AActor*)target)->SetActorRelativeScale3D(ToFVector(NewRelativeScale));	
	}
	void uapi_AActor_SetActorScale3D(void* target, Vector3 NewScale3D){	
		((AActor*)target)->SetActorScale3D(ToFVector(NewScale3D));	
	}
	void uapi_AActor_SetActorTickEnabled(void* target, bool bEnabled){	
		((AActor*)target)->SetActorTickEnabled(bEnabled);	
	}
	void uapi_AActor_SetActorTickInterval(void* target, float TickInterval){	
		((AActor*)target)->SetActorTickInterval(TickInterval);	
	}
	void uapi_AActor_SetAutoDestroyWhenFinished(void* target, bool bVal){	
		((AActor*)target)->SetAutoDestroyWhenFinished(bVal);	
	}
	void uapi_AActor_SetAutonomousProxy(void* target, bool bInAutonomousProxy, bool bAllowForcePropertyCompare){	
		((AActor*)target)->SetAutonomousProxy(bInAutonomousProxy, bAllowForcePropertyCompare);	
	}
	void uapi_AActor_SetCallPreReplication(void* target, bool bCall){	
		((AActor*)target)->SetCallPreReplication(bCall);	
	}
	void uapi_AActor_SetCallPreReplicationForReplay(void* target, bool bCall){	
		((AActor*)target)->SetCallPreReplicationForReplay(bCall);	
	}
	void uapi_AActor_SetCanBeDamaged(void* target, bool bInCanBeDamaged){	
		((AActor*)target)->SetCanBeDamaged(bInCanBeDamaged);	
	}
	void uapi_AActor_SetForceExternalActorLevelReferenceForPIE(void* target, bool bValue){	
		((AActor*)target)->SetForceExternalActorLevelReferenceForPIE(bValue);	
	}
	void uapi_AActor_SetHLODLayer(void* target, UHLODLayer* InHLODLayer){	
		((AActor*)target)->SetHLODLayer(InHLODLayer);	
	}
	void uapi_AActor_SetHasActorRegisteredAllComponents(void* target){	
		((AActor*)target)->SetHasActorRegisteredAllComponents();	
	}
	void uapi_AActor_SetHidden(void* target, bool bInHidden){	
		((AActor*)target)->SetHidden(bInHidden);	
	}
	void uapi_AActor_SetInstigator(void* target, APawn* InInstigator){	
		((AActor*)target)->SetInstigator(InInstigator);	
	}
	bool uapi_AActor_SetIsHiddenEdLayer(void* target, bool bIsHiddenEdLayer){	
		auto result = ((AActor*)target)->SetIsHiddenEdLayer(bIsHiddenEdLayer);	
		return result;	
	}
	void uapi_AActor_SetIsSpatiallyLoaded(void* target, bool bInIsSpatiallyLoaded){	
		((AActor*)target)->SetIsSpatiallyLoaded(bInIsSpatiallyLoaded);	
	}
	void uapi_AActor_SetIsTemporarilyHiddenInEditor(void* target, bool bIsHidden){	
		((AActor*)target)->SetIsTemporarilyHiddenInEditor(bIsHidden);	
	}
	void uapi_AActor_SetLODParent(void* target, UPrimitiveComponent* InLODParent, float InParentDrawDistance){	
		((AActor*)target)->SetLODParent(InLODParent, InParentDrawDistance);	
	}
	void uapi_AActor_SetLifeSpan(void* target, float InLifespan){	
		((AActor*)target)->SetLifeSpan(InLifespan);	
	}
	void uapi_AActor_SetLockLocation(void* target, bool bInLockLocation){	
		((AActor*)target)->SetLockLocation(bInLockLocation);	
	}
	void uapi_AActor_SetNetAddressable(void* target){	
		((AActor*)target)->SetNetAddressable();	
	}
	void uapi_AActor_SetNetDriverName(void* target, UName NewNetDriverName){	
		((AActor*)target)->SetNetDriverName(ToFName(NewNetDriverName));	
	}
	void uapi_AActor_SetOwner(void* target, AActor* NewOwner){	
		((AActor*)target)->SetOwner(NewOwner);	
	}
	void uapi_AActor_SetPackageExternal(void* target, bool bExternal, bool bShouldDirty){	
		((AActor*)target)->SetPackageExternal(bExternal, bShouldDirty);	
	}
	void uapi_AActor_SetRayTracingGroupId(void* target, int32 InRaytracingGroupId){	
		((AActor*)target)->SetRayTracingGroupId(InRaytracingGroupId);	
	}
	void uapi_AActor_SetReplicateMovement(void* target, bool bInReplicateMovement){	
		((AActor*)target)->SetReplicateMovement(bInReplicateMovement);	
	}
	void uapi_AActor_SetReplicates(void* target, bool bInReplicates){	
		((AActor*)target)->SetReplicates(bInReplicates);	
	}
	void uapi_AActor_SetReplicatingMovement(void* target, bool bInReplicateMovement){	
		((AActor*)target)->SetReplicatingMovement(bInReplicateMovement);	
	}
	bool uapi_AActor_SetRootComponent(void* target, USceneComponent* NewRootComponent){	
		auto result = ((AActor*)target)->SetRootComponent(NewRootComponent);	
		return result;	
	}
	void uapi_AActor_SetRuntimeGrid(void* target, UName InRuntimeGrid){	
		((AActor*)target)->SetRuntimeGrid(ToFName(InRuntimeGrid));	
	}
	void uapi_AActor_SetTickableWhenPaused(void* target, bool bTickableWhenPaused){	
		((AActor*)target)->SetTickableWhenPaused(bTickableWhenPaused);	
	}
	bool uapi_AActor_ShouldCookOptimizedBPComponentData(void* target){	
		auto result = ((AActor*)target)->ShouldCookOptimizedBPComponentData();	
		return result;	
	}
	bool uapi_AActor_ShouldExport(void* target){	
		auto result = ((AActor*)target)->ShouldExport();	
		return result;	
	}
	bool uapi_AActor_ShouldImport(void* target, NativeString ActorPropString, bool IsMovingLevel){	
		auto fstr0 = Utf82FString(ActorPropString);	
		auto result = ((AActor*)target)->ShouldImport(&fstr0, IsMovingLevel);	
		return result;	
	}
	bool uapi_AActor_ShouldLevelKeepRefIfExternal(void* target){	
		auto result = ((AActor*)target)->ShouldLevelKeepRefIfExternal();	
		return result;	
	}
	bool uapi_AActor_ShouldTickIfViewportsOnly(void* target){	
		auto result = ((AActor*)target)->ShouldTickIfViewportsOnly();	
		return result;	
	}
	bool uapi_AActor_SupportsDataLayer(void* target){	
		auto result = ((AActor*)target)->SupportsDataLayer();	
		return result;	
	}
	bool uapi_AActor_SupportsExternalPackaging(void* target){	
		auto result = ((AActor*)target)->SupportsExternalPackaging();	
		return result;	
	}
	bool uapi_AActor_SupportsLayers(void* target){	
		auto result = ((AActor*)target)->SupportsLayers();	
		return result;	
	}
	void uapi_AActor_SwapRoles(void* target){	
		((AActor*)target)->SwapRoles();	
	}
	void uapi_AActor_TearOff(void* target){	
		((AActor*)target)->TearOff();	
	}
	void uapi_AActor_TeleportSucceeded(void* target, bool bIsATest){	
		((AActor*)target)->TeleportSucceeded(bIsATest);	
	}
	void uapi_AActor_Tick(void* target, float DeltaSeconds){	
		((AActor*)target)->Tick(DeltaSeconds);	
	}
	void uapi_AActor_TornOff(void* target){	
		((AActor*)target)->TornOff();	
	}
	void uapi_AActor_UninitializeComponents(void* target){	
		((AActor*)target)->UninitializeComponents();	
	}
	void uapi_AActor_UnregisterAllComponents(void* target, bool bForReregister){	
		((AActor*)target)->UnregisterAllComponents(bForReregister);	
	}
	void uapi_AActor_UpdateAllReplicatedComponents(void* target){	
		((AActor*)target)->UpdateAllReplicatedComponents();	
	}
	void uapi_AActor_UpdateComponentTransforms(void* target){	
		((AActor*)target)->UpdateComponentTransforms();	
	}
	void uapi_AActor_UpdateOverlaps(void* target, bool bDoNotifies){	
		((AActor*)target)->UpdateOverlaps(bDoNotifies);	
	}
	void uapi_AActor_UpdateReplicatedComponent(void* target, UActorComponent* Component){	
		((AActor*)target)->UpdateReplicatedComponent(Component);	
	}
	bool uapi_AActor_UseShortConnectTimeout(void* target){	
		auto result = ((AActor*)target)->UseShortConnectTimeout();	
		return result;	
	}
	void uapi_AActor_UserConstructionScript(void* target){	
		((AActor*)target)->UserConstructionScript();	
	}
	bool uapi_AActor_WasRecentlyRendered(void* target, float Tolerance){	
		auto result = ((AActor*)target)->WasRecentlyRendered(Tolerance);	
		return result;	
	}
	void* uapi_APawn_GetController(void* target){	
		auto result = (void*)((APawn*)target)->GetController();	
		return result;	
	}
	void* uapi_APawn_GetLocalViewingPlayerController(void* target){	
		auto result = (void*)((APawn*)target)->GetLocalViewingPlayerController();	
		return result;	
	}
	void* uapi_APawn_GetMovementBase(void* target){	
		auto result = (void*)((APawn*)target)->GetMovementBase();	
		return result;	
	}
	void* uapi_APawn_GetMovementComponent(void* target){	
		auto result = (void*)((APawn*)target)->GetMovementComponent();	
		return result;	
	}
	void* uapi_APawn_GetPawnNoiseEmitterComponent(void* target){	
		auto result = (void*)((APawn*)target)->GetPawnNoiseEmitterComponent();	
		return result;	
	}
	void* uapi_APawn_GetPlayerState(void* target){	
		auto result = (void*)((APawn*)target)->GetPlayerState();	
		return result;	
	}
	bool uapi_APawn_IsLocalPlayerControllerViewingAPawn(void* target){	
		auto result = ((APawn*)target)->IsLocalPlayerControllerViewingAPawn();	
		return result;	
	}
	bool uapi_APawn_IsLocallyViewed(void* target){	
		auto result = ((APawn*)target)->IsLocallyViewed();	
		return result;	
	}
	void uapi_APawn_PawnMakeNoise(void* target, float Loudness, Vector3 NoiseLocation, bool bUseNoiseMakerLocation, AActor* NoiseMaker){	
		((APawn*)target)->PawnMakeNoise(Loudness, ToFVector(NoiseLocation), bUseNoiseMakerLocation, NoiseMaker);	
	}
	void uapi_APawn_SetPlayerState(void* target, APlayerState* NewPlayerState){	
		((APawn*)target)->SetPlayerState(NewPlayerState);	
	}
	void uapi_AController_ChangeState(void* target, UName NewState){	
		((AController*)target)->ChangeState(ToFName(NewState));	
	}
	void uapi_AController_CleanupPlayerState(void* target){	
		((AController*)target)->CleanupPlayerState();	
	}
	void uapi_AController_ClientSetLocation(void* target, Vector3 NewLocation, Rotator NewRotation){	
		((AController*)target)->ClientSetLocation(ToFVector(NewLocation), ToFRotator(NewRotation));	
	}
	void uapi_AController_ClientSetRotation(void* target, Rotator NewRotation, bool bResetCamera){	
		((AController*)target)->ClientSetRotation(ToFRotator(NewRotation), bResetCamera);	
	}
	void uapi_AController_CurrentLevelUnloaded(void* target){	
		((AController*)target)->CurrentLevelUnloaded();	
	}
	void uapi_AController_Destroyed(void* target){	
		((AController*)target)->Destroyed();	
	}
	void uapi_AController_FailedToSpawnPawn(void* target){	
		((AController*)target)->FailedToSpawnPawn();	
	}
	void uapi_AController_GameHasEnded(void* target, AActor* EndGameFocus, bool bIsWinner){	
		((AController*)target)->GameHasEnded(EndGameFocus, bIsWinner);	
	}
	void* uapi_AController_GetCharacter(void* target){	
		auto result = (void*)((AController*)target)->GetCharacter();	
		return result;	
	}
	Rotator uapi_AController_GetControlRotation(void* target){	
		auto result = ToRotator(((AController*)target)->GetControlRotation());	
		return result;	
	}
	Rotator uapi_AController_GetDesiredRotation(void* target){	
		auto result = ToRotator(((AController*)target)->GetDesiredRotation());	
		return result;	
	}
	const char* uapi_AController_GetHumanReadableName(void* target){	
		auto result = FString2Utf8(((AController*)target)->GetHumanReadableName());	
		return result;	
	}
	Vector3 uapi_AController_GetNavAgentLocation(void* target){	
		auto result = ToVector3(((AController*)target)->GetNavAgentLocation());	
		return result;	
	}
	void* uapi_AController_GetPawn(void* target){	
		auto result = (void*)((AController*)target)->GetPawn();	
		return result;	
	}
	UName uapi_AController_GetStateName(void* target){	
		auto result = ToUName(((AController*)target)->GetStateName());	
		return result;	
	}
	void* uapi_AController_GetViewTarget(void* target){	
		auto result = (void*)((AController*)target)->GetViewTarget();	
		return result;	
	}
	void uapi_AController_InitPlayerState(void* target){	
		((AController*)target)->InitPlayerState();	
	}
	void uapi_AController_InstigatedAnyDamage(void* target, float Damage, UDamageType* DamageType, AActor* DamagedActor, AActor* DamageCauser){	
		((AController*)target)->InstigatedAnyDamage(Damage, DamageType, DamagedActor, DamageCauser);	
	}
	bool uapi_AController_IsFollowingAPath(void* target){	
		auto result = ((AController*)target)->IsFollowingAPath();	
		return result;	
	}
	bool uapi_AController_IsInState(void* target, UName InStateName){	
		auto result = ((AController*)target)->IsInState(ToFName(InStateName));	
		return result;	
	}
	bool uapi_AController_IsLocalController(void* target){	
		auto result = ((AController*)target)->IsLocalController();	
		return result;	
	}
	bool uapi_AController_IsLocalPlayerController(void* target){	
		auto result = ((AController*)target)->IsLocalPlayerController();	
		return result;	
	}
	bool uapi_AController_IsLookInputIgnored(void* target){	
		auto result = ((AController*)target)->IsLookInputIgnored();	
		return result;	
	}
	bool uapi_AController_IsMoveInputIgnored(void* target){	
		auto result = ((AController*)target)->IsMoveInputIgnored();	
		return result;	
	}
	bool uapi_AController_IsPlayerController(void* target){	
		auto result = ((AController*)target)->IsPlayerController();	
		return result;	
	}
	void uapi_AController_K2_DestroyActor(void* target){	
		((AController*)target)->K2_DestroyActor();	
	}
	void* uapi_AController_K2_GetPawn(void* target){	
		auto result = (void*)((AController*)target)->K2_GetPawn();	
		return result;	
	}
	bool uapi_AController_LineOfSightTo(void* target, AActor* Other, Vector3 ViewPoint, bool bAlternateChecks){	
		auto result = ((AController*)target)->LineOfSightTo(Other, ToFVector(ViewPoint), bAlternateChecks);	
		return result;	
	}
	void uapi_AController_OnRep_Pawn(void* target){	
		((AController*)target)->OnRep_Pawn();	
	}
	void uapi_AController_OnRep_PlayerState(void* target){	
		((AController*)target)->OnRep_PlayerState();	
	}
	void uapi_AController_PawnPendingDestroy(void* target, APawn* inPawn){	
		((AController*)target)->PawnPendingDestroy(inPawn);	
	}
	void uapi_AController_Possess(void* target, APawn* InPawn){	
		((AController*)target)->Possess(InPawn);	
	}
	void uapi_AController_PostInitializeComponents(void* target){	
		((AController*)target)->PostInitializeComponents();	
	}
	void uapi_AController_Reset(void* target){	
		((AController*)target)->Reset();	
	}
	void uapi_AController_ResetIgnoreInputFlags(void* target){	
		((AController*)target)->ResetIgnoreInputFlags();	
	}
	void uapi_AController_ResetIgnoreLookInput(void* target){	
		((AController*)target)->ResetIgnoreLookInput();	
	}
	void uapi_AController_ResetIgnoreMoveInput(void* target){	
		((AController*)target)->ResetIgnoreMoveInput();	
	}
	void uapi_AController_SetIgnoreLookInput(void* target, bool bNewLookInput){	
		((AController*)target)->SetIgnoreLookInput(bNewLookInput);	
	}
	void uapi_AController_SetIgnoreMoveInput(void* target, bool bNewMoveInput){	
		((AController*)target)->SetIgnoreMoveInput(bNewMoveInput);	
	}
	void uapi_AController_SetPawn(void* target, APawn* InPawn){	
		((AController*)target)->SetPawn(InPawn);	
	}
	void uapi_AController_SetPawnFromRep(void* target, APawn* InPawn){	
		((AController*)target)->SetPawnFromRep(InPawn);	
	}
	bool uapi_AController_ShouldParticipateInSeamlessTravel(void* target){	
		auto result = ((AController*)target)->ShouldParticipateInSeamlessTravel();	
		return result;	
	}
	bool uapi_AController_ShouldPostponePathUpdates(void* target){	
		auto result = ((AController*)target)->ShouldPostponePathUpdates();	
		return result;	
	}
	void uapi_AController_StopMovement(void* target){	
		((AController*)target)->StopMovement();	
	}
	void uapi_AController_UnPossess(void* target){	
		((AController*)target)->UnPossess();	
	}
	void uapi_APlayerController_AcknowledgePossession(void* target, APawn* P){	
		((APlayerController*)target)->AcknowledgePossession(P);	
	}
	void uapi_APlayerController_ActivateTouchInterface(void* target, UTouchInterface* NewTouchInterface){	
		((APlayerController*)target)->ActivateTouchInterface(NewTouchInterface);	
	}
	void uapi_APlayerController_AddCheats(void* target, bool bForce){	
		((APlayerController*)target)->AddCheats(bForce);	
	}
	void uapi_APlayerController_AddPitchInput(void* target, float Val){	
		((APlayerController*)target)->AddPitchInput(Val);	
	}
	void uapi_APlayerController_AddRollInput(void* target, float Val){	
		((APlayerController*)target)->AddRollInput(Val);	
	}
	void uapi_APlayerController_AddYawInput(void* target, float Val){	
		((APlayerController*)target)->AddYawInput(Val);	
	}
	void uapi_APlayerController_AutoManageActiveCameraTarget(void* target, AActor* SuggestedTarget){	
		((APlayerController*)target)->AutoManageActiveCameraTarget(SuggestedTarget);	
	}
	void uapi_APlayerController_BeginInactiveState(void* target){	
		((APlayerController*)target)->BeginInactiveState();	
	}
	void uapi_APlayerController_Camera(void* target, UName NewMode){	
		((APlayerController*)target)->Camera(ToFName(NewMode));	
	}
	bool uapi_APlayerController_CanRestartPlayer(void* target){	
		auto result = ((APlayerController*)target)->CanRestartPlayer();	
		return result;	
	}
	void uapi_APlayerController_ChangeState(void* target, UName NewState){	
		((APlayerController*)target)->ChangeState(ToFName(NewState));	
	}
	void uapi_APlayerController_CleanUpAudioComponents(void* target){	
		((APlayerController*)target)->CleanUpAudioComponents();	
	}
	void uapi_APlayerController_CleanupGameViewport(void* target){	
		((APlayerController*)target)->CleanupGameViewport();	
	}
	void uapi_APlayerController_CleanupPlayerState(void* target){	
		((APlayerController*)target)->CleanupPlayerState();	
	}
	void uapi_APlayerController_ClearAudioListenerAttenuationOverride(void* target){	
		((APlayerController*)target)->ClearAudioListenerAttenuationOverride();	
	}
	void uapi_APlayerController_ClearAudioListenerOverride(void* target){	
		((APlayerController*)target)->ClearAudioListenerOverride();	
	}
	void uapi_APlayerController_ClientAddTextureStreamingLoc(void* target, Vector3 InLoc, float Duration, bool bOverrideLocation){	
		((APlayerController*)target)->ClientAddTextureStreamingLoc(ToFVector(InLoc), Duration, bOverrideLocation);	
	}
	void uapi_APlayerController_ClientCancelPendingMapChange(void* target){	
		((APlayerController*)target)->ClientCancelPendingMapChange();	
	}
	void uapi_APlayerController_ClientCapBandwidth(void* target, int32 Cap){	
		((APlayerController*)target)->ClientCapBandwidth(Cap);	
	}
	void uapi_APlayerController_ClientClearCameraLensEffects(void* target){	
		((APlayerController*)target)->ClientClearCameraLensEffects();	
	}
	void uapi_APlayerController_ClientCommitMapChange(void* target){	
		((APlayerController*)target)->ClientCommitMapChange();	
	}
	void uapi_APlayerController_ClientEnableNetworkVoice(void* target, bool bEnable){	
		((APlayerController*)target)->ClientEnableNetworkVoice(bEnable);	
	}
	void uapi_APlayerController_ClientEndOnlineSession(void* target){	
		((APlayerController*)target)->ClientEndOnlineSession();	
	}
	void uapi_APlayerController_ClientFlushLevelStreaming(void* target){	
		((APlayerController*)target)->ClientFlushLevelStreaming();	
	}
	void uapi_APlayerController_ClientForceGarbageCollection(void* target){	
		((APlayerController*)target)->ClientForceGarbageCollection();	
	}
	void uapi_APlayerController_ClientGameEnded(void* target, AActor* EndGameFocus, bool bIsWinner){	
		((APlayerController*)target)->ClientGameEnded(EndGameFocus, bIsWinner);	
	}
	void uapi_APlayerController_ClientGotoState(void* target, UName NewState){	
		((APlayerController*)target)->ClientGotoState(ToFName(NewState));	
	}
	void uapi_APlayerController_ClientIgnoreLookInput(void* target, bool bIgnore){	
		((APlayerController*)target)->ClientIgnoreLookInput(bIgnore);	
	}
	void uapi_APlayerController_ClientIgnoreMoveInput(void* target, bool bIgnore){	
		((APlayerController*)target)->ClientIgnoreMoveInput(bIgnore);	
	}
	void uapi_APlayerController_ClientPlaySound(void* target, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier){	
		((APlayerController*)target)->ClientPlaySound(Sound, VolumeMultiplier, PitchMultiplier);	
	}
	void uapi_APlayerController_ClientPlaySoundAtLocation(void* target, USoundBase* Sound, Vector3 Location, float VolumeMultiplier, float PitchMultiplier){	
		((APlayerController*)target)->ClientPlaySoundAtLocation(Sound, ToFVector(Location), VolumeMultiplier, PitchMultiplier);	
	}
	void uapi_APlayerController_ClientPrepareMapChange(void* target, UName LevelName, bool bFirst, bool bLast){	
		((APlayerController*)target)->ClientPrepareMapChange(ToFName(LevelName), bFirst, bLast);	
	}
	void uapi_APlayerController_ClientPrestreamTextures(void* target, AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32 CinematicTextureGroups){	
		((APlayerController*)target)->ClientPrestreamTextures(ForcedActor, ForceDuration, bEnableStreaming, CinematicTextureGroups);	
	}
	void uapi_APlayerController_ClientRecvServerAckFrame(void* target, int32 LastProcessedInputFrame, int32 RecvServerFrameNumber, int8 TimeDilation){	
		((APlayerController*)target)->ClientRecvServerAckFrame(LastProcessedInputFrame, RecvServerFrameNumber, TimeDilation);	
	}
	void uapi_APlayerController_ClientRecvServerAckFrameDebug(void* target, uint8 NumBuffered, float TargetNumBufferedCmds){	
		((APlayerController*)target)->ClientRecvServerAckFrameDebug(NumBuffered, TargetNumBufferedCmds);	
	}
	void uapi_APlayerController_ClientRepObjRef(void* target, UObject* Object){	
		((APlayerController*)target)->ClientRepObjRef(Object);	
	}
	void uapi_APlayerController_ClientReset(void* target){	
		((APlayerController*)target)->ClientReset();	
	}
	void uapi_APlayerController_ClientRestart(void* target, APawn* NewPawn){	
		((APlayerController*)target)->ClientRestart(NewPawn);	
	}
	void uapi_APlayerController_ClientRetryClientRestart(void* target, APawn* NewPawn){	
		((APlayerController*)target)->ClientRetryClientRestart(NewPawn);	
	}
	void uapi_APlayerController_ClientSetBlockOnAsyncLoading(void* target){	
		((APlayerController*)target)->ClientSetBlockOnAsyncLoading();	
	}
	void uapi_APlayerController_ClientSetCameraFade(void* target, bool bEnableFading, Color FadeColor, Vector2 FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished){	
		((APlayerController*)target)->ClientSetCameraFade(bEnableFading, ToFColor(FadeColor), ToFVector2D(FadeAlpha), FadeTime, bFadeAudio, bHoldWhenFinished);	
	}
	void uapi_APlayerController_ClientSetCameraMode(void* target, UName NewCamMode){	
		((APlayerController*)target)->ClientSetCameraMode(ToFName(NewCamMode));	
	}
	void uapi_APlayerController_ClientSetCinematicMode(void* target, bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD){	
		((APlayerController*)target)->ClientSetCinematicMode(bInCinematicMode, bAffectsMovement, bAffectsTurning, bAffectsHUD);	
	}
	void uapi_APlayerController_ClientSetForceMipLevelsToBeResident(void* target, UMaterialInterface* Material, float ForceDuration, int32 CinematicTextureGroups){	
		((APlayerController*)target)->ClientSetForceMipLevelsToBeResident(Material, ForceDuration, CinematicTextureGroups);	
	}
	void uapi_APlayerController_ClientSetSpectatorWaiting(void* target, bool bWaiting){	
		((APlayerController*)target)->ClientSetSpectatorWaiting(bWaiting);	
	}
	void uapi_APlayerController_ClientStartOnlineSession(void* target){	
		((APlayerController*)target)->ClientStartOnlineSession();	
	}
	void uapi_APlayerController_ClientStopCameraShakesFromSource(void* target, UCameraShakeSourceComponent* SourceComponent, bool bImmediately){	
		((APlayerController*)target)->ClientStopCameraShakesFromSource(SourceComponent, bImmediately);	
	}
	void uapi_APlayerController_ClientStopForceFeedback(void* target, UForceFeedbackEffect* ForceFeedbackEffect, UName Tag){	
		((APlayerController*)target)->ClientStopForceFeedback(ForceFeedbackEffect, ToFName(Tag));	
	}
	void uapi_APlayerController_ClientUpdateLevelStreamingStatus(void* target, UName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32 LODIndex){	
		((APlayerController*)target)->ClientUpdateLevelStreamingStatus(ToFName(PackageName), bNewShouldBeLoaded, bNewShouldBeVisible, bNewShouldBlockOnLoad, LODIndex);	
	}
	void uapi_APlayerController_ClientVoiceHandshakeComplete(void* target){	
		((APlayerController*)target)->ClientVoiceHandshakeComplete();	
	}
	void uapi_APlayerController_CreateTouchInterface(void* target){	
		((APlayerController*)target)->CreateTouchInterface();	
	}
	bool uapi_APlayerController_DefaultCanUnpause(void* target){	
		auto result = ((APlayerController*)target)->DefaultCanUnpause();	
		return result;	
	}
	void uapi_APlayerController_DelayedPrepareMapChange(void* target){	
		((APlayerController*)target)->DelayedPrepareMapChange();	
	}
	bool uapi_APlayerController_DestroyNetworkActorHandled(void* target){	
		auto result = ((APlayerController*)target)->DestroyNetworkActorHandled();	
		return result;	
	}
	void uapi_APlayerController_Destroyed(void* target){	
		((APlayerController*)target)->Destroyed();	
	}
	void uapi_APlayerController_DisableInput(void* target, APlayerController* PlayerController){	
		((APlayerController*)target)->DisableInput(PlayerController);	
	}
	void uapi_APlayerController_EnableCheats(void* target){	
		((APlayerController*)target)->EnableCheats();	
	}
	void uapi_APlayerController_EnableInput(void* target, APlayerController* PlayerController){	
		((APlayerController*)target)->EnableInput(PlayerController);	
	}
	void uapi_APlayerController_EndInactiveState(void* target){	
		((APlayerController*)target)->EndInactiveState();	
	}
	void uapi_APlayerController_FOV(void* target, float NewFOV){	
		((APlayerController*)target)->FOV(NewFOV);	
	}
	void uapi_APlayerController_FailedToSpawnPawn(void* target){	
		((APlayerController*)target)->FailedToSpawnPawn();	
	}
	void uapi_APlayerController_FlushPressedKeys(void* target){	
		((APlayerController*)target)->FlushPressedKeys();	
	}
	void uapi_APlayerController_ForceSingleNetUpdateFor(void* target, AActor* Target){	
		((APlayerController*)target)->ForceSingleNetUpdateFor(Target);	
	}
	void uapi_APlayerController_GameHasEnded(void* target, AActor* EndGameFocus, bool bIsWinner){	
		((APlayerController*)target)->GameHasEnded(EndGameFocus, bIsWinner);	
	}
	void uapi_APlayerController_GameplayUnmuteAllPlayers(void* target){	
		((APlayerController*)target)->GameplayUnmuteAllPlayers();	
	}
	Vector3 uapi_APlayerController_GetFocalLocation(void* target){	
		auto result = ToVector3(((APlayerController*)target)->GetFocalLocation());	
		return result;	
	}
	void* uapi_APlayerController_GetHUD(void* target){	
		auto result = (void*)((APlayerController*)target)->GetHUD();	
		return result;	
	}
	void uapi_APlayerController_GetInputMouseDelta(void* target, float& DeltaX, float& DeltaY){	
		((APlayerController*)target)->GetInputMouseDelta(DeltaX, DeltaY);	
	}
	void* uapi_APlayerController_GetLocalPlayer(void* target){	
		auto result = (void*)((APlayerController*)target)->GetLocalPlayer();	
		return result;	
	}
	int32 uapi_APlayerController_GetLocalToServerAsyncPhysicsTickOffset(void* target){	
		auto result = ((APlayerController*)target)->GetLocalToServerAsyncPhysicsTickOffset();	
		return result;	
	}
	float uapi_APlayerController_GetMinRespawnDelay(void* target){	
		auto result = ((APlayerController*)target)->GetMinRespawnDelay();	
		return result;	
	}
	bool uapi_APlayerController_GetMousePosition(void* target, float& LocationX, float& LocationY){	
		auto result = ((APlayerController*)target)->GetMousePosition(LocationX, LocationY);	
		return result;	
	}
	void* uapi_APlayerController_GetNetConnection(void* target){	
		auto result = (void*)((APlayerController*)target)->GetNetConnection();	
		return result;	
	}
	void* uapi_APlayerController_GetNetOwner(void* target){	
		auto result = (void*)((APlayerController*)target)->GetNetOwner();	
		return result;	
	}
	void* uapi_APlayerController_GetNetOwningPlayer(void* target){	
		auto result = (void*)((APlayerController*)target)->GetNetOwningPlayer();	
		return result;	
	}
	void* uapi_APlayerController_GetNextViewablePlayer(void* target, int32 dir){	
		auto result = (void*)((APlayerController*)target)->GetNextViewablePlayer(dir);	
		return result;	
	}
	void* uapi_APlayerController_GetPawnOrSpectator(void* target){	
		auto result = (void*)((APlayerController*)target)->GetPawnOrSpectator();	
		return result;	
	}
	const char* uapi_APlayerController_GetPlayerNetworkAddress(void* target){	
		auto result = FString2Utf8(((APlayerController*)target)->GetPlayerNetworkAddress());	
		return result;	
	}
	const char* uapi_APlayerController_GetServerNetworkAddress(void* target){	
		auto result = FString2Utf8(((APlayerController*)target)->GetServerNetworkAddress());	
		return result;	
	}
	Vector3 uapi_APlayerController_GetSpawnLocation(void* target){	
		auto result = ToVector3(((APlayerController*)target)->GetSpawnLocation());	
		return result;	
	}
	void* uapi_APlayerController_GetSplitscreenPlayerByIndex(void* target, int32 PlayerIndex){	
		auto result = (void*)((APlayerController*)target)->GetSplitscreenPlayerByIndex(PlayerIndex);	
		return result;	
	}
	int32 uapi_APlayerController_GetSplitscreenPlayerCount(void* target){	
		auto result = ((APlayerController*)target)->GetSplitscreenPlayerCount();	
		return result;	
	}
	void* uapi_APlayerController_GetViewTarget(void* target){	
		auto result = (void*)((APlayerController*)target)->GetViewTarget();	
		return result;	
	}
	void uapi_APlayerController_GetViewportSize(void* target, int32& SizeX, int32& SizeY){	
		((APlayerController*)target)->GetViewportSize(SizeX, SizeY);	
	}
	bool uapi_APlayerController_HasClientLoadedCurrentWorld(void* target){	
		auto result = ((APlayerController*)target)->HasClientLoadedCurrentWorld();	
		return result;	
	}
	void uapi_APlayerController_IncludeInNetConditionGroup(void* target, UName NetGroup){	
		((APlayerController*)target)->IncludeInNetConditionGroup(ToFName(NetGroup));	
	}
	void uapi_APlayerController_InitInputSystem(void* target){	
		((APlayerController*)target)->InitInputSystem();	
	}
	bool uapi_APlayerController_InputEnabled(void* target){	
		auto result = ((APlayerController*)target)->InputEnabled();	
		return result;	
	}
	bool uapi_APlayerController_IsFrozen(void* target){	
		auto result = ((APlayerController*)target)->IsFrozen();	
		return result;	
	}
	bool uapi_APlayerController_IsInputComponentInStack(void* target, UInputComponent* Input){	
		auto result = ((APlayerController*)target)->IsInputComponentInStack(Input);	
		return result;	
	}
	bool uapi_APlayerController_IsLocalController(void* target){	
		auto result = ((APlayerController*)target)->IsLocalController();	
		return result;	
	}
	bool uapi_APlayerController_IsMemberOfNetConditionGroup(void* target, UName NetGroup){	
		auto result = ((APlayerController*)target)->IsMemberOfNetConditionGroup(ToFName(NetGroup));	
		return result;	
	}
	bool uapi_APlayerController_IsPaused(void* target){	
		auto result = ((APlayerController*)target)->IsPaused();	
		return result;	
	}
	bool uapi_APlayerController_IsPrimaryPlayer(void* target){	
		auto result = ((APlayerController*)target)->IsPrimaryPlayer();	
		return result;	
	}
	bool uapi_APlayerController_IsSplitscreenPlayer(void* target, int32* OutSplitscreenPlayerIndex){	
		auto result = ((APlayerController*)target)->IsSplitscreenPlayer(OutSplitscreenPlayerIndex);	
		return result;	
	}
	bool uapi_APlayerController_IsStreamingSourceEnabled(void* target){	
		auto result = ((APlayerController*)target)->IsStreamingSourceEnabled();	
		return result;	
	}
	void uapi_APlayerController_K2_ClientPlayForceFeedback(void* target, UForceFeedbackEffect* ForceFeedbackEffect, UName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused){	
		((APlayerController*)target)->K2_ClientPlayForceFeedback(ForceFeedbackEffect, ToFName(Tag), bLooping, bIgnoreTimeDilation, bPlayWhilePaused);	
	}
	void uapi_APlayerController_LevelStreamingStatusChanged(void* target, ULevelStreaming* LevelObject, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32 LODIndex){	
		((APlayerController*)target)->LevelStreamingStatusChanged(LevelObject, bNewShouldBeLoaded, bNewShouldBeVisible, bNewShouldBlockOnLoad, LODIndex);	
	}
	UName uapi_APlayerController_NetworkRemapPath(void* target, UName InPackageName, bool bReading){	
		auto result = ToUName(((APlayerController*)target)->NetworkRemapPath(ToFName(InPackageName), bReading));	
		return result;	
	}
	void uapi_APlayerController_NotifyActorChannelFailure(void* target, UActorChannel* ActorChan){	
		((APlayerController*)target)->NotifyActorChannelFailure(ActorChan);	
	}
	void uapi_APlayerController_NotifyLoadedWorld(void* target, UName WorldPackageName, bool bFinalDest){	
		((APlayerController*)target)->NotifyLoadedWorld(ToFName(WorldPackageName), bFinalDest);	
	}
	bool uapi_APlayerController_NotifyServerReceivedClientData(void* target, APawn* InPawn, float TimeStamp){	
		auto result = ((APlayerController*)target)->NotifyServerReceivedClientData(InPawn, TimeStamp);	
		return result;	
	}
	void uapi_APlayerController_OnAddedToPlayerControllerList(void* target){	
		((APlayerController*)target)->OnAddedToPlayerControllerList();	
	}
	void uapi_APlayerController_OnNetCleanup(void* target, UNetConnection* Connection){	
		((APlayerController*)target)->OnNetCleanup(Connection);	
	}
	void uapi_APlayerController_OnRemovedFromPlayerControllerList(void* target){	
		((APlayerController*)target)->OnRemovedFromPlayerControllerList();	
	}
	void uapi_APlayerController_OnServerStartedVisualLogger(void* target, bool bIsLogging){	
		((APlayerController*)target)->OnServerStartedVisualLogger(bIsLogging);	
	}
	void uapi_APlayerController_Pause(void* target){	
		((APlayerController*)target)->Pause();	
	}
	void uapi_APlayerController_PawnLeavingGame(void* target){	
		((APlayerController*)target)->PawnLeavingGame();	
	}
	void uapi_APlayerController_PlayerTick(void* target, float DeltaTime){	
		((APlayerController*)target)->PlayerTick(DeltaTime);	
	}
	bool uapi_APlayerController_PopInputComponent(void* target, UInputComponent* Input){	
		auto result = ((APlayerController*)target)->PopInputComponent(Input);	
		return result;	
	}
	void uapi_APlayerController_PostInitializeComponents(void* target){	
		((APlayerController*)target)->PostInitializeComponents();	
	}
	void uapi_APlayerController_PostLoad(void* target){	
		((APlayerController*)target)->PostLoad();	
	}
	void uapi_APlayerController_PostProcessInput(void* target, float DeltaTime, bool bGamePaused){	
		((APlayerController*)target)->PostProcessInput(DeltaTime, bGamePaused);	
	}
	void uapi_APlayerController_PostSeamlessTravel(void* target){	
		((APlayerController*)target)->PostSeamlessTravel();	
	}
	void uapi_APlayerController_PreProcessInput(void* target, float DeltaTime, bool bGamePaused){	
		((APlayerController*)target)->PreProcessInput(DeltaTime, bGamePaused);	
	}
	void uapi_APlayerController_PushInputComponent(void* target, UInputComponent* Input){	
		((APlayerController*)target)->PushInputComponent(Input);	
	}
	void uapi_APlayerController_ReceivedPlayer(void* target){	
		((APlayerController*)target)->ReceivedPlayer();	
	}
	void uapi_APlayerController_RemoveFromNetConditionGroup(void* target, UName NetGroup){	
		((APlayerController*)target)->RemoveFromNetConditionGroup(ToFName(NetGroup));	
	}
	void uapi_APlayerController_Reset(void* target){	
		((APlayerController*)target)->Reset();	
	}
	void uapi_APlayerController_ResetCameraMode(void* target){	
		((APlayerController*)target)->ResetCameraMode();	
	}
	void uapi_APlayerController_ResetControllerLightColor(void* target){	
		((APlayerController*)target)->ResetControllerLightColor();	
	}
	void uapi_APlayerController_ResetIgnoreInputFlags(void* target){	
		((APlayerController*)target)->ResetIgnoreInputFlags();	
	}
	void uapi_APlayerController_RestartLevel(void* target){	
		((APlayerController*)target)->RestartLevel();	
	}
	void uapi_APlayerController_SafeRetryClientRestart(void* target){	
		((APlayerController*)target)->SafeRetryClientRestart();	
	}
	void uapi_APlayerController_SafeServerCheckClientPossession(void* target){	
		((APlayerController*)target)->SafeServerCheckClientPossession();	
	}
	void uapi_APlayerController_SafeServerUpdateSpectatorState(void* target){	
		((APlayerController*)target)->SafeServerUpdateSpectatorState();	
	}
	void uapi_APlayerController_SeamlessTravelFrom(void* target, APlayerController* OldPC){	
		((APlayerController*)target)->SeamlessTravelFrom(OldPC);	
	}
	void uapi_APlayerController_SeamlessTravelTo(void* target, APlayerController* NewPC){	
		((APlayerController*)target)->SeamlessTravelTo(NewPC);	
	}
	void uapi_APlayerController_SendClientAdjustment(void* target){	
		((APlayerController*)target)->SendClientAdjustment();	
	}
	void uapi_APlayerController_ServerAcknowledgePossession(void* target, APawn* P){	
		((APlayerController*)target)->ServerAcknowledgePossession(P);	
	}
	void uapi_APlayerController_ServerCamera(void* target, UName NewMode){	
		((APlayerController*)target)->ServerCamera(ToFName(NewMode));	
	}
	void uapi_APlayerController_ServerCheckClientPossession(void* target){	
		((APlayerController*)target)->ServerCheckClientPossession();	
	}
	void uapi_APlayerController_ServerCheckClientPossessionReliable(void* target){	
		((APlayerController*)target)->ServerCheckClientPossessionReliable();	
	}
	void uapi_APlayerController_ServerNotifyLoadedWorld(void* target, UName WorldPackageName){	
		((APlayerController*)target)->ServerNotifyLoadedWorld(ToFName(WorldPackageName));	
	}
	void uapi_APlayerController_ServerPause(void* target){	
		((APlayerController*)target)->ServerPause();	
	}
	void uapi_APlayerController_ServerRestartPlayer(void* target){	
		((APlayerController*)target)->ServerRestartPlayer();	
	}
	void uapi_APlayerController_ServerSetSpectatorLocation(void* target, Vector3 NewLoc, Rotator NewRot){	
		((APlayerController*)target)->ServerSetSpectatorLocation(ToFVector(NewLoc), ToFRotator(NewRot));	
	}
	void uapi_APlayerController_ServerSetSpectatorWaiting(void* target, bool bWaiting){	
		((APlayerController*)target)->ServerSetSpectatorWaiting(bWaiting);	
	}
	void uapi_APlayerController_ServerShortTimeout(void* target){	
		((APlayerController*)target)->ServerShortTimeout();	
	}
	void uapi_APlayerController_ServerToggleAILogging(void* target){	
		((APlayerController*)target)->ServerToggleAILogging();	
	}
	void uapi_APlayerController_ServerVerifyViewTarget(void* target){	
		((APlayerController*)target)->ServerVerifyViewTarget();	
	}
	void uapi_APlayerController_ServerViewNextPlayer(void* target){	
		((APlayerController*)target)->ServerViewNextPlayer();	
	}
	void uapi_APlayerController_ServerViewPrevPlayer(void* target){	
		((APlayerController*)target)->ServerViewPrevPlayer();	
	}
	void uapi_APlayerController_SetAsLocalPlayerController(void* target){	
		((APlayerController*)target)->SetAsLocalPlayerController();	
	}
	void uapi_APlayerController_SetAudioListenerAttenuationOverride(void* target, USceneComponent* AttachToComponent, Vector3 AttenuationLocationOVerride){	
		((APlayerController*)target)->SetAudioListenerAttenuationOverride(AttachToComponent, ToFVector(AttenuationLocationOVerride));	
	}
	void uapi_APlayerController_SetAudioListenerOverride(void* target, USceneComponent* AttachToComponent, Vector3 Location, Rotator Rotation){	
		((APlayerController*)target)->SetAudioListenerOverride(AttachToComponent, ToFVector(Location), ToFRotator(Rotation));	
	}
	void uapi_APlayerController_SetCameraMode(void* target, UName NewCamMode){	
		((APlayerController*)target)->SetCameraMode(ToFName(NewCamMode));	
	}
	void uapi_APlayerController_SetCinematicMode(void* target, bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning){	
		((APlayerController*)target)->SetCinematicMode(bInCinematicMode, bAffectsMovement, bAffectsTurning);	
	}
	void uapi_APlayerController_SetCinematicMode2(void* target, bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning){	
		((APlayerController*)target)->SetCinematicMode(bInCinematicMode, bHidePlayer, bAffectsHUD, bAffectsMovement, bAffectsTurning);	
	}
	void uapi_APlayerController_SetControllerLightColor(void* target, Color Color){	
		((APlayerController*)target)->SetControllerLightColor(ToFColor(Color));	
	}
	void uapi_APlayerController_SetDisableHaptics(void* target, bool bNewDisabled){	
		((APlayerController*)target)->SetDisableHaptics(bNewDisabled);	
	}
	void uapi_APlayerController_SetMotionControlsEnabled(void* target, bool bEnabled){	
		((APlayerController*)target)->SetMotionControlsEnabled(bEnabled);	
	}
	void uapi_APlayerController_SetNetSpeed(void* target, int32 NewSpeed){	
		((APlayerController*)target)->SetNetSpeed(NewSpeed);	
	}
	void uapi_APlayerController_SetPawn(void* target, APawn* InPawn){	
		((APlayerController*)target)->SetPawn(InPawn);	
	}
	void uapi_APlayerController_SetPlayer(void* target, UPlayer* InPlayer){	
		((APlayerController*)target)->SetPlayer(InPlayer);	
	}
	void uapi_APlayerController_SetShowMouseCursor(void* target, bool bShow){	
		((APlayerController*)target)->SetShowMouseCursor(bShow);	
	}
	void uapi_APlayerController_SetVirtualJoystickVisibility(void* target, bool bVisible){	
		((APlayerController*)target)->SetVirtualJoystickVisibility(bVisible);	
	}
	bool uapi_APlayerController_ShouldFlushKeysWhenViewportFocusChanges(void* target){	
		auto result = ((APlayerController*)target)->ShouldFlushKeysWhenViewportFocusChanges();	
		return result;	
	}
	bool uapi_APlayerController_ShouldParticipateInSeamlessTravel(void* target){	
		auto result = ((APlayerController*)target)->ShouldParticipateInSeamlessTravel();	
		return result;	
	}
	bool uapi_APlayerController_ShouldPerformFullTickWhenPaused(void* target){	
		auto result = ((APlayerController*)target)->ShouldPerformFullTickWhenPaused();	
		return result;	
	}
	bool uapi_APlayerController_ShouldShowMouseCursor(void* target){	
		auto result = ((APlayerController*)target)->ShouldShowMouseCursor();	
		return result;	
	}
	void uapi_APlayerController_SmoothTargetViewRotation(void* target, APawn* TargetPawn, float DeltaSeconds){	
		((APlayerController*)target)->SmoothTargetViewRotation(TargetPawn, DeltaSeconds);	
	}
	void uapi_APlayerController_SpawnDefaultHUD(void* target){	
		((APlayerController*)target)->SpawnDefaultHUD();	
	}
	void uapi_APlayerController_SpawnPlayerCameraManager(void* target){	
		((APlayerController*)target)->SpawnPlayerCameraManager();	
	}
	void uapi_APlayerController_StartFire(void* target, uint8 FireModeNum){	
		((APlayerController*)target)->StartFire(FireModeNum);	
	}
	void uapi_APlayerController_StartSpectatingOnly(void* target){	
		((APlayerController*)target)->StartSpectatingOnly();	
	}
	void uapi_APlayerController_StartTalking(void* target){	
		((APlayerController*)target)->StartTalking();	
	}
	void uapi_APlayerController_StopTalking(void* target){	
		((APlayerController*)target)->StopTalking();	
	}
	bool uapi_APlayerController_StreamingSourceShouldActivate(void* target){	
		auto result = ((APlayerController*)target)->StreamingSourceShouldActivate();	
		return result;	
	}
	bool uapi_APlayerController_StreamingSourceShouldBlockOnSlowStreaming(void* target){	
		auto result = ((APlayerController*)target)->StreamingSourceShouldBlockOnSlowStreaming();	
		return result;	
	}
	void uapi_APlayerController_ToggleSpeaking(void* target, bool bInSpeaking){	
		((APlayerController*)target)->ToggleSpeaking(bInSpeaking);	
	}
	void uapi_APlayerController_UnFreeze(void* target){	
		((APlayerController*)target)->UnFreeze();	
	}
	void uapi_APlayerController_UpdateCameraManager(void* target, float DeltaSeconds){	
		((APlayerController*)target)->UpdateCameraManager(DeltaSeconds);	
	}
	void uapi_APlayerController_UpdatePing(void* target, float InPing){	
		((APlayerController*)target)->UpdatePing(InPing);	
	}
	void uapi_APlayerController_UpdateRotation(void* target, float DeltaTime){	
		((APlayerController*)target)->UpdateRotation(DeltaTime);	
	}
	bool uapi_APlayerController_UseShortConnectTimeout(void* target){	
		auto result = ((APlayerController*)target)->UseShortConnectTimeout();	
		return result;	
	}
	void uapi_APlayerController_ViewAPlayer(void* target, int32 dir){	
		((APlayerController*)target)->ViewAPlayer(dir);	
	}
	float uapi_FRandomStream_FRand(void* target){	
		auto result = ((FRandomStream*)target)->FRand();	
		return result;	
	}
	void uapi_FRandomStream_GenerateNewSeed(void* target){	
		((FRandomStream*)target)->GenerateNewSeed();	
	}
	int32 uapi_FRandomStream_GetCurrentSeed(void* target){	
		auto result = ((FRandomStream*)target)->GetCurrentSeed();	
		return result;	
	}
	float uapi_FRandomStream_GetFraction(void* target){	
		auto result = ((FRandomStream*)target)->GetFraction();	
		return result;	
	}
	int32 uapi_FRandomStream_GetInitialSeed(void* target){	
		auto result = ((FRandomStream*)target)->GetInitialSeed();	
		return result;	
	}
	Vector3 uapi_FRandomStream_GetUnitVector(void* target){	
		auto result = ToVector3(((FRandomStream*)target)->GetUnitVector());	
		return result;	
	}
	uint32 uapi_FRandomStream_GetUnsignedInt(void* target){	
		auto result = ((FRandomStream*)target)->GetUnsignedInt();	
		return result;	
	}
	void uapi_FRandomStream_Initialize(void* target, int32 InSeed){	
		((FRandomStream*)target)->Initialize(InSeed);	
	}
	int32 uapi_FRandomStream_RandHelper(void* target, int32 A){	
		auto result = ((FRandomStream*)target)->RandHelper(A);	
		return result;	
	}
	int32 uapi_FRandomStream_RandRange(void* target, int32 Min, int32 Max){	
		auto result = ((FRandomStream*)target)->RandRange(Min, Max);	
		return result;	
	}
	void uapi_FRandomStream_Reset(void* target){	
		((FRandomStream*)target)->Reset();	
	}
	const char* uapi_FRandomStream_ToString(void* target){	
		auto result = FString2Utf8(((FRandomStream*)target)->ToString());	
		return result;	
	}
	Vector3 uapi_FRandomStream_VRand(void* target){	
		auto result = ToVector3(((FRandomStream*)target)->VRand());	
		return result;	
	}
	void uapi_UGameplayStatics_ActivateReverbEffect(UObject* WorldContextObject, UReverbEffect* ReverbEffect, UName TagName, float Priority, float Volume, float FadeTime){	
		(UGameplayStatics::ActivateReverbEffect(WorldContextObject, ReverbEffect, ToFName(TagName), Priority, Volume, FadeTime));	
	}
	bool uapi_UGameplayStatics_AreSubtitlesEnabled(){	
		auto result = (UGameplayStatics::AreSubtitlesEnabled());	
		return result;	
	}
	void uapi_UGameplayStatics_CancelAsyncLoading(){	
		(UGameplayStatics::CancelAsyncLoading());	
	}
	void uapi_UGameplayStatics_ClearSoundMixClassOverride(UObject* WorldContextObject, USoundMix* InSoundMixModifier, USoundClass* InSoundClass, float FadeOutTime){	
		(UGameplayStatics::ClearSoundMixClassOverride(WorldContextObject, InSoundMixModifier, InSoundClass, FadeOutTime));	
	}
	void uapi_UGameplayStatics_ClearSoundMixModifiers(UObject* WorldContextObject){	
		(UGameplayStatics::ClearSoundMixModifiers(WorldContextObject));	
	}
	void* uapi_UGameplayStatics_CreatePlayer(UObject* WorldContextObject, int32 ControllerId, bool bSpawnPlayerController){	
		auto result = (void*)(UGameplayStatics::CreatePlayer(WorldContextObject, ControllerId, bSpawnPlayerController));	
		return result;	
	}
	void* uapi_UGameplayStatics_CreateSound2D(UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy){	
		auto result = (void*)(UGameplayStatics::CreateSound2D(WorldContextObject, Sound, VolumeMultiplier, PitchMultiplier, StartTime, ConcurrencySettings, bPersistAcrossLevelTransition, bAutoDestroy));	
		return result;	
	}
	void uapi_UGameplayStatics_DeactivateReverbEffect(UObject* WorldContextObject, UName TagName){	
		(UGameplayStatics::DeactivateReverbEffect(WorldContextObject, ToFName(TagName)));	
	}
	void uapi_UGameplayStatics_EnableLiveStreaming(bool Enable){	
		(UGameplayStatics::EnableLiveStreaming(Enable));	
	}
	void uapi_UGameplayStatics_FlushLevelStreaming(UObject* WorldContextObject){	
		(UGameplayStatics::FlushLevelStreaming(WorldContextObject));	
	}
	void uapi_UGameplayStatics_GetAccurateRealTime(int32& Seconds, double& PartialSeconds){	
		(UGameplayStatics::GetAccurateRealTime(Seconds, PartialSeconds));	
	}
	UName uapi_UGameplayStatics_GetActiveSpatialPluginName(UObject* WorldContextObject){	
		auto result = ToUName((UGameplayStatics::GetActiveSpatialPluginName(WorldContextObject)));	
		return result;	
	}
	double uapi_UGameplayStatics_GetAudioTimeSeconds(UObject* WorldContextObject){	
		auto result = (UGameplayStatics::GetAudioTimeSeconds(WorldContextObject));	
		return result;	
	}
	const char* uapi_UGameplayStatics_GetCurrentLevelName(UObject* WorldContextObject, bool bRemovePrefixString){	
		auto result = FString2Utf8((UGameplayStatics::GetCurrentLevelName(WorldContextObject, bRemovePrefixString)));	
		return result;	
	}
	void* uapi_UGameplayStatics_GetCurrentReverbEffect(UObject* WorldContextObject){	
		auto result = (void*)(UGameplayStatics::GetCurrentReverbEffect(WorldContextObject));	
		return result;	
	}
	bool uapi_UGameplayStatics_GetEnableWorldRendering(UObject* WorldContextObject){	
		auto result = (UGameplayStatics::GetEnableWorldRendering(WorldContextObject));	
		return result;	
	}
	void* uapi_UGameplayStatics_GetGameInstance(UObject* WorldContextObject){	
		auto result = (void*)(UGameplayStatics::GetGameInstance(WorldContextObject));	
		return result;	
	}
	void* uapi_UGameplayStatics_GetGameMode(UObject* WorldContextObject){	
		auto result = (void*)(UGameplayStatics::GetGameMode(WorldContextObject));	
		return result;	
	}
	void* uapi_UGameplayStatics_GetGameState(UObject* WorldContextObject){	
		auto result = (void*)(UGameplayStatics::GetGameState(WorldContextObject));	
		return result;	
	}
	float uapi_UGameplayStatics_GetGlobalTimeDilation(UObject* WorldContextObject){	
		auto result = (UGameplayStatics::GetGlobalTimeDilation(WorldContextObject));	
		return result;	
	}
	int32 uapi_UGameplayStatics_GetMaxAudioChannelCount(UObject* WorldContextObject){	
		auto result = (UGameplayStatics::GetMaxAudioChannelCount(WorldContextObject));	
		return result;	
	}
	int32 uapi_UGameplayStatics_GetNumLocalPlayerControllers(UObject* WorldContextObject){	
		auto result = (UGameplayStatics::GetNumLocalPlayerControllers(WorldContextObject));	
		return result;	
	}
	int32 uapi_UGameplayStatics_GetNumPlayerControllers(UObject* WorldContextObject){	
		auto result = (UGameplayStatics::GetNumPlayerControllers(WorldContextObject));	
		return result;	
	}
	int32 uapi_UGameplayStatics_GetNumPlayerStates(UObject* WorldContextObject){	
		auto result = (UGameplayStatics::GetNumPlayerStates(WorldContextObject));	
		return result;	
	}
	void* uapi_UGameplayStatics_GetObjectClass(UObject* Object){	
		auto result = (void*)(UGameplayStatics::GetObjectClass(Object));	
		return result;	
	}
	const char* uapi_UGameplayStatics_GetPlatformName(){	
		auto result = FString2Utf8((UGameplayStatics::GetPlatformName()));	
		return result;	
	}
	void* uapi_UGameplayStatics_GetPlayerCameraManager(UObject* WorldContextObject, int32 PlayerIndex){	
		auto result = (void*)(UGameplayStatics::GetPlayerCameraManager(WorldContextObject, PlayerIndex));	
		return result;	
	}
	void* uapi_UGameplayStatics_GetPlayerCharacter(UObject* WorldContextObject, int32 PlayerIndex){	
		auto result = (void*)(UGameplayStatics::GetPlayerCharacter(WorldContextObject, PlayerIndex));	
		return result;	
	}
	void* uapi_UGameplayStatics_GetPlayerController(UObject* WorldContextObject, int32 PlayerIndex){	
		auto result = (void*)(UGameplayStatics::GetPlayerController(WorldContextObject, PlayerIndex));	
		return result;	
	}
	void* uapi_UGameplayStatics_GetPlayerControllerFromID(UObject* WorldContextObject, int32 ControllerID){	
		auto result = (void*)(UGameplayStatics::GetPlayerControllerFromID(WorldContextObject, ControllerID));	
		return result;	
	}
	int32 uapi_UGameplayStatics_GetPlayerControllerID(APlayerController* Player){	
		auto result = (UGameplayStatics::GetPlayerControllerID(Player));	
		return result;	
	}
	void* uapi_UGameplayStatics_GetPlayerPawn(UObject* WorldContextObject, int32 PlayerIndex){	
		auto result = (void*)(UGameplayStatics::GetPlayerPawn(WorldContextObject, PlayerIndex));	
		return result;	
	}
	void* uapi_UGameplayStatics_GetPlayerState(UObject* WorldContextObject, int32 PlayerStateIndex){	
		auto result = (void*)(UGameplayStatics::GetPlayerState(WorldContextObject, PlayerStateIndex));	
		return result;	
	}
	double uapi_UGameplayStatics_GetRealTimeSeconds(UObject* WorldContextObject){	
		auto result = (UGameplayStatics::GetRealTimeSeconds(WorldContextObject));	
		return result;	
	}
	void* uapi_UGameplayStatics_GetStreamingLevel(UObject* WorldContextObject, UName PackageName){	
		auto result = (void*)(UGameplayStatics::GetStreamingLevel(WorldContextObject, ToFName(PackageName)));	
		return result;	
	}
	double uapi_UGameplayStatics_GetTimeSeconds(UObject* WorldContextObject){	
		auto result = (UGameplayStatics::GetTimeSeconds(WorldContextObject));	
		return result;	
	}
	double uapi_UGameplayStatics_GetUnpausedTimeSeconds(UObject* WorldContextObject){	
		auto result = (UGameplayStatics::GetUnpausedTimeSeconds(WorldContextObject));	
		return result;	
	}
	double uapi_UGameplayStatics_GetWorldDeltaSeconds(UObject* WorldContextObject){	
		auto result = (UGameplayStatics::GetWorldDeltaSeconds(WorldContextObject));	
		return result;	
	}
	int32 uapi_UGameplayStatics_GrassOverlappingSphereCount(UObject* WorldContextObject, UStaticMesh* StaticMesh, Vector3 CenterPosition, float Radius){	
		auto result = (UGameplayStatics::GrassOverlappingSphereCount(WorldContextObject, StaticMesh, ToFVector(CenterPosition), Radius));	
		return result;	
	}
	bool uapi_UGameplayStatics_IsGamePaused(UObject* WorldContextObject){	
		auto result = (UGameplayStatics::IsGamePaused(WorldContextObject));	
		return result;	
	}
	bool uapi_UGameplayStatics_IsSplitscreenForceDisabled(UObject* WorldContextObject){	
		auto result = (UGameplayStatics::IsSplitscreenForceDisabled(WorldContextObject));	
		return result;	
	}
	void uapi_UGameplayStatics_OpenLevel(UObject* WorldContextObject, UName LevelName, bool bAbsolute, NativeString Options){	
		auto fstr3 = Utf82FString(Options);	
		(UGameplayStatics::OpenLevel(WorldContextObject, ToFName(LevelName), bAbsolute, fstr3));	
	}
	void uapi_UGameplayStatics_PlaySound2D(UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundConcurrency* ConcurrencySettings, AActor* OwningActor, bool bIsUISound){	
		(UGameplayStatics::PlaySound2D(WorldContextObject, Sound, VolumeMultiplier, PitchMultiplier, StartTime, ConcurrencySettings, OwningActor, bIsUISound));	
	}
	void uapi_UGameplayStatics_PlaySoundAtLocation(UObject* WorldContextObject, USoundBase* Sound, Vector3 Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, USoundConcurrency* ConcurrencySettings, AActor* OwningActor, UInitialActiveSoundParams* InitialParams){	
		(UGameplayStatics::PlaySoundAtLocation(WorldContextObject, Sound, ToFVector(Location), ToFRotator(Rotation), VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, OwningActor, InitialParams));	
	}
	void uapi_UGameplayStatics_PlaySoundAtLocation2(UObject* WorldContextObject, USoundBase* Sound, Vector3 Location, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, USoundConcurrency* ConcurrencySettings, UInitialActiveSoundParams* InitialParams){	
		(UGameplayStatics::PlaySoundAtLocation(WorldContextObject, Sound, ToFVector(Location), VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, InitialParams));	
	}
	void uapi_UGameplayStatics_PopSoundMixModifier(UObject* WorldContextObject, USoundMix* InSoundMixModifier){	
		(UGameplayStatics::PopSoundMixModifier(WorldContextObject, InSoundMixModifier));	
	}
	void uapi_UGameplayStatics_PrimeAllSoundsInSoundClass(USoundClass* InSoundClass){	
		(UGameplayStatics::PrimeAllSoundsInSoundClass(InSoundClass));	
	}
	void uapi_UGameplayStatics_PrimeSound(USoundBase* InSound){	
		(UGameplayStatics::PrimeSound(InSound));	
	}
	void uapi_UGameplayStatics_PushSoundMixModifier(UObject* WorldContextObject, USoundMix* InSoundMixModifier){	
		(UGameplayStatics::PushSoundMixModifier(WorldContextObject, InSoundMixModifier));	
	}
	Vector3 uapi_UGameplayStatics_RebaseLocalOriginOntoZero(UObject* WorldContextObject, Vector3 WorldLocation){	
		auto result = ToVector3((UGameplayStatics::RebaseLocalOriginOntoZero(WorldContextObject, ToFVector(WorldLocation))));	
		return result;	
	}
	Vector3 uapi_UGameplayStatics_RebaseZeroOriginOntoLocal(UObject* WorldContextObject, Vector3 WorldLocation){	
		auto result = ToVector3((UGameplayStatics::RebaseZeroOriginOntoLocal(WorldContextObject, ToFVector(WorldLocation))));	
		return result;	
	}
	void uapi_UGameplayStatics_RemovePlayer(APlayerController* Player, bool bDestroyPawn){	
		(UGameplayStatics::RemovePlayer(Player, bDestroyPawn));	
	}
	bool uapi_UGameplayStatics_SetActiveSpatialPluginByName(UObject* WorldContextObject, UName InPluginName){	
		auto result = (UGameplayStatics::SetActiveSpatialPluginByName(WorldContextObject, ToFName(InPluginName)));	
		return result;	
	}
	void uapi_UGameplayStatics_SetBaseSoundMix(UObject* WorldContextObject, USoundMix* InSoundMix){	
		(UGameplayStatics::SetBaseSoundMix(WorldContextObject, InSoundMix));	
	}
	void uapi_UGameplayStatics_SetEnableWorldRendering(UObject* WorldContextObject, bool bEnable){	
		(UGameplayStatics::SetEnableWorldRendering(WorldContextObject, bEnable));	
	}
	void uapi_UGameplayStatics_SetForceDisableSplitscreen(UObject* WorldContextObject, bool bDisable){	
		(UGameplayStatics::SetForceDisableSplitscreen(WorldContextObject, bDisable));	
	}
	bool uapi_UGameplayStatics_SetGamePaused(UObject* WorldContextObject, bool bPaused){	
		auto result = (UGameplayStatics::SetGamePaused(WorldContextObject, bPaused));	
		return result;	
	}
	void uapi_UGameplayStatics_SetGlobalListenerFocusParameters(UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale){	
		(UGameplayStatics::SetGlobalListenerFocusParameters(WorldContextObject, FocusAzimuthScale, NonFocusAzimuthScale, FocusDistanceScale, NonFocusDistanceScale, FocusVolumeScale, NonFocusVolumeScale, FocusPriorityScale, NonFocusPriorityScale));	
	}
	void uapi_UGameplayStatics_SetGlobalPitchModulation(UObject* WorldContextObject, float PitchModulation, float TimeSec){	
		(UGameplayStatics::SetGlobalPitchModulation(WorldContextObject, PitchModulation, TimeSec));	
	}
	void uapi_UGameplayStatics_SetGlobalTimeDilation(UObject* WorldContextObject, float TimeDilation){	
		(UGameplayStatics::SetGlobalTimeDilation(WorldContextObject, TimeDilation));	
	}
	void uapi_UGameplayStatics_SetMaxAudioChannelsScaled(UObject* WorldContextObject, float MaxChannelCountScale){	
		(UGameplayStatics::SetMaxAudioChannelsScaled(WorldContextObject, MaxChannelCountScale));	
	}
	void uapi_UGameplayStatics_SetPlayerControllerID(APlayerController* Player, int32 ControllerId){	
		(UGameplayStatics::SetPlayerControllerID(Player, ControllerId));	
	}
	void uapi_UGameplayStatics_SetSoundClassDistanceScale(UObject* WorldContextObject, USoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec){	
		(UGameplayStatics::SetSoundClassDistanceScale(WorldContextObject, SoundClass, DistanceAttenuationScale, TimeSec));	
	}
	void uapi_UGameplayStatics_SetSoundMixClassOverride(UObject* WorldContextObject, USoundMix* InSoundMixModifier, USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren){	
		(UGameplayStatics::SetSoundMixClassOverride(WorldContextObject, InSoundMixModifier, InSoundClass, Volume, Pitch, FadeInTime, bApplyToChildren));	
	}
	void uapi_UGameplayStatics_SetSubtitlesEnabled(bool bEnabled){	
		(UGameplayStatics::SetSubtitlesEnabled(bEnabled));	
	}
	void* uapi_UGameplayStatics_SpawnDecalAtLocation(UObject* WorldContextObject, UMaterialInterface* DecalMaterial, Vector3 DecalSize, Vector3 Location, Rotator Rotation, float LifeSpan){	
		auto result = (void*)(UGameplayStatics::SpawnDecalAtLocation(WorldContextObject, DecalMaterial, ToFVector(DecalSize), ToFVector(Location), ToFRotator(Rotation), LifeSpan));	
		return result;	
	}
	void* uapi_UGameplayStatics_SpawnForceFeedbackAtLocation(UObject* WorldContextObject, UForceFeedbackEffect* ForceFeedbackEffect, Vector3 Location, Rotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy){	
		auto result = (void*)(UGameplayStatics::SpawnForceFeedbackAtLocation(WorldContextObject, ForceFeedbackEffect, ToFVector(Location), ToFRotator(Rotation), bLooping, IntensityMultiplier, StartTime, AttenuationSettings, bAutoDestroy));	
		return result;	
	}
	void* uapi_UGameplayStatics_SpawnSound2D(UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy){	
		auto result = (void*)(UGameplayStatics::SpawnSound2D(WorldContextObject, Sound, VolumeMultiplier, PitchMultiplier, StartTime, ConcurrencySettings, bPersistAcrossLevelTransition, bAutoDestroy));	
		return result;	
	}
	void* uapi_UGameplayStatics_SpawnSoundAtLocation(UObject* WorldContextObject, USoundBase* Sound, Vector3 Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, USoundConcurrency* ConcurrencySettings, bool bAutoDestroy){	
		auto result = (void*)(UGameplayStatics::SpawnSoundAtLocation(WorldContextObject, Sound, ToFVector(Location), ToFRotator(Rotation), VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, bAutoDestroy));	
		return result;	
	}
	void uapi_UGameplayStatics_UnRetainAllSoundsInSoundClass(USoundClass* InSoundClass){	
		(UGameplayStatics::UnRetainAllSoundsInSoundClass(InSoundClass));	
	}
	void uapi_ACharacter_BeginPlay(void* target){	
		((ACharacter*)target)->BeginPlay();	
	}
	void uapi_ACharacter_CacheInitialMeshOffset(void* target, Vector3 MeshRelativeLocation, Rotator MeshRelativeRotation){	
		((ACharacter*)target)->CacheInitialMeshOffset(ToFVector(MeshRelativeLocation), ToFRotator(MeshRelativeRotation));	
	}
	bool uapi_ACharacter_CanCrouch(void* target){	
		auto result = ((ACharacter*)target)->CanCrouch();	
		return result;	
	}
	bool uapi_ACharacter_CanJump(void* target){	
		auto result = ((ACharacter*)target)->CanJump();	
		return result;	
	}
	void uapi_ACharacter_CheckJumpInput(void* target, float DeltaTime){	
		((ACharacter*)target)->CheckJumpInput(DeltaTime);	
	}
	void uapi_ACharacter_ClearCrossLevelReferences(void* target){	
		((ACharacter*)target)->ClearCrossLevelReferences();	
	}
	void uapi_ACharacter_ClearJumpInput(void* target, float DeltaTime){	
		((ACharacter*)target)->ClearJumpInput(DeltaTime);	
	}
	void uapi_ACharacter_ClientAckGoodMove(void* target, float TimeStamp){	
		((ACharacter*)target)->ClientAckGoodMove(TimeStamp);	
	}
	void uapi_ACharacter_ClientAckGoodMove_Implementation(void* target, float TimeStamp){	
		((ACharacter*)target)->ClientAckGoodMove_Implementation(TimeStamp);	
	}
	void uapi_ACharacter_ClientAdjustPosition(void* target, float TimeStamp, Vector3 NewLoc, Vector3 NewVel, UPrimitiveComponent* NewBase, UName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode){	
		((ACharacter*)target)->ClientAdjustPosition(TimeStamp, ToFVector(NewLoc), ToFVector(NewVel), NewBase, ToFName(NewBaseBoneName), bHasBase, bBaseRelativePosition, ServerMovementMode);	
	}
	void uapi_ACharacter_ClientAdjustPosition_Implementation(void* target, float TimeStamp, Vector3 NewLoc, Vector3 NewVel, UPrimitiveComponent* NewBase, UName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode){	
		((ACharacter*)target)->ClientAdjustPosition_Implementation(TimeStamp, ToFVector(NewLoc), ToFVector(NewVel), NewBase, ToFName(NewBaseBoneName), bHasBase, bBaseRelativePosition, ServerMovementMode);	
	}
	void uapi_ACharacter_ClientCheatFly(void* target){	
		((ACharacter*)target)->ClientCheatFly();	
	}
	void uapi_ACharacter_ClientCheatFly_Implementation(void* target){	
		((ACharacter*)target)->ClientCheatFly_Implementation();	
	}
	void uapi_ACharacter_ClientCheatGhost(void* target){	
		((ACharacter*)target)->ClientCheatGhost();	
	}
	void uapi_ACharacter_ClientCheatGhost_Implementation(void* target){	
		((ACharacter*)target)->ClientCheatGhost_Implementation();	
	}
	void uapi_ACharacter_ClientCheatWalk(void* target){	
		((ACharacter*)target)->ClientCheatWalk();	
	}
	void uapi_ACharacter_ClientCheatWalk_Implementation(void* target){	
		((ACharacter*)target)->ClientCheatWalk_Implementation();	
	}
	void uapi_ACharacter_ClientVeryShortAdjustPosition(void* target, float TimeStamp, Vector3 NewLoc, UPrimitiveComponent* NewBase, UName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode){	
		((ACharacter*)target)->ClientVeryShortAdjustPosition(TimeStamp, ToFVector(NewLoc), NewBase, ToFName(NewBaseBoneName), bHasBase, bBaseRelativePosition, ServerMovementMode);	
	}
	void uapi_ACharacter_ClientVeryShortAdjustPosition_Implementation(void* target, float TimeStamp, Vector3 NewLoc, UPrimitiveComponent* NewBase, UName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode){	
		((ACharacter*)target)->ClientVeryShortAdjustPosition_Implementation(TimeStamp, ToFVector(NewLoc), NewBase, ToFName(NewBaseBoneName), bHasBase, bBaseRelativePosition, ServerMovementMode);	
	}
	void uapi_ACharacter_Crouch(void* target, bool bClientSimulation){	
		((ACharacter*)target)->Crouch(bClientSimulation);	
	}
	void uapi_ACharacter_Falling(void* target){	
		((ACharacter*)target)->Falling();	
	}
	float uapi_ACharacter_GetAnimRootMotionTranslationScale(void* target){	
		auto result = ((ACharacter*)target)->GetAnimRootMotionTranslationScale();	
		return result;	
	}
	void* uapi_ACharacter_GetArrowComponent(void* target){	
		auto result = (void*)((ACharacter*)target)->GetArrowComponent();	
		return result;	
	}
	Quaternion uapi_ACharacter_GetBaseRotationOffset(void* target){	
		auto result = ToQuaternion(((ACharacter*)target)->GetBaseRotationOffset());	
		return result;	
	}
	Rotator uapi_ACharacter_GetBaseRotationOffsetRotator(void* target){	
		auto result = ToRotator(((ACharacter*)target)->GetBaseRotationOffsetRotator());	
		return result;	
	}
	Vector3 uapi_ACharacter_GetBaseTranslationOffset(void* target){	
		auto result = ToVector3(((ACharacter*)target)->GetBaseTranslationOffset());	
		return result;	
	}
	void* uapi_ACharacter_GetCapsuleComponent(void* target){	
		auto result = (void*)((ACharacter*)target)->GetCapsuleComponent();	
		return result;	
	}
	void* uapi_ACharacter_GetCharacterMovement(void* target){	
		auto result = (void*)((ACharacter*)target)->GetCharacterMovement();	
		return result;	
	}
	void* uapi_ACharacter_GetCurrentMontage(void* target){	
		auto result = (void*)((ACharacter*)target)->GetCurrentMontage();	
		return result;	
	}
	float uapi_ACharacter_GetDefaultHalfHeight(void* target){	
		auto result = ((ACharacter*)target)->GetDefaultHalfHeight();	
		return result;	
	}
	float uapi_ACharacter_GetJumpMaxHoldTime(void* target){	
		auto result = ((ACharacter*)target)->GetJumpMaxHoldTime();	
		return result;	
	}
	void* uapi_ACharacter_GetMesh(void* target){	
		auto result = (void*)((ACharacter*)target)->GetMesh();	
		return result;	
	}
	void* uapi_ACharacter_GetMovementBase(void* target){	
		auto result = (void*)((ACharacter*)target)->GetMovementBase();	
		return result;	
	}
	void* uapi_ACharacter_GetMovementComponent(void* target){	
		auto result = (void*)((ACharacter*)target)->GetMovementComponent();	
		return result;	
	}
	Vector3 uapi_ACharacter_GetNavAgentLocation(void* target){	
		auto result = ToVector3(((ACharacter*)target)->GetNavAgentLocation());	
		return result;	
	}
	uint8 uapi_ACharacter_GetReplicatedMovementMode(void* target){	
		auto result = ((ACharacter*)target)->GetReplicatedMovementMode();	
		return result;	
	}
	float uapi_ACharacter_GetReplicatedServerLastTransformUpdateTimeStamp(void* target){	
		auto result = ((ACharacter*)target)->GetReplicatedServerLastTransformUpdateTimeStamp();	
		return result;	
	}
	void* uapi_ACharacter_GetRootMotionAnimMontageInstance(void* target){	
		auto result = (void*)((ACharacter*)target)->GetRootMotionAnimMontageInstance();	
		return result;	
	}
	void uapi_ACharacter_GetSimpleCollisionCylinder(void* target, float& CollisionRadius, float& CollisionHalfHeight){	
		((ACharacter*)target)->GetSimpleCollisionCylinder(CollisionRadius, CollisionHalfHeight);	
	}
	bool uapi_ACharacter_HasAnyRootMotion(void* target){	
		auto result = ((ACharacter*)target)->HasAnyRootMotion();	
		return result;	
	}
	bool uapi_ACharacter_IsJumpProvidingForce(void* target){	
		auto result = ((ACharacter*)target)->IsJumpProvidingForce();	
		return result;	
	}
	bool uapi_ACharacter_IsPlayingNetworkedRootMotionMontage(void* target){	
		auto result = ((ACharacter*)target)->IsPlayingNetworkedRootMotionMontage();	
		return result;	
	}
	bool uapi_ACharacter_IsPlayingRootMotion(void* target){	
		auto result = ((ACharacter*)target)->IsPlayingRootMotion();	
		return result;	
	}
	void uapi_ACharacter_Jump(void* target){	
		((ACharacter*)target)->Jump();	
	}
	void uapi_ACharacter_K2_OnEndCrouch(void* target, float HalfHeightAdjust, float ScaledHalfHeightAdjust){	
		((ACharacter*)target)->K2_OnEndCrouch(HalfHeightAdjust, ScaledHalfHeightAdjust);	
	}
	void uapi_ACharacter_K2_OnStartCrouch(void* target, float HalfHeightAdjust, float ScaledHalfHeightAdjust){	
		((ACharacter*)target)->K2_OnStartCrouch(HalfHeightAdjust, ScaledHalfHeightAdjust);	
	}
	void uapi_ACharacter_K2_UpdateCustomMovement(void* target, float DeltaTime){	
		((ACharacter*)target)->K2_UpdateCustomMovement(DeltaTime);	
	}
	void uapi_ACharacter_LaunchCharacter(void* target, Vector3 LaunchVelocity, bool bXYOverride, bool bZOverride){	
		((ACharacter*)target)->LaunchCharacter(ToFVector(LaunchVelocity), bXYOverride, bZOverride);	
	}
	void uapi_ACharacter_NotifyActorBeginOverlap(void* target, AActor* OtherActor){	
		((ACharacter*)target)->NotifyActorBeginOverlap(OtherActor);	
	}
	void uapi_ACharacter_NotifyActorEndOverlap(void* target, AActor* OtherActor){	
		((ACharacter*)target)->NotifyActorEndOverlap(OtherActor);	
	}
	void uapi_ACharacter_NotifyJumpApex(void* target){	
		((ACharacter*)target)->NotifyJumpApex();	
	}
	void uapi_ACharacter_OnEndCrouch(void* target, float HalfHeightAdjust, float ScaledHalfHeightAdjust){	
		((ACharacter*)target)->OnEndCrouch(HalfHeightAdjust, ScaledHalfHeightAdjust);	
	}
	void uapi_ACharacter_OnJumped(void* target){	
		((ACharacter*)target)->OnJumped();	
	}
	void uapi_ACharacter_OnJumped_Implementation(void* target){	
		((ACharacter*)target)->OnJumped_Implementation();	
	}
	void uapi_ACharacter_OnLaunched(void* target, Vector3 LaunchVelocity, bool bXYOverride, bool bZOverride){	
		((ACharacter*)target)->OnLaunched(ToFVector(LaunchVelocity), bXYOverride, bZOverride);	
	}
	void uapi_ACharacter_OnRep_IsCrouched(void* target){	
		((ACharacter*)target)->OnRep_IsCrouched();	
	}
	void uapi_ACharacter_OnRep_ReplayLastTransformUpdateTimeStamp(void* target){	
		((ACharacter*)target)->OnRep_ReplayLastTransformUpdateTimeStamp();	
	}
	void uapi_ACharacter_OnRep_ReplicatedBasedMovement(void* target){	
		((ACharacter*)target)->OnRep_ReplicatedBasedMovement();	
	}
	void uapi_ACharacter_OnRep_ReplicatedMovement(void* target){	
		((ACharacter*)target)->OnRep_ReplicatedMovement();	
	}
	void uapi_ACharacter_OnRep_RootMotion(void* target){	
		((ACharacter*)target)->OnRep_RootMotion();	
	}
	void uapi_ACharacter_OnStartCrouch(void* target, float HalfHeightAdjust, float ScaledHalfHeightAdjust){	
		((ACharacter*)target)->OnStartCrouch(HalfHeightAdjust, ScaledHalfHeightAdjust);	
	}
	void uapi_ACharacter_PawnClientRestart(void* target){	
		((ACharacter*)target)->PawnClientRestart();	
	}
	float uapi_ACharacter_PlayAnimMontage(void* target, UAnimMontage* AnimMontage, float InPlayRate, UName StartSectionName){	
		auto result = ((ACharacter*)target)->PlayAnimMontage(AnimMontage, InPlayRate, ToFName(StartSectionName));	
		return result;	
	}
	void uapi_ACharacter_PossessedBy(void* target, AController* NewController){	
		((ACharacter*)target)->PossessedBy(NewController);	
	}
	void uapi_ACharacter_PostInitializeComponents(void* target){	
		((ACharacter*)target)->PostInitializeComponents();	
	}
	void uapi_ACharacter_PostLoad(void* target){	
		((ACharacter*)target)->PostLoad();	
	}
	void uapi_ACharacter_PostNetReceive(void* target){	
		((ACharacter*)target)->PostNetReceive();	
	}
	void uapi_ACharacter_PostNetReceiveLocationAndRotation(void* target){	
		((ACharacter*)target)->PostNetReceiveLocationAndRotation();	
	}
	void uapi_ACharacter_PreNetReceive(void* target){	
		((ACharacter*)target)->PreNetReceive();	
	}
	void uapi_ACharacter_RecalculateBaseEyeHeight(void* target){	
		((ACharacter*)target)->RecalculateBaseEyeHeight();	
	}
	void uapi_ACharacter_RecalculateCrouchedEyeHeight(void* target){	
		((ACharacter*)target)->RecalculateCrouchedEyeHeight();	
	}
	void uapi_ACharacter_ResetJumpState(void* target){	
		((ACharacter*)target)->ResetJumpState();	
	}
	void uapi_ACharacter_Restart(void* target){	
		((ACharacter*)target)->Restart();	
	}
	void uapi_ACharacter_SetAnimRootMotionTranslationScale(void* target, float InAnimRootMotionTranslationScale){	
		((ACharacter*)target)->SetAnimRootMotionTranslationScale(InAnimRootMotionTranslationScale);	
	}
	void uapi_ACharacter_SetBase(void* target, UPrimitiveComponent* NewBase, UName BoneName, bool bNotifyActor){	
		((ACharacter*)target)->SetBase(NewBase, ToFName(BoneName), bNotifyActor);	
	}
	void uapi_ACharacter_SetReplicateMovement(void* target, bool bInReplicateMovement){	
		((ACharacter*)target)->SetReplicateMovement(bInReplicateMovement);	
	}
	void uapi_ACharacter_SetupPlayerInputComponent(void* target, UInputComponent* PlayerInputComponent){	
		((ACharacter*)target)->SetupPlayerInputComponent(PlayerInputComponent);	
	}
	void uapi_ACharacter_SimulatedRootMotionPositionFixup(void* target, float DeltaSeconds){	
		((ACharacter*)target)->SimulatedRootMotionPositionFixup(DeltaSeconds);	
	}
	void uapi_ACharacter_StopAnimMontage(void* target, UAnimMontage* AnimMontage){	
		((ACharacter*)target)->StopAnimMontage(AnimMontage);	
	}
	void uapi_ACharacter_StopJumping(void* target){	
		((ACharacter*)target)->StopJumping();	
	}
	void uapi_ACharacter_TornOff(void* target){	
		((ACharacter*)target)->TornOff();	
	}
	void uapi_ACharacter_TurnOff(void* target){	
		((ACharacter*)target)->TurnOff();	
	}
	void uapi_ACharacter_UnCrouch(void* target, bool bClientSimulation){	
		((ACharacter*)target)->UnCrouch(bClientSimulation);	
	}
	void uapi_ACharacter_UnPossessed(void* target){	
		((ACharacter*)target)->UnPossessed();	
	}
	void uapi_ACharacter_UpdateNavigationRelevance(void* target){	
		((ACharacter*)target)->UpdateNavigationRelevance();	
	}
	bool uapi_AGameModeBase_AllowCheats(void* target, APlayerController* P){	
		auto result = ((AGameModeBase*)target)->AllowCheats(P);	
		return result;	
	}
	bool uapi_AGameModeBase_AllowPausing(void* target, APlayerController* PC){	
		auto result = ((AGameModeBase*)target)->AllowPausing(PC);	
		return result;	
	}
	bool uapi_AGameModeBase_CanSpectate(void* target, APlayerController* Viewer, APlayerState* ViewTarget){	
		auto result = ((AGameModeBase*)target)->CanSpectate(Viewer, ViewTarget);	
		return result;	
	}
	void* uapi_AGameModeBase_ChoosePlayerStart(void* target, AController* Player){	
		auto result = (void*)((AGameModeBase*)target)->ChoosePlayerStart(Player);	
		return result;	
	}
	bool uapi_AGameModeBase_ClearPause(void* target){	
		auto result = ((AGameModeBase*)target)->ClearPause();	
		return result;	
	}
	void uapi_AGameModeBase_DispatchPostLogin(void* target, AController* NewPlayer){	
		((AGameModeBase*)target)->DispatchPostLogin(NewPlayer);	
	}
	void uapi_AGameModeBase_ForceClearUnpauseDelegates(void* target, AActor* PauseActor){	
		((AGameModeBase*)target)->ForceClearUnpauseDelegates(PauseActor);	
	}
	int32 uapi_AGameModeBase_GetNumPlayers(void* target){	
		auto result = ((AGameModeBase*)target)->GetNumPlayers();	
		return result;	
	}
	int32 uapi_AGameModeBase_GetNumSpectators(void* target){	
		auto result = ((AGameModeBase*)target)->GetNumSpectators();	
		return result;	
	}
	void uapi_AGameModeBase_HandleStartingNewPlayer(void* target, APlayerController* NewPlayer){	
		((AGameModeBase*)target)->HandleStartingNewPlayer(NewPlayer);	
	}
	bool uapi_AGameModeBase_HasMatchEnded(void* target){	
		auto result = ((AGameModeBase*)target)->HasMatchEnded();	
		return result;	
	}
	bool uapi_AGameModeBase_HasMatchStarted(void* target){	
		auto result = ((AGameModeBase*)target)->HasMatchStarted();	
		return result;	
	}
	void uapi_AGameModeBase_InitGameState(void* target){	
		((AGameModeBase*)target)->InitGameState();	
	}
	void uapi_AGameModeBase_InitStartSpot(void* target, AActor* StartSpot, AController* NewPlayer){	
		((AGameModeBase*)target)->InitStartSpot(StartSpot, NewPlayer);	
	}
	bool uapi_AGameModeBase_IsHandlingReplays(void* target){	
		auto result = ((AGameModeBase*)target)->IsHandlingReplays();	
		return result;	
	}
	bool uapi_AGameModeBase_IsPaused(void* target){	
		auto result = ((AGameModeBase*)target)->IsPaused();	
		return result;	
	}
	void uapi_AGameModeBase_K2_OnLogout(void* target, AController* ExitingController){	
		((AGameModeBase*)target)->K2_OnLogout(ExitingController);	
	}
	void uapi_AGameModeBase_K2_OnRestartPlayer(void* target, AController* NewPlayer){	
		((AGameModeBase*)target)->K2_OnRestartPlayer(NewPlayer);	
	}
	void uapi_AGameModeBase_K2_PostLogin(void* target, APlayerController* NewPlayer){	
		((AGameModeBase*)target)->K2_PostLogin(NewPlayer);	
	}
	void uapi_AGameModeBase_Logout(void* target, AController* Exiting){	
		((AGameModeBase*)target)->Logout(Exiting);	
	}
	bool uapi_AGameModeBase_MustSpectate(void* target, APlayerController* NewPlayerController){	
		auto result = ((AGameModeBase*)target)->MustSpectate(NewPlayerController);	
		return result;	
	}
	bool uapi_AGameModeBase_PlayerCanRestart(void* target, APlayerController* Player){	
		auto result = ((AGameModeBase*)target)->PlayerCanRestart(Player);	
		return result;	
	}
	void uapi_AGameModeBase_PostLogin(void* target, APlayerController* NewPlayer){	
		((AGameModeBase*)target)->PostLogin(NewPlayer);	
	}
	void uapi_AGameModeBase_PostSeamlessTravel(void* target){	
		((AGameModeBase*)target)->PostSeamlessTravel();	
	}
	void uapi_AGameModeBase_PreInitializeComponents(void* target){	
		((AGameModeBase*)target)->PreInitializeComponents();	
	}
	void uapi_AGameModeBase_Reset(void* target){	
		((AGameModeBase*)target)->Reset();	
	}
	void uapi_AGameModeBase_ResetLevel(void* target){	
		((AGameModeBase*)target)->ResetLevel();	
	}
	void uapi_AGameModeBase_RestartPlayer(void* target, AController* NewPlayer){	
		((AGameModeBase*)target)->RestartPlayer(NewPlayer);	
	}
	void uapi_AGameModeBase_RestartPlayerAtPlayerStart(void* target, AController* NewPlayer, AActor* StartSpot){	
		((AGameModeBase*)target)->RestartPlayerAtPlayerStart(NewPlayer, StartSpot);	
	}
	void uapi_AGameModeBase_ReturnToMainMenuHost(void* target){	
		((AGameModeBase*)target)->ReturnToMainMenuHost();	
	}
	void uapi_AGameModeBase_SetPlayerDefaults(void* target, APawn* PlayerPawn){	
		((AGameModeBase*)target)->SetPlayerDefaults(PlayerPawn);	
	}
	bool uapi_AGameModeBase_ShouldReset(void* target, AActor* ActorToReset){	
		auto result = ((AGameModeBase*)target)->ShouldReset(ActorToReset);	
		return result;	
	}
	void* uapi_AGameModeBase_SpawnDefaultPawnFor(void* target, AController* NewPlayer, AActor* StartSpot){	
		auto result = (void*)((AGameModeBase*)target)->SpawnDefaultPawnFor(NewPlayer, StartSpot);	
		return result;	
	}
	void uapi_AGameModeBase_StartPlay(void* target){	
		((AGameModeBase*)target)->StartPlay();	
	}
	void uapi_AGameModeBase_StartToLeaveMap(void* target){	
		((AGameModeBase*)target)->StartToLeaveMap();	
	}
	void uapi_AGameModeBase_SwapPlayerControllers(void* target, APlayerController* OldPC, APlayerController* NewPC){	
		((AGameModeBase*)target)->SwapPlayerControllers(OldPC, NewPC);	
	}
	void uapi_USceneComponent_BeginDestroy(void* target){	
		((USceneComponent*)target)->BeginDestroy();	
	}
	void uapi_USceneComponent_CalcBoundingCylinder(void* target, float& CylinderRadius, float& CylinderHalfHeight){	
		((USceneComponent*)target)->CalcBoundingCylinder(CylinderRadius, CylinderHalfHeight);	
	}
	bool uapi_USceneComponent_CanAttachAsChild(void* target, USceneComponent* ChildComponent, UName SocketName){	
		auto result = ((USceneComponent*)target)->CanAttachAsChild(ChildComponent, ToFName(SocketName));	
		return result;	
	}
	bool uapi_USceneComponent_CanEditChange(void* target, FProperty* Property){	
		auto result = ((USceneComponent*)target)->CanEditChange(Property);	
		return result;	
	}
	bool uapi_USceneComponent_CanEverRender(void* target){	
		auto result = ((USceneComponent*)target)->CanEverRender();	
		return result;	
	}
	bool uapi_USceneComponent_CanHaveStaticMobility(void* target){	
		auto result = ((USceneComponent*)target)->CanHaveStaticMobility();	
		return result;	
	}
	void uapi_USceneComponent_ClearSkipUpdateOverlaps(void* target){	
		((USceneComponent*)target)->ClearSkipUpdateOverlaps();	
	}
	void uapi_USceneComponent_ConditionalUpdateComponentToWorld(void* target){	
		((USceneComponent*)target)->ConditionalUpdateComponentToWorld();	
	}
	void uapi_USceneComponent_DestroyComponent(void* target, bool bPromoteChildren){	
		((USceneComponent*)target)->DestroyComponent(bPromoteChildren);	
	}
	bool uapi_USceneComponent_DoesSocketExist(void* target, UName InSocketName){	
		auto result = ((USceneComponent*)target)->DoesSocketExist(ToFName(InSocketName));	
		return result;	
	}
	UName uapi_USceneComponent_GetAbsoluteLocationPropertyName(){	
		auto result = ToUName((USceneComponent::GetAbsoluteLocationPropertyName()));	
		return result;	
	}
	UName uapi_USceneComponent_GetAbsoluteRotationPropertyName(){	
		auto result = ToUName((USceneComponent::GetAbsoluteRotationPropertyName()));	
		return result;	
	}
	UName uapi_USceneComponent_GetAbsoluteScalePropertyName(){	
		auto result = ToUName((USceneComponent::GetAbsoluteScalePropertyName()));	
		return result;	
	}
	Vector3 uapi_USceneComponent_GetActorPositionForRenderer(void* target){	
		auto result = ToVector3(((USceneComponent*)target)->GetActorPositionForRenderer());	
		return result;	
	}
	void* uapi_USceneComponent_GetAttachParent(void* target){	
		auto result = (void*)((USceneComponent*)target)->GetAttachParent();	
		return result;	
	}
	void* uapi_USceneComponent_GetAttachParentActor(void* target){	
		auto result = (void*)((USceneComponent*)target)->GetAttachParentActor();	
		return result;	
	}
	UName uapi_USceneComponent_GetAttachSocketName(void* target){	
		auto result = ToUName(((USceneComponent*)target)->GetAttachSocketName());	
		return result;	
	}
	void* uapi_USceneComponent_GetAttachmentRoot(void* target){	
		auto result = (void*)((USceneComponent*)target)->GetAttachmentRoot();	
		return result;	
	}
	void* uapi_USceneComponent_GetAttachmentRootActor(void* target){	
		auto result = (void*)((USceneComponent*)target)->GetAttachmentRootActor();	
		return result;	
	}
	void* uapi_USceneComponent_GetChildComponent(void* target, int32 ChildIndex){	
		auto result = (void*)((USceneComponent*)target)->GetChildComponent(ChildIndex);	
		return result;	
	}
	ECollisionChannel uapi_USceneComponent_GetCollisionObjectType(void* target){	
		auto result = ((USceneComponent*)target)->GetCollisionObjectType();	
		return result;	
	}
	Vector3 uapi_USceneComponent_GetComponentLocation(void* target){	
		auto result = ToVector3(((USceneComponent*)target)->GetComponentLocation());	
		return result;	
	}
	Quaternion uapi_USceneComponent_GetComponentQuat(void* target){	
		auto result = ToQuaternion(((USceneComponent*)target)->GetComponentQuat());	
		return result;	
	}
	Rotator uapi_USceneComponent_GetComponentRotation(void* target){	
		auto result = ToRotator(((USceneComponent*)target)->GetComponentRotation());	
		return result;	
	}
	Vector3 uapi_USceneComponent_GetComponentScale(void* target){	
		auto result = ToVector3(((USceneComponent*)target)->GetComponentScale());	
		return result;	
	}
	Transform uapi_USceneComponent_GetComponentToWorld(void* target){	
		auto result = ToTransform(((USceneComponent*)target)->GetComponentToWorld());	
		return result;	
	}
	Transform uapi_USceneComponent_GetComponentTransform(void* target){	
		auto result = ToTransform(((USceneComponent*)target)->GetComponentTransform());	
		return result;	
	}
	Vector3 uapi_USceneComponent_GetComponentVelocity(void* target){	
		auto result = ToVector3(((USceneComponent*)target)->GetComponentVelocity());	
		return result;	
	}
	void* uapi_USceneComponent_GetCurrentScopedMovement(void* target){	
		auto result = (void*)((USceneComponent*)target)->GetCurrentScopedMovement();	
		return result;	
	}
	UName uapi_USceneComponent_GetDefaultSceneRootVariableName(){	
		auto result = ToUName((USceneComponent::GetDefaultSceneRootVariableName()));	
		return result;	
	}
	Vector3 uapi_USceneComponent_GetForwardVector(void* target){	
		auto result = ToVector3(((USceneComponent*)target)->GetForwardVector());	
		return result;	
	}
	int32 uapi_USceneComponent_GetNumChildrenComponents(void* target){	
		auto result = ((USceneComponent*)target)->GetNumChildrenComponents();	
		return result;	
	}
	int32 uapi_USceneComponent_GetNumUncachedStaticLightingInteractions(void* target){	
		auto result = ((USceneComponent*)target)->GetNumUncachedStaticLightingInteractions();	
		return result;	
	}
	void* uapi_USceneComponent_GetPhysicsVolume(void* target){	
		auto result = (void*)((USceneComponent*)target)->GetPhysicsVolume();	
		return result;	
	}
	Vector3 uapi_USceneComponent_GetRelativeLocation(void* target){	
		auto result = ToVector3(((USceneComponent*)target)->GetRelativeLocation());	
		return result;	
	}
	UName uapi_USceneComponent_GetRelativeLocationPropertyName(){	
		auto result = ToUName((USceneComponent::GetRelativeLocationPropertyName()));	
		return result;	
	}
	Vector3 uapi_USceneComponent_GetRelativeLocation_DirectMutable(void* target){	
		auto result = ToVector3(((USceneComponent*)target)->GetRelativeLocation_DirectMutable());	
		return result;	
	}
	Rotator uapi_USceneComponent_GetRelativeRotation(void* target){	
		auto result = ToRotator(((USceneComponent*)target)->GetRelativeRotation());	
		return result;	
	}
	UName uapi_USceneComponent_GetRelativeRotationPropertyName(){	
		auto result = ToUName((USceneComponent::GetRelativeRotationPropertyName()));	
		return result;	
	}
	Rotator uapi_USceneComponent_GetRelativeRotation_DirectMutable(void* target){	
		auto result = ToRotator(((USceneComponent*)target)->GetRelativeRotation_DirectMutable());	
		return result;	
	}
	Vector3 uapi_USceneComponent_GetRelativeScale3D(void* target){	
		auto result = ToVector3(((USceneComponent*)target)->GetRelativeScale3D());	
		return result;	
	}
	UName uapi_USceneComponent_GetRelativeScale3DPropertyName(){	
		auto result = ToUName((USceneComponent::GetRelativeScale3DPropertyName()));	
		return result;	
	}
	Vector3 uapi_USceneComponent_GetRelativeScale3D_DirectMutable(void* target){	
		auto result = ToVector3(((USceneComponent*)target)->GetRelativeScale3D_DirectMutable());	
		return result;	
	}
	Transform uapi_USceneComponent_GetRelativeTransform(void* target){	
		auto result = ToTransform(((USceneComponent*)target)->GetRelativeTransform());	
		return result;	
	}
	Vector3 uapi_USceneComponent_GetRightVector(void* target){	
		auto result = ToVector3(((USceneComponent*)target)->GetRightVector());	
		return result;	
	}
	bool uapi_USceneComponent_GetShouldUpdatePhysicsVolume(void* target){	
		auto result = ((USceneComponent*)target)->GetShouldUpdatePhysicsVolume();	
		return result;	
	}
	Vector3 uapi_USceneComponent_GetSocketLocation(void* target, UName InSocketName){	
		auto result = ToVector3(((USceneComponent*)target)->GetSocketLocation(ToFName(InSocketName)));	
		return result;	
	}
	Quaternion uapi_USceneComponent_GetSocketQuaternion(void* target, UName InSocketName){	
		auto result = ToQuaternion(((USceneComponent*)target)->GetSocketQuaternion(ToFName(InSocketName)));	
		return result;	
	}
	Rotator uapi_USceneComponent_GetSocketRotation(void* target, UName InSocketName){	
		auto result = ToRotator(((USceneComponent*)target)->GetSocketRotation(ToFName(InSocketName)));	
		return result;	
	}
	Vector3 uapi_USceneComponent_GetUpVector(void* target){	
		auto result = ToVector3(((USceneComponent*)target)->GetUpVector());	
		return result;	
	}
	bool uapi_USceneComponent_GetVisibleFlag(void* target){	
		auto result = ((USceneComponent*)target)->GetVisibleFlag();	
		return result;	
	}
	UName uapi_USceneComponent_GetVisiblePropertyName(){	
		auto result = ToUName((USceneComponent::GetVisiblePropertyName()));	
		return result;	
	}
	bool uapi_USceneComponent_HasAnySockets(void* target){	
		auto result = ((USceneComponent*)target)->HasAnySockets();	
		return result;	
	}
	bool uapi_USceneComponent_IsAnySimulatingPhysics(void* target){	
		auto result = ((USceneComponent*)target)->IsAnySimulatingPhysics();	
		return result;	
	}
	bool uapi_USceneComponent_IsAttachedTo(void* target, USceneComponent* TestComp){	
		auto result = ((USceneComponent*)target)->IsAttachedTo(TestComp);	
		return result;	
	}
	bool uapi_USceneComponent_IsCollisionEnabled(void* target){	
		auto result = ((USceneComponent*)target)->IsCollisionEnabled();	
		return result;	
	}
	bool uapi_USceneComponent_IsDeferringMovementUpdates(void* target){	
		auto result = ((USceneComponent*)target)->IsDeferringMovementUpdates();	
		return result;	
	}
	bool uapi_USceneComponent_IsPhysicsCollisionEnabled(void* target){	
		auto result = ((USceneComponent*)target)->IsPhysicsCollisionEnabled();	
		return result;	
	}
	bool uapi_USceneComponent_IsPostLoadThreadSafe(void* target){	
		auto result = ((USceneComponent*)target)->IsPostLoadThreadSafe();	
		return result;	
	}
	bool uapi_USceneComponent_IsPrecomputedLightingValid(void* target){	
		auto result = ((USceneComponent*)target)->IsPrecomputedLightingValid();	
		return result;	
	}
	bool uapi_USceneComponent_IsQueryCollisionEnabled(void* target){	
		auto result = ((USceneComponent*)target)->IsQueryCollisionEnabled();	
		return result;	
	}
	bool uapi_USceneComponent_IsSimulatingPhysics(void* target, UName BoneName){	
		auto result = ((USceneComponent*)target)->IsSimulatingPhysics(ToFName(BoneName));	
		return result;	
	}
	bool uapi_USceneComponent_IsUsingAbsoluteLocation(void* target){	
		auto result = ((USceneComponent*)target)->IsUsingAbsoluteLocation();	
		return result;	
	}
	bool uapi_USceneComponent_IsUsingAbsoluteRotation(void* target){	
		auto result = ((USceneComponent*)target)->IsUsingAbsoluteRotation();	
		return result;	
	}
	bool uapi_USceneComponent_IsUsingAbsoluteScale(void* target){	
		auto result = ((USceneComponent*)target)->IsUsingAbsoluteScale();	
		return result;	
	}
	bool uapi_USceneComponent_IsVisible(void* target){	
		auto result = ((USceneComponent*)target)->IsVisible();	
		return result;	
	}
	bool uapi_USceneComponent_IsVisibleInEditor(void* target){	
		auto result = ((USceneComponent*)target)->IsVisibleInEditor();	
		return result;	
	}
	bool uapi_USceneComponent_IsWorldGeometry(void* target){	
		auto result = ((USceneComponent*)target)->IsWorldGeometry();	
		return result;	
	}
	Vector3 uapi_USceneComponent_K2_GetComponentLocation(void* target){	
		auto result = ToVector3(((USceneComponent*)target)->K2_GetComponentLocation());	
		return result;	
	}
	Rotator uapi_USceneComponent_K2_GetComponentRotation(void* target){	
		auto result = ToRotator(((USceneComponent*)target)->K2_GetComponentRotation());	
		return result;	
	}
	Vector3 uapi_USceneComponent_K2_GetComponentScale(void* target){	
		auto result = ToVector3(((USceneComponent*)target)->K2_GetComponentScale());	
		return result;	
	}
	Transform uapi_USceneComponent_K2_GetComponentToWorld(void* target){	
		auto result = ToTransform(((USceneComponent*)target)->K2_GetComponentToWorld());	
		return result;	
	}
	bool uapi_USceneComponent_NeedsLoadForTargetPlatform(void* target, ITargetPlatform* TargetPlatform){	
		auto result = ((USceneComponent*)target)->NeedsLoadForTargetPlatform(TargetPlatform);	
		return result;	
	}
	void uapi_USceneComponent_OnAttachmentChanged(void* target){	
		((USceneComponent*)target)->OnAttachmentChanged();	
	}
	void uapi_USceneComponent_OnComponentDestroyed(void* target, bool bDestroyingHierarchy){	
		((USceneComponent*)target)->OnComponentDestroyed(bDestroyingHierarchy);	
	}
	void uapi_USceneComponent_OnRegister(void* target){	
		((USceneComponent*)target)->OnRegister();	
	}
	void uapi_USceneComponent_OnUnregister(void* target){	
		((USceneComponent*)target)->OnUnregister();	
	}
	void uapi_USceneComponent_PostEditComponentMove(void* target, bool bFinished){	
		((USceneComponent*)target)->PostEditComponentMove(bFinished);	
	}
	void uapi_USceneComponent_PostInterpChange(void* target, FProperty* PropertyThatChanged){	
		((USceneComponent*)target)->PostInterpChange(PropertyThatChanged);	
	}
	void uapi_USceneComponent_PostLoad(void* target){	
		((USceneComponent*)target)->PostLoad();	
	}
	void uapi_USceneComponent_PostNetReceive(void* target){	
		((USceneComponent*)target)->PostNetReceive();	
	}
	void uapi_USceneComponent_PostRepNotifies(void* target){	
		((USceneComponent*)target)->PostRepNotifies();	
	}
	void uapi_USceneComponent_PreNetReceive(void* target){	
		((USceneComponent*)target)->PreNetReceive();	
	}
	void uapi_USceneComponent_PropagateLightingScenarioChange(void* target){	
		((USceneComponent*)target)->PropagateLightingScenarioChange();	
	}
	void uapi_USceneComponent_ResetRelativeTransform(void* target){	
		((USceneComponent*)target)->ResetRelativeTransform();	
	}
	void uapi_USceneComponent_SetAbsolute(void* target, bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale){	
		((USceneComponent*)target)->SetAbsolute(bNewAbsoluteLocation, bNewAbsoluteRotation, bNewAbsoluteScale);	
	}
	void uapi_USceneComponent_SetHiddenInGame(void* target, bool NewHidden, bool bPropagateToChildren){	
		((USceneComponent*)target)->SetHiddenInGame(NewHidden, bPropagateToChildren);	
	}
	void uapi_USceneComponent_SetPhysicsVolume(void* target, APhysicsVolume* NewVolume, bool bTriggerNotifiers){	
		((USceneComponent*)target)->SetPhysicsVolume(NewVolume, bTriggerNotifiers);	
	}
	void uapi_USceneComponent_SetRelativeLocation_Direct(void* target, Vector3 NewRelativeLocation){	
		((USceneComponent*)target)->SetRelativeLocation_Direct(ToFVector(NewRelativeLocation));	
	}
	void uapi_USceneComponent_SetRelativeRotation_Direct(void* target, Rotator NewRelativeRotation){	
		((USceneComponent*)target)->SetRelativeRotation_Direct(ToFRotator(NewRelativeRotation));	
	}
	void uapi_USceneComponent_SetRelativeScale3D(void* target, Vector3 NewScale3D){	
		((USceneComponent*)target)->SetRelativeScale3D(ToFVector(NewScale3D));	
	}
	void uapi_USceneComponent_SetRelativeScale3D_Direct(void* target, Vector3 NewRelativeScale3D){	
		((USceneComponent*)target)->SetRelativeScale3D_Direct(ToFVector(NewRelativeScale3D));	
	}
	void uapi_USceneComponent_SetShouldUpdatePhysicsVolume(void* target, bool bInShouldUpdatePhysicsVolume){	
		((USceneComponent*)target)->SetShouldUpdatePhysicsVolume(bInShouldUpdatePhysicsVolume);	
	}
	void uapi_USceneComponent_SetUsingAbsoluteLocation(void* target, bool bInAbsoluteLocation){	
		((USceneComponent*)target)->SetUsingAbsoluteLocation(bInAbsoluteLocation);	
	}
	void uapi_USceneComponent_SetUsingAbsoluteRotation(void* target, bool bInAbsoluteRotation){	
		((USceneComponent*)target)->SetUsingAbsoluteRotation(bInAbsoluteRotation);	
	}
	void uapi_USceneComponent_SetUsingAbsoluteScale(void* target, bool bInAbsoluteRotation){	
		((USceneComponent*)target)->SetUsingAbsoluteScale(bInAbsoluteRotation);	
	}
	void uapi_USceneComponent_SetVisibility(void* target, bool bNewVisibility, bool bPropagateToChildren){	
		((USceneComponent*)target)->SetVisibility(bNewVisibility, bPropagateToChildren);	
	}
	void uapi_USceneComponent_SetVisibleFlag(void* target, bool bInVisible){	
		((USceneComponent*)target)->SetVisibleFlag(bInVisible);	
	}
	void uapi_USceneComponent_SetWorldScale3D(void* target, Vector3 NewScale){	
		((USceneComponent*)target)->SetWorldScale3D(ToFVector(NewScale));	
	}
	void uapi_USceneComponent_SetupAttachment(void* target, USceneComponent* InParent, UName InSocketName){	
		((USceneComponent*)target)->SetupAttachment(InParent, ToFName(InSocketName));	
	}
	bool uapi_USceneComponent_ShouldCollideWhenPlacing(void* target){	
		auto result = ((USceneComponent*)target)->ShouldCollideWhenPlacing();	
		return result;	
	}
	bool uapi_USceneComponent_ShouldComponentAddToScene(void* target){	
		auto result = ((USceneComponent*)target)->ShouldComponentAddToScene();	
		return result;	
	}
	bool uapi_USceneComponent_ShouldCreateRenderState(void* target){	
		auto result = ((USceneComponent*)target)->ShouldCreateRenderState();	
		return result;	
	}
	bool uapi_USceneComponent_ShouldRender(void* target){	
		auto result = ((USceneComponent*)target)->ShouldRender();	
		return result;	
	}
	bool uapi_USceneComponent_ShouldSkipUpdateOverlaps(void* target){	
		auto result = ((USceneComponent*)target)->ShouldSkipUpdateOverlaps();	
		return result;	
	}
	void uapi_USceneComponent_ToggleVisibility(void* target, bool bPropagateToChildren){	
		((USceneComponent*)target)->ToggleVisibility(bPropagateToChildren);	
	}
	void uapi_USceneComponent_UpdateBounds(void* target){	
		((USceneComponent*)target)->UpdateBounds();	
	}
	bool uapi_USceneComponent_UpdateOverlaps(void* target, TOverlapArrayView* PendingOverlaps, bool bDoNotifies, TOverlapArrayView* OverlapsAtEndLocation){	
		auto result = ((USceneComponent*)target)->UpdateOverlaps(PendingOverlaps, bDoNotifies, OverlapsAtEndLocation);	
		return result;	
	}
	void uapi_USceneComponent_UpdatePhysicsVolume(void* target, bool bTriggerNotifiers){	
		((USceneComponent*)target)->UpdatePhysicsVolume(bTriggerNotifiers);	
	}
	void uapi_UActorComponent_Activate(void* target, bool bReset){	
		((UActorComponent*)target)->Activate(bReset);	
	}
	void uapi_UActorComponent_AddAssetUserData(void* target, UAssetUserData* InUserData){	
		((UActorComponent*)target)->AddAssetUserData(InUserData);	
	}
	void uapi_UActorComponent_AddTickPrerequisiteActor(void* target, AActor* PrerequisiteActor){	
		((UActorComponent*)target)->AddTickPrerequisiteActor(PrerequisiteActor);	
	}
	void uapi_UActorComponent_AddTickPrerequisiteComponent(void* target, UActorComponent* PrerequisiteComponent){	
		((UActorComponent*)target)->AddTickPrerequisiteComponent(PrerequisiteComponent);	
	}
	void* uapi_UActorComponent_AdditionalStatObject(void* target){	
		auto result = (void*)((UActorComponent*)target)->AdditionalStatObject();	
		return result;	
	}
	bool uapi_UActorComponent_AllowReregistration(void* target){	
		auto result = ((UActorComponent*)target)->AllowReregistration();	
		return result;	
	}
	void uapi_UActorComponent_AsyncPhysicsTickComponent(void* target, float DeltaTime, float SimTime){	
		((UActorComponent*)target)->AsyncPhysicsTickComponent(DeltaTime, SimTime);	
	}
	void uapi_UActorComponent_BeginDestroy(void* target){	
		((UActorComponent*)target)->BeginDestroy();	
	}
	void uapi_UActorComponent_BeginPlay(void* target){	
		((UActorComponent*)target)->BeginPlay();	
	}
	bool uapi_UActorComponent_CallRemoteFunction(void* target, UFunction* Function, void* Parameters, FOutParmRec* OutParms, FFrame* Stack){	
		auto result = ((UActorComponent*)target)->CallRemoteFunction(Function, Parameters, OutParms, Stack);	
		return result;	
	}
	bool uapi_UActorComponent_CanEditChange(void* target, FProperty* InProperty){	
		auto result = ((UActorComponent*)target)->CanEditChange(InProperty);	
		return result;	
	}
	bool uapi_UActorComponent_CanEverAffectNavigation(void* target){	
		auto result = ((UActorComponent*)target)->CanEverAffectNavigation();	
		return result;	
	}
	void uapi_UActorComponent_CheckForErrors(void* target){	
		((UActorComponent*)target)->CheckForErrors();	
	}
	void uapi_UActorComponent_ClearNeedEndOfFrameUpdate(void* target){	
		((UActorComponent*)target)->ClearNeedEndOfFrameUpdate();	
	}
	void uapi_UActorComponent_ClearUCSModifiedProperties(void* target){	
		((UActorComponent*)target)->ClearUCSModifiedProperties();	
	}
	bool uapi_UActorComponent_ComponentHasTag(void* target, UName Tag){	
		auto result = ((UActorComponent*)target)->ComponentHasTag(ToFName(Tag));	
		return result;	
	}
	bool uapi_UActorComponent_ComponentIsInLevel(void* target, ULevel* TestLevel){	
		auto result = ((UActorComponent*)target)->ComponentIsInLevel(TestLevel);	
		return result;	
	}
	bool uapi_UActorComponent_ComponentIsInPersistentLevel(void* target, bool bIncludeLevelStreamingPersistent){	
		auto result = ((UActorComponent*)target)->ComponentIsInPersistentLevel(bIncludeLevelStreamingPersistent);	
		return result;	
	}
	void uapi_UActorComponent_CreatePhysicsState(void* target, bool bAllowDeferral){	
		((UActorComponent*)target)->CreatePhysicsState(bAllowDeferral);	
	}
	void uapi_UActorComponent_Deactivate(void* target){	
		((UActorComponent*)target)->Deactivate();	
	}
	void uapi_UActorComponent_DestroyComponent(void* target, bool bPromoteChildren){	
		((UActorComponent*)target)->DestroyComponent(bPromoteChildren);	
	}
	void uapi_UActorComponent_DestroyPhysicsState(void* target){	
		((UActorComponent*)target)->DestroyPhysicsState();	
	}
	void uapi_UActorComponent_DetermineUCSModifiedProperties(void* target){	
		((UActorComponent*)target)->DetermineUCSModifiedProperties();	
	}
	void uapi_UActorComponent_DoDeferredRenderUpdates_Concurrent(void* target){	
		((UActorComponent*)target)->DoDeferredRenderUpdates_Concurrent();	
	}
	bool uapi_UActorComponent_GetComponentClassCanReplicate(void* target){	
		auto result = ((UActorComponent*)target)->GetComponentClassCanReplicate();	
		return result;	
	}
	void* uapi_UActorComponent_GetComponentLevel(void* target){	
		auto result = (void*)((UActorComponent*)target)->GetComponentLevel();	
		return result;	
	}
	float uapi_UActorComponent_GetComponentTickInterval(void* target){	
		auto result = ((UActorComponent*)target)->GetComponentTickInterval();	
		return result;	
	}
	int32 uapi_UActorComponent_GetFunctionCallspace(void* target, UFunction* Function, FFrame* Stack){	
		auto result = ((UActorComponent*)target)->GetFunctionCallspace(Function, Stack);	
		return result;	
	}
	bool uapi_UActorComponent_GetIsReplicated(void* target){	
		auto result = ((UActorComponent*)target)->GetIsReplicated();	
		return result;	
	}
	uint32 uapi_UActorComponent_GetMarkedForEndOfFrameUpdateState(void* target){	
		auto result = ((UActorComponent*)target)->GetMarkedForEndOfFrameUpdateState();	
		return result;	
	}
	uint32 uapi_UActorComponent_GetMarkedForPreEndOfFrameSync(void* target){	
		auto result = ((UActorComponent*)target)->GetMarkedForPreEndOfFrameSync();	
		return result;	
	}
	void* uapi_UActorComponent_GetOwner(void* target){	
		auto result = (void*)((UActorComponent*)target)->GetOwner();	
		return result;	
	}
	const char* uapi_UActorComponent_GetReadableName(void* target){	
		auto result = FString2Utf8(((UActorComponent*)target)->GetReadableName());	
		return result;	
	}
	void* uapi_UActorComponent_GetScene(void* target){	
		auto result = (void*)((UActorComponent*)target)->GetScene();	
		return result;	
	}
	int32 uapi_UActorComponent_GetUCSSerializationIndex(void* target){	
		auto result = ((UActorComponent*)target)->GetUCSSerializationIndex();	
		return result;	
	}
	void* uapi_UActorComponent_GetWorld(void* target){	
		auto result = (void*)((UActorComponent*)target)->GetWorld();	
		return result;	
	}
	bool uapi_UActorComponent_HasBeenCreated(void* target){	
		auto result = ((UActorComponent*)target)->HasBeenCreated();	
		return result;	
	}
	bool uapi_UActorComponent_HasBeenInitialized(void* target){	
		auto result = ((UActorComponent*)target)->HasBeenInitialized();	
		return result;	
	}
	bool uapi_UActorComponent_HasBegunPlay(void* target){	
		auto result = ((UActorComponent*)target)->HasBegunPlay();	
		return result;	
	}
	void uapi_UActorComponent_InitializeComponent(void* target){	
		((UActorComponent*)target)->InitializeComponent();	
	}
	void uapi_UActorComponent_InvalidateLightingCache(void* target){	
		((UActorComponent*)target)->InvalidateLightingCache();	
	}
	void uapi_UActorComponent_InvalidateLightingCacheDetailed(void* target, bool bInvalidateBuildEnqueuedLighting, bool bTranslationOnly){	
		((UActorComponent*)target)->InvalidateLightingCacheDetailed(bInvalidateBuildEnqueuedLighting, bTranslationOnly);	
	}
	bool uapi_UActorComponent_IsActive(void* target){	
		auto result = ((UActorComponent*)target)->IsActive();	
		return result;	
	}
	bool uapi_UActorComponent_IsBeingDestroyed(void* target){	
		auto result = ((UActorComponent*)target)->IsBeingDestroyed();	
		return result;	
	}
	bool uapi_UActorComponent_IsComponentTickEnabled(void* target){	
		auto result = ((UActorComponent*)target)->IsComponentTickEnabled();	
		return result;	
	}
	bool uapi_UActorComponent_IsCreatedByConstructionScript(void* target){	
		auto result = ((UActorComponent*)target)->IsCreatedByConstructionScript();	
		return result;	
	}
	bool uapi_UActorComponent_IsEditableWhenInherited(void* target){	
		auto result = ((UActorComponent*)target)->IsEditableWhenInherited();	
		return result;	
	}
	bool uapi_UActorComponent_IsEditorOnly(void* target){	
		auto result = ((UActorComponent*)target)->IsEditorOnly();	
		return result;	
	}
	bool uapi_UActorComponent_IsHLODRelevant(void* target){	
		auto result = ((UActorComponent*)target)->IsHLODRelevant();	
		return result;	
	}
	bool uapi_UActorComponent_IsNameStableForNetworking(void* target){	
		auto result = ((UActorComponent*)target)->IsNameStableForNetworking();	
		return result;	
	}
	bool uapi_UActorComponent_IsNavigationRelevant(void* target){	
		auto result = ((UActorComponent*)target)->IsNavigationRelevant();	
		return result;	
	}
	bool uapi_UActorComponent_IsNetSimulating(void* target){	
		auto result = ((UActorComponent*)target)->IsNetSimulating();	
		return result;	
	}
	bool uapi_UActorComponent_IsNetStartupComponent(void* target){	
		auto result = ((UActorComponent*)target)->IsNetStartupComponent();	
		return result;	
	}
	bool uapi_UActorComponent_IsOwnerRunningUserConstructionScript(void* target){	
		auto result = ((UActorComponent*)target)->IsOwnerRunningUserConstructionScript();	
		return result;	
	}
	bool uapi_UActorComponent_IsOwnerSelected(void* target){	
		auto result = ((UActorComponent*)target)->IsOwnerSelected();	
		return result;	
	}
	bool uapi_UActorComponent_IsPhysicsStateCreated(void* target){	
		auto result = ((UActorComponent*)target)->IsPhysicsStateCreated();	
		return result;	
	}
	bool uapi_UActorComponent_IsReadyForOwnerToAutoDestroy(void* target){	
		auto result = ((UActorComponent*)target)->IsReadyForOwnerToAutoDestroy();	
		return result;	
	}
	bool uapi_UActorComponent_IsReadyForReplication(void* target){	
		auto result = ((UActorComponent*)target)->IsReadyForReplication();	
		return result;	
	}
	bool uapi_UActorComponent_IsRegistered(void* target){	
		auto result = ((UActorComponent*)target)->IsRegistered();	
		return result;	
	}
	bool uapi_UActorComponent_IsRenderInstancesDirty(void* target){	
		auto result = ((UActorComponent*)target)->IsRenderInstancesDirty();	
		return result;	
	}
	bool uapi_UActorComponent_IsRenderStateCreated(void* target){	
		auto result = ((UActorComponent*)target)->IsRenderStateCreated();	
		return result;	
	}
	bool uapi_UActorComponent_IsRenderStateDirty(void* target){	
		auto result = ((UActorComponent*)target)->IsRenderStateDirty();	
		return result;	
	}
	bool uapi_UActorComponent_IsRenderTransformDirty(void* target){	
		auto result = ((UActorComponent*)target)->IsRenderTransformDirty();	
		return result;	
	}
	bool uapi_UActorComponent_IsReplicatedSubObjectRegistered(void* target, UObject* SubObject){	
		auto result = ((UActorComponent*)target)->IsReplicatedSubObjectRegistered(SubObject);	
		return result;	
	}
	bool uapi_UActorComponent_IsSelectedInEditor(void* target){	
		auto result = ((UActorComponent*)target)->IsSelectedInEditor();	
		return result;	
	}
	bool uapi_UActorComponent_IsSupportedForNetworking(void* target){	
		auto result = ((UActorComponent*)target)->IsSupportedForNetworking();	
		return result;	
	}
	bool uapi_UActorComponent_IsUsingRegisteredSubObjectList(void* target){	
		auto result = ((UActorComponent*)target)->IsUsingRegisteredSubObjectList();	
		return result;	
	}
	bool uapi_UActorComponent_IsVisualizationComponent(void* target){	
		auto result = ((UActorComponent*)target)->IsVisualizationComponent();	
		return result;	
	}
	void uapi_UActorComponent_K2_DestroyComponent(void* target, UObject* Object){	
		((UActorComponent*)target)->K2_DestroyComponent(Object);	
	}
	void uapi_UActorComponent_MarkAsEditorOnlySubobject(void* target){	
		((UActorComponent*)target)->MarkAsEditorOnlySubobject();	
	}
	void uapi_UActorComponent_MarkForNeededEndOfFrameRecreate(void* target){	
		((UActorComponent*)target)->MarkForNeededEndOfFrameRecreate();	
	}
	void uapi_UActorComponent_MarkForNeededEndOfFrameUpdate(void* target){	
		((UActorComponent*)target)->MarkForNeededEndOfFrameUpdate();	
	}
	void uapi_UActorComponent_MarkRenderDynamicDataDirty(void* target){	
		((UActorComponent*)target)->MarkRenderDynamicDataDirty();	
	}
	void uapi_UActorComponent_MarkRenderInstancesDirty(void* target){	
		((UActorComponent*)target)->MarkRenderInstancesDirty();	
	}
	void uapi_UActorComponent_MarkRenderStateDirty(void* target){	
		((UActorComponent*)target)->MarkRenderStateDirty();	
	}
	void uapi_UActorComponent_MarkRenderTransformDirty(void* target){	
		((UActorComponent*)target)->MarkRenderTransformDirty();	
	}
	bool uapi_UActorComponent_Modify(void* target, bool bAlwaysMarkDirty){	
		auto result = ((UActorComponent*)target)->Modify(bAlwaysMarkDirty);	
		return result;	
	}
	bool uapi_UActorComponent_NeedsLoadForClient(void* target){	
		auto result = ((UActorComponent*)target)->NeedsLoadForClient();	
		return result;	
	}
	bool uapi_UActorComponent_NeedsLoadForEditorGame(void* target){	
		auto result = ((UActorComponent*)target)->NeedsLoadForEditorGame();	
		return result;	
	}
	bool uapi_UActorComponent_NeedsLoadForServer(void* target){	
		auto result = ((UActorComponent*)target)->NeedsLoadForServer();	
		return result;	
	}
	void uapi_UActorComponent_OnActorEnableCollisionChanged(void* target){	
		((UActorComponent*)target)->OnActorEnableCollisionChanged();	
	}
	void uapi_UActorComponent_OnComponentCreated(void* target){	
		((UActorComponent*)target)->OnComponentCreated();	
	}
	void uapi_UActorComponent_OnComponentDestroyed(void* target, bool bDestroyingHierarchy){	
		((UActorComponent*)target)->OnComponentDestroyed(bDestroyingHierarchy);	
	}
	void uapi_UActorComponent_OnCreatedFromReplication(void* target){	
		((UActorComponent*)target)->OnCreatedFromReplication();	
	}
	void uapi_UActorComponent_OnDestroyedFromReplication(void* target){	
		((UActorComponent*)target)->OnDestroyedFromReplication();	
	}
	void uapi_UActorComponent_OnEndOfFrameUpdateDuringTick(void* target){	
		((UActorComponent*)target)->OnEndOfFrameUpdateDuringTick();	
	}
	void uapi_UActorComponent_OnPreEndOfFrameSync(void* target){	
		((UActorComponent*)target)->OnPreEndOfFrameSync();	
	}
	void uapi_UActorComponent_OnRep_IsActive(void* target){	
		((UActorComponent*)target)->OnRep_IsActive();	
	}
	void uapi_UActorComponent_PostApplyToComponent(void* target){	
		((UActorComponent*)target)->PostApplyToComponent();	
	}
	void uapi_UActorComponent_PostEditUndo(void* target){	
		((UActorComponent*)target)->PostEditUndo();	
	}
	void uapi_UActorComponent_PostInitProperties(void* target){	
		((UActorComponent*)target)->PostInitProperties();	
	}
	void uapi_UActorComponent_PostLoad(void* target){	
		((UActorComponent*)target)->PostLoad();	
	}
	void uapi_UActorComponent_PostRename(void* target, UObject* OldOuter, UName OldName){	
		((UActorComponent*)target)->PostRename(OldOuter, ToFName(OldName));	
	}
	void uapi_UActorComponent_PreEditChange(void* target, FProperty* PropertyThatWillChange){	
		((UActorComponent*)target)->PreEditChange(PropertyThatWillChange);	
	}
	void uapi_UActorComponent_PreEditUndo(void* target){	
		((UActorComponent*)target)->PreEditUndo();	
	}
	void uapi_UActorComponent_ReadyForReplication(void* target){	
		((UActorComponent*)target)->ReadyForReplication();	
	}
	void uapi_UActorComponent_ReceiveAsyncPhysicsTick(void* target, float DeltaSeconds, float SimSeconds){	
		((UActorComponent*)target)->ReceiveAsyncPhysicsTick(DeltaSeconds, SimSeconds);	
	}
	void uapi_UActorComponent_ReceiveBeginPlay(void* target){	
		((UActorComponent*)target)->ReceiveBeginPlay();	
	}
	void uapi_UActorComponent_ReceiveTick(void* target, float DeltaSeconds){	
		((UActorComponent*)target)->ReceiveTick(DeltaSeconds);	
	}
	void uapi_UActorComponent_RecreatePhysicsState(void* target){	
		((UActorComponent*)target)->RecreatePhysicsState();	
	}
	void uapi_UActorComponent_RecreateRenderState_Concurrent(void* target){	
		((UActorComponent*)target)->RecreateRenderState_Concurrent();	
	}
	void uapi_UActorComponent_RegisterAllComponentTickFunctions(void* target, bool bRegister){	
		((UActorComponent*)target)->RegisterAllComponentTickFunctions(bRegister);	
	}
	void uapi_UActorComponent_RegisterComponent(void* target){	
		((UActorComponent*)target)->RegisterComponent();	
	}
	void uapi_UActorComponent_RegisterComponentWithWorld(void* target, UWorld* InWorld, FRegisterComponentContext* Context){	
		((UActorComponent*)target)->RegisterComponentWithWorld(InWorld, Context);	
	}
	void uapi_UActorComponent_RemoveReplicatedSubObject(void* target, UObject* SubObject){	
		((UActorComponent*)target)->RemoveReplicatedSubObject(SubObject);	
	}
	void uapi_UActorComponent_RemoveTickPrerequisiteActor(void* target, AActor* PrerequisiteActor){	
		((UActorComponent*)target)->RemoveTickPrerequisiteActor(PrerequisiteActor);	
	}
	void uapi_UActorComponent_RemoveTickPrerequisiteComponent(void* target, UActorComponent* PrerequisiteComponent){	
		((UActorComponent*)target)->RemoveTickPrerequisiteComponent(PrerequisiteComponent);	
	}
	bool uapi_UActorComponent_ReplicateSubobjects(void* target, UActorChannel* Channel, FOutBunch* Bunch, FReplicationFlags* RepFlags){	
		auto result = ((UActorComponent*)target)->ReplicateSubobjects(Channel, Bunch, RepFlags);	
		return result;	
	}
	bool uapi_UActorComponent_RequiresGameThreadEndOfFrameRecreate(void* target){	
		auto result = ((UActorComponent*)target)->RequiresGameThreadEndOfFrameRecreate();	
		return result;	
	}
	bool uapi_UActorComponent_RequiresGameThreadEndOfFrameUpdates(void* target){	
		auto result = ((UActorComponent*)target)->RequiresGameThreadEndOfFrameUpdates();	
		return result;	
	}
	bool uapi_UActorComponent_RequiresPreEndOfFrameSync(void* target){	
		auto result = ((UActorComponent*)target)->RequiresPreEndOfFrameSync();	
		return result;	
	}
	void uapi_UActorComponent_ReregisterComponent(void* target){	
		((UActorComponent*)target)->ReregisterComponent();	
	}
	void uapi_UActorComponent_SetActive(void* target, bool bNewActive, bool bReset){	
		((UActorComponent*)target)->SetActive(bNewActive, bReset);	
	}
	void uapi_UActorComponent_SetActiveFlag(void* target, bool bNewIsActive){	
		((UActorComponent*)target)->SetActiveFlag(bNewIsActive);	
	}
	void uapi_UActorComponent_SetAutoActivate(void* target, bool bNewAutoActivate){	
		((UActorComponent*)target)->SetAutoActivate(bNewAutoActivate);	
	}
	void uapi_UActorComponent_SetCanEverAffectNavigation(void* target, bool bRelevant){	
		((UActorComponent*)target)->SetCanEverAffectNavigation(bRelevant);	
	}
	void uapi_UActorComponent_SetComponentTickEnabled(void* target, bool bEnabled){	
		((UActorComponent*)target)->SetComponentTickEnabled(bEnabled);	
	}
	void uapi_UActorComponent_SetComponentTickEnabledAsync(void* target, bool bEnabled){	
		((UActorComponent*)target)->SetComponentTickEnabledAsync(bEnabled);	
	}
	void uapi_UActorComponent_SetComponentTickInterval(void* target, float TickInterval){	
		((UActorComponent*)target)->SetComponentTickInterval(TickInterval);	
	}
	void uapi_UActorComponent_SetComponentTickIntervalAndCooldown(void* target, float TickInterval){	
		((UActorComponent*)target)->SetComponentTickIntervalAndCooldown(TickInterval);	
	}
	void uapi_UActorComponent_SetIsNetStartupComponent(void* target, bool bInIsNetStartupComponent){	
		((UActorComponent*)target)->SetIsNetStartupComponent(bInIsNetStartupComponent);	
	}
	void uapi_UActorComponent_SetIsReplicated(void* target, bool ShouldReplicate){	
		((UActorComponent*)target)->SetIsReplicated(ShouldReplicate);	
	}
	void uapi_UActorComponent_SetIsVisualizationComponent(void* target, bool bInIsVisualizationComponent){	
		((UActorComponent*)target)->SetIsVisualizationComponent(bInIsVisualizationComponent);	
	}
	void uapi_UActorComponent_SetNetAddressable(void* target){	
		((UActorComponent*)target)->SetNetAddressable();	
	}
	void uapi_UActorComponent_SetPackageExternal(void* target, bool bExternal, bool bShouldDirty){	
		((UActorComponent*)target)->SetPackageExternal(bExternal, bShouldDirty);	
	}
	void uapi_UActorComponent_SetTickableWhenPaused(void* target, bool bTickableWhenPaused){	
		((UActorComponent*)target)->SetTickableWhenPaused(bTickableWhenPaused);	
	}
	bool uapi_UActorComponent_SetupActorComponentTickFunction(void* target, FTickFunction* TickFunction){	
		auto result = ((UActorComponent*)target)->SetupActorComponentTickFunction(TickFunction);	
		return result;	
	}
	void uapi_UActorComponent_ToggleActive(void* target){	
		((UActorComponent*)target)->ToggleActive();	
	}
	void uapi_UActorComponent_UninitializeComponent(void* target){	
		((UActorComponent*)target)->UninitializeComponent();	
	}
	void uapi_UActorComponent_UnregisterComponent(void* target){	
		((UActorComponent*)target)->UnregisterComponent();	
	}
	void uapi_UWorld_AddController(void* target, AController* Controller){	
		((UWorld*)target)->AddController(Controller);	
	}
	bool uapi_UWorld_AddLevel(void* target, ULevel* InLevel){	
		auto result = ((UWorld*)target)->AddLevel(InLevel);	
		return result;	
	}
	void uapi_UWorld_AddNetworkActor(void* target, AActor* Actor){	
		((UWorld*)target)->AddNetworkActor(Actor);	
	}
	void uapi_UWorld_AddParameterCollectionInstance(void* target, UMaterialParameterCollection* Collection, bool bUpdateScene){	
		((UWorld*)target)->AddParameterCollectionInstance(Collection, bUpdateScene);	
	}
	void uapi_UWorld_AddPhysicsVolume(void* target, APhysicsVolume* Volume){	
		((UWorld*)target)->AddPhysicsVolume(Volume);	
	}
	void uapi_UWorld_AddPostProcessingSettings(void* target, Vector3 ViewLocation, FSceneView* SceneView){	
		((UWorld*)target)->AddPostProcessingSettings(ToFVector(ViewLocation), SceneView);	
	}
	void uapi_UWorld_AddStreamingLevel(void* target, ULevelStreaming* StreamingLevelToAdd){	
		((UWorld*)target)->AddStreamingLevel(StreamingLevelToAdd);	
	}
	void uapi_UWorld_AddUniqueStreamingLevel(void* target, ULevelStreaming* StreamingLevelToAdd){	
		((UWorld*)target)->AddUniqueStreamingLevel(StreamingLevelToAdd);	
	}
	bool uapi_UWorld_AllowAudioPlayback(void* target){	
		auto result = ((UWorld*)target)->AllowAudioPlayback();	
		return result;	
	}
	bool uapi_UWorld_AllowLevelLoadRequests(void* target){	
		auto result = ((UWorld*)target)->AllowLevelLoadRequests();	
		return result;	
	}
	bool uapi_UWorld_AreActorsInitialized(void* target){	
		auto result = ((UWorld*)target)->AreActorsInitialized();	
		return result;	
	}
	bool uapi_UWorld_AreAlwaysLoadedLevelsLoaded(void* target){	
		auto result = ((UWorld*)target)->AreAlwaysLoadedLevelsLoaded();	
		return result;	
	}
	void uapi_UWorld_AsyncLoadAlwaysLoadedLevelsForSeamlessTravel(void* target){	
		((UWorld*)target)->AsyncLoadAlwaysLoadedLevelsForSeamlessTravel();	
	}
	void uapi_UWorld_BeginDestroy(void* target){	
		((UWorld*)target)->BeginDestroy();	
	}
	void uapi_UWorld_BeginPlay(void* target){	
		((UWorld*)target)->BeginPlay();	
	}
	void uapi_UWorld_BeginTearingDown(void* target){	
		((UWorld*)target)->BeginTearingDown();	
	}
	void uapi_UWorld_BlockTillLevelStreamingCompleted(void* target){	
		((UWorld*)target)->BlockTillLevelStreamingCompleted();	
	}
	void uapi_UWorld_BroadcastLevelsChanged(void* target){	
		((UWorld*)target)->BroadcastLevelsChanged();	
	}
	const char* uapi_UWorld_BuildPIEPackagePrefix(int32 PIEInstanceID){	
		auto result = FString2Utf8((UWorld::BuildPIEPackagePrefix(PIEInstanceID)));	
		return result;	
	}
	void uapi_UWorld_CancelPendingMapChange(void* target){	
		((UWorld*)target)->CancelPendingMapChange();	
	}
	void uapi_UWorld_CleanupActors(void* target){	
		((UWorld*)target)->CleanupActors();	
	}
	void uapi_UWorld_CleanupWorld(void* target, bool bSessionEnded, bool bCleanupResources, UWorld* NewWorld){	
		((UWorld*)target)->CleanupWorld(bSessionEnded, bCleanupResources, NewWorld);	
	}
	void uapi_UWorld_ClearActorComponentEndOfFrameUpdate(void* target, UActorComponent* Component){	
		((UWorld*)target)->ClearActorComponentEndOfFrameUpdate(Component);	
	}
	void uapi_UWorld_ClearDemoNetDriver(void* target){	
		((UWorld*)target)->ClearDemoNetDriver();	
	}
	void uapi_UWorld_ClearNetDriver(void* target, UNetDriver* Driver){	
		((UWorld*)target)->ClearNetDriver(Driver);	
	}
	void uapi_UWorld_ClearStreamingLevels(void* target){	
		((UWorld*)target)->ClearStreamingLevels();	
	}
	void uapi_UWorld_ClearWorldComponents(void* target){	
		((UWorld*)target)->ClearWorldComponents();	
	}
	void uapi_UWorld_CommitMapChange(void* target){	
		((UWorld*)target)->CommitMapChange();	
	}
	void uapi_UWorld_CommitModelSurfaces(void* target){	
		((UWorld*)target)->CommitModelSurfaces();	
	}
	void uapi_UWorld_ConditionallyBuildStreamingData(void* target){	
		((UWorld*)target)->ConditionallyBuildStreamingData();	
	}
	bool uapi_UWorld_ContainsActor(void* target, AActor* Actor){	
		auto result = ((UWorld*)target)->ContainsActor(Actor);	
		return result;	
	}
	bool uapi_UWorld_ContainsLevel(void* target, ULevel* InLevel){	
		auto result = ((UWorld*)target)->ContainsLevel(InLevel);	
		return result;	
	}
	void uapi_UWorld_CopyGameState(void* target, AGameModeBase* FromGameMode, AGameStateBase* FromGameState){	
		((UWorld*)target)->CopyGameState(FromGameMode, FromGameState);	
	}
	void* uapi_UWorld_CreateAISystem(void* target){	
		auto result = (void*)((UWorld*)target)->CreateAISystem();	
		return result;	
	}
	void uapi_UWorld_CreateFXSystem(void* target){	
		((UWorld*)target)->CreateFXSystem();	
	}
	void uapi_UWorld_CreatePhysicsScene(void* target, AWorldSettings* Settings){	
		((UWorld*)target)->CreatePhysicsScene(Settings);	
	}
	void uapi_UWorld_DeSelectLevel(void* target, ULevel* InLevel){	
		((UWorld*)target)->DeSelectLevel(InLevel);	
	}
	void uapi_UWorld_DelayStreamingVolumeUpdates(void* target, int32 InFrameDelay){	
		((UWorld*)target)->DelayStreamingVolumeUpdates(InFrameDelay);	
	}
	bool uapi_UWorld_DestroyActor(void* target, AActor* Actor, bool bNetForce, bool bShouldModifyLevel){	
		auto result = ((UWorld*)target)->DestroyActor(Actor, bNetForce, bShouldModifyLevel);	
		return result;	
	}
	void uapi_UWorld_DestroyDemoNetDriver(void* target){	
		((UWorld*)target)->DestroyDemoNetDriver();	
	}
	bool uapi_UWorld_DestroySwappedPC(void* target, UNetConnection* Connection){	
		auto result = ((UWorld*)target)->DestroySwappedPC(Connection);	
		return result;	
	}
	void uapi_UWorld_DestroyWorld(void* target, bool bInformEngineOfWorld, UWorld* NewWorld){	
		((UWorld*)target)->DestroyWorld(bInformEngineOfWorld, NewWorld);	
	}
	void uapi_UWorld_DuplicateRequestedLevels(void* target, UName MapName){	
		((UWorld*)target)->DuplicateRequestedLevels(ToFName(MapName));	
	}
	bool uapi_UWorld_EditorDestroyActor(void* target, AActor* Actor, bool bShouldModifyLevel){	
		auto result = ((UWorld*)target)->EditorDestroyActor(Actor, bShouldModifyLevel);	
		return result;	
	}
	void uapi_UWorld_EnsureCollisionTreeIsBuilt(void* target){	
		((UWorld*)target)->EnsureCollisionTreeIsBuilt();	
	}
	void* uapi_UWorld_FindWorldInPackage(UPackage* Package){	
		auto result = (void*)(UWorld::FindWorldInPackage(Package));	
		return result;	
	}
	void uapi_UWorld_FinishDestroy(void* target){	
		((UWorld*)target)->FinishDestroy();	
	}
	void uapi_UWorld_FinishPhysicsSim(void* target){	
		((UWorld*)target)->FinishPhysicsSim();	
	}
	void uapi_UWorld_FlushDeferredParameterCollectionInstanceUpdates(void* target){	
		((UWorld*)target)->FlushDeferredParameterCollectionInstanceUpdates();	
	}
	void* uapi_UWorld_GetAISystem(void* target){	
		auto result = (void*)((UWorld*)target)->GetAISystem();	
		return result;	
	}
	void* uapi_UWorld_GetActiveLevelCollection(void* target){	
		auto result = (void*)((UWorld*)target)->GetActiveLevelCollection();	
		return result;	
	}
	int32 uapi_UWorld_GetActiveLevelCollectionIndex(void* target){	
		auto result = ((UWorld*)target)->GetActiveLevelCollectionIndex();	
		return result;	
	}
	void* uapi_UWorld_GetActiveLightingScenario(void* target){	
		auto result = (void*)((UWorld*)target)->GetActiveLightingScenario();	
		return result;	
	}
	int32 uapi_UWorld_GetActorCount(void* target){	
		auto result = ((UWorld*)target)->GetActorCount();	
		return result;	
	}
	const char* uapi_UWorld_GetAddressURL(void* target){	
		auto result = FString2Utf8(((UWorld*)target)->GetAddressURL());	
		return result;	
	}
	bool uapi_UWorld_GetAllowDeferredPhysicsStateCreation(void* target){	
		auto result = ((UWorld*)target)->GetAllowDeferredPhysicsStateCreation();	
		return result;	
	}
	void* uapi_UWorld_GetAudioDeviceRaw(void* target){	
		auto result = (void*)((UWorld*)target)->GetAudioDeviceRaw();	
		return result;	
	}
	double uapi_UWorld_GetAudioTimeSeconds(void* target){	
		auto result = ((UWorld*)target)->GetAudioTimeSeconds();	
		return result;	
	}
	void* uapi_UWorld_GetAvoidanceManager(void* target){	
		auto result = (void*)((UWorld*)target)->GetAvoidanceManager();	
		return result;	
	}
	int32 uapi_UWorld_GetBlockTillLevelStreamingCompletedEpoch(void* target){	
		auto result = ((UWorld*)target)->GetBlockTillLevelStreamingCompletedEpoch();	
		return result;	
	}
	void* uapi_UWorld_GetCanvasForDrawMaterialToRenderTarget(void* target){	
		auto result = (void*)((UWorld*)target)->GetCanvasForDrawMaterialToRenderTarget();	
		return result;	
	}
	void* uapi_UWorld_GetCanvasForRenderingToTarget(void* target){	
		auto result = (void*)((UWorld*)target)->GetCanvasForRenderingToTarget();	
		return result;	
	}
	void* uapi_UWorld_GetCurrentLevel(void* target){	
		auto result = (void*)((UWorld*)target)->GetCurrentLevel();	
		return result;	
	}
	void* uapi_UWorld_GetCurrentLevelPendingInvisibility(void* target){	
		auto result = (void*)((UWorld*)target)->GetCurrentLevelPendingInvisibility();	
		return result;	
	}
	void* uapi_UWorld_GetCurrentLevelPendingVisibility(void* target){	
		auto result = (void*)((UWorld*)target)->GetCurrentLevelPendingVisibility();	
		return result;	
	}
	const char* uapi_UWorld_GetDebugDisplayName(void* target){	
		auto result = FString2Utf8(((UWorld*)target)->GetDebugDisplayName());	
		return result;	
	}
	void* uapi_UWorld_GetDefaultBrush(void* target){	
		auto result = (void*)((UWorld*)target)->GetDefaultBrush();	
		return result;	
	}
	float uapi_UWorld_GetDefaultGravityZ(void* target){	
		auto result = ((UWorld*)target)->GetDefaultGravityZ();	
		return result;	
	}
	void* uapi_UWorld_GetDefaultPhysicsVolume(void* target){	
		auto result = (void*)((UWorld*)target)->GetDefaultPhysicsVolume();	
		return result;	
	}
	float uapi_UWorld_GetDeltaSeconds(void* target){	
		auto result = ((UWorld*)target)->GetDeltaSeconds();	
		return result;	
	}
	void* uapi_UWorld_GetDemoNetDriver(void* target){	
		auto result = (void*)((UWorld*)target)->GetDemoNetDriver();	
		return result;	
	}
	int32 uapi_UWorld_GetDetailMode(void* target){	
		auto result = ((UWorld*)target)->GetDetailMode();	
		return result;	
	}
	void* uapi_UWorld_GetDuplicatedWorldForPIE(UWorld* InWorld, UPackage* InPIEackage, int32 PIEInstanceID){	
		auto result = (void*)(UWorld::GetDuplicatedWorldForPIE(InWorld, InPIEackage, PIEInstanceID));	
		return result;	
	}
	void* uapi_UWorld_GetFirstLocalPlayerFromController(void* target){	
		auto result = (void*)((UWorld*)target)->GetFirstLocalPlayerFromController();	
		return result;	
	}
	void* uapi_UWorld_GetFirstPlayerController(void* target){	
		auto result = (void*)((UWorld*)target)->GetFirstPlayerController();	
		return result;	
	}
	void* uapi_UWorld_GetGameInstance(void* target){	
		auto result = (void*)((UWorld*)target)->GetGameInstance();	
		return result;	
	}
	void* uapi_UWorld_GetGameState(void* target){	
		auto result = (void*)((UWorld*)target)->GetGameState();	
		return result;	
	}
	void* uapi_UWorld_GetGameViewport(void* target){	
		auto result = (void*)((UWorld*)target)->GetGameViewport();	
		return result;	
	}
	float uapi_UWorld_GetGravityZ(void* target){	
		auto result = ((UWorld*)target)->GetGravityZ();	
		return result;	
	}
	bool uapi_UWorld_GetIsInBlockTillLevelStreamingCompleted(void* target){	
		auto result = ((UWorld*)target)->GetIsInBlockTillLevelStreamingCompleted();	
		return result;	
	}
	void* uapi_UWorld_GetLevel(void* target, int32 InLevelIndex){	
		auto result = (void*)((UWorld*)target)->GetLevel(InLevelIndex);	
		return result;	
	}
	void* uapi_UWorld_GetLevelScriptActor(void* target, ULevel* OwnerLevel){	
		auto result = (void*)((UWorld*)target)->GetLevelScriptActor(OwnerLevel);	
		return result;	
	}
	void* uapi_UWorld_GetLevelStreamingForPackageName(void* target, UName PackageName){	
		auto result = (void*)((UWorld*)target)->GetLevelStreamingForPackageName(ToFName(PackageName));	
		return result;	
	}
	const char* uapi_UWorld_GetLocalURL(void* target){	
		auto result = FString2Utf8(((UWorld*)target)->GetLocalURL());	
		return result;	
	}
	const char* uapi_UWorld_GetMapName(void* target){	
		auto result = FString2Utf8(((UWorld*)target)->GetMapName());	
		return result;	
	}
	void* uapi_UWorld_GetNetDriver(void* target){	
		auto result = (void*)((UWorld*)target)->GetNetDriver();	
		return result;	
	}
	int32 uapi_UWorld_GetNonDefaultPhysicsVolumeCount(void* target){	
		auto result = ((UWorld*)target)->GetNonDefaultPhysicsVolumeCount();	
		return result;	
	}
	int32 uapi_UWorld_GetNumControllers(void* target){	
		auto result = ((UWorld*)target)->GetNumControllers();	
		return result;	
	}
	int32 uapi_UWorld_GetNumLevels(void* target){	
		auto result = ((UWorld*)target)->GetNumLevels();	
		return result;	
	}
	int32 uapi_UWorld_GetNumPlayerControllers(void* target){	
		auto result = ((UWorld*)target)->GetNumPlayerControllers();	
		return result;	
	}
	int32 uapi_UWorld_GetNumSelectedLevels(void* target){	
		auto result = ((UWorld*)target)->GetNumSelectedLevels();	
		return result;	
	}
	void* uapi_UWorld_GetParameterCollectionInstance(void* target, UMaterialParameterCollection* Collection){	
		auto result = (void*)((UWorld*)target)->GetParameterCollectionInstance(Collection);	
		return result;	
	}
	void* uapi_UWorld_GetPhysicsScene(void* target){	
		auto result = (void*)((UWorld*)target)->GetPhysicsScene();	
		return result;	
	}
	int32 uapi_UWorld_GetProgressDenominator(void* target){	
		auto result = ((UWorld*)target)->GetProgressDenominator();	
		return result;	
	}
	double uapi_UWorld_GetRealTimeSeconds(void* target){	
		auto result = ((UWorld*)target)->GetRealTimeSeconds();	
		return result;	
	}
	void* uapi_UWorld_GetSelectedLevel(void* target, int32 InLevelIndex){	
		auto result = (void*)((UWorld*)target)->GetSelectedLevel(InLevelIndex);	
		return result;	
	}
	void* uapi_UWorld_GetServerStreamingLevelsVisibility(void* target){	
		auto result = (void*)((UWorld*)target)->GetServerStreamingLevelsVisibility();	
		return result;	
	}
	bool uapi_UWorld_GetShouldForceUnloadStreamingLevels(void* target){	
		auto result = ((UWorld*)target)->GetShouldForceUnloadStreamingLevels();	
		return result;	
	}
	bool uapi_UWorld_GetShouldForceVisibleStreamingLevels(void* target){	
		auto result = ((UWorld*)target)->GetShouldForceVisibleStreamingLevels();	
		return result;	
	}
	double uapi_UWorld_GetTimeSeconds(void* target){	
		auto result = ((UWorld*)target)->GetTimeSeconds();	
		return result;	
	}
	double uapi_UWorld_GetUnpausedTimeSeconds(void* target){	
		auto result = ((UWorld*)target)->GetUnpausedTimeSeconds();	
		return result;	
	}
	void* uapi_UWorld_GetWorld(void* target){	
		auto result = (void*)((UWorld*)target)->GetWorld();	
		return result;	
	}
	void* uapi_UWorld_GetWorldPartition(void* target){	
		auto result = (void*)((UWorld*)target)->GetWorldPartition();	
		return result;	
	}
	void* uapi_UWorld_GetWorldSettings(void* target, bool bCheckStreamingPersistent, bool bChecked){	
		auto result = (void*)((UWorld*)target)->GetWorldSettings(bCheckStreamingPersistent, bChecked);	
		return result;	
	}
	void uapi_UWorld_HandleTimelineScrubbed(void* target){	
		((UWorld*)target)->HandleTimelineScrubbed();	
	}
	bool uapi_UWorld_HasBegunPlay(void* target){	
		auto result = ((UWorld*)target)->HasBegunPlay();	
		return result;	
	}
	bool uapi_UWorld_HasDefaultPhysicsVolume(void* target){	
		auto result = ((UWorld*)target)->HasDefaultPhysicsVolume();	
		return result;	
	}
	bool uapi_UWorld_HasEndOfFrameUpdates(void* target){	
		auto result = ((UWorld*)target)->HasEndOfFrameUpdates();	
		return result;	
	}
	bool uapi_UWorld_HasEverBeenInitialized(void* target){	
		auto result = ((UWorld*)target)->HasEverBeenInitialized();	
		return result;	
	}
	bool uapi_UWorld_HasMarkedObjectsPendingKill(void* target){	
		auto result = ((UWorld*)target)->HasMarkedObjectsPendingKill();	
		return result;	
	}
	bool uapi_UWorld_HasStreamingLevelsToConsider(void* target){	
		auto result = ((UWorld*)target)->HasStreamingLevelsToConsider();	
		return result;	
	}
	void uapi_UWorld_InitializeSubsystems(void* target){	
		((UWorld*)target)->InitializeSubsystems();	
	}
	void uapi_UWorld_InsertPostProcessVolume(void* target, IInterface_PostProcessVolume* InVolume){	
		((UWorld*)target)->InsertPostProcessVolume(InVolume);	
	}
	void uapi_UWorld_InvalidateAllSkyCaptures(void* target){	
		((UWorld*)target)->InvalidateAllSkyCaptures();	
	}
	void uapi_UWorld_InvalidateModelGeometry(void* target, ULevel* InLevel){	
		((UWorld*)target)->InvalidateModelGeometry(InLevel);	
	}
	void uapi_UWorld_InvalidateModelSurface(void* target, bool bCurrentLevelOnly){	
		((UWorld*)target)->InvalidateModelSurface(bCurrentLevelOnly);	
	}
	bool uapi_UWorld_IsCameraMoveable(void* target){	
		auto result = ((UWorld*)target)->IsCameraMoveable();	
		return result;	
	}
	bool uapi_UWorld_IsEditorWorld(void* target){	
		auto result = ((UWorld*)target)->IsEditorWorld();	
		return result;	
	}
	bool uapi_UWorld_IsGameWorld(void* target){	
		auto result = ((UWorld*)target)->IsGameWorld();	
		return result;	
	}
	bool uapi_UWorld_IsInSeamlessTravel(void* target){	
		auto result = ((UWorld*)target)->IsInSeamlessTravel();	
		return result;	
	}
	bool uapi_UWorld_IsInitialized(void* target){	
		auto result = ((UWorld*)target)->IsInitialized();	
		return result;	
	}
	bool uapi_UWorld_IsInstanced(void* target){	
		auto result = ((UWorld*)target)->IsInstanced();	
		return result;	
	}
	bool uapi_UWorld_IsLevelSelected(void* target, ULevel* InLevel){	
		auto result = ((UWorld*)target)->IsLevelSelected(InLevel);	
		return result;	
	}
	bool uapi_UWorld_IsMapChangeReady(void* target){	
		auto result = ((UWorld*)target)->IsMapChangeReady();	
		return result;	
	}
	bool uapi_UWorld_IsMovieSceneSequenceTickHandlerBound(void* target){	
		auto result = ((UWorld*)target)->IsMovieSceneSequenceTickHandlerBound();	
		return result;	
	}
	bool uapi_UWorld_IsNameStableForNetworking(void* target){	
		auto result = ((UWorld*)target)->IsNameStableForNetworking();	
		return result;	
	}
	bool uapi_UWorld_IsNavigationRebuilt(void* target){	
		auto result = ((UWorld*)target)->IsNavigationRebuilt();	
		return result;	
	}
	bool uapi_UWorld_IsPartitionedWorld(void* target){	
		auto result = ((UWorld*)target)->IsPartitionedWorld();	
		return result;	
	}
	bool uapi_UWorld_IsPartitionedWorld2(UWorld* InWorld){	
		auto result = (UWorld::IsPartitionedWorld(InWorld));	
		return result;	
	}
	bool uapi_UWorld_IsPaused(void* target){	
		auto result = ((UWorld*)target)->IsPaused();	
		return result;	
	}
	bool uapi_UWorld_IsPlayInEditor(void* target){	
		auto result = ((UWorld*)target)->IsPlayInEditor();	
		return result;	
	}
	bool uapi_UWorld_IsPlayInMobilePreview(void* target){	
		auto result = ((UWorld*)target)->IsPlayInMobilePreview();	
		return result;	
	}
	bool uapi_UWorld_IsPlayInPreview(void* target){	
		auto result = ((UWorld*)target)->IsPlayInPreview();	
		return result;	
	}
	bool uapi_UWorld_IsPlayInVulkanPreview(void* target){	
		auto result = ((UWorld*)target)->IsPlayInVulkanPreview();	
		return result;	
	}
	bool uapi_UWorld_IsPlayingClientReplay(void* target){	
		auto result = ((UWorld*)target)->IsPlayingClientReplay();	
		return result;	
	}
	bool uapi_UWorld_IsPlayingReplay(void* target){	
		auto result = ((UWorld*)target)->IsPlayingReplay();	
		return result;	
	}
	bool uapi_UWorld_IsPreparingMapChange(void* target){	
		auto result = ((UWorld*)target)->IsPreparingMapChange();	
		return result;	
	}
	bool uapi_UWorld_IsPreviewWorld(void* target){	
		auto result = ((UWorld*)target)->IsPreviewWorld();	
		return result;	
	}
	bool uapi_UWorld_IsReadyForFinishDestroy(void* target){	
		auto result = ((UWorld*)target)->IsReadyForFinishDestroy();	
		return result;	
	}
	bool uapi_UWorld_IsRecordingClientReplay(void* target){	
		auto result = ((UWorld*)target)->IsRecordingClientReplay();	
		return result;	
	}
	bool uapi_UWorld_IsRecordingReplay(void* target){	
		auto result = ((UWorld*)target)->IsRecordingReplay();	
		return result;	
	}
	bool uapi_UWorld_IsRefreshingStreamingLevels(void* target){	
		auto result = ((UWorld*)target)->IsRefreshingStreamingLevels();	
		return result;	
	}
	bool uapi_UWorld_IsStreamingLevelBeingConsidered(void* target, ULevelStreaming* StreamingLevel){	
		auto result = ((UWorld*)target)->IsStreamingLevelBeingConsidered(StreamingLevel);	
		return result;	
	}
	bool uapi_UWorld_IsVisibilityRequestPending(void* target){	
		auto result = ((UWorld*)target)->IsVisibilityRequestPending();	
		return result;	
	}
	bool uapi_UWorld_IsWorldOrExternalActorPackage(UPackage* Package){	
		auto result = (UWorld::IsWorldOrExternalActorPackage(Package));	
		return result;	
	}
	void uapi_UWorld_IssueEditorLoadWarnings(void* target){	
		((UWorld*)target)->IssueEditorLoadWarnings();	
	}
	void* uapi_UWorld_K2_GetWorldSettings(void* target){	
		auto result = (void*)((UWorld*)target)->K2_GetWorldSettings();	
		return result;	
	}
	void uapi_UWorld_MarkActorComponentForNeededEndOfFrameUpdate(void* target, UActorComponent* Component, bool bForceGameThread){	
		((UWorld*)target)->MarkActorComponentForNeededEndOfFrameUpdate(Component, bForceGameThread);	
	}
	void uapi_UWorld_MarkObjectsPendingKill(void* target){	
		((UWorld*)target)->MarkObjectsPendingKill();	
	}
	void uapi_UWorld_ModifyLevel(void* target, ULevel* Level){	
		((UWorld*)target)->ModifyLevel(Level);	
	}
	void uapi_UWorld_NotifyAcceptedConnection(void* target, UNetConnection* Connection){	
		((UWorld*)target)->NotifyAcceptedConnection(Connection);	
	}
	bool uapi_UWorld_NotifyAcceptingChannel(void* target, UChannel* Channel){	
		auto result = ((UWorld*)target)->NotifyAcceptingChannel(Channel);	
		return result;	
	}
	void uapi_UWorld_NotifyOfBlueprintDebuggingAssociation(void* target, UBlueprint* Blueprint, UObject* DebugObject){	
		((UWorld*)target)->NotifyOfBlueprintDebuggingAssociation(Blueprint, DebugObject);	
	}
	void uapi_UWorld_PopulateStreamingLevelsToConsider(void* target){	
		((UWorld*)target)->PopulateStreamingLevelsToConsider();	
	}
	void uapi_UWorld_PostDuplicate(void* target, bool bDuplicateForPIE){	
		((UWorld*)target)->PostDuplicate(bDuplicateForPIE);	
	}
	void uapi_UWorld_PostInitializeSubsystems(void* target){	
		((UWorld*)target)->PostInitializeSubsystems();	
	}
	void uapi_UWorld_PostLoad(void* target){	
		((UWorld*)target)->PostLoad();	
	}
	void uapi_UWorld_PropagateLightingScenarioChange(void* target){	
		((UWorld*)target)->PropagateLightingScenarioChange();	
	}
	void uapi_UWorld_RefreshStreamingLevels(void* target){	
		((UWorld*)target)->RefreshStreamingLevels();	
	}
	void uapi_UWorld_RegisterAutoActivateCamera(void* target, ACameraActor* CameraActor, int32 PlayerIndex){	
		((UWorld*)target)->RegisterAutoActivateCamera(CameraActor, PlayerIndex);	
	}
	void uapi_UWorld_ReleasePhysicsScene(void* target){	
		((UWorld*)target)->ReleasePhysicsScene();	
	}
	void uapi_UWorld_RemoveActor(void* target, AActor* Actor, bool bShouldModifyLevel){	
		((UWorld*)target)->RemoveActor(Actor, bShouldModifyLevel);	
	}
	void uapi_UWorld_RemoveController(void* target, AController* Controller){	
		((UWorld*)target)->RemoveController(Controller);	
	}
	bool uapi_UWorld_RemoveLevel(void* target, ULevel* InLevel){	
		auto result = ((UWorld*)target)->RemoveLevel(InLevel);	
		return result;	
	}
	void uapi_UWorld_RemoveNetworkActor(void* target, AActor* Actor){	
		((UWorld*)target)->RemoveNetworkActor(Actor);	
	}
	void uapi_UWorld_RemovePhysicsVolume(void* target, APhysicsVolume* Volume){	
		((UWorld*)target)->RemovePhysicsVolume(Volume);	
	}
	void uapi_UWorld_RemovePostProcessVolume(void* target, IInterface_PostProcessVolume* InVolume){	
		((UWorld*)target)->RemovePostProcessVolume(InVolume);	
	}
	bool uapi_UWorld_RemoveStreamingLevel(void* target, ULevelStreaming* StreamingLevelToRemove){	
		auto result = ((UWorld*)target)->RemoveStreamingLevel(StreamingLevelToRemove);	
		return result;	
	}
	bool uapi_UWorld_RemoveStreamingLevelAt(void* target, int32 IndexToRemove){	
		auto result = ((UWorld*)target)->RemoveStreamingLevelAt(IndexToRemove);	
		return result;	
	}
	void uapi_UWorld_RenameToPIEWorld(void* target, int32 PIEInstanceID){	
		((UWorld*)target)->RenameToPIEWorld(PIEInstanceID);	
	}
	bool uapi_UWorld_RequiresHitProxies(void* target){	
		auto result = ((UWorld*)target)->RequiresHitProxies();	
		return result;	
	}
	void uapi_UWorld_SelectLevel(void* target, ULevel* InLevel){	
		((UWorld*)target)->SelectLevel(InLevel);	
	}
	void uapi_UWorld_SendAllEndOfFrameUpdates(void* target){	
		((UWorld*)target)->SendAllEndOfFrameUpdates();	
	}
	void uapi_UWorld_SetActiveLevelCollection(void* target, int32 LevelCollectionIndex){	
		((UWorld*)target)->SetActiveLevelCollection(LevelCollectionIndex);	
	}
	void uapi_UWorld_SetAllowDeferredPhysicsStateCreation(void* target, bool bAllow){	
		((UWorld*)target)->SetAllowDeferredPhysicsStateCreation(bAllow);	
	}
	bool uapi_UWorld_SetCurrentLevel(void* target, ULevel* InLevel){	
		auto result = ((UWorld*)target)->SetCurrentLevel(InLevel);	
		return result;	
	}
	void uapi_UWorld_SetDemoNetDriver(void* target, UDemoNetDriver* InDemoNetDriver){	
		((UWorld*)target)->SetDemoNetDriver(InDemoNetDriver);	
	}
	void uapi_UWorld_SetGameInstance(void* target, UGameInstance* NewGI){	
		((UWorld*)target)->SetGameInstance(NewGI);	
	}
	void uapi_UWorld_SetGameState(void* target, AGameStateBase* NewGameState){	
		((UWorld*)target)->SetGameState(NewGameState);	
	}
	void uapi_UWorld_SetMapNeedsLightingFullyRebuilt(void* target, int32 InNumLightingUnbuiltObjects, int32 InNumUnbuiltReflectionCaptures){	
		((UWorld*)target)->SetMapNeedsLightingFullyRebuilt(InNumLightingUnbuiltObjects, InNumUnbuiltReflectionCaptures);	
	}
	void uapi_UWorld_SetMaterialParameterCollectionInstanceNeedsUpdate(void* target){	
		((UWorld*)target)->SetMaterialParameterCollectionInstanceNeedsUpdate();	
	}
	void uapi_UWorld_SetNavigationSystem(void* target, UNavigationSystemBase* InNavigationSystem){	
		((UWorld*)target)->SetNavigationSystem(InNavigationSystem);	
	}
	void uapi_UWorld_SetNetDriver(void* target, UNetDriver* NewDriver){	
		((UWorld*)target)->SetNetDriver(NewDriver);	
	}
	void uapi_UWorld_SetPhysicsScene(void* target, FPhysScene* InScene){	
		((UWorld*)target)->SetPhysicsScene(InScene);	
	}
	void uapi_UWorld_SetSeamlessTravelMidpointPause(void* target, bool bNowPaused){	
		((UWorld*)target)->SetSeamlessTravelMidpointPause(bNowPaused);	
	}
	void uapi_UWorld_SetShouldForceUnloadStreamingLevels(void* target, bool bInShouldForceUnloadStreamingLevels){	
		((UWorld*)target)->SetShouldForceUnloadStreamingLevels(bInShouldForceUnloadStreamingLevels);	
	}
	void uapi_UWorld_SetShouldForceVisibleStreamingLevels(void* target, bool bInShouldForceVisibleStreamingLevels){	
		((UWorld*)target)->SetShouldForceVisibleStreamingLevels(bInShouldForceVisibleStreamingLevels);	
	}
	void uapi_UWorld_SetShouldTick(void* target, bool bInShouldTick){	
		((UWorld*)target)->SetShouldTick(bInShouldTick);	
	}
	void uapi_UWorld_SetWorldDataLayers(void* target, AWorldDataLayers* NewWorldDataLayers){	
		((UWorld*)target)->SetWorldDataLayers(NewWorldDataLayers);	
	}
	void uapi_UWorld_SetupParameterCollectionInstances(void* target){	
		((UWorld*)target)->SetupParameterCollectionInstances();	
	}
	void uapi_UWorld_SetupPhysicsTickFunctions(void* target, float DeltaSeconds){	
		((UWorld*)target)->SetupPhysicsTickFunctions(DeltaSeconds);	
	}
	bool uapi_UWorld_ShouldTick(void* target){	
		auto result = ((UWorld*)target)->ShouldTick();	
		return result;	
	}
	void uapi_UWorld_ShrinkLevel(void* target){	
		((UWorld*)target)->ShrinkLevel();	
	}
	void* uapi_UWorld_SpawnBrush(void* target){	
		auto result = (void*)((UWorld*)target)->SpawnBrush();	
		return result;	
	}
	void uapi_UWorld_StartPhysicsSim(void* target){	
		((UWorld*)target)->StartPhysicsSim();	
	}
	bool uapi_UWorld_SupportsMakingInvisibleTransactionRequests(void* target){	
		auto result = ((UWorld*)target)->SupportsMakingInvisibleTransactionRequests();	
		return result;	
	}
	bool uapi_UWorld_SupportsMakingVisibleTransactionRequests(void* target){	
		auto result = ((UWorld*)target)->SupportsMakingVisibleTransactionRequests();	
		return result;	
	}
	void uapi_UWorld_TickNetClient(void* target, float DeltaSeconds){	
		((UWorld*)target)->TickNetClient(DeltaSeconds);	
	}
	double uapi_UWorld_TimeSince(void* target, double Time){	
		auto result = ((UWorld*)target)->TimeSince(Time);	
		return result;	
	}
	void uapi_UWorld_TransferBlueprintDebugReferences(void* target, UWorld* NewWorld){	
		((UWorld*)target)->TransferBlueprintDebugReferences(NewWorld);	
	}
	void uapi_UWorld_TriggerStreamingDataRebuild(void* target){	
		((UWorld*)target)->TriggerStreamingDataRebuild();	
	}
	void uapi_UWorld_UpdateActorComponentEndOfFrameUpdateState(void* target, UActorComponent* Component){	
		((UWorld*)target)->UpdateActorComponentEndOfFrameUpdateState(Component);	
	}
	void uapi_UWorld_UpdateAllSkyCaptures(void* target){	
		((UWorld*)target)->UpdateAllSkyCaptures();	
	}
	void uapi_UWorld_UpdateConstraintActors(void* target){	
		((UWorld*)target)->UpdateConstraintActors();	
	}
	bool uapi_UWorld_UpdateCullDistanceVolumes(void* target, AActor* ActorToUpdate, UPrimitiveComponent* ComponentToUpdate){	
		auto result = ((UWorld*)target)->UpdateCullDistanceVolumes(ActorToUpdate, ComponentToUpdate);	
		return result;	
	}
	void uapi_UWorld_UpdateLevelStreaming(void* target){	
		((UWorld*)target)->UpdateLevelStreaming();	
	}
	void uapi_UWorld_UpdateParameterCollectionInstances(void* target, bool bUpdateInstanceUniformBuffers, bool bRecreateUniformBuffer){	
		((UWorld*)target)->UpdateParameterCollectionInstances(bUpdateInstanceUniformBuffers, bRecreateUniformBuffer);	
	}
	void uapi_UWorld_UpdateStreamingLevelPriority(void* target, ULevelStreaming* StreamingLevel){	
		((UWorld*)target)->UpdateStreamingLevelPriority(StreamingLevel);	
	}
	void uapi_UWorld_UpdateStreamingLevelShouldBeConsidered(void* target, ULevelStreaming* StreamingLevelToConsider){	
		((UWorld*)target)->UpdateStreamingLevelShouldBeConsidered(StreamingLevelToConsider);	
	}
	void uapi_UWorld_UpdateWorldComponents(void* target, bool bRerunConstructionScripts, bool bCurrentLevelOnly, FRegisterComponentContext* Context){	
		((UWorld*)target)->UpdateWorldComponents(bRerunConstructionScripts, bCurrentLevelOnly, Context);	
	}
	bool uapi_UWorld_UsesGameHiddenFlags(void* target){	
		auto result = ((UWorld*)target)->UsesGameHiddenFlags();	
		return result;	
	}
	void uapi_UWorld_WelcomePlayer(void* target, UNetConnection* Connection){	
		((UWorld*)target)->WelcomePlayer(Connection);	
	}
	void uapi_UPrimitiveComponent_AddAngularImpulseInDegrees(void* target, Vector3 Impulse, UName BoneName, bool bVelChange){	
		((UPrimitiveComponent*)target)->AddAngularImpulseInDegrees(ToFVector(Impulse), ToFName(BoneName), bVelChange);	
	}
	void uapi_UPrimitiveComponent_AddAngularImpulseInRadians(void* target, Vector3 Impulse, UName BoneName, bool bVelChange){	
		((UPrimitiveComponent*)target)->AddAngularImpulseInRadians(ToFVector(Impulse), ToFName(BoneName), bVelChange);	
	}
	void uapi_UPrimitiveComponent_AddForce(void* target, Vector3 Force, UName BoneName, bool bAccelChange){	
		((UPrimitiveComponent*)target)->AddForce(ToFVector(Force), ToFName(BoneName), bAccelChange);	
	}
	void uapi_UPrimitiveComponent_AddForceAtLocation(void* target, Vector3 Force, Vector3 Location, UName BoneName){	
		((UPrimitiveComponent*)target)->AddForceAtLocation(ToFVector(Force), ToFVector(Location), ToFName(BoneName));	
	}
	void uapi_UPrimitiveComponent_AddForceAtLocationLocal(void* target, Vector3 Force, Vector3 Location, UName BoneName){	
		((UPrimitiveComponent*)target)->AddForceAtLocationLocal(ToFVector(Force), ToFVector(Location), ToFName(BoneName));	
	}
	void uapi_UPrimitiveComponent_AddImpulse(void* target, Vector3 Impulse, UName BoneName, bool bVelChange){	
		((UPrimitiveComponent*)target)->AddImpulse(ToFVector(Impulse), ToFName(BoneName), bVelChange);	
	}
	void uapi_UPrimitiveComponent_AddImpulseAtLocation(void* target, Vector3 Impulse, Vector3 Location, UName BoneName){	
		((UPrimitiveComponent*)target)->AddImpulseAtLocation(ToFVector(Impulse), ToFVector(Location), ToFName(BoneName));	
	}
	void uapi_UPrimitiveComponent_AddTorqueInDegrees(void* target, Vector3 Torque, UName BoneName, bool bAccelChange){	
		((UPrimitiveComponent*)target)->AddTorqueInDegrees(ToFVector(Torque), ToFName(BoneName), bAccelChange);	
	}
	void uapi_UPrimitiveComponent_AddTorqueInRadians(void* target, Vector3 Torque, UName BoneName, bool bAccelChange){	
		((UPrimitiveComponent*)target)->AddTorqueInRadians(ToFVector(Torque), ToFName(BoneName), bAccelChange);	
	}
	void uapi_UPrimitiveComponent_AddVelocityChangeImpulseAtLocation(void* target, Vector3 Impulse, Vector3 Location, UName BoneName){	
		((UPrimitiveComponent*)target)->AddVelocityChangeImpulseAtLocation(ToFVector(Impulse), ToFVector(Location), ToFName(BoneName));	
	}
	void uapi_UPrimitiveComponent_BeginDestroy(void* target){	
		((UPrimitiveComponent*)target)->BeginDestroy();	
	}
	void uapi_UPrimitiveComponent_BeginPlay(void* target){	
		((UPrimitiveComponent*)target)->BeginPlay();	
	}
	float uapi_UPrimitiveComponent_CalculateMass(void* target, UName BoneName){	
		auto result = ((UPrimitiveComponent*)target)->CalculateMass(ToFName(BoneName));	
		return result;	
	}
	bool uapi_UPrimitiveComponent_CanCharacterStepUp(void* target, APawn* Pawn){	
		auto result = ((UPrimitiveComponent*)target)->CanCharacterStepUp(Pawn);	
		return result;	
	}
	bool uapi_UPrimitiveComponent_CanEditChange(void* target, FProperty* InProperty){	
		auto result = ((UPrimitiveComponent*)target)->CanEditChange(InProperty);	
		return result;	
	}
	bool uapi_UPrimitiveComponent_CanEditSimulatePhysics(void* target){	
		auto result = ((UPrimitiveComponent*)target)->CanEditSimulatePhysics();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_CanSkipGetTextureStreamingRenderAssetInfo(void* target){	
		auto result = ((UPrimitiveComponent*)target)->CanSkipGetTextureStreamingRenderAssetInfo();	
		return result;	
	}
	void uapi_UPrimitiveComponent_CheckForErrors(void* target){	
		((UPrimitiveComponent*)target)->CheckForErrors();	
	}
	void uapi_UPrimitiveComponent_ClearMoveIgnoreActors(void* target){	
		((UPrimitiveComponent*)target)->ClearMoveIgnoreActors();	
	}
	void uapi_UPrimitiveComponent_ClearMoveIgnoreComponents(void* target){	
		((UPrimitiveComponent*)target)->ClearMoveIgnoreComponents();	
	}
	uint32 uapi_UPrimitiveComponent_ComputeHashTextureStreamingBuiltData(void* target){	
		auto result = ((UPrimitiveComponent*)target)->ComputeHashTextureStreamingBuiltData();	
		return result;	
	}
	void uapi_UPrimitiveComponent_CreateRenderState_Concurrent(void* target, FRegisterComponentContext* Context){	
		((UPrimitiveComponent*)target)->CreateRenderState_Concurrent(Context);	
	}
	void* uapi_UPrimitiveComponent_CreateSceneProxy(void* target){	
		auto result = (void*)((UPrimitiveComponent*)target)->CreateSceneProxy();	
		return result;	
	}
	void uapi_UPrimitiveComponent_DestroyRenderState_Concurrent(void* target){	
		((UPrimitiveComponent*)target)->DestroyRenderState_Concurrent();	
	}
	void uapi_UPrimitiveComponent_DispatchMouseOverEvents(UPrimitiveComponent* CurrentComponent, UPrimitiveComponent* NewComponent){	
		(UPrimitiveComponent::DispatchMouseOverEvents(CurrentComponent, NewComponent));	
	}
	void uapi_UPrimitiveComponent_FinishDestroy(void* target){	
		((UPrimitiveComponent*)target)->FinishDestroy();	
	}
	float uapi_UPrimitiveComponent_GetAngularDamping(void* target){	
		auto result = ((UPrimitiveComponent*)target)->GetAngularDamping();	
		return result;	
	}
	void* uapi_UPrimitiveComponent_GetBodyInstance(void* target, UName BoneName, bool bGetWelded, int32 Index){	
		auto result = (void*)((UPrimitiveComponent*)target)->GetBodyInstance(ToFName(BoneName), bGetWelded, Index);	
		return result;	
	}
	void* uapi_UPrimitiveComponent_GetBodySetup(void* target){	
		auto result = (void*)((UPrimitiveComponent*)target)->GetBodySetup();	
		return result;	
	}
	Vector3 uapi_UPrimitiveComponent_GetCenterOfMass(void* target, UName BoneName){	
		auto result = ToVector3(((UPrimitiveComponent*)target)->GetCenterOfMass(ToFName(BoneName)));	
		return result;	
	}
	ECollisionChannel uapi_UPrimitiveComponent_GetCollisionObjectType(void* target){	
		auto result = ((UPrimitiveComponent*)target)->GetCollisionObjectType();	
		return result;	
	}
	UName uapi_UPrimitiveComponent_GetCollisionProfileName(void* target){	
		auto result = ToUName(((UPrimitiveComponent*)target)->GetCollisionProfileName());	
		return result;	
	}
	CollisionShape uapi_UPrimitiveComponent_GetCollisionShape(void* target, float Inflation){	
		auto result = ToCollisionShape(((UPrimitiveComponent*)target)->GetCollisionShape(Inflation));	
		return result;	
	}
	Transform uapi_UPrimitiveComponent_GetComponentTransformFromBodyInstance(void* target, FBodyInstance* UseBI){	
		auto result = ToTransform(((UPrimitiveComponent*)target)->GetComponentTransformFromBodyInstance(UseBI));	
		return result;	
	}
	Vector3 uapi_UPrimitiveComponent_GetComponentVelocity(void* target){	
		auto result = ToVector3(((UPrimitiveComponent*)target)->GetComponentVelocity());	
		return result;	
	}
	int32 uapi_UPrimitiveComponent_GetCustomPrimitiveDataIndexForScalarParameter(void* target, UName ParameterName){	
		auto result = ((UPrimitiveComponent*)target)->GetCustomPrimitiveDataIndexForScalarParameter(ToFName(ParameterName));	
		return result;	
	}
	int32 uapi_UPrimitiveComponent_GetCustomPrimitiveDataIndexForVectorParameter(void* target, UName ParameterName){	
		auto result = ((UPrimitiveComponent*)target)->GetCustomPrimitiveDataIndexForVectorParameter(ToFName(ParameterName));	
		return result;	
	}
	float uapi_UPrimitiveComponent_GetDiffuseBoost(void* target, int32 ElementIndex){	
		auto result = ((UPrimitiveComponent*)target)->GetDiffuseBoost(ElementIndex);	
		return result;	
	}
	void* uapi_UPrimitiveComponent_GetEditorMaterial(void* target, int32 ElementIndex){	
		auto result = (void*)((UPrimitiveComponent*)target)->GetEditorMaterial(ElementIndex);	
		return result;	
	}
	float uapi_UPrimitiveComponent_GetEmissiveBoost(void* target, int32 ElementIndex){	
		auto result = ((UPrimitiveComponent*)target)->GetEmissiveBoost(ElementIndex);	
		return result;	
	}
	bool uapi_UPrimitiveComponent_GetGenerateOverlapEvents(void* target){	
		auto result = ((UPrimitiveComponent*)target)->GetGenerateOverlapEvents();	
		return result;	
	}
	uint64 uapi_UPrimitiveComponent_GetHiddenEditorViews(void* target){	
		auto result = ((UPrimitiveComponent*)target)->GetHiddenEditorViews();	
		return result;	
	}
	Vector3 uapi_UPrimitiveComponent_GetInertiaTensor(void* target, UName BoneName){	
		auto result = ToVector3(((UPrimitiveComponent*)target)->GetInertiaTensor(ToFName(BoneName)));	
		return result;	
	}
	void* uapi_UPrimitiveComponent_GetLODParentPrimitive(void* target){	
		auto result = (void*)((UPrimitiveComponent*)target)->GetLODParentPrimitive();	
		return result;	
	}
	float uapi_UPrimitiveComponent_GetLastRenderTime(void* target){	
		auto result = ((UPrimitiveComponent*)target)->GetLastRenderTime();	
		return result;	
	}
	float uapi_UPrimitiveComponent_GetLastRenderTimeOnScreen(void* target){	
		auto result = ((UPrimitiveComponent*)target)->GetLastRenderTimeOnScreen();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_GetLevelInstanceEditingState(void* target){	
		auto result = ((UPrimitiveComponent*)target)->GetLevelInstanceEditingState();	
		return result;	
	}
	void uapi_UPrimitiveComponent_GetLightAndShadowMapMemoryUsage(void* target, int32& LightMapMemoryUsage, int32& ShadowMapMemoryUsage){	
		((UPrimitiveComponent*)target)->GetLightAndShadowMapMemoryUsage(LightMapMemoryUsage, ShadowMapMemoryUsage);	
	}
	bool uapi_UPrimitiveComponent_GetLightMapResolution(void* target, int32& Width, int32& Height){	
		auto result = ((UPrimitiveComponent*)target)->GetLightMapResolution(Width, Height);	
		return result;	
	}
	void* uapi_UPrimitiveComponent_GetLightingAttachmentRoot(void* target){	
		auto result = (void*)((UPrimitiveComponent*)target)->GetLightingAttachmentRoot();	
		return result;	
	}
	float uapi_UPrimitiveComponent_GetLinearDamping(void* target){	
		auto result = ((UPrimitiveComponent*)target)->GetLinearDamping();	
		return result;	
	}
	float uapi_UPrimitiveComponent_GetMass(void* target){	
		auto result = ((UPrimitiveComponent*)target)->GetMass();	
		return result;	
	}
	float uapi_UPrimitiveComponent_GetMassScale(void* target, UName BoneName){	
		auto result = ((UPrimitiveComponent*)target)->GetMassScale(ToFName(BoneName));	
		return result;	
	}
	void* uapi_UPrimitiveComponent_GetMaterial(void* target, int32 ElementIndex){	
		auto result = (void*)((UPrimitiveComponent*)target)->GetMaterial(ElementIndex);	
		return result;	
	}
	void* uapi_UPrimitiveComponent_GetMaterialFromCollisionFaceIndex(void* target, int32 FaceIndex, int32& SectionIndex){	
		auto result = (void*)((UPrimitiveComponent*)target)->GetMaterialFromCollisionFaceIndex(FaceIndex, SectionIndex);	
		return result;	
	}
	int32 uapi_UPrimitiveComponent_GetNumMaterials(void* target){	
		auto result = ((UPrimitiveComponent*)target)->GetNumMaterials();	
		return result;	
	}
	int32 uapi_UPrimitiveComponent_GetNumUncachedStaticLightingInteractions(void* target){	
		auto result = ((UPrimitiveComponent*)target)->GetNumUncachedStaticLightingInteractions();	
		return result;	
	}
	Vector3 uapi_UPrimitiveComponent_GetPhysicsAngularVelocityInDegrees(void* target, UName BoneName){	
		auto result = ToVector3(((UPrimitiveComponent*)target)->GetPhysicsAngularVelocityInDegrees(ToFName(BoneName)));	
		return result;	
	}
	Vector3 uapi_UPrimitiveComponent_GetPhysicsAngularVelocityInRadians(void* target, UName BoneName){	
		auto result = ToVector3(((UPrimitiveComponent*)target)->GetPhysicsAngularVelocityInRadians(ToFName(BoneName)));	
		return result;	
	}
	Vector3 uapi_UPrimitiveComponent_GetPhysicsLinearVelocity(void* target, UName BoneName){	
		auto result = ToVector3(((UPrimitiveComponent*)target)->GetPhysicsLinearVelocity(ToFName(BoneName)));	
		return result;	
	}
	Vector3 uapi_UPrimitiveComponent_GetPhysicsLinearVelocityAtPoint(void* target, Vector3 Point, UName BoneName){	
		auto result = ToVector3(((UPrimitiveComponent*)target)->GetPhysicsLinearVelocityAtPoint(ToFVector(Point), ToFName(BoneName)));	
		return result;	
	}
	int32 uapi_UPrimitiveComponent_GetRayTracingGroupId(void* target){	
		auto result = ((UPrimitiveComponent*)target)->GetRayTracingGroupId();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_GetShadowIndirectOnly(void* target){	
		auto result = ((UPrimitiveComponent*)target)->GetShadowIndirectOnly();	
		return result;	
	}
	int32 uapi_UPrimitiveComponent_GetStaticLightMapResolution(void* target){	
		auto result = ((UPrimitiveComponent*)target)->GetStaticLightMapResolution();	
		return result;	
	}
	float uapi_UPrimitiveComponent_GetStreamingScale(void* target){	
		auto result = ((UPrimitiveComponent*)target)->GetStreamingScale();	
		return result;	
	}
	float uapi_UPrimitiveComponent_GetVirtualTextureMainPassMaxDrawDistance(void* target){	
		auto result = ((UPrimitiveComponent*)target)->GetVirtualTextureMainPassMaxDrawDistance();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_HasStaticLighting(void* target){	
		auto result = ((UPrimitiveComponent*)target)->HasStaticLighting();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_HasValidPhysicsState(void* target){	
		auto result = ((UPrimitiveComponent*)target)->HasValidPhysicsState();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_HasValidSettingsForStaticLighting(void* target, bool bOverlookInvalidComponents){	
		auto result = ((UPrimitiveComponent*)target)->HasValidSettingsForStaticLighting(bOverlookInvalidComponents);	
		return result;	
	}
	void uapi_UPrimitiveComponent_IgnoreActorWhenMoving(void* target, AActor* Actor, bool bShouldIgnore){	
		((UPrimitiveComponent*)target)->IgnoreActorWhenMoving(Actor, bShouldIgnore);	
	}
	bool uapi_UPrimitiveComponent_IgnoreBoundsForEditorFocus(void* target){	
		auto result = ((UPrimitiveComponent*)target)->IgnoreBoundsForEditorFocus();	
		return result;	
	}
	void uapi_UPrimitiveComponent_IgnoreComponentWhenMoving(void* target, UPrimitiveComponent* Component, bool bShouldIgnore){	
		((UPrimitiveComponent*)target)->IgnoreComponentWhenMoving(Component, bShouldIgnore);	
	}
	void uapi_UPrimitiveComponent_InvalidateLightingCacheDetailed(void* target, bool bInvalidateBuildEnqueuedLighting, bool bTranslationOnly){	
		((UPrimitiveComponent*)target)->InvalidateLightingCacheDetailed(bInvalidateBuildEnqueuedLighting, bTranslationOnly);	
	}
	void uapi_UPrimitiveComponent_InvalidateLumenSurfaceCache(void* target){	
		((UPrimitiveComponent*)target)->InvalidateLumenSurfaceCache();	
	}
	bool uapi_UPrimitiveComponent_IsAnyRigidBodyAwake(void* target){	
		auto result = ((UPrimitiveComponent*)target)->IsAnyRigidBodyAwake();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_IsAttachedToStreamingManager(void* target){	
		auto result = ((UPrimitiveComponent*)target)->IsAttachedToStreamingManager();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_IsCompiling(void* target){	
		auto result = ((UPrimitiveComponent*)target)->IsCompiling();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_IsComponentIndividuallySelected(void* target){	
		auto result = ((UPrimitiveComponent*)target)->IsComponentIndividuallySelected();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_IsEditorOnly(void* target){	
		auto result = ((UPrimitiveComponent*)target)->IsEditorOnly();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_IsGravityEnabled(void* target){	
		auto result = ((UPrimitiveComponent*)target)->IsGravityEnabled();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_IsNavigationRelevant(void* target){	
		auto result = ((UPrimitiveComponent*)target)->IsNavigationRelevant();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_IsOverlappingActor(void* target, AActor* Other){	
		auto result = ((UPrimitiveComponent*)target)->IsOverlappingActor(Other);	
		return result;	
	}
	bool uapi_UPrimitiveComponent_IsOverlappingComponent(void* target, UPrimitiveComponent* OtherComp){	
		auto result = ((UPrimitiveComponent*)target)->IsOverlappingComponent(OtherComp);	
		return result;	
	}
	bool uapi_UPrimitiveComponent_IsReadyForFinishDestroy(void* target){	
		auto result = ((UPrimitiveComponent*)target)->IsReadyForFinishDestroy();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_IsSimulatingPhysics(void* target, UName BoneName){	
		auto result = ((UPrimitiveComponent*)target)->IsSimulatingPhysics(ToFName(BoneName));	
		return result;	
	}
	bool uapi_UPrimitiveComponent_IsWelded(void* target){	
		auto result = ((UPrimitiveComponent*)target)->IsWelded();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_IsWorldGeometry(void* target){	
		auto result = ((UPrimitiveComponent*)target)->IsWorldGeometry();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_IsZeroExtent(void* target){	
		auto result = ((UPrimitiveComponent*)target)->IsZeroExtent();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_K2_IsCollisionEnabled(void* target){	
		auto result = ((UPrimitiveComponent*)target)->K2_IsCollisionEnabled();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_K2_IsPhysicsCollisionEnabled(void* target){	
		auto result = ((UPrimitiveComponent*)target)->K2_IsPhysicsCollisionEnabled();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_K2_IsQueryCollisionEnabled(void* target){	
		auto result = ((UPrimitiveComponent*)target)->K2_IsQueryCollisionEnabled();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_NeedsLoadForClient(void* target){	
		auto result = ((UPrimitiveComponent*)target)->NeedsLoadForClient();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_NeedsLoadForServer(void* target){	
		auto result = ((UPrimitiveComponent*)target)->NeedsLoadForServer();	
		return result;	
	}
	void uapi_UPrimitiveComponent_OnActorEnableCollisionChanged(void* target){	
		((UPrimitiveComponent*)target)->OnActorEnableCollisionChanged();	
	}
	void uapi_UPrimitiveComponent_OnAttachmentChanged(void* target){	
		((UPrimitiveComponent*)target)->OnAttachmentChanged();	
	}
	void uapi_UPrimitiveComponent_OnComponentDestroyed(void* target, bool bDestroyingHierarchy){	
		((UPrimitiveComponent*)target)->OnComponentDestroyed(bDestroyingHierarchy);	
	}
	void uapi_UPrimitiveComponent_OnCreatePhysicsState(void* target){	
		((UPrimitiveComponent*)target)->OnCreatePhysicsState();	
	}
	void uapi_UPrimitiveComponent_OnDestroyPhysicsState(void* target){	
		((UPrimitiveComponent*)target)->OnDestroyPhysicsState();	
	}
	void uapi_UPrimitiveComponent_OnRegister(void* target){	
		((UPrimitiveComponent*)target)->OnRegister();	
	}
	void uapi_UPrimitiveComponent_OnUnregister(void* target){	
		((UPrimitiveComponent*)target)->OnUnregister();	
	}
	void uapi_UPrimitiveComponent_PostDuplicate(void* target, bool bDuplicateForPIE){	
		((UPrimitiveComponent*)target)->PostDuplicate(bDuplicateForPIE);	
	}
	void uapi_UPrimitiveComponent_PostEditImport(void* target){	
		((UPrimitiveComponent*)target)->PostEditImport();	
	}
	void uapi_UPrimitiveComponent_PostInitProperties(void* target){	
		((UPrimitiveComponent*)target)->PostInitProperties();	
	}
	void uapi_UPrimitiveComponent_PostLoad(void* target){	
		((UPrimitiveComponent*)target)->PostLoad();	
	}
	void uapi_UPrimitiveComponent_PushEditorVisibilityToProxy(void* target, uint64 InVisibility){	
		((UPrimitiveComponent*)target)->PushEditorVisibilityToProxy(InVisibility);	
	}
	void uapi_UPrimitiveComponent_PushHoveredToProxy(void* target, bool bInHovered){	
		((UPrimitiveComponent*)target)->PushHoveredToProxy(bInHovered);	
	}
	void uapi_UPrimitiveComponent_PushLevelInstanceEditingStateToProxy(void* target, bool bInEditingState){	
		((UPrimitiveComponent*)target)->PushLevelInstanceEditingStateToProxy(bInEditingState);	
	}
	void uapi_UPrimitiveComponent_PushSelectionToProxy(void* target){	
		((UPrimitiveComponent*)target)->PushSelectionToProxy();	
	}
	void uapi_UPrimitiveComponent_PutAllRigidBodiesToSleep(void* target){	
		((UPrimitiveComponent*)target)->PutAllRigidBodiesToSleep();	
	}
	void uapi_UPrimitiveComponent_PutRigidBodyToSleep(void* target, UName BoneName){	
		((UPrimitiveComponent*)target)->PutRigidBodyToSleep(ToFName(BoneName));	
	}
	bool uapi_UPrimitiveComponent_RemapActorTextureStreamingBuiltDataToLevel(void* target, UActorTextureStreamingBuildDataComponent* InActorTextureBuildData){	
		auto result = ((UPrimitiveComponent*)target)->RemapActorTextureStreamingBuiltDataToLevel(InActorTextureBuildData);	
		return result;	
	}
	bool uapi_UPrimitiveComponent_RigidBodyIsAwake(void* target, UName BoneName){	
		auto result = ((UPrimitiveComponent*)target)->RigidBodyIsAwake(ToFName(BoneName));	
		return result;	
	}
	Vector3 uapi_UPrimitiveComponent_ScaleByMomentOfInertia(void* target, Vector3 InputVector, UName BoneName){	
		auto result = ToVector3(((UPrimitiveComponent*)target)->ScaleByMomentOfInertia(ToFVector(InputVector), ToFName(BoneName)));	
		return result;	
	}
	void uapi_UPrimitiveComponent_SendRenderDebugPhysics(void* target, FPrimitiveSceneProxy* OverrideSceneProxy){	
		((UPrimitiveComponent*)target)->SendRenderDebugPhysics(OverrideSceneProxy);	
	}
	void uapi_UPrimitiveComponent_SendRenderTransform_Concurrent(void* target){	
		((UPrimitiveComponent*)target)->SendRenderTransform_Concurrent();	
	}
	void uapi_UPrimitiveComponent_SetAllMassScale(void* target, float InMassScale){	
		((UPrimitiveComponent*)target)->SetAllMassScale(InMassScale);	
	}
	void uapi_UPrimitiveComponent_SetAllPhysicsLinearVelocity(void* target, Vector3 NewVel, bool bAddToCurrent){	
		((UPrimitiveComponent*)target)->SetAllPhysicsLinearVelocity(ToFVector(NewVel), bAddToCurrent);	
	}
	void uapi_UPrimitiveComponent_SetAllPhysicsPosition(void* target, Vector3 NewPos){	
		((UPrimitiveComponent*)target)->SetAllPhysicsPosition(ToFVector(NewPos));	
	}
	void uapi_UPrimitiveComponent_SetAllPhysicsRotation(void* target, Rotator NewRot){	
		((UPrimitiveComponent*)target)->SetAllPhysicsRotation(ToFRotator(NewRot));	
	}
	void uapi_UPrimitiveComponent_SetAllUseCCD(void* target, bool InUseCCD){	
		((UPrimitiveComponent*)target)->SetAllUseCCD(InUseCCD);	
	}
	void uapi_UPrimitiveComponent_SetAngularDamping(void* target, float InDamping){	
		((UPrimitiveComponent*)target)->SetAngularDamping(InDamping);	
	}
	void uapi_UPrimitiveComponent_SetBoundsScale(void* target, float NewBoundsScale){	
		((UPrimitiveComponent*)target)->SetBoundsScale(NewBoundsScale);	
	}
	void uapi_UPrimitiveComponent_SetCachedMaxDrawDistance(void* target, float NewCachedMaxDrawDistance){	
		((UPrimitiveComponent*)target)->SetCachedMaxDrawDistance(NewCachedMaxDrawDistance);	
	}
	void uapi_UPrimitiveComponent_SetCastHiddenShadow(void* target, bool NewCastHiddenShadow){	
		((UPrimitiveComponent*)target)->SetCastHiddenShadow(NewCastHiddenShadow);	
	}
	void uapi_UPrimitiveComponent_SetCastShadow(void* target, bool NewCastShadow){	
		((UPrimitiveComponent*)target)->SetCastShadow(NewCastShadow);	
	}
	void uapi_UPrimitiveComponent_SetCenterOfMass(void* target, Vector3 CenterOfMassOffset, UName BoneName){	
		((UPrimitiveComponent*)target)->SetCenterOfMass(ToFVector(CenterOfMassOffset), ToFName(BoneName));	
	}
	void uapi_UPrimitiveComponent_SetCollisionObjectType(void* target, ECollisionChannel Channel){	
		((UPrimitiveComponent*)target)->SetCollisionObjectType(Channel);	
	}
	void uapi_UPrimitiveComponent_SetCollisionProfileName(void* target, UName InCollisionProfileName, bool bUpdateOverlaps){	
		((UPrimitiveComponent*)target)->SetCollisionProfileName(ToFName(InCollisionProfileName), bUpdateOverlaps);	
	}
	void uapi_UPrimitiveComponent_SetCullDistance(void* target, float NewCullDistance){	
		((UPrimitiveComponent*)target)->SetCullDistance(NewCullDistance);	
	}
	void uapi_UPrimitiveComponent_SetCustomDepthStencilValue(void* target, int32 Value){	
		((UPrimitiveComponent*)target)->SetCustomDepthStencilValue(Value);	
	}
	void uapi_UPrimitiveComponent_SetCustomPrimitiveDataFloat(void* target, int32 DataIndex, float Value){	
		((UPrimitiveComponent*)target)->SetCustomPrimitiveDataFloat(DataIndex, Value);	
	}
	void uapi_UPrimitiveComponent_SetCustomPrimitiveDataVector2(void* target, int32 DataIndex, Vector2 Value){	
		((UPrimitiveComponent*)target)->SetCustomPrimitiveDataVector2(DataIndex, ToFVector2D(Value));	
	}
	void uapi_UPrimitiveComponent_SetCustomPrimitiveDataVector3(void* target, int32 DataIndex, Vector3 Value){	
		((UPrimitiveComponent*)target)->SetCustomPrimitiveDataVector3(DataIndex, ToFVector(Value));	
	}
	void uapi_UPrimitiveComponent_SetCustomPrimitiveDataVector4(void* target, int32 DataIndex, Vector4 Value){	
		((UPrimitiveComponent*)target)->SetCustomPrimitiveDataVector4(DataIndex, ToFVector4(Value));	
	}
	void uapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataFloat(void* target, int32 DataIndex, float Value){	
		((UPrimitiveComponent*)target)->SetDefaultCustomPrimitiveDataFloat(DataIndex, Value);	
	}
	void uapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector2(void* target, int32 DataIndex, Vector2 Value){	
		((UPrimitiveComponent*)target)->SetDefaultCustomPrimitiveDataVector2(DataIndex, ToFVector2D(Value));	
	}
	void uapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector3(void* target, int32 DataIndex, Vector3 Value){	
		((UPrimitiveComponent*)target)->SetDefaultCustomPrimitiveDataVector3(DataIndex, ToFVector(Value));	
	}
	void uapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector4(void* target, int32 DataIndex, Vector4 Value){	
		((UPrimitiveComponent*)target)->SetDefaultCustomPrimitiveDataVector4(DataIndex, ToFVector4(Value));	
	}
	void uapi_UPrimitiveComponent_SetEmissiveLightSource(void* target, bool NewEmissiveLightSource){	
		((UPrimitiveComponent*)target)->SetEmissiveLightSource(NewEmissiveLightSource);	
	}
	void uapi_UPrimitiveComponent_SetEnableGravity(void* target, bool bGravityEnabled){	
		((UPrimitiveComponent*)target)->SetEnableGravity(bGravityEnabled);	
	}
	void uapi_UPrimitiveComponent_SetGenerateOverlapEvents(void* target, bool bInGenerateOverlapEvents){	
		((UPrimitiveComponent*)target)->SetGenerateOverlapEvents(bInGenerateOverlapEvents);	
	}
	void uapi_UPrimitiveComponent_SetHiddenInSceneCapture(void* target, bool bValue){	
		((UPrimitiveComponent*)target)->SetHiddenInSceneCapture(bValue);	
	}
	void uapi_UPrimitiveComponent_SetIgnoreBoundsForEditorFocus(void* target, bool bIgnore){	
		((UPrimitiveComponent*)target)->SetIgnoreBoundsForEditorFocus(bIgnore);	
	}
	void uapi_UPrimitiveComponent_SetIsBeingMovedByEditor(void* target, bool bNewIsBeingMoved){	
		((UPrimitiveComponent*)target)->SetIsBeingMovedByEditor(bNewIsBeingMoved);	
	}
	void uapi_UPrimitiveComponent_SetLODParentPrimitive(void* target, UPrimitiveComponent* InLODParentPrimitive){	
		((UPrimitiveComponent*)target)->SetLODParentPrimitive(InLODParentPrimitive);	
	}
	void uapi_UPrimitiveComponent_SetLastRenderTime(void* target, float InLastRenderTime){	
		((UPrimitiveComponent*)target)->SetLastRenderTime(InLastRenderTime);	
	}
	void uapi_UPrimitiveComponent_SetLightingChannels(void* target, bool bChannel0, bool bChannel1, bool bChannel2){	
		((UPrimitiveComponent*)target)->SetLightingChannels(bChannel0, bChannel1, bChannel2);	
	}
	void uapi_UPrimitiveComponent_SetLinearDamping(void* target, float InDamping){	
		((UPrimitiveComponent*)target)->SetLinearDamping(InDamping);	
	}
	void uapi_UPrimitiveComponent_SetMassOverrideInKg(void* target, UName BoneName, float MassInKg, bool bOverrideMass){	
		((UPrimitiveComponent*)target)->SetMassOverrideInKg(ToFName(BoneName), MassInKg, bOverrideMass);	
	}
	void uapi_UPrimitiveComponent_SetMassScale(void* target, UName BoneName, float InMassScale){	
		((UPrimitiveComponent*)target)->SetMassScale(ToFName(BoneName), InMassScale);	
	}
	void uapi_UPrimitiveComponent_SetMaterial(void* target, int32 ElementIndex, UMaterialInterface* Material){	
		((UPrimitiveComponent*)target)->SetMaterial(ElementIndex, Material);	
	}
	void uapi_UPrimitiveComponent_SetMaterialByName(void* target, UName MaterialSlotName, UMaterialInterface* Material){	
		((UPrimitiveComponent*)target)->SetMaterialByName(ToFName(MaterialSlotName), Material);	
	}
	void uapi_UPrimitiveComponent_SetNotifyRigidBodyCollision(void* target, bool bNewNotifyRigidBodyCollision){	
		((UPrimitiveComponent*)target)->SetNotifyRigidBodyCollision(bNewNotifyRigidBodyCollision);	
	}
	void uapi_UPrimitiveComponent_SetOnlyOwnerSee(void* target, bool bNewOnlyOwnerSee){	
		((UPrimitiveComponent*)target)->SetOnlyOwnerSee(bNewOnlyOwnerSee);	
	}
	void uapi_UPrimitiveComponent_SetOwnerNoSee(void* target, bool bNewOwnerNoSee){	
		((UPrimitiveComponent*)target)->SetOwnerNoSee(bNewOwnerNoSee);	
	}
	void uapi_UPrimitiveComponent_SetPhysMaterialOverride(void* target, UPhysicalMaterial* NewPhysMaterial){	
		((UPrimitiveComponent*)target)->SetPhysMaterialOverride(NewPhysMaterial);	
	}
	void uapi_UPrimitiveComponent_SetPhysicsAngularVelocityInDegrees(void* target, Vector3 NewAngVel, bool bAddToCurrent, UName BoneName){	
		((UPrimitiveComponent*)target)->SetPhysicsAngularVelocityInDegrees(ToFVector(NewAngVel), bAddToCurrent, ToFName(BoneName));	
	}
	void uapi_UPrimitiveComponent_SetPhysicsAngularVelocityInRadians(void* target, Vector3 NewAngVel, bool bAddToCurrent, UName BoneName){	
		((UPrimitiveComponent*)target)->SetPhysicsAngularVelocityInRadians(ToFVector(NewAngVel), bAddToCurrent, ToFName(BoneName));	
	}
	void uapi_UPrimitiveComponent_SetPhysicsLinearVelocity(void* target, Vector3 NewVel, bool bAddToCurrent, UName BoneName){	
		((UPrimitiveComponent*)target)->SetPhysicsLinearVelocity(ToFVector(NewVel), bAddToCurrent, ToFName(BoneName));	
	}
	void uapi_UPrimitiveComponent_SetPhysicsMaxAngularVelocityInDegrees(void* target, float NewMaxAngVel, bool bAddToCurrent, UName BoneName){	
		((UPrimitiveComponent*)target)->SetPhysicsMaxAngularVelocityInDegrees(NewMaxAngVel, bAddToCurrent, ToFName(BoneName));	
	}
	void uapi_UPrimitiveComponent_SetPhysicsMaxAngularVelocityInRadians(void* target, float NewMaxAngVel, bool bAddToCurrent, UName BoneName){	
		((UPrimitiveComponent*)target)->SetPhysicsMaxAngularVelocityInRadians(NewMaxAngVel, bAddToCurrent, ToFName(BoneName));	
	}
	void uapi_UPrimitiveComponent_SetReceivesDecals(void* target, bool bNewReceivesDecals){	
		((UPrimitiveComponent*)target)->SetReceivesDecals(bNewReceivesDecals);	
	}
	void uapi_UPrimitiveComponent_SetRenderCustomDepth(void* target, bool bValue){	
		((UPrimitiveComponent*)target)->SetRenderCustomDepth(bValue);	
	}
	void uapi_UPrimitiveComponent_SetRenderInDepthPass(void* target, bool bValue){	
		((UPrimitiveComponent*)target)->SetRenderInDepthPass(bValue);	
	}
	void uapi_UPrimitiveComponent_SetRenderInMainPass(void* target, bool bValue){	
		((UPrimitiveComponent*)target)->SetRenderInMainPass(bValue);	
	}
	void uapi_UPrimitiveComponent_SetScalarParameterForCustomPrimitiveData(void* target, UName ParameterName, float Value){	
		((UPrimitiveComponent*)target)->SetScalarParameterForCustomPrimitiveData(ToFName(ParameterName), Value);	
	}
	void uapi_UPrimitiveComponent_SetScalarParameterForDefaultCustomPrimitiveData(void* target, UName ParameterName, float Value){	
		((UPrimitiveComponent*)target)->SetScalarParameterForDefaultCustomPrimitiveData(ToFName(ParameterName), Value);	
	}
	void uapi_UPrimitiveComponent_SetSimulatePhysics(void* target, bool bSimulate){	
		((UPrimitiveComponent*)target)->SetSimulatePhysics(bSimulate);	
	}
	void uapi_UPrimitiveComponent_SetSingleSampleShadowFromStationaryLights(void* target, bool bNewSingleSampleShadowFromStationaryLights){	
		((UPrimitiveComponent*)target)->SetSingleSampleShadowFromStationaryLights(bNewSingleSampleShadowFromStationaryLights);	
	}
	void uapi_UPrimitiveComponent_SetTranslucencySortDistanceOffset(void* target, float NewTranslucencySortDistanceOffset){	
		((UPrimitiveComponent*)target)->SetTranslucencySortDistanceOffset(NewTranslucencySortDistanceOffset);	
	}
	void uapi_UPrimitiveComponent_SetTranslucentSortPriority(void* target, int32 NewTranslucentSortPriority){	
		((UPrimitiveComponent*)target)->SetTranslucentSortPriority(NewTranslucentSortPriority);	
	}
	void uapi_UPrimitiveComponent_SetUseCCD(void* target, bool InUseCCD, UName BoneName){	
		((UPrimitiveComponent*)target)->SetUseCCD(InUseCCD, ToFName(BoneName));	
	}
	void uapi_UPrimitiveComponent_SetVectorParameterForCustomPrimitiveData(void* target, UName ParameterName, Vector4 Value){	
		((UPrimitiveComponent*)target)->SetVectorParameterForCustomPrimitiveData(ToFName(ParameterName), ToFVector4(Value));	
	}
	void uapi_UPrimitiveComponent_SetVectorParameterForDefaultCustomPrimitiveData(void* target, UName ParameterName, Vector4 Value){	
		((UPrimitiveComponent*)target)->SetVectorParameterForDefaultCustomPrimitiveData(ToFName(ParameterName), ToFVector4(Value));	
	}
	void uapi_UPrimitiveComponent_SetVisibleInRayTracing(void* target, bool bNewVisibleInRayTracing){	
		((UPrimitiveComponent*)target)->SetVisibleInRayTracing(bNewVisibleInRayTracing);	
	}
	void uapi_UPrimitiveComponent_SetVisibleInSceneCaptureOnly(void* target, bool bValue){	
		((UPrimitiveComponent*)target)->SetVisibleInSceneCaptureOnly(bValue);	
	}
	bool uapi_UPrimitiveComponent_ShouldComponentAddToScene(void* target){	
		auto result = ((UPrimitiveComponent*)target)->ShouldComponentAddToScene();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_ShouldCreatePhysicsState(void* target){	
		auto result = ((UPrimitiveComponent*)target)->ShouldCreatePhysicsState();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_ShouldGenerateAutoLOD(void* target, int32 HierarchicalLevelIndex){	
		auto result = ((UPrimitiveComponent*)target)->ShouldGenerateAutoLOD(HierarchicalLevelIndex);	
		return result;	
	}
	bool uapi_UPrimitiveComponent_ShouldRecreateProxyOnUpdateTransform(void* target){	
		auto result = ((UPrimitiveComponent*)target)->ShouldRecreateProxyOnUpdateTransform();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_ShouldRenderSelected(void* target){	
		auto result = ((UPrimitiveComponent*)target)->ShouldRenderSelected();	
		return result;	
	}
	bool uapi_UPrimitiveComponent_SupportsWorldPositionOffsetVelocity(void* target){	
		auto result = ((UPrimitiveComponent*)target)->SupportsWorldPositionOffsetVelocity();	
		return result;	
	}
	void uapi_UPrimitiveComponent_SyncComponentToRBPhysics(void* target){	
		((UPrimitiveComponent*)target)->SyncComponentToRBPhysics();	
	}
	void uapi_UPrimitiveComponent_UnWeldChildren(void* target){	
		((UPrimitiveComponent*)target)->UnWeldChildren();	
	}
	void uapi_UPrimitiveComponent_UnWeldFromParent(void* target){	
		((UPrimitiveComponent*)target)->UnWeldFromParent();	
	}
	void uapi_UPrimitiveComponent_UpdateBounds(void* target){	
		((UPrimitiveComponent*)target)->UpdateBounds();	
	}
	void uapi_UPrimitiveComponent_UpdateCollisionProfile(void* target){	
		((UPrimitiveComponent*)target)->UpdateCollisionProfile();	
	}
	void uapi_UPrimitiveComponent_UpdateOcclusionBoundsSlack(void* target, float NewSlack){	
		((UPrimitiveComponent*)target)->UpdateOcclusionBoundsSlack(NewSlack);	
	}
	bool uapi_UPrimitiveComponent_UpdateOverlapsImpl(void* target, TOverlapArrayView* NewPendingOverlaps, bool bDoNotifies, TOverlapArrayView* OverlapsAtEndLocation){	
		auto result = ((UPrimitiveComponent*)target)->UpdateOverlapsImpl(NewPendingOverlaps, bDoNotifies, OverlapsAtEndLocation);	
		return result;	
	}
	void uapi_UPrimitiveComponent_UpdatePhysicsVolume(void* target, bool bTriggerNotifiers){	
		((UPrimitiveComponent*)target)->UpdatePhysicsVolume(bTriggerNotifiers);	
	}
	bool uapi_UPrimitiveComponent_UsesOnlyUnlitMaterials(void* target){	
		auto result = ((UPrimitiveComponent*)target)->UsesOnlyUnlitMaterials();	
		return result;	
	}
	void uapi_UPrimitiveComponent_WakeAllRigidBodies(void* target){	
		((UPrimitiveComponent*)target)->WakeAllRigidBodies();	
	}
	void uapi_UPrimitiveComponent_WakeRigidBody(void* target, UName BoneName){	
		((UPrimitiveComponent*)target)->WakeRigidBody(ToFName(BoneName));	
	}
	bool uapi_UPrimitiveComponent_WasRecentlyRendered(void* target, float Tolerance){	
		auto result = ((UPrimitiveComponent*)target)->WasRecentlyRendered(Tolerance);	
		return result;	
	}
	void uapi_UPrimitiveComponent_WeldTo(void* target, USceneComponent* InParent, UName InSocketName){	
		((UPrimitiveComponent*)target)->WeldTo(InParent, ToFName(InSocketName));	
	}
	bool uapi_UPrimitiveComponent_WeldToImplementation(void* target, USceneComponent* InParent, UName ParentSocketName, bool bWeldSimulatedChild){	
		auto result = ((UPrimitiveComponent*)target)->WeldToImplementation(InParent, ToFName(ParentSocketName), bWeldSimulatedChild);	
		return result;	
	}
	void uapi_UAnimInstance_AddExternalNotifyHandler(void* target, UObject* ExternalHandlerObject, UName NotifyEventName){	
		((UAnimInstance*)target)->AddExternalNotifyHandler(ExternalHandlerObject, ToFName(NotifyEventName));	
	}
	void uapi_UAnimInstance_BeginDestroy(void* target){	
		((UAnimInstance*)target)->BeginDestroy();	
	}
	void uapi_UAnimInstance_BlueprintBeginPlay(void* target){	
		((UAnimInstance*)target)->BlueprintBeginPlay();	
	}
	void uapi_UAnimInstance_BlueprintInitializeAnimation(void* target){	
		((UAnimInstance*)target)->BlueprintInitializeAnimation();	
	}
	void uapi_UAnimInstance_BlueprintLinkedAnimationLayersInitialized(void* target){	
		((UAnimInstance*)target)->BlueprintLinkedAnimationLayersInitialized();	
	}
	void uapi_UAnimInstance_BlueprintPostEvaluateAnimation(void* target){	
		((UAnimInstance*)target)->BlueprintPostEvaluateAnimation();	
	}
	void uapi_UAnimInstance_BlueprintThreadSafeUpdateAnimation(void* target, float DeltaTime){	
		((UAnimInstance*)target)->BlueprintThreadSafeUpdateAnimation(DeltaTime);	
	}
	void uapi_UAnimInstance_BlueprintUpdateAnimation(void* target, float DeltaTimeX){	
		((UAnimInstance*)target)->BlueprintUpdateAnimation(DeltaTimeX);	
	}
	bool uapi_UAnimInstance_CanRunParallelWork(void* target){	
		auto result = ((UAnimInstance*)target)->CanRunParallelWork();	
		return result;	
	}
	bool uapi_UAnimInstance_CanTransitionSignature(void* target){	
		auto result = ((UAnimInstance*)target)->CanTransitionSignature();	
		return result;	
	}
	void uapi_UAnimInstance_ClearAllTransitionEvents(void* target){	
		((UAnimInstance*)target)->ClearAllTransitionEvents();	
	}
	void uapi_UAnimInstance_ClearMorphTargets(void* target){	
		((UAnimInstance*)target)->ClearMorphTargets();	
	}
	void uapi_UAnimInstance_ClearTransitionEvents(void* target, UName EventName){	
		((UAnimInstance*)target)->ClearTransitionEvents(ToFName(EventName));	
	}
	void uapi_UAnimInstance_CopyCurveValues(void* target, UAnimInstance* InSourceInstance){	
		((UAnimInstance*)target)->CopyCurveValues(*InSourceInstance);	
	}
	void uapi_UAnimInstance_DispatchQueuedAnimEvents(void* target){	
		((UAnimInstance*)target)->DispatchQueuedAnimEvents();	
	}
	void uapi_UAnimInstance_EndNotifyStates(void* target){	
		((UAnimInstance*)target)->EndNotifyStates();	
	}
	void* uapi_UAnimInstance_GetActiveInstanceForMontage(void* target, UAnimMontage* Montage){	
		auto result = (void*)((UAnimInstance*)target)->GetActiveInstanceForMontage(Montage);	
		return result;	
	}
	void* uapi_UAnimInstance_GetActiveMontageInstance(void* target){	
		auto result = (void*)((UAnimInstance*)target)->GetActiveMontageInstance();	
		return result;	
	}
	void* uapi_UAnimInstance_GetCurrentActiveMontage(void* target){	
		auto result = (void*)((UAnimInstance*)target)->GetCurrentActiveMontage();	
		return result;	
	}
	UName uapi_UAnimInstance_GetCurrentStateName(void* target, int32 MachineIndex){	
		auto result = ToUName(((UAnimInstance*)target)->GetCurrentStateName(MachineIndex));	
		return result;	
	}
	float uapi_UAnimInstance_GetCurveValue(void* target, UName CurveName){	
		auto result = ((UAnimInstance*)target)->GetCurveValue(ToFName(CurveName));	
		return result;	
	}
	bool uapi_UAnimInstance_GetCurveValue2(void* target, UName CurveName, float& OutValue){	
		auto result = ((UAnimInstance*)target)->GetCurveValue(ToFName(CurveName), OutValue);	
		return result;	
	}
	bool uapi_UAnimInstance_GetCurveValueWithDefault(void* target, UName CurveName, float DefaultValue, float& OutValue){	
		auto result = ((UAnimInstance*)target)->GetCurveValueWithDefault(ToFName(CurveName), DefaultValue, OutValue);	
		return result;	
	}
	float uapi_UAnimInstance_GetDeltaSeconds(void* target){	
		auto result = ((UAnimInstance*)target)->GetDeltaSeconds();	
		return result;	
	}
	int32 uapi_UAnimInstance_GetInstanceAssetPlayerIndex(void* target, UName MachineName, UName StateName, UName InstanceName){	
		auto result = ((UAnimInstance*)target)->GetInstanceAssetPlayerIndex(ToFName(MachineName), ToFName(StateName), ToFName(InstanceName));	
		return result;	
	}
	float uapi_UAnimInstance_GetInstanceAssetPlayerLength(void* target, int32 AssetPlayerIndex){	
		auto result = ((UAnimInstance*)target)->GetInstanceAssetPlayerLength(AssetPlayerIndex);	
		return result;	
	}
	float uapi_UAnimInstance_GetInstanceAssetPlayerTime(void* target, int32 AssetPlayerIndex){	
		auto result = ((UAnimInstance*)target)->GetInstanceAssetPlayerTime(AssetPlayerIndex);	
		return result;	
	}
	float uapi_UAnimInstance_GetInstanceAssetPlayerTimeFraction(void* target, int32 AssetPlayerIndex){	
		auto result = ((UAnimInstance*)target)->GetInstanceAssetPlayerTimeFraction(AssetPlayerIndex);	
		return result;	
	}
	float uapi_UAnimInstance_GetInstanceAssetPlayerTimeFromEnd(void* target, int32 AssetPlayerIndex){	
		auto result = ((UAnimInstance*)target)->GetInstanceAssetPlayerTimeFromEnd(AssetPlayerIndex);	
		return result;	
	}
	float uapi_UAnimInstance_GetInstanceAssetPlayerTimeFromEndFraction(void* target, int32 AssetPlayerIndex){	
		auto result = ((UAnimInstance*)target)->GetInstanceAssetPlayerTimeFromEndFraction(AssetPlayerIndex);	
		return result;	
	}
	float uapi_UAnimInstance_GetInstanceCurrentStateElapsedTime(void* target, int32 MachineIndex){	
		auto result = ((UAnimInstance*)target)->GetInstanceCurrentStateElapsedTime(MachineIndex);	
		return result;	
	}
	float uapi_UAnimInstance_GetInstanceMachineWeight(void* target, int32 MachineIndex){	
		auto result = ((UAnimInstance*)target)->GetInstanceMachineWeight(MachineIndex);	
		return result;	
	}
	float uapi_UAnimInstance_GetInstanceStateWeight(void* target, int32 MachineIndex, int32 StateIndex){	
		auto result = ((UAnimInstance*)target)->GetInstanceStateWeight(MachineIndex, StateIndex);	
		return result;	
	}
	float uapi_UAnimInstance_GetInstanceTransitionCrossfadeDuration(void* target, int32 MachineIndex, int32 TransitionIndex){	
		auto result = ((UAnimInstance*)target)->GetInstanceTransitionCrossfadeDuration(MachineIndex, TransitionIndex);	
		return result;	
	}
	float uapi_UAnimInstance_GetInstanceTransitionTimeElapsed(void* target, int32 MachineIndex, int32 TransitionIndex){	
		auto result = ((UAnimInstance*)target)->GetInstanceTransitionTimeElapsed(MachineIndex, TransitionIndex);	
		return result;	
	}
	float uapi_UAnimInstance_GetInstanceTransitionTimeElapsedFraction(void* target, int32 MachineIndex, int32 TransitionIndex){	
		auto result = ((UAnimInstance*)target)->GetInstanceTransitionTimeElapsedFraction(MachineIndex, TransitionIndex);	
		return result;	
	}
	int32 uapi_UAnimInstance_GetLODLevel(void* target){	
		auto result = ((UAnimInstance*)target)->GetLODLevel();	
		return result;	
	}
	void* uapi_UAnimInstance_GetLinkedAnimGraphInstanceByTag(void* target, UName InTag){	
		auto result = (void*)((UAnimInstance*)target)->GetLinkedAnimGraphInstanceByTag(ToFName(InTag));	
		return result;	
	}
	void* uapi_UAnimInstance_GetLinkedAnimLayerInstanceByGroup(void* target, UName InGroup){	
		auto result = (void*)((UAnimInstance*)target)->GetLinkedAnimLayerInstanceByGroup(ToFName(InGroup));	
		return result;	
	}
	void* uapi_UAnimInstance_GetLinkedInputPoseNode(void* target, UName InSubInput, UName InGraph){	
		auto result = (void*)((UAnimInstance*)target)->GetLinkedInputPoseNode(ToFName(InSubInput), ToFName(InGraph));	
		return result;	
	}
	void* uapi_UAnimInstance_GetMachineDescription(void* target, IAnimClassInterface* AnimBlueprintClass, FAnimNode_StateMachine* MachineInstance){	
		auto result = (void*)((UAnimInstance*)target)->GetMachineDescription(AnimBlueprintClass, MachineInstance);	
		return result;	
	}
	void* uapi_UAnimInstance_GetMontageInstanceForID(void* target, int32 MontageInstanceID){	
		auto result = (void*)((UAnimInstance*)target)->GetMontageInstanceForID(MontageInstanceID);	
		return result;	
	}
	void* uapi_UAnimInstance_GetOwningActor(void* target){	
		auto result = (void*)((UAnimInstance*)target)->GetOwningActor();	
		return result;	
	}
	void* uapi_UAnimInstance_GetOwningComponent(void* target){	
		auto result = (void*)((UAnimInstance*)target)->GetOwningComponent();	
		return result;	
	}
	void* uapi_UAnimInstance_GetPoseSnapshot(void* target, UName SnapshotName){	
		auto result = (void*)((UAnimInstance*)target)->GetPoseSnapshot(ToFName(SnapshotName));	
		return result;	
	}
	bool uapi_UAnimInstance_GetPropagateNotifiesToLinkedInstances(void* target){	
		auto result = ((UAnimInstance*)target)->GetPropagateNotifiesToLinkedInstances();	
		return result;	
	}
	bool uapi_UAnimInstance_GetReceiveNotifiesFromLinkedInstances(void* target){	
		auto result = ((UAnimInstance*)target)->GetReceiveNotifiesFromLinkedInstances();	
		return result;	
	}
	float uapi_UAnimInstance_GetRelevantAnimLength(void* target, int32 MachineIndex, int32 StateIndex){	
		auto result = ((UAnimInstance*)target)->GetRelevantAnimLength(MachineIndex, StateIndex);	
		return result;	
	}
	float uapi_UAnimInstance_GetRelevantAnimTime(void* target, int32 MachineIndex, int32 StateIndex){	
		auto result = ((UAnimInstance*)target)->GetRelevantAnimTime(MachineIndex, StateIndex);	
		return result;	
	}
	float uapi_UAnimInstance_GetRelevantAnimTimeFraction(void* target, int32 MachineIndex, int32 StateIndex){	
		auto result = ((UAnimInstance*)target)->GetRelevantAnimTimeFraction(MachineIndex, StateIndex);	
		return result;	
	}
	float uapi_UAnimInstance_GetRelevantAnimTimeRemaining(void* target, int32 MachineIndex, int32 StateIndex){	
		auto result = ((UAnimInstance*)target)->GetRelevantAnimTimeRemaining(MachineIndex, StateIndex);	
		return result;	
	}
	float uapi_UAnimInstance_GetRelevantAnimTimeRemainingFraction(void* target, int32 MachineIndex, int32 StateIndex){	
		auto result = ((UAnimInstance*)target)->GetRelevantAnimTimeRemainingFraction(MachineIndex, StateIndex);	
		return result;	
	}
	void* uapi_UAnimInstance_GetRootMotionMontageInstance(void* target){	
		auto result = (void*)((UAnimInstance*)target)->GetRootMotionMontageInstance();	
		return result;	
	}
	void* uapi_UAnimInstance_GetSkelMeshComponent(void* target){	
		auto result = (void*)((UAnimInstance*)target)->GetSkelMeshComponent();	
		return result;	
	}
	int32 uapi_UAnimInstance_GetStateMachineIndex(void* target, UName MachineName){	
		auto result = ((UAnimInstance*)target)->GetStateMachineIndex(ToFName(MachineName));	
		return result;	
	}
	void* uapi_UAnimInstance_GetStateMachineInstance(void* target, int32 MachineIndex){	
		auto result = (void*)((UAnimInstance*)target)->GetStateMachineInstance(MachineIndex);	
		return result;	
	}
	void* uapi_UAnimInstance_GetStateMachineInstanceDesc(void* target, UName MachineName){	
		auto result = (void*)((UAnimInstance*)target)->GetStateMachineInstanceDesc(ToFName(MachineName));	
		return result;	
	}
	void* uapi_UAnimInstance_GetStateMachineInstanceFromName(void* target, UName MachineName){	
		auto result = (void*)((UAnimInstance*)target)->GetStateMachineInstanceFromName(ToFName(MachineName));	
		return result;	
	}
	int32 uapi_UAnimInstance_GetSyncGroupIndexFromName(void* target, UName SyncGroupName){	
		auto result = ((UAnimInstance*)target)->GetSyncGroupIndexFromName(ToFName(SyncGroupName));	
		return result;	
	}
	bool uapi_UAnimInstance_GetTimeToClosestMarker(void* target, UName SyncGroup, UName MarkerName, float& OutMarkerTime){	
		auto result = ((UAnimInstance*)target)->GetTimeToClosestMarker(ToFName(SyncGroup), ToFName(MarkerName), OutMarkerTime);	
		return result;	
	}
	void* uapi_UAnimInstance_GetWorld(void* target){	
		auto result = (void*)((UAnimInstance*)target)->GetWorld();	
		return result;	
	}
	bool uapi_UAnimInstance_HasActiveCurves(void* target){	
		auto result = ((UAnimInstance*)target)->HasActiveCurves();	
		return result;	
	}
	bool uapi_UAnimInstance_HasMarkerBeenHitThisFrame(void* target, UName SyncGroup, UName MarkerName){	
		auto result = ((UAnimInstance*)target)->HasMarkerBeenHitThisFrame(ToFName(SyncGroup), ToFName(MarkerName));	
		return result;	
	}
	bool uapi_UAnimInstance_HasMorphTargetCurves(void* target){	
		auto result = ((UAnimInstance*)target)->HasMorphTargetCurves();	
		return result;	
	}
	void uapi_UAnimInstance_InitializeAnimation(void* target, bool bInDeferRootNodeInitialization){	
		((UAnimInstance*)target)->InitializeAnimation(bInDeferRootNodeInitialization);	
	}
	void uapi_UAnimInstance_InitializeGroupedLayers(void* target, bool bInDeferSubGraphInitialization){	
		((UAnimInstance*)target)->InitializeGroupedLayers(bInDeferSubGraphInitialization);	
	}
	bool uapi_UAnimInstance_IsAnyMontagePlaying(void* target){	
		auto result = ((UAnimInstance*)target)->IsAnyMontagePlaying();	
		return result;	
	}
	bool uapi_UAnimInstance_IsBeingDebugged(void* target){	
		auto result = ((UAnimInstance*)target)->IsBeingDebugged();	
		return result;	
	}
	bool uapi_UAnimInstance_IsPlayingSlotAnimation(void* target, UAnimSequenceBase* Asset, UName SlotNodeName){	
		auto result = ((UAnimInstance*)target)->IsPlayingSlotAnimation(Asset, ToFName(SlotNodeName));	
		return result;	
	}
	bool uapi_UAnimInstance_IsPostUpdatingAnimation(void* target){	
		auto result = ((UAnimInstance*)target)->IsPostUpdatingAnimation();	
		return result;	
	}
	bool uapi_UAnimInstance_IsRunningParallelEvaluation(void* target){	
		auto result = ((UAnimInstance*)target)->IsRunningParallelEvaluation();	
		return result;	
	}
	bool uapi_UAnimInstance_IsSyncGroupBetweenMarkers(void* target, UName InSyncGroupName, UName PreviousMarker, UName NextMarker, bool bRespectMarkerOrder){	
		auto result = ((UAnimInstance*)target)->IsSyncGroupBetweenMarkers(ToFName(InSyncGroupName), ToFName(PreviousMarker), ToFName(NextMarker), bRespectMarkerOrder);	
		return result;	
	}
	bool uapi_UAnimInstance_IsUpdatingAnimation(void* target){	
		auto result = ((UAnimInstance*)target)->IsUpdatingAnimation();	
		return result;	
	}
	bool uapi_UAnimInstance_IsUsingMainInstanceMontageEvaluationData(void* target){	
		auto result = ((UAnimInstance*)target)->IsUsingMainInstanceMontageEvaluationData();	
		return result;	
	}
	void uapi_UAnimInstance_LockAIResources(void* target, bool bLockMovement, bool LockAILogic){	
		((UAnimInstance*)target)->LockAIResources(bLockMovement, LockAILogic);	
	}
	void uapi_UAnimInstance_MontageSync_Follow(void* target, UAnimMontage* MontageFollower, UAnimInstance* OtherAnimInstance, UAnimMontage* MontageLeader){	
		((UAnimInstance*)target)->MontageSync_Follow(MontageFollower, OtherAnimInstance, MontageLeader);	
	}
	void uapi_UAnimInstance_MontageSync_StopFollowing(void* target, UAnimMontage* MontageFollower){	
		((UAnimInstance*)target)->MontageSync_StopFollowing(MontageFollower);	
	}
	float uapi_UAnimInstance_Montage_GetBlendTime(void* target, UAnimMontage* Montage){	
		auto result = ((UAnimInstance*)target)->Montage_GetBlendTime(Montage);	
		return result;	
	}
	void* uapi_UAnimInstance_Montage_GetBlendingOutDelegate(void* target, UAnimMontage* Montage){	
		auto result = (void*)((UAnimInstance*)target)->Montage_GetBlendingOutDelegate(Montage);	
		return result;	
	}
	UName uapi_UAnimInstance_Montage_GetCurrentSection(void* target, UAnimMontage* Montage){	
		auto result = ToUName(((UAnimInstance*)target)->Montage_GetCurrentSection(Montage));	
		return result;	
	}
	bool uapi_UAnimInstance_Montage_GetIsStopped(void* target, UAnimMontage* Montage){	
		auto result = ((UAnimInstance*)target)->Montage_GetIsStopped(Montage);	
		return result;	
	}
	float uapi_UAnimInstance_Montage_GetPlayRate(void* target, UAnimMontage* Montage){	
		auto result = ((UAnimInstance*)target)->Montage_GetPlayRate(Montage);	
		return result;	
	}
	float uapi_UAnimInstance_Montage_GetPosition(void* target, UAnimMontage* Montage){	
		auto result = ((UAnimInstance*)target)->Montage_GetPosition(Montage);	
		return result;	
	}
	bool uapi_UAnimInstance_Montage_IsActive(void* target, UAnimMontage* Montage){	
		auto result = ((UAnimInstance*)target)->Montage_IsActive(Montage);	
		return result;	
	}
	bool uapi_UAnimInstance_Montage_IsPlaying(void* target, UAnimMontage* Montage){	
		auto result = ((UAnimInstance*)target)->Montage_IsPlaying(Montage);	
		return result;	
	}
	void uapi_UAnimInstance_Montage_JumpToSection(void* target, UName SectionName, UAnimMontage* Montage){	
		((UAnimInstance*)target)->Montage_JumpToSection(ToFName(SectionName), Montage);	
	}
	void uapi_UAnimInstance_Montage_JumpToSectionsEnd(void* target, UName SectionName, UAnimMontage* Montage){	
		((UAnimInstance*)target)->Montage_JumpToSectionsEnd(ToFName(SectionName), Montage);	
	}
	void uapi_UAnimInstance_Montage_Pause(void* target, UAnimMontage* Montage){	
		((UAnimInstance*)target)->Montage_Pause(Montage);	
	}
	float uapi_UAnimInstance_Montage_Play(void* target, UAnimMontage* MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages){	
		auto result = ((UAnimInstance*)target)->Montage_Play(MontageToPlay, InPlayRate, ReturnValueType, InTimeToStartMontageAt, bStopAllMontages);	
		return result;	
	}
	void uapi_UAnimInstance_Montage_Resume(void* target, UAnimMontage* Montage){	
		((UAnimInstance*)target)->Montage_Resume(Montage);	
	}
	void uapi_UAnimInstance_Montage_SetNextSection(void* target, UName SectionNameToChange, UName NextSection, UAnimMontage* Montage){	
		((UAnimInstance*)target)->Montage_SetNextSection(ToFName(SectionNameToChange), ToFName(NextSection), Montage);	
	}
	void uapi_UAnimInstance_Montage_SetPlayRate(void* target, UAnimMontage* Montage, float NewPlayRate){	
		((UAnimInstance*)target)->Montage_SetPlayRate(Montage, NewPlayRate);	
	}
	void uapi_UAnimInstance_Montage_SetPosition(void* target, UAnimMontage* Montage, float NewPosition){	
		((UAnimInstance*)target)->Montage_SetPosition(Montage, NewPosition);	
	}
	void uapi_UAnimInstance_Montage_Stop(void* target, float InBlendOutTime, UAnimMontage* Montage){	
		((UAnimInstance*)target)->Montage_Stop(InBlendOutTime, Montage);	
	}
	void uapi_UAnimInstance_Montage_StopGroupByName(void* target, float InBlendOutTime, UName GroupName){	
		((UAnimInstance*)target)->Montage_StopGroupByName(InBlendOutTime, ToFName(GroupName));	
	}
	void uapi_UAnimInstance_NativeBeginPlay(void* target){	
		((UAnimInstance*)target)->NativeBeginPlay();	
	}
	void uapi_UAnimInstance_NativeInitializeAnimation(void* target){	
		((UAnimInstance*)target)->NativeInitializeAnimation();	
	}
	void uapi_UAnimInstance_NativePostEvaluateAnimation(void* target){	
		((UAnimInstance*)target)->NativePostEvaluateAnimation();	
	}
	void uapi_UAnimInstance_NativeThreadSafeUpdateAnimation(void* target, float DeltaSeconds){	
		((UAnimInstance*)target)->NativeThreadSafeUpdateAnimation(DeltaSeconds);	
	}
	void uapi_UAnimInstance_NativeUninitializeAnimation(void* target){	
		((UAnimInstance*)target)->NativeUninitializeAnimation();	
	}
	void uapi_UAnimInstance_NativeUpdateAnimation(void* target, float DeltaSeconds){	
		((UAnimInstance*)target)->NativeUpdateAnimation(DeltaSeconds);	
	}
	bool uapi_UAnimInstance_NeedsUpdate(void* target){	
		auto result = ((UAnimInstance*)target)->NeedsUpdate();	
		return result;	
	}
	void uapi_UAnimInstance_OnUROSkipTickAnimation(void* target){	
		((UAnimInstance*)target)->OnUROSkipTickAnimation();	
	}
	bool uapi_UAnimInstance_PCV_ShouldNotifyAboutNodesNotUsingFastPath(void* target){	
		auto result = ((UAnimInstance*)target)->PCV_ShouldNotifyAboutNodesNotUsingFastPath();	
		return result;	
	}
	bool uapi_UAnimInstance_PCV_ShouldWarnAboutNodesNotUsingFastPath(void* target){	
		auto result = ((UAnimInstance*)target)->PCV_ShouldWarnAboutNodesNotUsingFastPath();	
		return result;	
	}
	bool uapi_UAnimInstance_ParallelCanEvaluate(void* target, USkeletalMesh* InSkeletalMesh){	
		auto result = ((UAnimInstance*)target)->ParallelCanEvaluate(InSkeletalMesh);	
		return result;	
	}
	void uapi_UAnimInstance_ParallelUpdateAnimation(void* target){	
		((UAnimInstance*)target)->ParallelUpdateAnimation();	
	}
	void* uapi_UAnimInstance_PlaySlotAnimationAsDynamicMontage(void* target, UAnimSequenceBase* Asset, UName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt){	
		auto result = (void*)((UAnimInstance*)target)->PlaySlotAnimationAsDynamicMontage(Asset, ToFName(SlotNodeName), BlendInTime, BlendOutTime, InPlayRate, LoopCount, BlendOutTriggerTime, InTimeToStartMontageAt);	
		return result;	
	}
	void uapi_UAnimInstance_PostEvaluateAnimation(void* target){	
		((UAnimInstance*)target)->PostEvaluateAnimation();	
	}
	void uapi_UAnimInstance_PostInitProperties(void* target){	
		((UAnimInstance*)target)->PostInitProperties();	
	}
	void uapi_UAnimInstance_PostUpdateAnimation(void* target){	
		((UAnimInstance*)target)->PostUpdateAnimation();	
	}
	void uapi_UAnimInstance_PreEvaluateAnimation(void* target){	
		((UAnimInstance*)target)->PreEvaluateAnimation();	
	}
	void uapi_UAnimInstance_PreUpdateLinkedInstances(void* target, float DeltaSeconds){	
		((UAnimInstance*)target)->PreUpdateLinkedInstances(DeltaSeconds);	
	}
	bool uapi_UAnimInstance_QueryAndMarkTransitionEvent(void* target, int32 MachineIndex, int32 TransitionIndex, UName EventName){	
		auto result = ((UAnimInstance*)target)->QueryAndMarkTransitionEvent(MachineIndex, TransitionIndex, ToFName(EventName));	
		return result;	
	}
	bool uapi_UAnimInstance_QueryTransitionEvent(void* target, int32 MachineIndex, int32 TransitionIndex, UName EventName){	
		auto result = ((UAnimInstance*)target)->QueryTransitionEvent(MachineIndex, TransitionIndex, ToFName(EventName));	
		return result;	
	}
	void uapi_UAnimInstance_RecalcRequiredBones(void* target){	
		((UAnimInstance*)target)->RecalcRequiredBones();	
	}
	void uapi_UAnimInstance_RecordMachineWeight(void* target, int32 InMachineClassIndex, float InMachineWeight){	
		((UAnimInstance*)target)->RecordMachineWeight(InMachineClassIndex, InMachineWeight);	
	}
	void uapi_UAnimInstance_RecordStateWeight(void* target, int32 InMachineClassIndex, int32 InStateIndex, float InStateWeight, float InElapsedTime){	
		((UAnimInstance*)target)->RecordStateWeight(InMachineClassIndex, InStateIndex, InStateWeight, InElapsedTime);	
	}
	void uapi_UAnimInstance_RefreshCurves(void* target, USkeletalMeshComponent* Component){	
		((UAnimInstance*)target)->RefreshCurves(Component);	
	}
	void uapi_UAnimInstance_RemoveExternalNotifyHandler(void* target, UObject* ExternalHandlerObject, UName NotifyEventName){	
		((UAnimInstance*)target)->RemoveExternalNotifyHandler(ExternalHandlerObject, ToFName(NotifyEventName));	
	}
	void uapi_UAnimInstance_RemovePoseSnapshot(void* target, UName SnapshotName){	
		((UAnimInstance*)target)->RemovePoseSnapshot(ToFName(SnapshotName));	
	}
	void uapi_UAnimInstance_RequestMontageInertialization(void* target, UAnimMontage* Montage, float Duration, UBlendProfile* BlendProfile){	
		((UAnimInstance*)target)->RequestMontageInertialization(Montage, Duration, BlendProfile);	
	}
	void uapi_UAnimInstance_RequestSlotGroupInertialization(void* target, UName InSlotGroupName, float Duration, UBlendProfile* BlendProfile){	
		((UAnimInstance*)target)->RequestSlotGroupInertialization(ToFName(InSlotGroupName), Duration, BlendProfile);	
	}
	void uapi_UAnimInstance_SavePoseSnapshot(void* target, UName SnapshotName){	
		((UAnimInstance*)target)->SavePoseSnapshot(ToFName(SnapshotName));	
	}
	void uapi_UAnimInstance_SetMorphTarget(void* target, UName MorphTargetName, float Value){	
		((UAnimInstance*)target)->SetMorphTarget(ToFName(MorphTargetName), Value);	
	}
	void uapi_UAnimInstance_SetPropagateNotifiesToLinkedInstances(void* target, bool bSet){	
		((UAnimInstance*)target)->SetPropagateNotifiesToLinkedInstances(bSet);	
	}
	void uapi_UAnimInstance_SetReceiveNotifiesFromLinkedInstances(void* target, bool bSet){	
		((UAnimInstance*)target)->SetReceiveNotifiesFromLinkedInstances(bSet);	
	}
	void uapi_UAnimInstance_SetUseMainInstanceMontageEvaluationData(void* target, bool bSet){	
		((UAnimInstance*)target)->SetUseMainInstanceMontageEvaluationData(bSet);	
	}
	bool uapi_UAnimInstance_ShouldExtractRootMotion(void* target){	
		auto result = ((UAnimInstance*)target)->ShouldExtractRootMotion();	
		return result;	
	}
	bool uapi_UAnimInstance_ShouldTriggerAnimNotifyState(void* target, UAnimNotifyState* AnimNotifyState){	
		auto result = ((UAnimInstance*)target)->ShouldTriggerAnimNotifyState(AnimNotifyState);	
		return result;	
	}
	void uapi_UAnimInstance_StopAllMontages(void* target, float BlendOut){	
		((UAnimInstance*)target)->StopAllMontages(BlendOut);	
	}
	void uapi_UAnimInstance_StopSlotAnimation(void* target, float InBlendOutTime, UName SlotNodeName){	
		((UAnimInstance*)target)->StopSlotAnimation(InBlendOutTime, ToFName(SlotNodeName));	
	}
	void uapi_UAnimInstance_TriggerAnimNotifies(void* target, float DeltaSeconds){	
		((UAnimInstance*)target)->TriggerAnimNotifies(DeltaSeconds);	
	}
	void uapi_UAnimInstance_TriggerSingleAnimNotify(void* target, FAnimNotifyEvent* AnimNotifyEvent){	
		((UAnimInstance*)target)->TriggerSingleAnimNotify(AnimNotifyEvent);	
	}
	void* uapi_UAnimInstance_TryGetPawnOwner(void* target){	
		auto result = (void*)((UAnimInstance*)target)->TryGetPawnOwner();	
		return result;	
	}
	void uapi_UAnimInstance_UninitializeAnimation(void* target){	
		((UAnimInstance*)target)->UninitializeAnimation();	
	}
	void uapi_UAnimInstance_UnlockAIResources(void* target, bool bUnlockMovement, bool UnlockAILogic){	
		((UAnimInstance*)target)->UnlockAIResources(bUnlockMovement, UnlockAILogic);	
	}
	void uapi_UAnimInstance_UpdateCurvesPostEvaluation(void* target){	
		((UAnimInstance*)target)->UpdateCurvesPostEvaluation();	
	}
	bool uapi_UAnimInstance_WasAnimNotifyNameTriggeredInAnyState(void* target, UName NotifyName){	
		auto result = ((UAnimInstance*)target)->WasAnimNotifyNameTriggeredInAnyState(ToFName(NotifyName));	
		return result;	
	}
	bool uapi_UAnimInstance_WasAnimNotifyNameTriggeredInSourceState(void* target, int32 MachineIndex, int32 StateIndex, UName NotifyName){	
		auto result = ((UAnimInstance*)target)->WasAnimNotifyNameTriggeredInSourceState(MachineIndex, StateIndex, ToFName(NotifyName));	
		return result;	
	}
	bool uapi_UAnimInstance_WasAnimNotifyNameTriggeredInStateMachine(void* target, int32 MachineIndex, UName NotifyName){	
		auto result = ((UAnimInstance*)target)->WasAnimNotifyNameTriggeredInStateMachine(MachineIndex, ToFName(NotifyName));	
		return result;	
	}
	void uapi_UKismetSystemLibrary_CancelTransaction(int32 Index){	
		(UKismetSystemLibrary::CancelTransaction(Index));	
	}
	void uapi_UKismetSystemLibrary_CollectGarbage(){	
		(UKismetSystemLibrary::CollectGarbage());	
	}
	void uapi_UKismetSystemLibrary_ControlScreensaver(bool bAllowScreenSaver){	
		(UKismetSystemLibrary::ControlScreensaver(bAllowScreenSaver));	
	}
	void uapi_UKismetSystemLibrary_CreateCopyForUndoBuffer(UObject* ObjectToModify){	
		(UKismetSystemLibrary::CreateCopyForUndoBuffer(ObjectToModify));	
	}
	void uapi_UKismetSystemLibrary_DrawDebugCoordinateSystem(UObject* WorldContextObject, Vector3 AxisLoc, Rotator AxisRot, float Scale, float Duration, float Thickness){	
		(UKismetSystemLibrary::DrawDebugCoordinateSystem(WorldContextObject, ToFVector(AxisLoc), ToFRotator(AxisRot), Scale, Duration, Thickness));	
	}
	int32 uapi_UKismetSystemLibrary_EndTransaction(){	
		auto result = (UKismetSystemLibrary::EndTransaction());	
		return result;	
	}
	void uapi_UKismetSystemLibrary_FlushDebugStrings(UObject* WorldContextObject){	
		(UKismetSystemLibrary::FlushDebugStrings(WorldContextObject));	
	}
	void uapi_UKismetSystemLibrary_FlushPersistentDebugLines(UObject* WorldContextObject){	
		(UKismetSystemLibrary::FlushPersistentDebugLines(WorldContextObject));	
	}
	void uapi_UKismetSystemLibrary_ForceCloseAdBanner(){	
		(UKismetSystemLibrary::ForceCloseAdBanner());	
	}
	bool uapi_UKismetSystemLibrary_Generic_GetEditorProperty(UObject* Object, FProperty* ObjectProp, void* ValuePtr, FProperty* ValueProp){	
		auto result = (UKismetSystemLibrary::Generic_GetEditorProperty(Object, ObjectProp, ValuePtr, ValueProp));	
		return result;	
	}
	void uapi_UKismetSystemLibrary_Generic_SetStructurePropertyByName(UObject* OwnerObject, UName StructPropertyName, void* SrcStructAddr){	
		(UKismetSystemLibrary::Generic_SetStructurePropertyByName(OwnerObject, ToFName(StructPropertyName), SrcStructAddr));	
	}
	int32 uapi_UKismetSystemLibrary_GetAdIDCount(){	
		auto result = (UKismetSystemLibrary::GetAdIDCount());	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetBuildConfiguration(){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetBuildConfiguration()));	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetBuildVersion(){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetBuildVersion()));	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetClassDisplayName(UClass* arg0){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetClassDisplayName(arg0)));	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetCommandLine(){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetCommandLine()));	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetDefaultLanguage(){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetDefaultLanguage()));	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetDefaultLocale(){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetDefaultLocale()));	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetDeviceId(){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetDeviceId()));	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetDisplayName(UObject* Object){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetDisplayName(Object)));	
		return result;	
	}
	bool uapi_UKismetSystemLibrary_GetEditorProperty(UObject* Object, UName PropertyName, int32& PropertyValue){	
		auto result = (UKismetSystemLibrary::GetEditorProperty(Object, ToFName(PropertyName), PropertyValue));	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetEngineVersion(){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetEngineVersion()));	
		return result;	
	}
	int64 uapi_UKismetSystemLibrary_GetFrameCount(){	
		auto result = (UKismetSystemLibrary::GetFrameCount());	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetGameBundleId(){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetGameBundleId()));	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetGameName(){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetGameName()));	
		return result;	
	}
	double uapi_UKismetSystemLibrary_GetGameTimeInSeconds(UObject* WorldContextObject){	
		auto result = (UKismetSystemLibrary::GetGameTimeInSeconds(WorldContextObject));	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetGamepadControllerName(int32 ControllerId){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetGamepadControllerName(ControllerId)));	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetLocalCurrencyCode(){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetLocalCurrencyCode()));	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetLocalCurrencySymbol(){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetLocalCurrencySymbol()));	
		return result;	
	}
	int32 uapi_UKismetSystemLibrary_GetMinYResolutionFor3DView(){	
		auto result = (UKismetSystemLibrary::GetMinYResolutionFor3DView());	
		return result;	
	}
	int32 uapi_UKismetSystemLibrary_GetMinYResolutionForUI(){	
		auto result = (UKismetSystemLibrary::GetMinYResolutionForUI());	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetObjectName(UObject* Object){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetObjectName(Object)));	
		return result;	
	}
	void* uapi_UKismetSystemLibrary_GetOuterObject(UObject* Object){	
		auto result = (void*)(UKismetSystemLibrary::GetOuterObject(Object));	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetPathName(UObject* Object){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetPathName(Object)));	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetPlatformUserDir(){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetPlatformUserDir()));	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetPlatformUserName(){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetPlatformUserName()));	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetProjectContentDirectory(){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetProjectContentDirectory()));	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetProjectDirectory(){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetProjectDirectory()));	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetProjectSavedDirectory(){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetProjectSavedDirectory()));	
		return result;	
	}
	int32 uapi_UKismetSystemLibrary_GetRenderingDetailMode(){	
		auto result = (UKismetSystemLibrary::GetRenderingDetailMode());	
		return result;	
	}
	int32 uapi_UKismetSystemLibrary_GetRenderingMaterialQualityLevel(){	
		auto result = (UKismetSystemLibrary::GetRenderingMaterialQualityLevel());	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetSystemPath(UObject* Object){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetSystemPath(Object)));	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_GetUniqueDeviceId(){	
		auto result = FString2Utf8((UKismetSystemLibrary::GetUniqueDeviceId()));	
		return result;	
	}
	bool uapi_UKismetSystemLibrary_GetVolumeButtonsHandledBySystem(){	
		auto result = (UKismetSystemLibrary::GetVolumeButtonsHandledBySystem());	
		return result;	
	}
	bool uapi_UKismetSystemLibrary_HasMultipleLocalPlayers(UObject* WorldContextObject){	
		auto result = (UKismetSystemLibrary::HasMultipleLocalPlayers(WorldContextObject));	
		return result;	
	}
	void uapi_UKismetSystemLibrary_HideAdBanner(){	
		(UKismetSystemLibrary::HideAdBanner());	
	}
	bool uapi_UKismetSystemLibrary_IsControllerAssignedToGamepad(int32 ControllerId){	
		auto result = (UKismetSystemLibrary::IsControllerAssignedToGamepad(ControllerId));	
		return result;	
	}
	bool uapi_UKismetSystemLibrary_IsDedicatedServer(UObject* WorldContextObject){	
		auto result = (UKismetSystemLibrary::IsDedicatedServer(WorldContextObject));	
		return result;	
	}
	bool uapi_UKismetSystemLibrary_IsInterstitialAdAvailable(){	
		auto result = (UKismetSystemLibrary::IsInterstitialAdAvailable());	
		return result;	
	}
	bool uapi_UKismetSystemLibrary_IsInterstitialAdRequested(){	
		auto result = (UKismetSystemLibrary::IsInterstitialAdRequested());	
		return result;	
	}
	bool uapi_UKismetSystemLibrary_IsLoggedIn(APlayerController* SpecificPlayer){	
		auto result = (UKismetSystemLibrary::IsLoggedIn(SpecificPlayer));	
		return result;	
	}
	bool uapi_UKismetSystemLibrary_IsPackagedForDistribution(){	
		auto result = (UKismetSystemLibrary::IsPackagedForDistribution());	
		return result;	
	}
	bool uapi_UKismetSystemLibrary_IsScreensaverEnabled(){	
		auto result = (UKismetSystemLibrary::IsScreensaverEnabled());	
		return result;	
	}
	bool uapi_UKismetSystemLibrary_IsServer(UObject* WorldContextObject){	
		auto result = (UKismetSystemLibrary::IsServer(WorldContextObject));	
		return result;	
	}
	bool uapi_UKismetSystemLibrary_IsStandalone(UObject* WorldContextObject){	
		auto result = (UKismetSystemLibrary::IsStandalone(WorldContextObject));	
		return result;	
	}
	bool uapi_UKismetSystemLibrary_IsUnattended(){	
		auto result = (UKismetSystemLibrary::IsUnattended());	
		return result;	
	}
	void uapi_UKismetSystemLibrary_K2_ClearTimer(UObject* Object, NativeString FunctionName){	
		auto fstr1 = Utf82FString(FunctionName);	
		(UKismetSystemLibrary::K2_ClearTimer(Object, fstr1));	
	}
	float uapi_UKismetSystemLibrary_K2_GetTimerElapsedTime(UObject* Object, NativeString FunctionName){	
		auto fstr1 = Utf82FString(FunctionName);	
		auto result = (UKismetSystemLibrary::K2_GetTimerElapsedTime(Object, fstr1));	
		return result;	
	}
	float uapi_UKismetSystemLibrary_K2_GetTimerRemainingTime(UObject* Object, NativeString FunctionName){	
		auto fstr1 = Utf82FString(FunctionName);	
		auto result = (UKismetSystemLibrary::K2_GetTimerRemainingTime(Object, fstr1));	
		return result;	
	}
	bool uapi_UKismetSystemLibrary_K2_IsTimerActive(UObject* Object, NativeString FunctionName){	
		auto fstr1 = Utf82FString(FunctionName);	
		auto result = (UKismetSystemLibrary::K2_IsTimerActive(Object, fstr1));	
		return result;	
	}
	bool uapi_UKismetSystemLibrary_K2_IsTimerPaused(UObject* Object, NativeString FunctionName){	
		auto fstr1 = Utf82FString(FunctionName);	
		auto result = (UKismetSystemLibrary::K2_IsTimerPaused(Object, fstr1));	
		return result;	
	}
	void uapi_UKismetSystemLibrary_K2_PauseTimer(UObject* Object, NativeString FunctionName){	
		auto fstr1 = Utf82FString(FunctionName);	
		(UKismetSystemLibrary::K2_PauseTimer(Object, fstr1));	
	}
	bool uapi_UKismetSystemLibrary_K2_TimerExists(UObject* Object, NativeString FunctionName){	
		auto fstr1 = Utf82FString(FunctionName);	
		auto result = (UKismetSystemLibrary::K2_TimerExists(Object, fstr1));	
		return result;	
	}
	void uapi_UKismetSystemLibrary_K2_UnPauseTimer(UObject* Object, NativeString FunctionName){	
		auto fstr1 = Utf82FString(FunctionName);	
		(UKismetSystemLibrary::K2_UnPauseTimer(Object, fstr1));	
	}
	void uapi_UKismetSystemLibrary_LoadInterstitialAd(int32 AdIdIndex){	
		(UKismetSystemLibrary::LoadInterstitialAd(AdIdIndex));	
	}
	bool uapi_UKismetSystemLibrary_MakeLiteralBool(bool Value){	
		auto result = (UKismetSystemLibrary::MakeLiteralBool(Value));	
		return result;	
	}
	uint8 uapi_UKismetSystemLibrary_MakeLiteralByte(uint8 Value){	
		auto result = (UKismetSystemLibrary::MakeLiteralByte(Value));	
		return result;	
	}
	double uapi_UKismetSystemLibrary_MakeLiteralDouble(double Value){	
		auto result = (UKismetSystemLibrary::MakeLiteralDouble(Value));	
		return result;	
	}
	int32 uapi_UKismetSystemLibrary_MakeLiteralInt(int32 Value){	
		auto result = (UKismetSystemLibrary::MakeLiteralInt(Value));	
		return result;	
	}
	int64 uapi_UKismetSystemLibrary_MakeLiteralInt64(int64 Value){	
		auto result = (UKismetSystemLibrary::MakeLiteralInt64(Value));	
		return result;	
	}
	UName uapi_UKismetSystemLibrary_MakeLiteralName(UName Value){	
		auto result = ToUName((UKismetSystemLibrary::MakeLiteralName(ToFName(Value))));	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_MakeLiteralString(NativeString Value){	
		auto fstr0 = Utf82FString(Value);	
		auto result = FString2Utf8((UKismetSystemLibrary::MakeLiteralString(fstr0)));	
		return result;	
	}
	const char* uapi_UKismetSystemLibrary_MakeLiteralText(NativeString Value){	
		auto fstr0 = Utf82FText(Value);	
		auto result = FText2Utf8((UKismetSystemLibrary::MakeLiteralText(fstr0)));	
		return result;	
	}
	void uapi_UKismetSystemLibrary_QuitEditor(){	
		(UKismetSystemLibrary::QuitEditor());	
	}
	void uapi_UKismetSystemLibrary_RegisterForRemoteNotifications(){	
		(UKismetSystemLibrary::RegisterForRemoteNotifications());	
	}
	void uapi_UKismetSystemLibrary_ResetGamepadAssignmentToController(int32 ControllerId){	
		(UKismetSystemLibrary::ResetGamepadAssignmentToController(ControllerId));	
	}
	void uapi_UKismetSystemLibrary_ResetGamepadAssignments(){	
		(UKismetSystemLibrary::ResetGamepadAssignments());	
	}
	void uapi_UKismetSystemLibrary_SetBoolPropertyByName(UObject* Object, UName PropertyName, bool Value){	
		(UKismetSystemLibrary::SetBoolPropertyByName(Object, ToFName(PropertyName), Value));	
	}
	void uapi_UKismetSystemLibrary_SetBytePropertyByName(UObject* Object, UName PropertyName, uint8 Value){	
		(UKismetSystemLibrary::SetBytePropertyByName(Object, ToFName(PropertyName), Value));	
	}
	void uapi_UKismetSystemLibrary_SetDoublePropertyByName(UObject* Object, UName PropertyName, double Value){	
		(UKismetSystemLibrary::SetDoublePropertyByName(Object, ToFName(PropertyName), Value));	
	}
	void uapi_UKismetSystemLibrary_SetGamepadsBlockDeviceFeedback(bool bBlock){	
		(UKismetSystemLibrary::SetGamepadsBlockDeviceFeedback(bBlock));	
	}
	void uapi_UKismetSystemLibrary_SetInt64PropertyByName(UObject* Object, UName PropertyName, int64 Value){	
		(UKismetSystemLibrary::SetInt64PropertyByName(Object, ToFName(PropertyName), Value));	
	}
	void uapi_UKismetSystemLibrary_SetIntPropertyByName(UObject* Object, UName PropertyName, int32 Value){	
		(UKismetSystemLibrary::SetIntPropertyByName(Object, ToFName(PropertyName), Value));	
	}
	void uapi_UKismetSystemLibrary_SetObjectPropertyByName(UObject* Object, UName PropertyName, UObject* Value){	
		(UKismetSystemLibrary::SetObjectPropertyByName(Object, ToFName(PropertyName), Value));	
	}
	void uapi_UKismetSystemLibrary_SetSuppressViewportTransitionMessage(UObject* WorldContextObject, bool bState){	
		(UKismetSystemLibrary::SetSuppressViewportTransitionMessage(WorldContextObject, bState));	
	}
	void uapi_UKismetSystemLibrary_SetVolumeButtonsHandledBySystem(bool bEnabled){	
		(UKismetSystemLibrary::SetVolumeButtonsHandledBySystem(bEnabled));	
	}
	void uapi_UKismetSystemLibrary_ShowAdBanner(int32 AdIdIndex, bool bShowOnBottomOfScreen){	
		(UKismetSystemLibrary::ShowAdBanner(AdIdIndex, bShowOnBottomOfScreen));	
	}
	void uapi_UKismetSystemLibrary_ShowInterstitialAd(){	
		(UKismetSystemLibrary::ShowInterstitialAd());	
	}
	void uapi_UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreen(APlayerController* SpecificPlayer){	
		(UKismetSystemLibrary::ShowPlatformSpecificAchievementsScreen(SpecificPlayer));	
	}
	void uapi_UKismetSystemLibrary_SnapshotObject(UObject* Object){	
		(UKismetSystemLibrary::SnapshotObject(Object));	
	}
	void uapi_UKismetSystemLibrary_TransactObject(UObject* Object){	
		(UKismetSystemLibrary::TransactObject(Object));	
	}
	void uapi_UKismetSystemLibrary_UnregisterForRemoteNotifications(){	
		(UKismetSystemLibrary::UnregisterForRemoteNotifications());	
	}
	int32 uapi_UAnimMontage_AddAnimCompositeSection(void* target, UName InSectionName, float StartPos){	
		auto result = ((UAnimMontage*)target)->AddAnimCompositeSection(ToFName(InSectionName), StartPos);	
		return result;	
	}
	float uapi_UAnimMontage_CalculateSequenceLength(void* target){	
		auto result = ((UAnimMontage*)target)->CalculateSequenceLength();	
		return result;	
	}
	bool uapi_UAnimMontage_CanBeUsedInComposition(void* target){	
		auto result = ((UAnimMontage*)target)->CanBeUsedInComposition();	
		return result;	
	}
	bool uapi_UAnimMontage_CanUseMarkerSync(void* target){	
		auto result = ((UAnimMontage*)target)->CanUseMarkerSync();	
		return result;	
	}
	void* uapi_UAnimMontage_CreateSlotAnimationAsDynamicMontage(UAnimSequenceBase* Asset, UName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt){	
		auto result = (void*)(UAnimMontage::CreateSlotAnimationAsDynamicMontage(Asset, ToFName(SlotNodeName), BlendInTime, BlendOutTime, InPlayRate, LoopCount, BlendOutTriggerTime, InTimeToStartMontageAt));	
		return result;	
	}
	bool uapi_UAnimMontage_DeleteAnimCompositeSection(void* target, int32 SectionIndex){	
		auto result = ((UAnimMontage*)target)->DeleteAnimCompositeSection(SectionIndex);	
		return result;	
	}
	Transform uapi_UAnimMontage_ExtractRootMotionFromTrackRange(void* target, float StartTrackPosition, float EndTrackPosition){	
		auto result = ToTransform(((UAnimMontage*)target)->ExtractRootMotionFromTrackRange(StartTrackPosition, EndTrackPosition));	
		return result;	
	}
	int32 uapi_UAnimMontage_GetAnimCompositeSectionIndexFromPos(void* target, float CurrentTime, float& PosWithinCompositeSection){	
		auto result = ((UAnimMontage*)target)->GetAnimCompositeSectionIndexFromPos(CurrentTime, PosWithinCompositeSection);	
		return result;	
	}
	void* uapi_UAnimMontage_GetAnimationData(void* target, UName SlotName){	
		auto result = (void*)((UAnimMontage*)target)->GetAnimationData(ToFName(SlotName));	
		return result;	
	}
	float uapi_UAnimMontage_GetDefaultBlendInTime(void* target){	
		auto result = ((UAnimMontage*)target)->GetDefaultBlendInTime();	
		return result;	
	}
	float uapi_UAnimMontage_GetDefaultBlendOutTime(void* target){	
		auto result = ((UAnimMontage*)target)->GetDefaultBlendOutTime();	
		return result;	
	}
	UName uapi_UAnimMontage_GetGroupName(void* target){	
		auto result = ToUName(((UAnimMontage*)target)->GetGroupName());	
		return result;	
	}
	int32 uapi_UAnimMontage_GetNumSections(void* target){	
		auto result = ((UAnimMontage*)target)->GetNumSections();	
		return result;	
	}
	int32 uapi_UAnimMontage_GetSectionIndex(void* target, UName InSectionName){	
		auto result = ((UAnimMontage*)target)->GetSectionIndex(ToFName(InSectionName));	
		return result;	
	}
	int32 uapi_UAnimMontage_GetSectionIndexFromPosition(void* target, float Position){	
		auto result = ((UAnimMontage*)target)->GetSectionIndexFromPosition(Position);	
		return result;	
	}
	float uapi_UAnimMontage_GetSectionLength(void* target, int32 SectionIndex){	
		auto result = ((UAnimMontage*)target)->GetSectionLength(SectionIndex);	
		return result;	
	}
	UName uapi_UAnimMontage_GetSectionName(void* target, int32 SectionIndex){	
		auto result = ToUName(((UAnimMontage*)target)->GetSectionName(SectionIndex));	
		return result;	
	}
	void uapi_UAnimMontage_GetSectionStartAndEndTime(void* target, int32 SectionIndex, float& OutStartTime, float& OutEndTime){	
		((UAnimMontage*)target)->GetSectionStartAndEndTime(SectionIndex, OutStartTime, OutEndTime);	
	}
	float uapi_UAnimMontage_GetSectionTimeLeftFromPos(void* target, float Position){	
		auto result = ((UAnimMontage*)target)->GetSectionTimeLeftFromPos(Position);	
		return result;	
	}
	bool uapi_UAnimMontage_HasRootMotion(void* target){	
		auto result = ((UAnimMontage*)target)->HasRootMotion();	
		return result;	
	}
	void uapi_UAnimMontage_InvalidateRecursiveAsset(void* target){	
		((UAnimMontage*)target)->InvalidateRecursiveAsset();	
	}
	bool uapi_UAnimMontage_IsValidAdditive(void* target){	
		auto result = ((UAnimMontage*)target)->IsValidAdditive();	
		return result;	
	}
	bool uapi_UAnimMontage_IsValidSectionIndex(void* target, int32 SectionIndex){	
		auto result = ((UAnimMontage*)target)->IsValidSectionIndex(SectionIndex);	
		return result;	
	}
	bool uapi_UAnimMontage_IsValidSectionName(void* target, UName InSectionName){	
		auto result = ((UAnimMontage*)target)->IsValidSectionName(ToFName(InSectionName));	
		return result;	
	}
	bool uapi_UAnimMontage_IsValidSlot(void* target, UName InSlotName){	
		auto result = ((UAnimMontage*)target)->IsValidSlot(ToFName(InSlotName));	
		return result;	
	}
	void uapi_UAnimMontage_PostLoad(void* target){	
		((UAnimMontage*)target)->PostLoad();	
	}
	void uapi_UAnimMontage_RefreshCacheData(void* target){	
		((UAnimMontage*)target)->RefreshCacheData();	
	}
	void uapi_UAnimMontage_SetCompositeLength(void* target, float InLength){	
		((UAnimMontage*)target)->SetCompositeLength(InLength);	
	}
	void uapi_UAnimMontage_UnregisterOnMontageChanged(void* target, void* Unregister){	
		((UAnimMontage*)target)->UnregisterOnMontageChanged(Unregister);	
	}
	void uapi_UAnimMontage_UpdateLinkableElements(void* target){	
		((UAnimMontage*)target)->UpdateLinkableElements();	
	}
	void uapi_UAnimMontage_UpdateLinkableElements2(void* target, int32 SlotIdx, int32 SegmentIdx){	
		((UAnimMontage*)target)->UpdateLinkableElements(SlotIdx, SegmentIdx);	
	}
	void uapi_USkeletalMeshComponent_AddClothCollisionSource(void* target, USkeletalMeshComponent* InSourceComponent, UPhysicsAsset* InSourcePhysicsAsset){	
		((USkeletalMeshComponent*)target)->AddClothCollisionSource(InSourceComponent, InSourcePhysicsAsset);	
	}
	void uapi_USkeletalMeshComponent_AddForceToAllBodiesBelow(void* target, Vector3 Force, UName BoneName, bool bAccelChange, bool bIncludeSelf){	
		((USkeletalMeshComponent*)target)->AddForceToAllBodiesBelow(ToFVector(Force), ToFName(BoneName), bAccelChange, bIncludeSelf);	
	}
	void uapi_USkeletalMeshComponent_AddImpulseToAllBodiesBelow(void* target, Vector3 Impulse, UName BoneName, bool bVelChange, bool bIncludeSelf){	
		((USkeletalMeshComponent*)target)->AddImpulseToAllBodiesBelow(ToFVector(Impulse), ToFName(BoneName), bVelChange, bIncludeSelf);	
	}
	bool uapi_USkeletalMeshComponent_AllocateTransformData(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->AllocateTransformData();	
		return result;	
	}
	void uapi_USkeletalMeshComponent_AllowAnimCurveEvaluation(void* target, UName NameOfCurve, bool bAllow){	
		((USkeletalMeshComponent*)target)->AllowAnimCurveEvaluation(ToFName(NameOfCurve), bAllow);	
	}
	void uapi_USkeletalMeshComponent_ApplyEditedComponentSpaceTransforms(void* target){	
		((USkeletalMeshComponent*)target)->ApplyEditedComponentSpaceTransforms();	
	}
	void uapi_USkeletalMeshComponent_BeginPlay(void* target){	
		((USkeletalMeshComponent*)target)->BeginPlay();	
	}
	void uapi_USkeletalMeshComponent_BindClothToLeaderPoseComponent(void* target){	
		((USkeletalMeshComponent*)target)->BindClothToLeaderPoseComponent();	
	}
	void uapi_USkeletalMeshComponent_BreakConstraint(void* target, Vector3 Impulse, Vector3 HitLocation, UName InBoneName){	
		((USkeletalMeshComponent*)target)->BreakConstraint(ToFVector(Impulse), ToFVector(HitLocation), ToFName(InBoneName));	
	}
	float uapi_USkeletalMeshComponent_CalculateMass(void* target, UName BoneName){	
		auto result = ((USkeletalMeshComponent*)target)->CalculateMass(ToFName(BoneName));	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_CanEditSimulatePhysics(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->CanEditSimulatePhysics();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_CanHaveStaticMobility(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->CanHaveStaticMobility();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_CanSimulateClothing(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->CanSimulateClothing();	
		return result;	
	}
	void uapi_USkeletalMeshComponent_CheckClothTeleport(void* target){	
		((USkeletalMeshComponent*)target)->CheckClothTeleport();	
	}
	void uapi_USkeletalMeshComponent_ClearAnimNotifyErrors(void* target, UObject* InSourceNotify){	
		((USkeletalMeshComponent*)target)->ClearAnimNotifyErrors(InSourceNotify);	
	}
	void uapi_USkeletalMeshComponent_ClearAnimScriptInstance(void* target){	
		((USkeletalMeshComponent*)target)->ClearAnimScriptInstance();	
	}
	void uapi_USkeletalMeshComponent_ClearCachedAnimProperties(void* target){	
		((USkeletalMeshComponent*)target)->ClearCachedAnimProperties();	
	}
	void uapi_USkeletalMeshComponent_ClearMorphTargets(void* target){	
		((USkeletalMeshComponent*)target)->ClearMorphTargets();	
	}
	void uapi_USkeletalMeshComponent_ClearRefPoseOverride(void* target){	
		((USkeletalMeshComponent*)target)->ClearRefPoseOverride();	
	}
	void uapi_USkeletalMeshComponent_CompleteParallelAnimationEvaluation(void* target, bool bDoPostAnimEvaluation){	
		((USkeletalMeshComponent*)target)->CompleteParallelAnimationEvaluation(bDoPostAnimEvaluation);	
	}
	void uapi_USkeletalMeshComponent_CompleteParallelClothSimulation(void* target){	
		((USkeletalMeshComponent*)target)->CompleteParallelClothSimulation();	
	}
	void uapi_USkeletalMeshComponent_ConditionallyDispatchQueuedAnimEvents(void* target){	
		((USkeletalMeshComponent*)target)->ConditionallyDispatchQueuedAnimEvents();	
	}
	void uapi_USkeletalMeshComponent_DeallocateTransformData(void* target){	
		((USkeletalMeshComponent*)target)->DeallocateTransformData();	
	}
	void uapi_USkeletalMeshComponent_DebugDrawClothing(void* target, FPrimitiveDrawInterface* PDI){	
		((USkeletalMeshComponent*)target)->DebugDrawClothing(PDI);	
	}
	void uapi_USkeletalMeshComponent_DebugDrawClothingTexts(void* target, FCanvas* Canvas, FSceneView* SceneView){	
		((USkeletalMeshComponent*)target)->DebugDrawClothingTexts(Canvas, SceneView);	
	}
	void uapi_USkeletalMeshComponent_FinalizeBoneTransform(void* target){	
		((USkeletalMeshComponent*)target)->FinalizeBoneTransform();	
	}
	UName uapi_USkeletalMeshComponent_FindConstraintBoneName(void* target, int32 ConstraintIndex){	
		auto result = ToUName(((USkeletalMeshComponent*)target)->FindConstraintBoneName(ConstraintIndex));	
		return result;	
	}
	int32 uapi_USkeletalMeshComponent_FindConstraintIndex(void* target, UName ConstraintName){	
		auto result = ((USkeletalMeshComponent*)target)->FindConstraintIndex(ToFName(ConstraintName));	
		return result;	
	}
	void* uapi_USkeletalMeshComponent_FindConstraintInstance(void* target, UName ConName){	
		auto result = (void*)((USkeletalMeshComponent*)target)->FindConstraintInstance(ToFName(ConName));	
		return result;	
	}
	int32 uapi_USkeletalMeshComponent_FindRootBodyIndex(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->FindRootBodyIndex();	
		return result;	
	}
	void uapi_USkeletalMeshComponent_ForceClothNextUpdateTeleport(void* target){	
		((USkeletalMeshComponent*)target)->ForceClothNextUpdateTeleport();	
	}
	void uapi_USkeletalMeshComponent_ForceClothNextUpdateTeleportAndReset(void* target){	
		((USkeletalMeshComponent*)target)->ForceClothNextUpdateTeleportAndReset();	
	}
	bool uapi_USkeletalMeshComponent_GetAllowClothActors(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->GetAllowClothActors();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_GetAllowRigidBodyAnimNode(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->GetAllowRigidBodyAnimNode();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_GetAllowedAnimCurveEvaluate(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->GetAllowedAnimCurveEvaluate();	
		return result;	
	}
	void* uapi_USkeletalMeshComponent_GetBodyInstance(void* target, UName BoneName, bool bGetWelded, int32 Index){	
		auto result = (void*)((USkeletalMeshComponent*)target)->GetBodyInstance(ToFName(BoneName), bGetWelded, Index);	
		return result;	
	}
	void* uapi_USkeletalMeshComponent_GetBodySetup(void* target){	
		auto result = (void*)((USkeletalMeshComponent*)target)->GetBodySetup();	
		return result;	
	}
	float uapi_USkeletalMeshComponent_GetBoneMass(void* target, UName BoneName, bool bScaleMass){	
		auto result = ((USkeletalMeshComponent*)target)->GetBoneMass(ToFName(BoneName), bScaleMass);	
		return result;	
	}
	float uapi_USkeletalMeshComponent_GetClothMaxDistanceScale(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->GetClothMaxDistanceScale();	
		return result;	
	}
	void* uapi_USkeletalMeshComponent_GetClothingSimulation(void* target){	
		auto result = (void*)((USkeletalMeshComponent*)target)->GetClothingSimulation();	
		return result;	
	}
	void* uapi_USkeletalMeshComponent_GetClothingSimulationContext(void* target){	
		auto result = (void*)((USkeletalMeshComponent*)target)->GetClothingSimulationContext();	
		return result;	
	}
	void* uapi_USkeletalMeshComponent_GetClothingSimulationInteractor(void* target){	
		auto result = (void*)((USkeletalMeshComponent*)target)->GetClothingSimulationInteractor();	
		return result;	
	}
	void* uapi_USkeletalMeshComponent_GetConstraintInstanceByIndex(void* target, uint32 Index){	
		auto result = (void*)((USkeletalMeshComponent*)target)->GetConstraintInstanceByIndex(Index);	
		return result;	
	}
	void uapi_USkeletalMeshComponent_GetCurrentJointAngles(void* target, UName InBoneName, float& Swing1Angle, float& TwistAngle, float& Swing2Angle){	
		((USkeletalMeshComponent*)target)->GetCurrentJointAngles(ToFName(InBoneName), Swing1Angle, TwistAngle, Swing2Angle);	
	}
	bool uapi_USkeletalMeshComponent_GetDisablePostProcessBlueprint(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->GetDisablePostProcessBlueprint();	
		return result;	
	}
	void* uapi_USkeletalMeshComponent_GetLinkedAnimGraphInstanceByTag(void* target, UName InTag){	
		auto result = (void*)((USkeletalMeshComponent*)target)->GetLinkedAnimGraphInstanceByTag(ToFName(InTag));	
		return result;	
	}
	void* uapi_USkeletalMeshComponent_GetLinkedAnimLayerInstanceByGroup(void* target, UName InGroup){	
		auto result = (void*)((USkeletalMeshComponent*)target)->GetLinkedAnimLayerInstanceByGroup(ToFName(InGroup));	
		return result;	
	}
	float uapi_USkeletalMeshComponent_GetMass(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->GetMass();	
		return result;	
	}
	float uapi_USkeletalMeshComponent_GetMorphTarget(void* target, UName MorphTargetName){	
		auto result = ((USkeletalMeshComponent*)target)->GetMorphTarget(ToFName(MorphTargetName));	
		return result;	
	}
	float uapi_USkeletalMeshComponent_GetPlayRate(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->GetPlayRate();	
		return result;	
	}
	float uapi_USkeletalMeshComponent_GetPosition(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->GetPosition();	
		return result;	
	}
	void* uapi_USkeletalMeshComponent_GetSingleNodeInstance(void* target){	
		auto result = (void*)((USkeletalMeshComponent*)target)->GetSingleNodeInstance();	
		return result;	
	}
	Vector3 uapi_USkeletalMeshComponent_GetSkeletalCenterOfMass(void* target){	
		auto result = ToVector3(((USkeletalMeshComponent*)target)->GetSkeletalCenterOfMass());	
		return result;	
	}
	void* uapi_USkeletalMeshComponent_GetSkeletalMeshAsset(void* target){	
		auto result = (void*)((USkeletalMeshComponent*)target)->GetSkeletalMeshAsset();	
		return result;	
	}
	float uapi_USkeletalMeshComponent_GetTeleportDistanceThreshold(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->GetTeleportDistanceThreshold();	
		return result;	
	}
	float uapi_USkeletalMeshComponent_GetTeleportRotationThreshold(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->GetTeleportRotationThreshold();	
		return result;	
	}
	float uapi_USkeletalMeshComponent_GetTotalMassBelowBone(void* target, UName InBoneName){	
		auto result = ((USkeletalMeshComponent*)target)->GetTotalMassBelowBone(ToFName(InBoneName));	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_GetUpdateAnimationInEditor(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->GetUpdateAnimationInEditor();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_GetUpdateClothInEditor(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->GetUpdateClothInEditor();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_HandleExistingParallelEvaluationTask(void* target, bool bBlockOnTask, bool bPerformPostAnimEvaluation){	
		auto result = ((USkeletalMeshComponent*)target)->HandleExistingParallelEvaluationTask(bBlockOnTask, bPerformPostAnimEvaluation);	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_HasValidAnimationInstance(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->HasValidAnimationInstance();	
		return result;	
	}
	void uapi_USkeletalMeshComponent_InitAnim(void* target, bool bForceReinit){	
		((USkeletalMeshComponent*)target)->InitAnim(bForceReinit);	
	}
	void uapi_USkeletalMeshComponent_InitArticulated(void* target, FPhysScene* PhysScene){	
		((USkeletalMeshComponent*)target)->InitArticulated(PhysScene);	
	}
	void uapi_USkeletalMeshComponent_InitCollisionRelationships(void* target){	
		((USkeletalMeshComponent*)target)->InitCollisionRelationships();	
	}
	bool uapi_USkeletalMeshComponent_InitializeAnimScriptInstance(void* target, bool bForceReinit, bool bInDeferRootNodeInitialization){	
		auto result = ((USkeletalMeshComponent*)target)->InitializeAnimScriptInstance(bForceReinit, bInDeferRootNodeInitialization);	
		return result;	
	}
	void uapi_USkeletalMeshComponent_InitializeComponent(void* target){	
		((USkeletalMeshComponent*)target)->InitializeComponent();	
	}
	bool uapi_USkeletalMeshComponent_IsAnimBlueprintInstanced(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->IsAnimBlueprintInstanced();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_IsAnyRigidBodyAwake(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->IsAnyRigidBodyAwake();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_IsAnySimulatingPhysics(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->IsAnySimulatingPhysics();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_IsBodyGravityEnabled(void* target, UName BoneName){	
		auto result = ((USkeletalMeshComponent*)target)->IsBodyGravityEnabled(ToFName(BoneName));	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_IsClothBoundToLeaderComponent(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->IsClothBoundToLeaderComponent();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_IsClothingSimulationSuspended(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->IsClothingSimulationSuspended();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_IsGravityEnabled(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->IsGravityEnabled();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_IsPlaying(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->IsPlaying();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_IsPlayingNetworkedRootMotionMontage(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->IsPlayingNetworkedRootMotionMontage();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_IsPlayingRootMotion(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->IsPlayingRootMotion();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_IsPlayingRootMotionFromEverything(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->IsPlayingRootMotionFromEverything();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_IsPostEvaluatingAnimation(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->IsPostEvaluatingAnimation();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_IsRunningParallelEvaluation(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->IsRunningParallelEvaluation();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_IsWindEnabled(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->IsWindEnabled();	
		return result;	
	}
	void uapi_USkeletalMeshComponent_NotifySkelControlBeyondLimit(void* target, USkelControlLookAt* LookAt){	
		((USkeletalMeshComponent*)target)->NotifySkelControlBeyondLimit(LookAt);	
	}
	void uapi_USkeletalMeshComponent_OnComponentCollisionSettingsChanged(void* target, bool bUpdateOverlaps){	
		((USkeletalMeshComponent*)target)->OnComponentCollisionSettingsChanged(bUpdateOverlaps);	
	}
	void uapi_USkeletalMeshComponent_OnPreEndOfFrameSync(void* target){	
		((USkeletalMeshComponent*)target)->OnPreEndOfFrameSync();	
	}
	void uapi_USkeletalMeshComponent_OverrideAnimationData(void* target, UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate){	
		((USkeletalMeshComponent*)target)->OverrideAnimationData(InAnimToPlay, bIsLooping, bIsPlaying, Position, PlayRate);	
	}
	void uapi_USkeletalMeshComponent_ParallelAnimationEvaluation(void* target){	
		((USkeletalMeshComponent*)target)->ParallelAnimationEvaluation();	
	}
	void uapi_USkeletalMeshComponent_Play(void* target, bool bLooping){	
		((USkeletalMeshComponent*)target)->Play(bLooping);	
	}
	void uapi_USkeletalMeshComponent_PlayAnimation(void* target, UAnimationAsset* NewAnimToPlay, bool bLooping){	
		((USkeletalMeshComponent*)target)->PlayAnimation(NewAnimToPlay, bLooping);	
	}
	bool uapi_USkeletalMeshComponent_PoseTickedThisFrame(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->PoseTickedThisFrame();	
		return result;	
	}
	void uapi_USkeletalMeshComponent_PostLoad(void* target){	
		((USkeletalMeshComponent*)target)->PostLoad();	
	}
	void uapi_USkeletalMeshComponent_PutAllRigidBodiesToSleep(void* target){	
		((USkeletalMeshComponent*)target)->PutAllRigidBodiesToSleep();	
	}
	void uapi_USkeletalMeshComponent_RecalcRequiredBones(void* target, int32 LODIndex){	
		((USkeletalMeshComponent*)target)->RecalcRequiredBones(LODIndex);	
	}
	void uapi_USkeletalMeshComponent_RecalcRequiredCurves(void* target){	
		((USkeletalMeshComponent*)target)->RecalcRequiredCurves();	
	}
	void uapi_USkeletalMeshComponent_RecreateClothingActors(void* target){	
		((USkeletalMeshComponent*)target)->RecreateClothingActors();	
	}
	void uapi_USkeletalMeshComponent_RefreshBoneTransforms(void* target, FActorComponentTickFunction* TickFunction){	
		((USkeletalMeshComponent*)target)->RefreshBoneTransforms(TickFunction);	
	}
	void uapi_USkeletalMeshComponent_RegisterClothTick(void* target, bool bRegister){	
		((USkeletalMeshComponent*)target)->RegisterClothTick(bRegister);	
	}
	void uapi_USkeletalMeshComponent_RegisterEndPhysicsTick(void* target, bool bRegister){	
		((USkeletalMeshComponent*)target)->RegisterEndPhysicsTick(bRegister);	
	}
	void uapi_USkeletalMeshComponent_ReleaseAllClothingResources(void* target){	
		((USkeletalMeshComponent*)target)->ReleaseAllClothingResources();	
	}
	void uapi_USkeletalMeshComponent_RemoveAllClothingActors(void* target){	
		((USkeletalMeshComponent*)target)->RemoveAllClothingActors();	
	}
	void uapi_USkeletalMeshComponent_RemoveClothCollisionSource(void* target, USkeletalMeshComponent* InSourceComponent){	
		((USkeletalMeshComponent*)target)->RemoveClothCollisionSource(InSourceComponent);	
	}
	void uapi_USkeletalMeshComponent_RemoveClothCollisionSource2(void* target, USkeletalMeshComponent* InSourceComponent, UPhysicsAsset* InSourcePhysicsAsset){	
		((USkeletalMeshComponent*)target)->RemoveClothCollisionSource(InSourceComponent, InSourcePhysicsAsset);	
	}
	bool uapi_USkeletalMeshComponent_RequiresPreEndOfFrameSync(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->RequiresPreEndOfFrameSync();	
		return result;	
	}
	void uapi_USkeletalMeshComponent_ResetAllBodiesSimulatePhysics(void* target){	
		((USkeletalMeshComponent*)target)->ResetAllBodiesSimulatePhysics();	
	}
	void uapi_USkeletalMeshComponent_ResetAllowedAnimCurveEvaluation(void* target){	
		((USkeletalMeshComponent*)target)->ResetAllowedAnimCurveEvaluation();	
	}
	void uapi_USkeletalMeshComponent_ResetClothCollisionSources(void* target){	
		((USkeletalMeshComponent*)target)->ResetClothCollisionSources();	
	}
	void uapi_USkeletalMeshComponent_ResetClothTeleportMode(void* target){	
		((USkeletalMeshComponent*)target)->ResetClothTeleportMode();	
	}
	void uapi_USkeletalMeshComponent_ResetRootBodyIndex(void* target){	
		((USkeletalMeshComponent*)target)->ResetRootBodyIndex();	
	}
	void uapi_USkeletalMeshComponent_ResumeClothingSimulation(void* target){	
		((USkeletalMeshComponent*)target)->ResumeClothingSimulation();	
	}
	void uapi_USkeletalMeshComponent_SetAllBodiesCollisionObjectType(void* target, ECollisionChannel NewChannel){	
		((USkeletalMeshComponent*)target)->SetAllBodiesCollisionObjectType(NewChannel);	
	}
	void uapi_USkeletalMeshComponent_SetAllBodiesNotifyRigidBodyCollision(void* target, bool bNewNotifyRigidBodyCollision){	
		((USkeletalMeshComponent*)target)->SetAllBodiesNotifyRigidBodyCollision(bNewNotifyRigidBodyCollision);	
	}
	void uapi_USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeight(void* target, float PhysicsBlendWeight, bool bSkipCustomPhysicsType){	
		((USkeletalMeshComponent*)target)->SetAllBodiesPhysicsBlendWeight(PhysicsBlendWeight, bSkipCustomPhysicsType);	
	}
	void uapi_USkeletalMeshComponent_SetAllBodiesSimulatePhysics(void* target, bool bNewSimulate){	
		((USkeletalMeshComponent*)target)->SetAllBodiesSimulatePhysics(bNewSimulate);	
	}
	void uapi_USkeletalMeshComponent_SetAllMassScale(void* target, float InMassScale){	
		((USkeletalMeshComponent*)target)->SetAllMassScale(InMassScale);	
	}
	void uapi_USkeletalMeshComponent_SetAllMotorsAngularDriveParams(void* target, float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType){	
		((USkeletalMeshComponent*)target)->SetAllMotorsAngularDriveParams(InSpring, InDamping, InForceLimit, bSkipCustomPhysicsType);	
	}
	void uapi_USkeletalMeshComponent_SetAllMotorsAngularPositionDrive(void* target, bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType){	
		((USkeletalMeshComponent*)target)->SetAllMotorsAngularPositionDrive(bEnableSwingDrive, bEnableTwistDrive, bSkipCustomPhysicsType);	
	}
	void uapi_USkeletalMeshComponent_SetAllMotorsAngularVelocityDrive(void* target, bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType){	
		((USkeletalMeshComponent*)target)->SetAllMotorsAngularVelocityDrive(bEnableSwingDrive, bEnableTwistDrive, bSkipCustomPhysicsType);	
	}
	void uapi_USkeletalMeshComponent_SetAllPhysicsLinearVelocity(void* target, Vector3 NewVel, bool bAddToCurrent){	
		((USkeletalMeshComponent*)target)->SetAllPhysicsLinearVelocity(ToFVector(NewVel), bAddToCurrent);	
	}
	void uapi_USkeletalMeshComponent_SetAllPhysicsPosition(void* target, Vector3 NewPos){	
		((USkeletalMeshComponent*)target)->SetAllPhysicsPosition(ToFVector(NewPos));	
	}
	void uapi_USkeletalMeshComponent_SetAllPhysicsRotation(void* target, Rotator NewRot){	
		((USkeletalMeshComponent*)target)->SetAllPhysicsRotation(ToFRotator(NewRot));	
	}
	void uapi_USkeletalMeshComponent_SetAllUseCCD(void* target, bool InUseCCD){	
		((USkeletalMeshComponent*)target)->SetAllUseCCD(InUseCCD);	
	}
	void uapi_USkeletalMeshComponent_SetAllowAnimCurveEvaluation(void* target, bool bInAllow){	
		((USkeletalMeshComponent*)target)->SetAllowAnimCurveEvaluation(bInAllow);	
	}
	void uapi_USkeletalMeshComponent_SetAllowClothActors(void* target, bool bInAllow){	
		((USkeletalMeshComponent*)target)->SetAllowClothActors(bInAllow);	
	}
	void uapi_USkeletalMeshComponent_SetAllowRigidBodyAnimNode(void* target, bool bInAllow, bool bReinitAnim){	
		((USkeletalMeshComponent*)target)->SetAllowRigidBodyAnimNode(bInAllow, bReinitAnim);	
	}
	void uapi_USkeletalMeshComponent_SetAngularLimits(void* target, UName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle){	
		((USkeletalMeshComponent*)target)->SetAngularLimits(ToFName(InBoneName), Swing1LimitAngle, TwistLimitAngle, Swing2LimitAngle);	
	}
	void uapi_USkeletalMeshComponent_SetAnimation(void* target, UAnimationAsset* NewAnimToPlay){	
		((USkeletalMeshComponent*)target)->SetAnimation(NewAnimToPlay);	
	}
	void uapi_USkeletalMeshComponent_SetBodyNotifyRigidBodyCollision(void* target, bool bNewNotifyRigidBodyCollision, UName BoneName){	
		((USkeletalMeshComponent*)target)->SetBodyNotifyRigidBodyCollision(bNewNotifyRigidBodyCollision, ToFName(BoneName));	
	}
	void uapi_USkeletalMeshComponent_SetClothMaxDistanceScale(void* target, float Scale){	
		((USkeletalMeshComponent*)target)->SetClothMaxDistanceScale(Scale);	
	}
	void uapi_USkeletalMeshComponent_SetCollisionObjectType(void* target, ECollisionChannel Channel){	
		((USkeletalMeshComponent*)target)->SetCollisionObjectType(Channel);	
	}
	void uapi_USkeletalMeshComponent_SetComponentTickEnabled(void* target, bool bEnabled){	
		((USkeletalMeshComponent*)target)->SetComponentTickEnabled(bEnabled);	
	}
	void uapi_USkeletalMeshComponent_SetConstraintProfile(void* target, UName JointName, UName ProfileName, bool bDefaultIfNotFound){	
		((USkeletalMeshComponent*)target)->SetConstraintProfile(ToFName(JointName), ToFName(ProfileName), bDefaultIfNotFound);	
	}
	void uapi_USkeletalMeshComponent_SetConstraintProfileForAll(void* target, UName ProfileName, bool bDefaultIfNotFound){	
		((USkeletalMeshComponent*)target)->SetConstraintProfileForAll(ToFName(ProfileName), bDefaultIfNotFound);	
	}
	void uapi_USkeletalMeshComponent_SetDisablePostProcessBlueprint(void* target, bool bInDisablePostProcess){	
		((USkeletalMeshComponent*)target)->SetDisablePostProcessBlueprint(bInDisablePostProcess);	
	}
	void uapi_USkeletalMeshComponent_SetEnableBodyGravity(void* target, bool bEnableGravity, UName BoneName){	
		((USkeletalMeshComponent*)target)->SetEnableBodyGravity(bEnableGravity, ToFName(BoneName));	
	}
	void uapi_USkeletalMeshComponent_SetEnableGravity(void* target, bool bGravityEnabled){	
		((USkeletalMeshComponent*)target)->SetEnableGravity(bGravityEnabled);	
	}
	void uapi_USkeletalMeshComponent_SetEnableGravityOnAllBodiesBelow(void* target, bool bEnableGravity, UName BoneName, bool bIncludeSelf){	
		((USkeletalMeshComponent*)target)->SetEnableGravityOnAllBodiesBelow(bEnableGravity, ToFName(BoneName), bIncludeSelf);	
	}
	void uapi_USkeletalMeshComponent_SetEnablePhysicsBlending(void* target, bool bNewBlendPhysics){	
		((USkeletalMeshComponent*)target)->SetEnablePhysicsBlending(bNewBlendPhysics);	
	}
	void uapi_USkeletalMeshComponent_SetForceRefPose(void* target, bool bNewForceRefPose){	
		((USkeletalMeshComponent*)target)->SetForceRefPose(bNewForceRefPose);	
	}
	void uapi_USkeletalMeshComponent_SetMorphTarget(void* target, UName MorphTargetName, float Value, bool bRemoveZeroWeight){	
		((USkeletalMeshComponent*)target)->SetMorphTarget(ToFName(MorphTargetName), Value, bRemoveZeroWeight);	
	}
	void uapi_USkeletalMeshComponent_SetNotifyRigidBodyCollision(void* target, bool bNewNotifyRigidBodyCollision){	
		((USkeletalMeshComponent*)target)->SetNotifyRigidBodyCollision(bNewNotifyRigidBodyCollision);	
	}
	void uapi_USkeletalMeshComponent_SetNotifyRigidBodyCollisionBelow(void* target, bool bNewNotifyRigidBodyCollision, UName BoneName, bool bIncludeSelf){	
		((USkeletalMeshComponent*)target)->SetNotifyRigidBodyCollisionBelow(bNewNotifyRigidBodyCollision, ToFName(BoneName), bIncludeSelf);	
	}
	void uapi_USkeletalMeshComponent_SetPhysMaterialOverride(void* target, UPhysicalMaterial* NewPhysMaterial){	
		((USkeletalMeshComponent*)target)->SetPhysMaterialOverride(NewPhysMaterial);	
	}
	void uapi_USkeletalMeshComponent_SetPhysicsAsset(void* target, UPhysicsAsset* NewPhysicsAsset, bool bForceReInit){	
		((USkeletalMeshComponent*)target)->SetPhysicsAsset(NewPhysicsAsset, bForceReInit);	
	}
	void uapi_USkeletalMeshComponent_SetPhysicsBlendWeight(void* target, float PhysicsBlendWeight){	
		((USkeletalMeshComponent*)target)->SetPhysicsBlendWeight(PhysicsBlendWeight);	
	}
	void uapi_USkeletalMeshComponent_SetPlayRate(void* target, float Rate){	
		((USkeletalMeshComponent*)target)->SetPlayRate(Rate);	
	}
	void uapi_USkeletalMeshComponent_SetPosition(void* target, float InPos, bool bFireNotifies){	
		((USkeletalMeshComponent*)target)->SetPosition(InPos, bFireNotifies);	
	}
	void uapi_USkeletalMeshComponent_SetPredictedLODLevel(void* target, int32 InPredictedLODLevel){	
		((USkeletalMeshComponent*)target)->SetPredictedLODLevel(InPredictedLODLevel);	
	}
	void uapi_USkeletalMeshComponent_SetRootBodyIndex(void* target, int32 InBodyIndex){	
		((USkeletalMeshComponent*)target)->SetRootBodyIndex(InBodyIndex);	
	}
	void uapi_USkeletalMeshComponent_SetSimulatePhysics(void* target, bool bEnabled){	
		((USkeletalMeshComponent*)target)->SetSimulatePhysics(bEnabled);	
	}
	void uapi_USkeletalMeshComponent_SetSkeletalMeshAsset(void* target, USkeletalMesh* NewMesh){	
		((USkeletalMeshComponent*)target)->SetSkeletalMeshAsset(NewMesh);	
	}
	void uapi_USkeletalMeshComponent_SetSkinnedAssetAndUpdate(void* target, USkinnedAsset* InSkinnedAsset, bool bReinitPose){	
		((USkeletalMeshComponent*)target)->SetSkinnedAssetAndUpdate(InSkinnedAsset, bReinitPose);	
	}
	void uapi_USkeletalMeshComponent_SetTeleportDistanceThreshold(void* target, float Threshold){	
		((USkeletalMeshComponent*)target)->SetTeleportDistanceThreshold(Threshold);	
	}
	void uapi_USkeletalMeshComponent_SetTeleportRotationThreshold(void* target, float Threshold){	
		((USkeletalMeshComponent*)target)->SetTeleportRotationThreshold(Threshold);	
	}
	void uapi_USkeletalMeshComponent_SetUpdateAnimationInEditor(void* target, bool NewUpdateState){	
		((USkeletalMeshComponent*)target)->SetUpdateAnimationInEditor(NewUpdateState);	
	}
	void uapi_USkeletalMeshComponent_SetUpdateClothInEditor(void* target, bool NewUpdateState){	
		((USkeletalMeshComponent*)target)->SetUpdateClothInEditor(NewUpdateState);	
	}
	bool uapi_USkeletalMeshComponent_ShouldEvaluatePostProcessInstance(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->ShouldEvaluatePostProcessInstance();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_ShouldOnlyTickMontages(void* target, float DeltaTime){	
		auto result = ((USkeletalMeshComponent*)target)->ShouldOnlyTickMontages(DeltaTime);	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_ShouldPostUpdatePostProcessInstance(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->ShouldPostUpdatePostProcessInstance();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_ShouldTickAnimation(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->ShouldTickAnimation();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_ShouldTickPose(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->ShouldTickPose();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_ShouldUpdatePostProcessInstance(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->ShouldUpdatePostProcessInstance();	
		return result;	
	}
	bool uapi_USkeletalMeshComponent_ShouldUpdateTransform(void* target, bool bLODHasChanged){	
		auto result = ((USkeletalMeshComponent*)target)->ShouldUpdateTransform(bLODHasChanged);	
		return result;	
	}
	void uapi_USkeletalMeshComponent_SkelMeshCompOnParticleSystemFinished(void* target, UParticleSystemComponent* PSC){	
		((USkeletalMeshComponent*)target)->SkelMeshCompOnParticleSystemFinished(PSC);	
	}
	void uapi_USkeletalMeshComponent_Stop(void* target){	
		((USkeletalMeshComponent*)target)->Stop();	
	}
	void uapi_USkeletalMeshComponent_SuspendClothingSimulation(void* target){	
		((USkeletalMeshComponent*)target)->SuspendClothingSimulation();	
	}
	void uapi_USkeletalMeshComponent_TermArticulated(void* target){	
		((USkeletalMeshComponent*)target)->TermArticulated();	
	}
	void uapi_USkeletalMeshComponent_TermBodiesBelow(void* target, UName ParentBoneName){	
		((USkeletalMeshComponent*)target)->TermBodiesBelow(ToFName(ParentBoneName));	
	}
	void uapi_USkeletalMeshComponent_TermCollisionRelationships(void* target){	
		((USkeletalMeshComponent*)target)->TermCollisionRelationships();	
	}
	void uapi_USkeletalMeshComponent_TickAnimInstances(void* target, float DeltaTime, bool bNeedsValidRootMotion){	
		((USkeletalMeshComponent*)target)->TickAnimInstances(DeltaTime, bNeedsValidRootMotion);	
	}
	void uapi_USkeletalMeshComponent_TickAnimation(void* target, float DeltaTime, bool bNeedsValidRootMotion){	
		((USkeletalMeshComponent*)target)->TickAnimation(DeltaTime, bNeedsValidRootMotion);	
	}
	void uapi_USkeletalMeshComponent_TickPose(void* target, float DeltaTime, bool bNeedsValidRootMotion){	
		((USkeletalMeshComponent*)target)->TickPose(DeltaTime, bNeedsValidRootMotion);	
	}
	void uapi_USkeletalMeshComponent_ToggleDisablePostProcessBlueprint(void* target){	
		((USkeletalMeshComponent*)target)->ToggleDisablePostProcessBlueprint();	
	}
	void uapi_USkeletalMeshComponent_UnHideBone(void* target, int32 BoneIndex){	
		((USkeletalMeshComponent*)target)->UnHideBone(BoneIndex);	
	}
	void uapi_USkeletalMeshComponent_UnbindClothFromLeaderPoseComponent(void* target, bool bRestoreSimulationSpace){	
		((USkeletalMeshComponent*)target)->UnbindClothFromLeaderPoseComponent(bRestoreSimulationSpace);	
	}
	void uapi_USkeletalMeshComponent_UpdateBoneBodyMapping(void* target){	
		((USkeletalMeshComponent*)target)->UpdateBoneBodyMapping();	
	}
	void uapi_USkeletalMeshComponent_UpdateClothTransform(void* target){	
		((USkeletalMeshComponent*)target)->UpdateClothTransform();	
	}
	void uapi_USkeletalMeshComponent_UpdateCollisionProfile(void* target){	
		((USkeletalMeshComponent*)target)->UpdateCollisionProfile();	
	}
	void uapi_USkeletalMeshComponent_UpdateFollowerComponent(void* target){	
		((USkeletalMeshComponent*)target)->UpdateFollowerComponent();	
	}
	void uapi_USkeletalMeshComponent_UpdateHasValidBodies(void* target){	
		((USkeletalMeshComponent*)target)->UpdateHasValidBodies();	
	}
	bool uapi_USkeletalMeshComponent_UpdateLODStatus(void* target){	
		auto result = ((USkeletalMeshComponent*)target)->UpdateLODStatus();	
		return result;	
	}
	void uapi_USkeletalMeshComponent_UpdateMeshForBrokenConstraints(void* target){	
		((USkeletalMeshComponent*)target)->UpdateMeshForBrokenConstraints();	
	}
	bool uapi_USkeletalMeshComponent_UpdateOverlapsImpl(void* target, TOverlapArrayView* PendingOverlaps, bool bDoNotifies, TOverlapArrayView* OverlapsAtEndLocation){	
		auto result = ((USkeletalMeshComponent*)target)->UpdateOverlapsImpl(PendingOverlaps, bDoNotifies, OverlapsAtEndLocation);	
		return result;	
	}
	void uapi_USkeletalMeshComponent_UpdatePhysicsToRBChannels(void* target){	
		((USkeletalMeshComponent*)target)->UpdatePhysicsToRBChannels();	
	}
	void uapi_USkeletalMeshComponent_UpdatePoseWatches(void* target){	
		((USkeletalMeshComponent*)target)->UpdatePoseWatches();	
	}
	void uapi_USkeletalMeshComponent_UpdateRBJointMotors(void* target){	
		((USkeletalMeshComponent*)target)->UpdateRBJointMotors();	
	}
	void uapi_USkeletalMeshComponent_ValidateAnimation(void* target){	
		((USkeletalMeshComponent*)target)->ValidateAnimation();	
	}
	void uapi_USkeletalMeshComponent_WakeAllRigidBodies(void* target){	
		((USkeletalMeshComponent*)target)->WakeAllRigidBodies();	
	}
	void uapi_UCapsuleComponent_CalcBoundingCylinder(void* target, float& CylinderRadius, float& CylinderHalfHeight){	
		((UCapsuleComponent*)target)->CalcBoundingCylinder(CylinderRadius, CylinderHalfHeight);	
	}
	void* uapi_UCapsuleComponent_CreateSceneProxy(void* target){	
		auto result = (void*)((UCapsuleComponent*)target)->CreateSceneProxy();	
		return result;	
	}
	CollisionShape uapi_UCapsuleComponent_GetCollisionShape(void* target, float Inflation){	
		auto result = ToCollisionShape(((UCapsuleComponent*)target)->GetCollisionShape(Inflation));	
		return result;	
	}
	float uapi_UCapsuleComponent_GetScaledCapsuleHalfHeight(void* target){	
		auto result = ((UCapsuleComponent*)target)->GetScaledCapsuleHalfHeight();	
		return result;	
	}
	float uapi_UCapsuleComponent_GetScaledCapsuleHalfHeight_WithoutHemisphere(void* target){	
		auto result = ((UCapsuleComponent*)target)->GetScaledCapsuleHalfHeight_WithoutHemisphere();	
		return result;	
	}
	float uapi_UCapsuleComponent_GetScaledCapsuleRadius(void* target){	
		auto result = ((UCapsuleComponent*)target)->GetScaledCapsuleRadius();	
		return result;	
	}
	void uapi_UCapsuleComponent_GetScaledCapsuleSize(void* target, float& OutRadius, float& OutHalfHeight){	
		((UCapsuleComponent*)target)->GetScaledCapsuleSize(OutRadius, OutHalfHeight);	
	}
	void uapi_UCapsuleComponent_GetScaledCapsuleSize_WithoutHemisphere(void* target, float& OutRadius, float& OutHalfHeightWithoutHemisphere){	
		((UCapsuleComponent*)target)->GetScaledCapsuleSize_WithoutHemisphere(OutRadius, OutHalfHeightWithoutHemisphere);	
	}
	float uapi_UCapsuleComponent_GetShapeScale(void* target){	
		auto result = ((UCapsuleComponent*)target)->GetShapeScale();	
		return result;	
	}
	float uapi_UCapsuleComponent_GetUnscaledCapsuleHalfHeight(void* target){	
		auto result = ((UCapsuleComponent*)target)->GetUnscaledCapsuleHalfHeight();	
		return result;	
	}
	float uapi_UCapsuleComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphere(void* target){	
		auto result = ((UCapsuleComponent*)target)->GetUnscaledCapsuleHalfHeight_WithoutHemisphere();	
		return result;	
	}
	float uapi_UCapsuleComponent_GetUnscaledCapsuleRadius(void* target){	
		auto result = ((UCapsuleComponent*)target)->GetUnscaledCapsuleRadius();	
		return result;	
	}
	void uapi_UCapsuleComponent_GetUnscaledCapsuleSize(void* target, float& OutRadius, float& OutHalfHeight){	
		((UCapsuleComponent*)target)->GetUnscaledCapsuleSize(OutRadius, OutHalfHeight);	
	}
	void uapi_UCapsuleComponent_GetUnscaledCapsuleSize_WithoutHemisphere(void* target, float& OutRadius, float& OutHalfHeightWithoutHemisphere){	
		((UCapsuleComponent*)target)->GetUnscaledCapsuleSize_WithoutHemisphere(OutRadius, OutHalfHeightWithoutHemisphere);	
	}
	void uapi_UCapsuleComponent_InitCapsuleSize(void* target, float InRadius, float InHalfHeight){	
		((UCapsuleComponent*)target)->InitCapsuleSize(InRadius, InHalfHeight);	
	}
	bool uapi_UCapsuleComponent_IsZeroExtent(void* target){	
		auto result = ((UCapsuleComponent*)target)->IsZeroExtent();	
		return result;	
	}
	void uapi_UCapsuleComponent_PostLoad(void* target){	
		((UCapsuleComponent*)target)->PostLoad();	
	}
	void uapi_UCapsuleComponent_SetCapsuleHalfHeight(void* target, float HalfHeight, bool bUpdateOverlaps){	
		((UCapsuleComponent*)target)->SetCapsuleHalfHeight(HalfHeight, bUpdateOverlaps);	
	}
	void uapi_UCapsuleComponent_SetCapsuleRadius(void* target, float Radius, bool bUpdateOverlaps){	
		((UCapsuleComponent*)target)->SetCapsuleRadius(Radius, bUpdateOverlaps);	
	}
	void uapi_UCapsuleComponent_SetCapsuleSize(void* target, float InRadius, float InHalfHeight, bool bUpdateOverlaps){	
		((UCapsuleComponent*)target)->SetCapsuleSize(InRadius, InHalfHeight, bUpdateOverlaps);	
	}
	void uapi_UCapsuleComponent_UpdateBodySetup(void* target){	
		((UCapsuleComponent*)target)->UpdateBodySetup();	
	}
	void uapi_UCharacterMovementComponent_AddForce(void* target, Vector3 Force){	
		((UCharacterMovementComponent*)target)->AddForce(ToFVector(Force));	
	}
	void uapi_UCharacterMovementComponent_AddImpulse(void* target, Vector3 Impulse, bool bVelocityChange){	
		((UCharacterMovementComponent*)target)->AddImpulse(ToFVector(Impulse), bVelocityChange);	
	}
	void uapi_UCharacterMovementComponent_AdjustFloorHeight(void* target){	
		((UCharacterMovementComponent*)target)->AdjustFloorHeight();	
	}
	void uapi_UCharacterMovementComponent_ApplyAccumulatedForces(void* target, float DeltaSeconds){	
		((UCharacterMovementComponent*)target)->ApplyAccumulatedForces(DeltaSeconds);	
	}
	void uapi_UCharacterMovementComponent_ApplyDownwardForce(void* target, float DeltaSeconds){	
		((UCharacterMovementComponent*)target)->ApplyDownwardForce(DeltaSeconds);	
	}
	void uapi_UCharacterMovementComponent_ApplyNetworkMovementMode(void* target, uint8 ReceivedMode){	
		((UCharacterMovementComponent*)target)->ApplyNetworkMovementMode(ReceivedMode);	
	}
	void uapi_UCharacterMovementComponent_ApplyRepulsionForce(void* target, float DeltaSeconds){	
		((UCharacterMovementComponent*)target)->ApplyRepulsionForce(DeltaSeconds);	
	}
	void uapi_UCharacterMovementComponent_BeginDestroy(void* target){	
		((UCharacterMovementComponent*)target)->BeginDestroy();	
	}
	void uapi_UCharacterMovementComponent_BeginPlay(void* target){	
		((UCharacterMovementComponent*)target)->BeginPlay();	
	}
	void uapi_UCharacterMovementComponent_CalcAvoidanceVelocity(void* target, float DeltaTime){	
		((UCharacterMovementComponent*)target)->CalcAvoidanceVelocity(DeltaTime);	
	}
	void uapi_UCharacterMovementComponent_CalcVelocity(void* target, float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration){	
		((UCharacterMovementComponent*)target)->CalcVelocity(DeltaTime, Friction, bFluid, BrakingDeceleration);	
	}
	bool uapi_UCharacterMovementComponent_CanAttemptJump(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->CanAttemptJump();	
		return result;	
	}
	bool uapi_UCharacterMovementComponent_CanCrouchInCurrentState(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->CanCrouchInCurrentState();	
		return result;	
	}
	bool uapi_UCharacterMovementComponent_CanStartPathFollowing(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->CanStartPathFollowing();	
		return result;	
	}
	bool uapi_UCharacterMovementComponent_CanStopPathFollowing(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->CanStopPathFollowing();	
		return result;	
	}
	bool uapi_UCharacterMovementComponent_CanWalkOffLedges(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->CanWalkOffLedges();	
		return result;	
	}
	void uapi_UCharacterMovementComponent_ClearAccumulatedForces(void* target){	
		((UCharacterMovementComponent*)target)->ClearAccumulatedForces();	
	}
	void uapi_UCharacterMovementComponent_ClientAckGoodMove(void* target, float TimeStamp){	
		((UCharacterMovementComponent*)target)->ClientAckGoodMove(TimeStamp);	
	}
	void uapi_UCharacterMovementComponent_ClientAckGoodMove_Implementation(void* target, float TimeStamp){	
		((UCharacterMovementComponent*)target)->ClientAckGoodMove_Implementation(TimeStamp);	
	}
	void uapi_UCharacterMovementComponent_ClientAdjustPosition(void* target, float TimeStamp, Vector3 NewLoc, Vector3 NewVel, UPrimitiveComponent* NewBase, UName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode){	
		((UCharacterMovementComponent*)target)->ClientAdjustPosition(TimeStamp, ToFVector(NewLoc), ToFVector(NewVel), NewBase, ToFName(NewBaseBoneName), bHasBase, bBaseRelativePosition, ServerMovementMode);	
	}
	void uapi_UCharacterMovementComponent_ClientVeryShortAdjustPosition(void* target, float TimeStamp, Vector3 NewLoc, UPrimitiveComponent* NewBase, UName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode){	
		((UCharacterMovementComponent*)target)->ClientVeryShortAdjustPosition(TimeStamp, ToFVector(NewLoc), NewBase, ToFName(NewBaseBoneName), bHasBase, bBaseRelativePosition, ServerMovementMode);	
	}
	void uapi_UCharacterMovementComponent_ClientVeryShortAdjustPosition_Implementation(void* target, float TimeStamp, Vector3 NewLoc, UPrimitiveComponent* NewBase, UName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode){	
		((UCharacterMovementComponent*)target)->ClientVeryShortAdjustPosition_Implementation(TimeStamp, ToFVector(NewLoc), NewBase, ToFName(NewBaseBoneName), bHasBase, bBaseRelativePosition, ServerMovementMode);	
	}
	void uapi_UCharacterMovementComponent_Crouch(void* target, bool bClientSimulation){	
		((UCharacterMovementComponent*)target)->Crouch(bClientSimulation);	
	}
	void uapi_UCharacterMovementComponent_Deactivate(void* target){	
		((UCharacterMovementComponent*)target)->Deactivate();	
	}
	void uapi_UCharacterMovementComponent_DisableMovement(void* target){	
		((UCharacterMovementComponent*)target)->DisableMovement();	
	}
	bool uapi_UCharacterMovementComponent_DoJump(void* target, bool bReplayingMoves){	
		auto result = ((UCharacterMovementComponent*)target)->DoJump(bReplayingMoves);	
		return result;	
	}
	Vector3 uapi_UCharacterMovementComponent_FindWaterLine(void* target, Vector3 Start, Vector3 End){	
		auto result = ToVector3(((UCharacterMovementComponent*)target)->FindWaterLine(ToFVector(Start), ToFVector(End)));	
		return result;	
	}
	void uapi_UCharacterMovementComponent_FlushServerMoves(void* target){	
		((UCharacterMovementComponent*)target)->FlushServerMoves();	
	}
	void uapi_UCharacterMovementComponent_ForceClientAdjustment(void* target){	
		((UCharacterMovementComponent*)target)->ForceClientAdjustment();	
	}
	bool uapi_UCharacterMovementComponent_ForcePositionUpdate(void* target, float DeltaTime){	
		auto result = ((UCharacterMovementComponent*)target)->ForcePositionUpdate(DeltaTime);	
		return result;	
	}
	void uapi_UCharacterMovementComponent_ForceReplicationUpdate(void* target){	
		((UCharacterMovementComponent*)target)->ForceReplicationUpdate();	
	}
	float uapi_UCharacterMovementComponent_GetAnalogInputModifier(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetAnalogInputModifier();	
		return result;	
	}
	int32 uapi_UCharacterMovementComponent_GetAvoidanceGroupMask(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetAvoidanceGroupMask();	
		return result;	
	}
	Vector3 uapi_UCharacterMovementComponent_GetBestDirectionOffActor(void* target, AActor* BaseActor){	
		auto result = ToVector3(((UCharacterMovementComponent*)target)->GetBestDirectionOffActor(BaseActor));	
		return result;	
	}
	void* uapi_UCharacterMovementComponent_GetCharacterOwner(void* target){	
		auto result = (void*)((UCharacterMovementComponent*)target)->GetCharacterOwner();	
		return result;	
	}
	float uapi_UCharacterMovementComponent_GetCrouchedHalfHeight(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetCrouchedHalfHeight();	
		return result;	
	}
	Vector3 uapi_UCharacterMovementComponent_GetCurrentAcceleration(void* target){	
		auto result = ToVector3(((UCharacterMovementComponent*)target)->GetCurrentAcceleration());	
		return result;	
	}
	void* uapi_UCharacterMovementComponent_GetCurrentReplayedSavedMove(void* target){	
		auto result = (void*)((UCharacterMovementComponent*)target)->GetCurrentReplayedSavedMove();	
		return result;	
	}
	Rotator uapi_UCharacterMovementComponent_GetDeltaRotation(void* target, float DeltaTime){	
		auto result = ToRotator(((UCharacterMovementComponent*)target)->GetDeltaRotation(DeltaTime));	
		return result;	
	}
	Vector3 uapi_UCharacterMovementComponent_GetFallingLateralAcceleration(void* target, float DeltaTime){	
		auto result = ToVector3(((UCharacterMovementComponent*)target)->GetFallingLateralAcceleration(DeltaTime));	
		return result;	
	}
	float uapi_UCharacterMovementComponent_GetGravityZ(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetGravityZ();	
		return result;	
	}
	int32 uapi_UCharacterMovementComponent_GetGroupsToAvoidMask(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetGroupsToAvoidMask();	
		return result;	
	}
	int32 uapi_UCharacterMovementComponent_GetGroupsToIgnoreMask(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetGroupsToIgnoreMask();	
		return result;	
	}
	Vector3 uapi_UCharacterMovementComponent_GetImpartedMovementBaseVelocity(void* target){	
		auto result = ToVector3(((UCharacterMovementComponent*)target)->GetImpartedMovementBaseVelocity());	
		return result;	
	}
	Vector3 uapi_UCharacterMovementComponent_GetLastUpdateLocation(void* target){	
		auto result = ToVector3(((UCharacterMovementComponent*)target)->GetLastUpdateLocation());	
		return result;	
	}
	Quaternion uapi_UCharacterMovementComponent_GetLastUpdateQuat(void* target){	
		auto result = ToQuaternion(((UCharacterMovementComponent*)target)->GetLastUpdateQuat());	
		return result;	
	}
	Vector3 uapi_UCharacterMovementComponent_GetLastUpdateRequestedVelocity(void* target){	
		auto result = ToVector3(((UCharacterMovementComponent*)target)->GetLastUpdateRequestedVelocity());	
		return result;	
	}
	Rotator uapi_UCharacterMovementComponent_GetLastUpdateRotation(void* target){	
		auto result = ToRotator(((UCharacterMovementComponent*)target)->GetLastUpdateRotation());	
		return result;	
	}
	Vector3 uapi_UCharacterMovementComponent_GetLastUpdateVelocity(void* target){	
		auto result = ToVector3(((UCharacterMovementComponent*)target)->GetLastUpdateVelocity());	
		return result;	
	}
	float uapi_UCharacterMovementComponent_GetMaxAcceleration(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetMaxAcceleration();	
		return result;	
	}
	float uapi_UCharacterMovementComponent_GetMaxBrakingDeceleration(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetMaxBrakingDeceleration();	
		return result;	
	}
	float uapi_UCharacterMovementComponent_GetMaxJumpHeight(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetMaxJumpHeight();	
		return result;	
	}
	float uapi_UCharacterMovementComponent_GetMaxJumpHeightWithJumpTime(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetMaxJumpHeightWithJumpTime();	
		return result;	
	}
	float uapi_UCharacterMovementComponent_GetMaxSpeed(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetMaxSpeed();	
		return result;	
	}
	float uapi_UCharacterMovementComponent_GetMinAnalogSpeed(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetMinAnalogSpeed();	
		return result;	
	}
	void* uapi_UCharacterMovementComponent_GetMovementBase(void* target){	
		auto result = (void*)((UCharacterMovementComponent*)target)->GetMovementBase();	
		return result;	
	}
	const char* uapi_UCharacterMovementComponent_GetMovementName(void* target){	
		auto result = FString2Utf8(((UCharacterMovementComponent*)target)->GetMovementName());	
		return result;	
	}
	float uapi_UCharacterMovementComponent_GetNetworkSafeRandomAngleDegrees(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetNetworkSafeRandomAngleDegrees();	
		return result;	
	}
	float uapi_UCharacterMovementComponent_GetPathFollowingBrakingDistance(void* target, float MaxSpeed){	
		auto result = ((UCharacterMovementComponent*)target)->GetPathFollowingBrakingDistance(MaxSpeed);	
		return result;	
	}
	float uapi_UCharacterMovementComponent_GetPerchRadiusThreshold(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetPerchRadiusThreshold();	
		return result;	
	}
	void* uapi_UCharacterMovementComponent_GetPredictionData_Client(void* target){	
		auto result = (void*)((UCharacterMovementComponent*)target)->GetPredictionData_Client();	
		return result;	
	}
	void* uapi_UCharacterMovementComponent_GetPredictionData_Client_Character(void* target){	
		auto result = (void*)((UCharacterMovementComponent*)target)->GetPredictionData_Client_Character();	
		return result;	
	}
	void* uapi_UCharacterMovementComponent_GetPredictionData_Server(void* target){	
		auto result = (void*)((UCharacterMovementComponent*)target)->GetPredictionData_Server();	
		return result;	
	}
	void* uapi_UCharacterMovementComponent_GetPredictionData_Server_Character(void* target){	
		auto result = (void*)((UCharacterMovementComponent*)target)->GetPredictionData_Server_Character();	
		return result;	
	}
	float uapi_UCharacterMovementComponent_GetRVOAvoidanceConsiderationRadius(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetRVOAvoidanceConsiderationRadius();	
		return result;	
	}
	float uapi_UCharacterMovementComponent_GetRVOAvoidanceHeight(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetRVOAvoidanceHeight();	
		return result;	
	}
	Vector3 uapi_UCharacterMovementComponent_GetRVOAvoidanceOrigin(void* target){	
		auto result = ToVector3(((UCharacterMovementComponent*)target)->GetRVOAvoidanceOrigin());	
		return result;	
	}
	float uapi_UCharacterMovementComponent_GetRVOAvoidanceRadius(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetRVOAvoidanceRadius();	
		return result;	
	}
	int32 uapi_UCharacterMovementComponent_GetRVOAvoidanceUID(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetRVOAvoidanceUID();	
		return result;	
	}
	int32 uapi_UCharacterMovementComponent_GetRVOAvoidanceUIDFast(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetRVOAvoidanceUIDFast();	
		return result;	
	}
	float uapi_UCharacterMovementComponent_GetRVOAvoidanceWeight(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetRVOAvoidanceWeight();	
		return result;	
	}
	float uapi_UCharacterMovementComponent_GetServerLastTransformUpdateTimeStamp(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetServerLastTransformUpdateTimeStamp();	
		return result;	
	}
	float uapi_UCharacterMovementComponent_GetSimulationTimeStep(void* target, float RemainingTime, int32 Iterations){	
		auto result = ((UCharacterMovementComponent*)target)->GetSimulationTimeStep(RemainingTime, Iterations);	
		return result;	
	}
	float uapi_UCharacterMovementComponent_GetValidPerchRadius(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetValidPerchRadius();	
		return result;	
	}
	Vector3 uapi_UCharacterMovementComponent_GetVelocityForRVOConsideration(void* target){	
		auto result = ToVector3(((UCharacterMovementComponent*)target)->GetVelocityForRVOConsideration());	
		return result;	
	}
	float uapi_UCharacterMovementComponent_GetWalkableFloorAngle(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetWalkableFloorAngle();	
		return result;	
	}
	float uapi_UCharacterMovementComponent_GetWalkableFloorZ(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->GetWalkableFloorZ();	
		return result;	
	}
	bool uapi_UCharacterMovementComponent_HandlePendingLaunch(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->HandlePendingLaunch();	
		return result;	
	}
	bool uapi_UCharacterMovementComponent_HasAnimRootMotion(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->HasAnimRootMotion();	
		return result;	
	}
	bool uapi_UCharacterMovementComponent_HasPredictionData_Client(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->HasPredictionData_Client();	
		return result;	
	}
	bool uapi_UCharacterMovementComponent_HasPredictionData_Server(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->HasPredictionData_Server();	
		return result;	
	}
	bool uapi_UCharacterMovementComponent_HasRootMotionSources(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->HasRootMotionSources();	
		return result;	
	}
	bool uapi_UCharacterMovementComponent_HasValidData(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->HasValidData();	
		return result;	
	}
	float uapi_UCharacterMovementComponent_ImmersionDepth(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->ImmersionDepth();	
		return result;	
	}
	bool uapi_UCharacterMovementComponent_IsCrouching(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->IsCrouching();	
		return result;	
	}
	bool uapi_UCharacterMovementComponent_IsFalling(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->IsFalling();	
		return result;	
	}
	bool uapi_UCharacterMovementComponent_IsFlying(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->IsFlying();	
		return result;	
	}
	bool uapi_UCharacterMovementComponent_IsMovementInProgress(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->IsMovementInProgress();	
		return result;	
	}
	bool uapi_UCharacterMovementComponent_IsMovingOnGround(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->IsMovingOnGround();	
		return result;	
	}
	bool uapi_UCharacterMovementComponent_IsSwimming(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->IsSwimming();	
		return result;	
	}
	bool uapi_UCharacterMovementComponent_IsWalking(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->IsWalking();	
		return result;	
	}
	void uapi_UCharacterMovementComponent_JumpOff(void* target, AActor* MovementBaseActor){	
		((UCharacterMovementComponent*)target)->JumpOff(MovementBaseActor);	
	}
	void uapi_UCharacterMovementComponent_JumpOutOfWater(void* target, Vector3 WallNormal){	
		((UCharacterMovementComponent*)target)->JumpOutOfWater(ToFVector(WallNormal));	
	}
	float uapi_UCharacterMovementComponent_K2_GetWalkableFloorAngle(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->K2_GetWalkableFloorAngle();	
		return result;	
	}
	float uapi_UCharacterMovementComponent_K2_GetWalkableFloorZ(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->K2_GetWalkableFloorZ();	
		return result;	
	}
	void uapi_UCharacterMovementComponent_MaybeSaveBaseLocation(void* target){	
		((UCharacterMovementComponent*)target)->MaybeSaveBaseLocation();	
	}
	void uapi_UCharacterMovementComponent_MaybeUpdateBasedMovement(void* target, float DeltaSeconds){	
		((UCharacterMovementComponent*)target)->MaybeUpdateBasedMovement(DeltaSeconds);	
	}
	void uapi_UCharacterMovementComponent_NotifyBumpedPawn(void* target, APawn* BumpedPawn){	
		((UCharacterMovementComponent*)target)->NotifyBumpedPawn(BumpedPawn);	
	}
	void uapi_UCharacterMovementComponent_NotifyJumpApex(void* target){	
		((UCharacterMovementComponent*)target)->NotifyJumpApex();	
	}
	void uapi_UCharacterMovementComponent_OnRegister(void* target){	
		((UCharacterMovementComponent*)target)->OnRegister();	
	}
	void uapi_UCharacterMovementComponent_OnRootMotionSourceBeingApplied(void* target, FRootMotionSource* Source){	
		((UCharacterMovementComponent*)target)->OnRootMotionSourceBeingApplied(Source);	
	}
	void uapi_UCharacterMovementComponent_OnTeleported(void* target){	
		((UCharacterMovementComponent*)target)->OnTeleported();	
	}
	uint8 uapi_UCharacterMovementComponent_PackNetworkMovementMode(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->PackNetworkMovementMode();	
		return result;	
	}
	uint32 uapi_UCharacterMovementComponent_PackYawAndPitchTo32(float Yaw, float Pitch){	
		auto result = (UCharacterMovementComponent::PackYawAndPitchTo32(Yaw, Pitch));	
		return result;	
	}
	void uapi_UCharacterMovementComponent_PerformAirControlForPathFollowing(void* target, Vector3 Direction, float ZDiff){	
		((UCharacterMovementComponent*)target)->PerformAirControlForPathFollowing(ToFVector(Direction), ZDiff);	
	}
	void uapi_UCharacterMovementComponent_PhysFalling(void* target, float deltaTime, int32 Iterations){	
		((UCharacterMovementComponent*)target)->PhysFalling(deltaTime, Iterations);	
	}
	void uapi_UCharacterMovementComponent_PhysicsRotation(void* target, float DeltaTime){	
		((UCharacterMovementComponent*)target)->PhysicsRotation(DeltaTime);	
	}
	void uapi_UCharacterMovementComponent_PhysicsVolumeChanged(void* target, APhysicsVolume* NewVolume){	
		((UCharacterMovementComponent*)target)->PhysicsVolumeChanged(NewVolume);	
	}
	void uapi_UCharacterMovementComponent_PostLoad(void* target){	
		((UCharacterMovementComponent*)target)->PostLoad();	
	}
	void uapi_UCharacterMovementComponent_RegisterComponentTickFunctions(void* target, bool bRegister){	
		((UCharacterMovementComponent*)target)->RegisterComponentTickFunctions(bRegister);	
	}
	void uapi_UCharacterMovementComponent_RemoveRootMotionSource(void* target, UName InstanceName){	
		((UCharacterMovementComponent*)target)->RemoveRootMotionSource(ToFName(InstanceName));	
	}
	void uapi_UCharacterMovementComponent_RemoveRootMotionSourceByID(void* target, uint16 RootMotionSourceID){	
		((UCharacterMovementComponent*)target)->RemoveRootMotionSourceByID(RootMotionSourceID);	
	}
	void uapi_UCharacterMovementComponent_ResetPredictionData_Client(void* target){	
		((UCharacterMovementComponent*)target)->ResetPredictionData_Client();	
	}
	void uapi_UCharacterMovementComponent_ResetPredictionData_Server(void* target){	
		((UCharacterMovementComponent*)target)->ResetPredictionData_Server();	
	}
	Vector3 uapi_UCharacterMovementComponent_RoundAcceleration(void* target, Vector3 InAccel){	
		auto result = ToVector3(((UCharacterMovementComponent*)target)->RoundAcceleration(ToFVector(InAccel)));	
		return result;	
	}
	void uapi_UCharacterMovementComponent_SaveBaseLocation(void* target){	
		((UCharacterMovementComponent*)target)->SaveBaseLocation();	
	}
	void uapi_UCharacterMovementComponent_SendClientAdjustment(void* target){	
		((UCharacterMovementComponent*)target)->SendClientAdjustment();	
	}
	void uapi_UCharacterMovementComponent_SetAvoidanceEnabled(void* target, bool bEnable){	
		((UCharacterMovementComponent*)target)->SetAvoidanceEnabled(bEnable);	
	}
	void uapi_UCharacterMovementComponent_SetAvoidanceGroup(void* target, int32 GroupFlags){	
		((UCharacterMovementComponent*)target)->SetAvoidanceGroup(GroupFlags);	
	}
	void uapi_UCharacterMovementComponent_SetAvoidanceVelocityLock(void* target, UAvoidanceManager* Avoidance, float Duration){	
		((UCharacterMovementComponent*)target)->SetAvoidanceVelocityLock(Avoidance, Duration);	
	}
	void uapi_UCharacterMovementComponent_SetBase(void* target, UPrimitiveComponent* NewBase, UName BoneName, bool bNotifyActor){	
		((UCharacterMovementComponent*)target)->SetBase(NewBase, ToFName(BoneName), bNotifyActor);	
	}
	void uapi_UCharacterMovementComponent_SetCrouchedHalfHeight(void* target, float NewValue){	
		((UCharacterMovementComponent*)target)->SetCrouchedHalfHeight(NewValue);	
	}
	void uapi_UCharacterMovementComponent_SetDefaultMovementMode(void* target){	
		((UCharacterMovementComponent*)target)->SetDefaultMovementMode();	
	}
	void uapi_UCharacterMovementComponent_SetGroupsToAvoid(void* target, int32 GroupFlags){	
		((UCharacterMovementComponent*)target)->SetGroupsToAvoid(GroupFlags);	
	}
	void uapi_UCharacterMovementComponent_SetGroupsToIgnore(void* target, int32 GroupFlags){	
		((UCharacterMovementComponent*)target)->SetGroupsToIgnore(GroupFlags);	
	}
	void uapi_UCharacterMovementComponent_SetRVOAvoidanceUID(void* target, int32 UID){	
		((UCharacterMovementComponent*)target)->SetRVOAvoidanceUID(UID);	
	}
	void uapi_UCharacterMovementComponent_SetRVOAvoidanceWeight(void* target, float Weight){	
		((UCharacterMovementComponent*)target)->SetRVOAvoidanceWeight(Weight);	
	}
	void uapi_UCharacterMovementComponent_SetUpdatedComponent(void* target, USceneComponent* NewUpdatedComponent){	
		((UCharacterMovementComponent*)target)->SetUpdatedComponent(NewUpdatedComponent);	
	}
	void uapi_UCharacterMovementComponent_SetWalkableFloorAngle(void* target, float InWalkableFloorAngle){	
		((UCharacterMovementComponent*)target)->SetWalkableFloorAngle(InWalkableFloorAngle);	
	}
	void uapi_UCharacterMovementComponent_SetWalkableFloorZ(void* target, float InWalkableFloorZ){	
		((UCharacterMovementComponent*)target)->SetWalkableFloorZ(InWalkableFloorZ);	
	}
	bool uapi_UCharacterMovementComponent_ShouldCorrectRotation(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->ShouldCorrectRotation();	
		return result;	
	}
	bool uapi_UCharacterMovementComponent_ShouldPerformAirControlForPathFollowing(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->ShouldPerformAirControlForPathFollowing();	
		return result;	
	}
	bool uapi_UCharacterMovementComponent_ShouldRemainVertical(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->ShouldRemainVertical();	
		return result;	
	}
	bool uapi_UCharacterMovementComponent_ShouldUsePackedMovementRPCs(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->ShouldUsePackedMovementRPCs();	
		return result;	
	}
	void uapi_UCharacterMovementComponent_StartNewPhysics(void* target, float deltaTime, int32 Iterations){	
		((UCharacterMovementComponent*)target)->StartNewPhysics(deltaTime, Iterations);	
	}
	void uapi_UCharacterMovementComponent_StartSwimming(void* target, Vector3 OldLocation, Vector3 OldVelocity, float timeTick, float remainingTime, int32 Iterations){	
		((UCharacterMovementComponent*)target)->StartSwimming(ToFVector(OldLocation), ToFVector(OldVelocity), timeTick, remainingTime, Iterations);	
	}
	void uapi_UCharacterMovementComponent_StopActiveMovement(void* target){	
		((UCharacterMovementComponent*)target)->StopActiveMovement();	
	}
	void uapi_UCharacterMovementComponent_UnCrouch(void* target, bool bClientSimulation){	
		((UCharacterMovementComponent*)target)->UnCrouch(bClientSimulation);	
	}
	void uapi_UCharacterMovementComponent_UpdateBasedMovement(void* target, float DeltaSeconds){	
		((UCharacterMovementComponent*)target)->UpdateBasedMovement(DeltaSeconds);	
	}
	void uapi_UCharacterMovementComponent_UpdateCharacterStateAfterMovement(void* target, float DeltaSeconds){	
		((UCharacterMovementComponent*)target)->UpdateCharacterStateAfterMovement(DeltaSeconds);	
	}
	void uapi_UCharacterMovementComponent_UpdateCharacterStateBeforeMovement(void* target, float DeltaSeconds){	
		((UCharacterMovementComponent*)target)->UpdateCharacterStateBeforeMovement(DeltaSeconds);	
	}
	void uapi_UCharacterMovementComponent_UpdateFloorFromAdjustment(void* target){	
		((UCharacterMovementComponent*)target)->UpdateFloorFromAdjustment();	
	}
	void uapi_UCharacterMovementComponent_UpdateProxyAcceleration(void* target){	
		((UCharacterMovementComponent*)target)->UpdateProxyAcceleration();	
	}
	float uapi_UCharacterMovementComponent_VisualizeMovement(void* target){	
		auto result = ((UCharacterMovementComponent*)target)->VisualizeMovement();	
		return result;	
	}
}

using uapi_UObject_AbortInsideMemberFunctionFn = void(*)(void(*)(void* target));

using uapi_UObject_AreNativePropertiesIdenticalToFn = void(*)(bool(*)(void* target,UObject* Other));

using uapi_UObject_BeginCacheForCookedPlatformDataFn = void(*)(void(*)(void* target,ITargetPlatform* TargetPlatform));

using uapi_UObject_BeginDestroyFn = void(*)(void(*)(void* target));

using uapi_UObject_CallRemoteFunctionFn = void(*)(bool(*)(void* target,UFunction* Function,void* Parms,FOutParmRec* OutParms,FFrame* Stack));

using uapi_UObject_CanCreateInCurrentContextFn = void(*)(bool(*)(UObject* Template));

using uapi_UObject_CanEditChangeFn = void(*)(bool(*)(void* target,FProperty* InProperty));

using uapi_UObject_CanModifyFn = void(*)(bool(*)(void* target));

using uapi_UObject_CheckDefaultSubobjectsFn = void(*)(bool(*)(void* target,bool bForceCheck));

using uapi_UObject_ClearAllCachedCookedPlatformDataFn = void(*)(void(*)(void* target));

using uapi_UObject_ClearCachedCookedPlatformDataFn = void(*)(void(*)(void* target,ITargetPlatform* TargetPlatform));

using uapi_UObject_ConditionalBeginDestroyFn = void(*)(bool(*)(void* target));

using uapi_UObject_ConditionalFinishDestroyFn = void(*)(bool(*)(void* target));

using uapi_UObject_ConditionalPostLoadFn = void(*)(void(*)(void* target));

using uapi_UObject_ConditionalPostLoadSubobjectsFn = void(*)(void(*)(void* target,FObjectInstancingGraph* OuterInstanceGraph));

using uapi_UObject_DestroyNonNativePropertiesFn = void(*)(void(*)(void* target));

using uapi_UObject_ExecuteUbergraphFn = void(*)(void(*)(void* target,int32 EntryPoint));

using uapi_UObject_FindFunctionFn = void(*)(void*(*)(void* target,UName InName));

using uapi_UObject_FindFunctionCheckedFn = void(*)(void*(*)(void* target,UName InName));

using uapi_UObject_FinishDestroyFn = void(*)(void(*)(void* target));

using uapi_UObject_GetArchetypeFn = void(*)(void*(*)(void* target));

using uapi_UObject_GetConfigOverridePlatformFn = void(*)(void*(*)(void* target));

using uapi_UObject_GetDefaultConfigFilenameFn = void(*)(const char*(*)(void* target));

using uapi_UObject_GetDescFn = void(*)(const char*(*)(void* target));

using uapi_UObject_GetDetailedInfoFn = void(*)(const char*(*)(void* target));

using uapi_UObject_GetExporterNameFn = void(*)(UName(*)(void* target));

using uapi_UObject_GetGlobalUserConfigFilenameFn = void(*)(const char*(*)(void* target));

using uapi_UObject_GetNetPushIdDynamicFn = void(*)(uint64(*)(void* target));

using uapi_UObject_GetProjectUserConfigFilenameFn = void(*)(const char*(*)(void* target));

using uapi_UObject_GetSparseClassDataStructFn = void(*)(void*(*)(void* target));

using uapi_UObject_GetWorldFn = void(*)(void*(*)(void* target));

using uapi_UObject_GetWorldCheckedFn = void(*)(void*(*)(void* target,bool& bSupported));

using uapi_UObject_HasNonEditorOnlyReferencesFn = void(*)(bool(*)(void* target));

using uapi_UObject_ImplementsGetWorldFn = void(*)(bool(*)(void* target));

using uapi_UObject_ImportCustomPropertiesFn = void(*)(void(*)(void* target,TCHAR* SourceText,FFeedbackContext* Warn));

using uapi_UObject_InstanceSubobjectTemplatesFn = void(*)(void(*)(void* target,FObjectInstancingGraph* InstanceGraph));

using uapi_UObject_IsAssetFn = void(*)(bool(*)(void* target));

using uapi_UObject_IsBasedOnArchetypeFn = void(*)(bool(*)(void* target,UObject* SomeObject));

using uapi_UObject_IsCachedCookedPlatformDataLoadedFn = void(*)(bool(*)(void* target,ITargetPlatform* TargetPlatform));

using uapi_UObject_IsDestructionThreadSafeFn = void(*)(bool(*)(void* target));

using uapi_UObject_IsEditorOnlyFn = void(*)(bool(*)(void* target));

using uapi_UObject_IsFullNameStableForNetworkingFn = void(*)(bool(*)(void* target));

using uapi_UObject_IsInBlueprintFn = void(*)(bool(*)(void* target));

using uapi_UObject_IsLocalizedResourceFn = void(*)(bool(*)(void* target));

using uapi_UObject_IsNameStableForNetworkingFn = void(*)(bool(*)(void* target));

using uapi_UObject_IsPostLoadThreadSafeFn = void(*)(bool(*)(void* target));

using uapi_UObject_IsReadyForAsyncPostLoadFn = void(*)(bool(*)(void* target));

using uapi_UObject_IsReadyForFinishDestroyFn = void(*)(bool(*)(void* target));

using uapi_UObject_IsSafeForRootSetFn = void(*)(bool(*)(void* target));

using uapi_UObject_IsSelectedFn = void(*)(bool(*)(void* target));

using uapi_UObject_IsSupportedForNetworkingFn = void(*)(bool(*)(void* target));

using uapi_UObject_LoadConfigFn = void(*)(void(*)(void* target,UClass* ConfigClass,TCHAR* Filename,uint32 PropagationFlags,FProperty* PropertyToLoad));

using uapi_UObject_MarkAsEditorOnlySubobjectFn = void(*)(void(*)(void* target));

using uapi_UObject_ModifyFn = void(*)(bool(*)(void* target,bool bAlwaysMarkDirty));

using uapi_UObject_MoveDataToSparseClassDataStructFn = void(*)(void(*)(void* target));

using uapi_UObject_NeedsLoadForClientFn = void(*)(bool(*)(void* target));

using uapi_UObject_NeedsLoadForEditorGameFn = void(*)(bool(*)(void* target));

using uapi_UObject_NeedsLoadForServerFn = void(*)(bool(*)(void* target));

using uapi_UObject_NeedsLoadForTargetPlatformFn = void(*)(bool(*)(void* target,ITargetPlatform* TargetPlatform));

using uapi_UObject_ParseParmsFn = void(*)(void(*)(void* target,TCHAR* Parms));

using uapi_UObject_PostCDOContructFn = void(*)(void(*)(void* target));

using uapi_UObject_PostDuplicateFn = void(*)(void(*)(void* target,bool bDuplicateForPIE));

using uapi_UObject_PostEditChangeFn = void(*)(void(*)(void* target));

using uapi_UObject_PostEditImportFn = void(*)(void(*)(void* target));

using uapi_UObject_PostEditUndoFn = void(*)(void(*)(void* target));

using uapi_UObject_PostInitPropertiesFn = void(*)(void(*)(void* target));

using uapi_UObject_PostInterpChangeFn = void(*)(void(*)(void* target,FProperty* PropertyThatChanged));

using uapi_UObject_PostLinkerChangeFn = void(*)(void(*)(void* target));

using uapi_UObject_PostLoadFn = void(*)(void(*)(void* target));

using uapi_UObject_PostLoadSubobjectsFn = void(*)(void(*)(void* target,FObjectInstancingGraph* OuterInstanceGraph));

using uapi_UObject_PostNetReceiveFn = void(*)(void(*)(void* target));

using uapi_UObject_PostReinitPropertiesFn = void(*)(void(*)(void* target));

using uapi_UObject_PostReloadConfigFn = void(*)(void(*)(void* target,FProperty* PropertyThatWasLoaded));

using uapi_UObject_PostRenameFn = void(*)(void(*)(void* target,UObject* OldOuter,UName OldName));

using uapi_UObject_PostRepNotifiesFn = void(*)(void(*)(void* target));

using uapi_UObject_PreDestroyFromReplicationFn = void(*)(void(*)(void* target));

using uapi_UObject_PreEditChangeFn = void(*)(void(*)(void* target,FProperty* PropertyAboutToChange));

using uapi_UObject_PreEditUndoFn = void(*)(void(*)(void* target));

using uapi_UObject_PreNetReceiveFn = void(*)(void(*)(void* target));

using uapi_UObject_RegenerateClassFn = void(*)(void*(*)(void* target,UClass* ClassToRegenerate,UObject* PreviousCDO));

using uapi_UObject_ReinitializePropertiesFn = void(*)(void(*)(void* target,UObject* SourceObject,FObjectInstancingGraph* InstanceGraph));

using uapi_UObject_ReloadConfigFn = void(*)(void(*)(void* target,UClass* ConfigClass,TCHAR* Filename,uint32 PropagationFlags,FProperty* PropertyToLoad));

using uapi_UObject_SaveConfigFn = void(*)(void(*)(void* target,uint64 Flags,TCHAR* Filename,FConfigCacheIni* Config,bool bAllowCopyToDefaultObject));

using uapi_UObject_SetLinkerFn = void(*)(void(*)(void* target,FLinkerLoad* LinkerLoad,int32 LinkerIndex,bool bShouldDetachExisting));

using uapi_UObject_ShutdownAfterErrorFn = void(*)(void(*)(void* target));

using uapi_UObject_UpdateGlobalUserConfigFileFn = void(*)(void(*)(void* target));

using uapi_UObject_UpdateProjectUserConfigFileFn = void(*)(void(*)(void* target));

using uapi_UObject_WillNeverCacheCookedPlatformDataAgainFn = void(*)(void(*)(void* target));

using uapi_AActor_ActorHasTagFn = void(*)(bool(*)(void* target,UName Tag));

using uapi_AActor_ActorToWorldFn = void(*)(Transform(*)(void* target));

using uapi_AActor_AddDataLayerFn = void(*)(bool(*)(void* target,UDataLayerAsset* DataLayerAsset));

using uapi_AActor_AddInstanceComponentFn = void(*)(void(*)(void* target,UActorComponent* Component));

using uapi_AActor_AddOwnedComponentFn = void(*)(void(*)(void* target,UActorComponent* Component));

using uapi_AActor_AddTickPrerequisiteActorFn = void(*)(void(*)(void* target,AActor* PrerequisiteActor));

using uapi_AActor_AddTickPrerequisiteComponentFn = void(*)(void(*)(void* target,UActorComponent* PrerequisiteComponent));

using uapi_AActor_AllowReceiveTickEventOnDedicatedServerFn = void(*)(bool(*)(void* target));

using uapi_AActor_AsyncPhysicsTickActorFn = void(*)(void(*)(void* target,float DeltaTime,float SimTime));

using uapi_AActor_BecomeViewTargetFn = void(*)(void(*)(void* target,APlayerController* PC));

using uapi_AActor_CallPreReplicationFn = void(*)(void(*)(void* target,UNetDriver* NetDriver));

using uapi_AActor_CallRemoteFunctionFn = void(*)(bool(*)(void* target,UFunction* Function,void* Parameters,FOutParmRec* OutParms,FFrame* Stack));

using uapi_AActor_CanBeBaseForCharacterFn = void(*)(bool(*)(void* target,APawn* Pawn));

using uapi_AActor_CanBeDamagedFn = void(*)(bool(*)(void* target));

using uapi_AActor_CanBeInClusterFn = void(*)(bool(*)(void* target));

using uapi_AActor_CanChangeIsSpatiallyLoadedFlagFn = void(*)(bool(*)(void* target));

using uapi_AActor_CanEditChangeFn = void(*)(bool(*)(void* target,FProperty* InProperty));

using uapi_AActor_CanEditChangeComponentFn = void(*)(bool(*)(void* target,UActorComponent* Component,FProperty* InProperty));

using uapi_AActor_CanEverTickFn = void(*)(bool(*)(void* target));

using uapi_AActor_CanPlayFromHereFn = void(*)(bool(*)(void* target));

using uapi_AActor_CheckComponentInstanceNameFn = void(*)(void(*)(void* target,UName InName));

using uapi_AActor_CheckDefaultSubobjectsInternalFn = void(*)(bool(*)(void* target));

using uapi_AActor_CheckForDeprecatedFn = void(*)(void(*)(void* target));

using uapi_AActor_CheckForErrorsFn = void(*)(void(*)(void* target));

using uapi_AActor_CheckStillInWorldFn = void(*)(bool(*)(void* target));

using uapi_AActor_ClearActorLabelFn = void(*)(void(*)(void* target));

using uapi_AActor_ClearComponentOverlapsFn = void(*)(void(*)(void* target));

using uapi_AActor_ClearCrossLevelReferencesFn = void(*)(void(*)(void* target));

using uapi_AActor_ClearInstanceComponentsFn = void(*)(void(*)(void* target,bool bDestroyComponents));

using uapi_AActor_ContainsDataLayerFn = void(*)(bool(*)(void* target,UDataLayerAsset* DataLayerAsset));

using uapi_AActor_CopyRemoteRoleFromFn = void(*)(void(*)(void* target,AActor* CopyFromActor));

using uapi_AActor_CreateComponentFromTemplateFn = void(*)(void*(*)(void* target,UActorComponent* Template,UName InName));

using uapi_AActor_CreateComponentFromTemplateDataFn = void(*)(void*(*)(void* target,FBlueprintCookedComponentInstancingData* TemplateData,UName InName));

using uapi_AActor_CreateOrUpdateActorFolderFn = void(*)(bool(*)(void* target));

using uapi_AActor_DebugShowComponentHierarchyFn = void(*)(void(*)(void* target,TCHAR* Info,bool bShowPosition));

using uapi_AActor_DebugShowOneComponentHierarchyFn = void(*)(void(*)(void* target,USceneComponent* SceneComp,int32& NestLevel,bool bShowPosition));

using uapi_AActor_DestroyFn = void(*)(bool(*)(void* target,bool bNetForce,bool bShouldModifyLevel));

using uapi_AActor_DestroyConstructedComponentsFn = void(*)(void(*)(void* target));

using uapi_AActor_DestroyNetworkActorHandledFn = void(*)(bool(*)(void* target));

using uapi_AActor_DestroyedFn = void(*)(void(*)(void* target));

using uapi_AActor_DisableComponentsSimulatePhysicsFn = void(*)(void(*)(void* target));

using uapi_AActor_DisableInputFn = void(*)(void(*)(void* target,APlayerController* PlayerController));

using uapi_AActor_DispatchBeginPlayFn = void(*)(void(*)(void* target,bool bFromLevelStreaming));

using uapi_AActor_EditorReplacedActorFn = void(*)(void(*)(void* target,AActor* OldActor));

using uapi_AActor_EnableInputFn = void(*)(void(*)(void* target,APlayerController* PlayerController));

using uapi_AActor_EndViewTargetFn = void(*)(void(*)(void* target,APlayerController* PC));

using uapi_AActor_ExchangeNetRolesFn = void(*)(void(*)(void* target,bool bRemoteOwner));

using uapi_AActor_FindActorInPackageFn = void(*)(void*(*)(UPackage* InPackage));

using uapi_AActor_FinishAndRegisterComponentFn = void(*)(void(*)(void* target,UActorComponent* Component));

using uapi_AActor_FixupActorFolderFn = void(*)(void(*)(void* target));

using uapi_AActor_FixupDataLayersFn = void(*)(void(*)(void* target,bool bRevertChangesOnLockedDataLayer));

using uapi_AActor_FlushNetDormancyFn = void(*)(void(*)(void* target));

using uapi_AActor_ForceNetRelevantFn = void(*)(void(*)(void* target));

using uapi_AActor_ForceNetUpdateFn = void(*)(void(*)(void* target));

using uapi_AActor_ForcePropertyCompareFn = void(*)(void(*)(void* target));

using uapi_AActor_GatherCurrentMovementFn = void(*)(void(*)(void* target));

using uapi_AActor_GetActorEnableCollisionFn = void(*)(bool(*)(void* target));

using uapi_AActor_GetActorForwardVectorFn = void(*)(Vector3(*)(void* target));

using uapi_AActor_GetActorGuidFn = void(*)(Uuid(*)(void* target));

using uapi_AActor_GetActorLocationFn = void(*)(Vector3(*)(void* target));

using uapi_AActor_GetActorNameOrLabelFn = void(*)(const char*(*)(void* target));

using uapi_AActor_GetActorQuatFn = void(*)(Quaternion(*)(void* target));

using uapi_AActor_GetActorRelativeScale3DFn = void(*)(Vector3(*)(void* target));

using uapi_AActor_GetActorRightVectorFn = void(*)(Vector3(*)(void* target));

using uapi_AActor_GetActorRotationFn = void(*)(Rotator(*)(void* target));

using uapi_AActor_GetActorScaleFn = void(*)(Vector3(*)(void* target));

using uapi_AActor_GetActorScale3DFn = void(*)(Vector3(*)(void* target));

using uapi_AActor_GetActorTickIntervalFn = void(*)(float(*)(void* target));

using uapi_AActor_GetActorTimeDilationFn = void(*)(float(*)(void* target));

using uapi_AActor_GetActorTimeDilation2Fn = void(*)(float(*)(void* target,UWorld* ActorWorld));

using uapi_AActor_GetActorTransformFn = void(*)(Transform(*)(void* target));

using uapi_AActor_GetActorUpVectorFn = void(*)(Vector3(*)(void* target));

using uapi_AActor_GetAttachParentActorFn = void(*)(void*(*)(void* target));

using uapi_AActor_GetAttachParentSocketNameFn = void(*)(UName(*)(void* target));

using uapi_AActor_GetAutoDestroyWhenFinishedFn = void(*)(bool(*)(void* target));

using uapi_AActor_GetCanBeDamagedPropertyNameFn = void(*)(UName(*)());

using uapi_AActor_GetComponentsBoundingCylinderFn = void(*)(void(*)(void* target,float& CollisionRadius,float& CollisionHalfHeight,bool bNonColliding,bool bIncludeFromChildActors));

using uapi_AActor_GetContentBundleGuidFn = void(*)(Uuid(*)(void* target));

using uapi_AActor_GetCustomIconNameFn = void(*)(UName(*)(void* target));

using uapi_AActor_GetDataLayerAssetsPropertyNameFn = void(*)(UName(*)());

using uapi_AActor_GetDefaultActorLabelFn = void(*)(const char*(*)(void* target));

using uapi_AActor_GetDefaultAttachComponentFn = void(*)(void*(*)(void* target));

using uapi_AActor_GetDistanceToFn = void(*)(float(*)(void* target,AActor* OtherActor));

using uapi_AActor_GetDotProductToFn = void(*)(float(*)(void* target,AActor* OtherActor));

using uapi_AActor_GetFolderGuidFn = void(*)(Uuid(*)(void* target,bool bDirectAccess));

using uapi_AActor_GetFolderPathFn = void(*)(UName(*)(void* target));

using uapi_AActor_GetFunctionCallspaceFn = void(*)(int32(*)(void* target,UFunction* Function,FFrame* Stack));

using uapi_AActor_GetGameInstanceFn = void(*)(void*(*)(void* target));

using uapi_AActor_GetGameTimeSinceCreationFn = void(*)(float(*)(void* target));

using uapi_AActor_GetHLODLayerFn = void(*)(void*(*)(void* target));

using uapi_AActor_GetHLODLayerPropertyNameFn = void(*)(UName(*)());

using uapi_AActor_GetHiddenPropertyNameFn = void(*)(UName(*)());

using uapi_AActor_GetHorizontalDistanceToFn = void(*)(float(*)(void* target,AActor* OtherActor));

using uapi_AActor_GetHorizontalDotProductToFn = void(*)(float(*)(void* target,AActor* OtherActor));

using uapi_AActor_GetHumanReadableNameFn = void(*)(const char*(*)(void* target));

using uapi_AActor_GetInputAxisValueFn = void(*)(float(*)(void* target,UName InputAxisName));

using uapi_AActor_GetInstigatorFn = void(*)(void*(*)(void* target));

using uapi_AActor_GetInstigatorControllerFn = void(*)(void*(*)(void* target));

using uapi_AActor_GetInstigatorPropertyNameFn = void(*)(UName(*)());

using uapi_AActor_GetIsReplicatedFn = void(*)(bool(*)(void* target));

using uapi_AActor_GetIsSpatiallyLoadedFn = void(*)(bool(*)(void* target));

using uapi_AActor_GetIsSpatiallyLoadedPropertyNameFn = void(*)(UName(*)());

using uapi_AActor_GetLastRenderTimeFn = void(*)(float(*)(void* target));

using uapi_AActor_GetLevelFn = void(*)(void*(*)(void* target));

using uapi_AActor_GetLevelTransformFn = void(*)(Transform(*)(void* target));

using uapi_AActor_GetLifeSpanFn = void(*)(float(*)(void* target));

using uapi_AActor_GetNetConnectionFn = void(*)(void*(*)(void* target));

using uapi_AActor_GetNetDriverFn = void(*)(void*(*)(void* target));

using uapi_AActor_GetNetDriverNameFn = void(*)(UName(*)(void* target));

using uapi_AActor_GetNetOwnerFn = void(*)(void*(*)(void* target));

using uapi_AActor_GetNetOwningPlayerFn = void(*)(void*(*)(void* target));

using uapi_AActor_GetNumUncachedStaticLightingInteractionsFn = void(*)(int32(*)(void* target));

using uapi_AActor_GetOwnerFn = void(*)(void*(*)(void* target));

using uapi_AActor_GetParentActorFn = void(*)(void*(*)(void* target));

using uapi_AActor_GetParentComponentFn = void(*)(void*(*)(void* target));

using uapi_AActor_GetPhysicsVolumeFn = void(*)(void*(*)(void* target));

using uapi_AActor_GetPivotOffsetFn = void(*)(Vector3(*)(void* target));

using uapi_AActor_GetPlacementExtentFn = void(*)(Vector3(*)(void* target));

using uapi_AActor_GetRayTracingGroupIdFn = void(*)(int32(*)(void* target));

using uapi_AActor_GetReplicateMovementPropertyNameFn = void(*)(UName(*)());

using uapi_AActor_GetRolePropertyNameFn = void(*)(UName(*)());

using uapi_AActor_GetRootComponentFn = void(*)(void*(*)(void* target));

using uapi_AActor_GetRootSelectionParentFn = void(*)(void*(*)(void* target));

using uapi_AActor_GetRuntimeGridFn = void(*)(UName(*)(void* target));

using uapi_AActor_GetRuntimeGridPropertyNameFn = void(*)(UName(*)());

using uapi_AActor_GetSceneOutlinerParentFn = void(*)(void*(*)(void* target));

using uapi_AActor_GetSelectionParentFn = void(*)(void*(*)(void* target));

using uapi_AActor_GetSimpleCollisionCylinderFn = void(*)(void(*)(void* target,float& CollisionRadius,float& CollisionHalfHeight));

using uapi_AActor_GetSimpleCollisionCylinderExtentFn = void(*)(Vector3(*)(void* target));

using uapi_AActor_GetSimpleCollisionHalfHeightFn = void(*)(float(*)(void* target));

using uapi_AActor_GetSimpleCollisionRadiusFn = void(*)(float(*)(void* target));

using uapi_AActor_GetSquaredDistanceToFn = void(*)(float(*)(void* target,AActor* OtherActor));

using uapi_AActor_GetSquaredHorizontalDistanceToFn = void(*)(float(*)(void* target,AActor* OtherActor));

using uapi_AActor_GetTargetLocationFn = void(*)(Vector3(*)(void* target,AActor* RequestedBy));

using uapi_AActor_GetTearOffFn = void(*)(bool(*)(void* target));

using uapi_AActor_GetTickableWhenPausedFn = void(*)(bool(*)(void* target));

using uapi_AActor_GetTransformFn = void(*)(Transform(*)(void* target));

using uapi_AActor_GetVelocityFn = void(*)(Vector3(*)(void* target));

using uapi_AActor_GetVerticalDistanceToFn = void(*)(float(*)(void* target,AActor* OtherActor));

using uapi_AActor_GetWorldFn = void(*)(void*(*)(void* target));

using uapi_AActor_GetWorldSettingsFn = void(*)(void*(*)(void* target));

using uapi_AActor_HandleRegisterComponentWithWorldFn = void(*)(void(*)(void* target,UActorComponent* Component));

using uapi_AActor_HasActiveCameraComponentFn = void(*)(bool(*)(void* target));

using uapi_AActor_HasActivePawnControlCameraComponentFn = void(*)(bool(*)(void* target));

using uapi_AActor_HasActorBegunPlayFn = void(*)(bool(*)(void* target));

using uapi_AActor_HasActorRegisteredAllComponentsFn = void(*)(bool(*)(void* target));

using uapi_AActor_HasAuthorityFn = void(*)(bool(*)(void* target));

using uapi_AActor_HasDataLayersFn = void(*)(bool(*)(void* target));

using uapi_AActor_HasDeferredComponentRegistrationFn = void(*)(bool(*)(void* target));

using uapi_AActor_HasLocalNetOwnerFn = void(*)(bool(*)(void* target));

using uapi_AActor_HasNetOwnerFn = void(*)(bool(*)(void* target));

using uapi_AActor_HasNonTrivialUserConstructionScriptFn = void(*)(bool(*)(void* target));

using uapi_AActor_HasValidRootComponentFn = void(*)(bool(*)(void* target));

using uapi_AActor_IncrementalRegisterComponentsFn = void(*)(bool(*)(void* target,int32 NumComponentsToRegister,FRegisterComponentContext* Context));

using uapi_AActor_InitializeComponentsFn = void(*)(void(*)(void* target));

using uapi_AActor_InvalidateLightingCacheFn = void(*)(void(*)(void* target));

using uapi_AActor_InvalidateLightingCacheDetailedFn = void(*)(void(*)(void* target,bool bTranslationOnly));

using uapi_AActor_IsActorBeginningPlayFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsActorBeginningPlayFromLevelStreamingFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsActorBeingDestroyedFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsActorComponentReplicatedSubObjectRegisteredFn = void(*)(bool(*)(void* target,UActorComponent* OwnerComponent,UObject* SubObject));

using uapi_AActor_IsActorInitializedFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsActorLabelEditableFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsActorOrSelectionParentSelectedFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsActorTickEnabledFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsAssetFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsAttachedToFn = void(*)(bool(*)(void* target,AActor* Other));

using uapi_AActor_IsBasedOnActorFn = void(*)(bool(*)(void* target,AActor* Other));

using uapi_AActor_IsChildActorFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsComponentRelevantForNavigationFn = void(*)(bool(*)(void* target,UActorComponent* Component));

using uapi_AActor_IsDefaultPreviewEnabledFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsEditableFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsEditorOnlyFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsForceExternalActorLevelReferenceForPIEFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsHLODRelevantFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsHiddenFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsHiddenEdFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsHiddenEdAtStartupFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsInEditingLevelInstanceFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsInLevelFn = void(*)(bool(*)(void* target,ULevel* TestLevel));

using uapi_AActor_IsInPersistentLevelFn = void(*)(bool(*)(void* target,bool bIncludeLevelStreamingPersistent));

using uapi_AActor_IsLevelBoundsRelevantFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsListedInSceneOutlinerFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsLockLocationFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsMainPackageActorFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsNameStableForNetworkingFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsNetStartupActorFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsOverlappingActorFn = void(*)(bool(*)(void* target,AActor* Other));

using uapi_AActor_IsOwnedByFn = void(*)(bool(*)(void* target,AActor* TestOwner));

using uapi_AActor_IsPendingKillPendingFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsReadyForFinishDestroyFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsRelevancyOwnerForFn = void(*)(bool(*)(void* target,AActor* ReplicatedActor,AActor* ActorOwner,AActor* ConnectionActor));

using uapi_AActor_IsReplicatedActorComponentRegisteredFn = void(*)(bool(*)(void* target,UActorComponent* ReplicatedComponent));

using uapi_AActor_IsReplicatedSubObjectRegisteredFn = void(*)(bool(*)(void* target,UObject* SubObject));

using uapi_AActor_IsReplicatingMovementFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsRootComponentCollisionRegisteredFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsRootComponentMovableFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsRootComponentStaticFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsRootComponentStationaryFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsRunningUserConstructionScriptFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsRuntimeOnlyFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsSelectableFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsSelectedInEditorFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsSelectionChildFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsSelectionParentOfAttachedActorsFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsSupportedForNetworkingFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsTemporarilyHiddenInEditorFn = void(*)(bool(*)(void* target,bool bIncludeParent));

using uapi_AActor_IsUserManagedFn = void(*)(bool(*)(void* target));

using uapi_AActor_IsUsingRegisteredSubObjectListFn = void(*)(bool(*)(void* target));

using uapi_AActor_K2_DestroyActorFn = void(*)(void(*)(void* target));

using uapi_AActor_K2_GetActorLocationFn = void(*)(Vector3(*)(void* target));

using uapi_AActor_K2_GetActorRotationFn = void(*)(Rotator(*)(void* target));

using uapi_AActor_K2_GetRootComponentFn = void(*)(void*(*)(void* target));

using uapi_AActor_K2_OnBecomeViewTargetFn = void(*)(void(*)(void* target,APlayerController* PC));

using uapi_AActor_K2_OnEndViewTargetFn = void(*)(void(*)(void* target,APlayerController* PC));

using uapi_AActor_K2_OnResetFn = void(*)(void(*)(void* target));

using uapi_AActor_K2_SetActorRotationFn = void(*)(bool(*)(void* target,Rotator NewRotation,bool bTeleportPhysics));

using uapi_AActor_K2_TeleportToFn = void(*)(bool(*)(void* target,Vector3 DestLocation,Rotator DestRotation));

using uapi_AActor_LifeSpanExpiredFn = void(*)(void(*)(void* target));

using uapi_AActor_MakeNoiseFn = void(*)(void(*)(void* target,float Loudness,APawn* NoiseInstigator,Vector3 NoiseLocation,float MaxRange,UName Tag));

using uapi_AActor_MarkComponentsAsPendingKillFn = void(*)(void(*)(void* target));

using uapi_AActor_MarkComponentsRenderStateDirtyFn = void(*)(void(*)(void* target));

using uapi_AActor_ModifyFn = void(*)(bool(*)(void* target,bool bAlwaysMarkDirty));

using uapi_AActor_NeedsLoadForTargetPlatformFn = void(*)(bool(*)(void* target,ITargetPlatform* TargetPlatform));

using uapi_AActor_NotifyActorBeginCursorOverFn = void(*)(void(*)(void* target));

using uapi_AActor_NotifyActorBeginOverlapFn = void(*)(void(*)(void* target,AActor* OtherActor));

using uapi_AActor_NotifyActorEndCursorOverFn = void(*)(void(*)(void* target));

using uapi_AActor_NotifyActorEndOverlapFn = void(*)(void(*)(void* target,AActor* OtherActor));

using uapi_AActor_OnNetCleanupFn = void(*)(void(*)(void* target,UNetConnection* Connection));

using uapi_AActor_OnPlayFromHereFn = void(*)(void(*)(void* target));

using uapi_AActor_OnRep_AttachmentReplicationFn = void(*)(void(*)(void* target));

using uapi_AActor_OnRep_InstigatorFn = void(*)(void(*)(void* target));

using uapi_AActor_OnRep_ReplicateMovementFn = void(*)(void(*)(void* target));

using uapi_AActor_OnRep_ReplicatedMovementFn = void(*)(void(*)(void* target));

using uapi_AActor_OnReplicationPausedChangedFn = void(*)(void(*)(void* target,bool bIsReplicationPaused));

using uapi_AActor_OnSubobjectCreatedFromReplicationFn = void(*)(void(*)(void* target,UObject* NewSubobject));

using uapi_AActor_OnSubobjectDestroyFromReplicationFn = void(*)(void(*)(void* target,UObject* Subobject));

using uapi_AActor_OpenAssetEditorFn = void(*)(bool(*)(void* target));

using uapi_AActor_OutsideWorldBoundsFn = void(*)(void(*)(void* target));

using uapi_AActor_OwnsComponentFn = void(*)(bool(*)(void* target,UActorComponent* Component));

using uapi_AActor_PostActorConstructionFn = void(*)(void(*)(void* target));

using uapi_AActor_PostActorCreatedFn = void(*)(void(*)(void* target));

using uapi_AActor_PostEditImportFn = void(*)(void(*)(void* target));

using uapi_AActor_PostEditMoveFn = void(*)(void(*)(void* target,bool bFinished));

using uapi_AActor_PostEditUndoFn = void(*)(void(*)(void* target));

using uapi_AActor_PostInitPropertiesFn = void(*)(void(*)(void* target));

using uapi_AActor_PostInitializeComponentsFn = void(*)(void(*)(void* target));

using uapi_AActor_PostLoadFn = void(*)(void(*)(void* target));

using uapi_AActor_PostLoadSubobjectsFn = void(*)(void(*)(void* target,FObjectInstancingGraph* OuterInstanceGraph));

using uapi_AActor_PostNetInitFn = void(*)(void(*)(void* target));

using uapi_AActor_PostNetReceiveFn = void(*)(void(*)(void* target));

using uapi_AActor_PostNetReceiveLocationAndRotationFn = void(*)(void(*)(void* target));

using uapi_AActor_PostNetReceivePhysicStateFn = void(*)(void(*)(void* target));

using uapi_AActor_PostNetReceiveRoleFn = void(*)(void(*)(void* target));

using uapi_AActor_PostRegisterAllComponentsFn = void(*)(void(*)(void* target));

using uapi_AActor_PostRenameFn = void(*)(void(*)(void* target,UObject* OldOuter,UName OldName));

using uapi_AActor_PostRenderForFn = void(*)(void(*)(void* target,APlayerController* PC,UCanvas* Canvas,Vector3 CameraPosition,Vector3 CameraDir));

using uapi_AActor_PostUnregisterAllComponentsFn = void(*)(void(*)(void* target));

using uapi_AActor_PreEditChangeFn = void(*)(void(*)(void* target,FProperty* PropertyThatWillChange));

using uapi_AActor_PreEditUndoFn = void(*)(void(*)(void* target));

using uapi_AActor_PreInitializeComponentsFn = void(*)(void(*)(void* target));

using uapi_AActor_PreNetReceiveFn = void(*)(void(*)(void* target));

using uapi_AActor_PreRegisterAllComponentsFn = void(*)(void(*)(void* target));

using uapi_AActor_PrestreamTexturesFn = void(*)(void(*)(void* target,float Seconds,bool bEnableStreaming,int32 CinematicTextureGroups));

using uapi_AActor_ProcessEventFn = void(*)(void(*)(void* target,UFunction* Function,void* Parameters));

using uapi_AActor_PushLevelInstanceEditingStateToProxiesFn = void(*)(void(*)(void* target,bool bInEditingState));

using uapi_AActor_PushSelectionToProxiesFn = void(*)(void(*)(void* target));

using uapi_AActor_ReceiveActorBeginCursorOverFn = void(*)(void(*)(void* target));

using uapi_AActor_ReceiveActorBeginOverlapFn = void(*)(void(*)(void* target,AActor* OtherActor));

using uapi_AActor_ReceiveActorEndCursorOverFn = void(*)(void(*)(void* target));

using uapi_AActor_ReceiveActorEndOverlapFn = void(*)(void(*)(void* target,AActor* OtherActor));

using uapi_AActor_ReceiveAnyDamageFn = void(*)(void(*)(void* target,float Damage,UDamageType* DamageType,AController* InstigatedBy,AActor* DamageCauser));

using uapi_AActor_ReceiveAsyncPhysicsTickFn = void(*)(void(*)(void* target,float DeltaSeconds,float SimSeconds));

using uapi_AActor_ReceiveDestroyedFn = void(*)(void(*)(void* target));

using uapi_AActor_ReceiveTickFn = void(*)(void(*)(void* target,float DeltaSeconds));

using uapi_AActor_RegisterAllActorTickFunctionsFn = void(*)(void(*)(void* target,bool bRegister,bool bDoComponents));

using uapi_AActor_RegisterAllComponentsFn = void(*)(void(*)(void* target));

using uapi_AActor_RemoveActorComponentReplicatedSubObjectFn = void(*)(void(*)(void* target,UActorComponent* OwnerComponent,UObject* SubObject));

using uapi_AActor_RemoveAllDataLayersFn = void(*)(bool(*)(void* target));

using uapi_AActor_RemoveDataLayerFn = void(*)(bool(*)(void* target,UDataLayerAsset* DataLayerAsset));

using uapi_AActor_RemoveInstanceComponentFn = void(*)(void(*)(void* target,UActorComponent* Component));

using uapi_AActor_RemoveOwnedComponentFn = void(*)(void(*)(void* target,UActorComponent* Component));

using uapi_AActor_RemoveReplicatedSubObjectFn = void(*)(void(*)(void* target,UObject* SubObject));

using uapi_AActor_RemoveTickPrerequisiteActorFn = void(*)(void(*)(void* target,AActor* PrerequisiteActor));

using uapi_AActor_RemoveTickPrerequisiteComponentFn = void(*)(void(*)(void* target,UActorComponent* PrerequisiteComponent));

using uapi_AActor_ReplicateSubobjectsFn = void(*)(bool(*)(void* target,UActorChannel* Channel,FOutBunch* Bunch,FReplicationFlags* RepFlags));

using uapi_AActor_ReregisterAllComponentsFn = void(*)(void(*)(void* target));

using uapi_AActor_ReregisterComponentsWhenModifiedFn = void(*)(bool(*)(void* target));

using uapi_AActor_RerunConstructionScriptsFn = void(*)(void(*)(void* target));

using uapi_AActor_ResetFn = void(*)(void(*)(void* target));

using uapi_AActor_ResetOwnedComponentsFn = void(*)(void(*)(void* target));

using uapi_AActor_ResetPropertiesForConstructionFn = void(*)(void(*)(void* target));

using uapi_AActor_RewindForReplayFn = void(*)(void(*)(void* target));

using uapi_AActor_SeedAllRandomStreamsFn = void(*)(void(*)(void* target));

using uapi_AActor_SetActorEnableCollisionFn = void(*)(void(*)(void* target,bool bNewActorEnableCollision));

using uapi_AActor_SetActorHiddenInGameFn = void(*)(void(*)(void* target,bool bNewHidden));

using uapi_AActor_SetActorRelativeScale3DFn = void(*)(void(*)(void* target,Vector3 NewRelativeScale));

using uapi_AActor_SetActorScale3DFn = void(*)(void(*)(void* target,Vector3 NewScale3D));

using uapi_AActor_SetActorTickEnabledFn = void(*)(void(*)(void* target,bool bEnabled));

using uapi_AActor_SetActorTickIntervalFn = void(*)(void(*)(void* target,float TickInterval));

using uapi_AActor_SetAutoDestroyWhenFinishedFn = void(*)(void(*)(void* target,bool bVal));

using uapi_AActor_SetAutonomousProxyFn = void(*)(void(*)(void* target,bool bInAutonomousProxy,bool bAllowForcePropertyCompare));

using uapi_AActor_SetCallPreReplicationFn = void(*)(void(*)(void* target,bool bCall));

using uapi_AActor_SetCallPreReplicationForReplayFn = void(*)(void(*)(void* target,bool bCall));

using uapi_AActor_SetCanBeDamagedFn = void(*)(void(*)(void* target,bool bInCanBeDamaged));

using uapi_AActor_SetForceExternalActorLevelReferenceForPIEFn = void(*)(void(*)(void* target,bool bValue));

using uapi_AActor_SetHLODLayerFn = void(*)(void(*)(void* target,UHLODLayer* InHLODLayer));

using uapi_AActor_SetHasActorRegisteredAllComponentsFn = void(*)(void(*)(void* target));

using uapi_AActor_SetHiddenFn = void(*)(void(*)(void* target,bool bInHidden));

using uapi_AActor_SetInstigatorFn = void(*)(void(*)(void* target,APawn* InInstigator));

using uapi_AActor_SetIsHiddenEdLayerFn = void(*)(bool(*)(void* target,bool bIsHiddenEdLayer));

using uapi_AActor_SetIsSpatiallyLoadedFn = void(*)(void(*)(void* target,bool bInIsSpatiallyLoaded));

using uapi_AActor_SetIsTemporarilyHiddenInEditorFn = void(*)(void(*)(void* target,bool bIsHidden));

using uapi_AActor_SetLODParentFn = void(*)(void(*)(void* target,UPrimitiveComponent* InLODParent,float InParentDrawDistance));

using uapi_AActor_SetLifeSpanFn = void(*)(void(*)(void* target,float InLifespan));

using uapi_AActor_SetLockLocationFn = void(*)(void(*)(void* target,bool bInLockLocation));

using uapi_AActor_SetNetAddressableFn = void(*)(void(*)(void* target));

using uapi_AActor_SetNetDriverNameFn = void(*)(void(*)(void* target,UName NewNetDriverName));

using uapi_AActor_SetOwnerFn = void(*)(void(*)(void* target,AActor* NewOwner));

using uapi_AActor_SetPackageExternalFn = void(*)(void(*)(void* target,bool bExternal,bool bShouldDirty));

using uapi_AActor_SetRayTracingGroupIdFn = void(*)(void(*)(void* target,int32 InRaytracingGroupId));

using uapi_AActor_SetReplicateMovementFn = void(*)(void(*)(void* target,bool bInReplicateMovement));

using uapi_AActor_SetReplicatesFn = void(*)(void(*)(void* target,bool bInReplicates));

using uapi_AActor_SetReplicatingMovementFn = void(*)(void(*)(void* target,bool bInReplicateMovement));

using uapi_AActor_SetRootComponentFn = void(*)(bool(*)(void* target,USceneComponent* NewRootComponent));

using uapi_AActor_SetRuntimeGridFn = void(*)(void(*)(void* target,UName InRuntimeGrid));

using uapi_AActor_SetTickableWhenPausedFn = void(*)(void(*)(void* target,bool bTickableWhenPaused));

using uapi_AActor_ShouldCookOptimizedBPComponentDataFn = void(*)(bool(*)(void* target));

using uapi_AActor_ShouldExportFn = void(*)(bool(*)(void* target));

using uapi_AActor_ShouldImportFn = void(*)(bool(*)(void* target,NativeString ActorPropString,bool IsMovingLevel));

using uapi_AActor_ShouldLevelKeepRefIfExternalFn = void(*)(bool(*)(void* target));

using uapi_AActor_ShouldTickIfViewportsOnlyFn = void(*)(bool(*)(void* target));

using uapi_AActor_SupportsDataLayerFn = void(*)(bool(*)(void* target));

using uapi_AActor_SupportsExternalPackagingFn = void(*)(bool(*)(void* target));

using uapi_AActor_SupportsLayersFn = void(*)(bool(*)(void* target));

using uapi_AActor_SwapRolesFn = void(*)(void(*)(void* target));

using uapi_AActor_TearOffFn = void(*)(void(*)(void* target));

using uapi_AActor_TeleportSucceededFn = void(*)(void(*)(void* target,bool bIsATest));

using uapi_AActor_TickFn = void(*)(void(*)(void* target,float DeltaSeconds));

using uapi_AActor_TornOffFn = void(*)(void(*)(void* target));

using uapi_AActor_UninitializeComponentsFn = void(*)(void(*)(void* target));

using uapi_AActor_UnregisterAllComponentsFn = void(*)(void(*)(void* target,bool bForReregister));

using uapi_AActor_UpdateAllReplicatedComponentsFn = void(*)(void(*)(void* target));

using uapi_AActor_UpdateComponentTransformsFn = void(*)(void(*)(void* target));

using uapi_AActor_UpdateOverlapsFn = void(*)(void(*)(void* target,bool bDoNotifies));

using uapi_AActor_UpdateReplicatedComponentFn = void(*)(void(*)(void* target,UActorComponent* Component));

using uapi_AActor_UseShortConnectTimeoutFn = void(*)(bool(*)(void* target));

using uapi_AActor_UserConstructionScriptFn = void(*)(void(*)(void* target));

using uapi_AActor_WasRecentlyRenderedFn = void(*)(bool(*)(void* target,float Tolerance));

using uapi_APawn_GetControllerFn = void(*)(void*(*)(void* target));

using uapi_APawn_GetLocalViewingPlayerControllerFn = void(*)(void*(*)(void* target));

using uapi_APawn_GetMovementBaseFn = void(*)(void*(*)(void* target));

using uapi_APawn_GetMovementComponentFn = void(*)(void*(*)(void* target));

using uapi_APawn_GetPawnNoiseEmitterComponentFn = void(*)(void*(*)(void* target));

using uapi_APawn_GetPlayerStateFn = void(*)(void*(*)(void* target));

using uapi_APawn_IsLocalPlayerControllerViewingAPawnFn = void(*)(bool(*)(void* target));

using uapi_APawn_IsLocallyViewedFn = void(*)(bool(*)(void* target));

using uapi_APawn_PawnMakeNoiseFn = void(*)(void(*)(void* target,float Loudness,Vector3 NoiseLocation,bool bUseNoiseMakerLocation,AActor* NoiseMaker));

using uapi_APawn_SetPlayerStateFn = void(*)(void(*)(void* target,APlayerState* NewPlayerState));

using uapi_AController_ChangeStateFn = void(*)(void(*)(void* target,UName NewState));

using uapi_AController_CleanupPlayerStateFn = void(*)(void(*)(void* target));

using uapi_AController_ClientSetLocationFn = void(*)(void(*)(void* target,Vector3 NewLocation,Rotator NewRotation));

using uapi_AController_ClientSetRotationFn = void(*)(void(*)(void* target,Rotator NewRotation,bool bResetCamera));

using uapi_AController_CurrentLevelUnloadedFn = void(*)(void(*)(void* target));

using uapi_AController_DestroyedFn = void(*)(void(*)(void* target));

using uapi_AController_FailedToSpawnPawnFn = void(*)(void(*)(void* target));

using uapi_AController_GameHasEndedFn = void(*)(void(*)(void* target,AActor* EndGameFocus,bool bIsWinner));

using uapi_AController_GetCharacterFn = void(*)(void*(*)(void* target));

using uapi_AController_GetControlRotationFn = void(*)(Rotator(*)(void* target));

using uapi_AController_GetDesiredRotationFn = void(*)(Rotator(*)(void* target));

using uapi_AController_GetHumanReadableNameFn = void(*)(const char*(*)(void* target));

using uapi_AController_GetNavAgentLocationFn = void(*)(Vector3(*)(void* target));

using uapi_AController_GetPawnFn = void(*)(void*(*)(void* target));

using uapi_AController_GetStateNameFn = void(*)(UName(*)(void* target));

using uapi_AController_GetViewTargetFn = void(*)(void*(*)(void* target));

using uapi_AController_InitPlayerStateFn = void(*)(void(*)(void* target));

using uapi_AController_InstigatedAnyDamageFn = void(*)(void(*)(void* target,float Damage,UDamageType* DamageType,AActor* DamagedActor,AActor* DamageCauser));

using uapi_AController_IsFollowingAPathFn = void(*)(bool(*)(void* target));

using uapi_AController_IsInStateFn = void(*)(bool(*)(void* target,UName InStateName));

using uapi_AController_IsLocalControllerFn = void(*)(bool(*)(void* target));

using uapi_AController_IsLocalPlayerControllerFn = void(*)(bool(*)(void* target));

using uapi_AController_IsLookInputIgnoredFn = void(*)(bool(*)(void* target));

using uapi_AController_IsMoveInputIgnoredFn = void(*)(bool(*)(void* target));

using uapi_AController_IsPlayerControllerFn = void(*)(bool(*)(void* target));

using uapi_AController_K2_DestroyActorFn = void(*)(void(*)(void* target));

using uapi_AController_K2_GetPawnFn = void(*)(void*(*)(void* target));

using uapi_AController_LineOfSightToFn = void(*)(bool(*)(void* target,AActor* Other,Vector3 ViewPoint,bool bAlternateChecks));

using uapi_AController_OnRep_PawnFn = void(*)(void(*)(void* target));

using uapi_AController_OnRep_PlayerStateFn = void(*)(void(*)(void* target));

using uapi_AController_PawnPendingDestroyFn = void(*)(void(*)(void* target,APawn* inPawn));

using uapi_AController_PossessFn = void(*)(void(*)(void* target,APawn* InPawn));

using uapi_AController_PostInitializeComponentsFn = void(*)(void(*)(void* target));

using uapi_AController_ResetFn = void(*)(void(*)(void* target));

using uapi_AController_ResetIgnoreInputFlagsFn = void(*)(void(*)(void* target));

using uapi_AController_ResetIgnoreLookInputFn = void(*)(void(*)(void* target));

using uapi_AController_ResetIgnoreMoveInputFn = void(*)(void(*)(void* target));

using uapi_AController_SetIgnoreLookInputFn = void(*)(void(*)(void* target,bool bNewLookInput));

using uapi_AController_SetIgnoreMoveInputFn = void(*)(void(*)(void* target,bool bNewMoveInput));

using uapi_AController_SetPawnFn = void(*)(void(*)(void* target,APawn* InPawn));

using uapi_AController_SetPawnFromRepFn = void(*)(void(*)(void* target,APawn* InPawn));

using uapi_AController_ShouldParticipateInSeamlessTravelFn = void(*)(bool(*)(void* target));

using uapi_AController_ShouldPostponePathUpdatesFn = void(*)(bool(*)(void* target));

using uapi_AController_StopMovementFn = void(*)(void(*)(void* target));

using uapi_AController_UnPossessFn = void(*)(void(*)(void* target));

using uapi_APlayerController_AcknowledgePossessionFn = void(*)(void(*)(void* target,APawn* P));

using uapi_APlayerController_ActivateTouchInterfaceFn = void(*)(void(*)(void* target,UTouchInterface* NewTouchInterface));

using uapi_APlayerController_AddCheatsFn = void(*)(void(*)(void* target,bool bForce));

using uapi_APlayerController_AddPitchInputFn = void(*)(void(*)(void* target,float Val));

using uapi_APlayerController_AddRollInputFn = void(*)(void(*)(void* target,float Val));

using uapi_APlayerController_AddYawInputFn = void(*)(void(*)(void* target,float Val));

using uapi_APlayerController_AutoManageActiveCameraTargetFn = void(*)(void(*)(void* target,AActor* SuggestedTarget));

using uapi_APlayerController_BeginInactiveStateFn = void(*)(void(*)(void* target));

using uapi_APlayerController_CameraFn = void(*)(void(*)(void* target,UName NewMode));

using uapi_APlayerController_CanRestartPlayerFn = void(*)(bool(*)(void* target));

using uapi_APlayerController_ChangeStateFn = void(*)(void(*)(void* target,UName NewState));

using uapi_APlayerController_CleanUpAudioComponentsFn = void(*)(void(*)(void* target));

using uapi_APlayerController_CleanupGameViewportFn = void(*)(void(*)(void* target));

using uapi_APlayerController_CleanupPlayerStateFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ClearAudioListenerAttenuationOverrideFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ClearAudioListenerOverrideFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ClientAddTextureStreamingLocFn = void(*)(void(*)(void* target,Vector3 InLoc,float Duration,bool bOverrideLocation));

using uapi_APlayerController_ClientCancelPendingMapChangeFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ClientCapBandwidthFn = void(*)(void(*)(void* target,int32 Cap));

using uapi_APlayerController_ClientClearCameraLensEffectsFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ClientCommitMapChangeFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ClientEnableNetworkVoiceFn = void(*)(void(*)(void* target,bool bEnable));

using uapi_APlayerController_ClientEndOnlineSessionFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ClientFlushLevelStreamingFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ClientForceGarbageCollectionFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ClientGameEndedFn = void(*)(void(*)(void* target,AActor* EndGameFocus,bool bIsWinner));

using uapi_APlayerController_ClientGotoStateFn = void(*)(void(*)(void* target,UName NewState));

using uapi_APlayerController_ClientIgnoreLookInputFn = void(*)(void(*)(void* target,bool bIgnore));

using uapi_APlayerController_ClientIgnoreMoveInputFn = void(*)(void(*)(void* target,bool bIgnore));

using uapi_APlayerController_ClientPlaySoundFn = void(*)(void(*)(void* target,USoundBase* Sound,float VolumeMultiplier,float PitchMultiplier));

using uapi_APlayerController_ClientPlaySoundAtLocationFn = void(*)(void(*)(void* target,USoundBase* Sound,Vector3 Location,float VolumeMultiplier,float PitchMultiplier));

using uapi_APlayerController_ClientPrepareMapChangeFn = void(*)(void(*)(void* target,UName LevelName,bool bFirst,bool bLast));

using uapi_APlayerController_ClientPrestreamTexturesFn = void(*)(void(*)(void* target,AActor* ForcedActor,float ForceDuration,bool bEnableStreaming,int32 CinematicTextureGroups));

using uapi_APlayerController_ClientRecvServerAckFrameFn = void(*)(void(*)(void* target,int32 LastProcessedInputFrame,int32 RecvServerFrameNumber,int8 TimeDilation));

using uapi_APlayerController_ClientRecvServerAckFrameDebugFn = void(*)(void(*)(void* target,uint8 NumBuffered,float TargetNumBufferedCmds));

using uapi_APlayerController_ClientRepObjRefFn = void(*)(void(*)(void* target,UObject* Object));

using uapi_APlayerController_ClientResetFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ClientRestartFn = void(*)(void(*)(void* target,APawn* NewPawn));

using uapi_APlayerController_ClientRetryClientRestartFn = void(*)(void(*)(void* target,APawn* NewPawn));

using uapi_APlayerController_ClientSetBlockOnAsyncLoadingFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ClientSetCameraFadeFn = void(*)(void(*)(void* target,bool bEnableFading,Color FadeColor,Vector2 FadeAlpha,float FadeTime,bool bFadeAudio,bool bHoldWhenFinished));

using uapi_APlayerController_ClientSetCameraModeFn = void(*)(void(*)(void* target,UName NewCamMode));

using uapi_APlayerController_ClientSetCinematicModeFn = void(*)(void(*)(void* target,bool bInCinematicMode,bool bAffectsMovement,bool bAffectsTurning,bool bAffectsHUD));

using uapi_APlayerController_ClientSetForceMipLevelsToBeResidentFn = void(*)(void(*)(void* target,UMaterialInterface* Material,float ForceDuration,int32 CinematicTextureGroups));

using uapi_APlayerController_ClientSetSpectatorWaitingFn = void(*)(void(*)(void* target,bool bWaiting));

using uapi_APlayerController_ClientStartOnlineSessionFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ClientStopCameraShakesFromSourceFn = void(*)(void(*)(void* target,UCameraShakeSourceComponent* SourceComponent,bool bImmediately));

using uapi_APlayerController_ClientStopForceFeedbackFn = void(*)(void(*)(void* target,UForceFeedbackEffect* ForceFeedbackEffect,UName Tag));

using uapi_APlayerController_ClientUpdateLevelStreamingStatusFn = void(*)(void(*)(void* target,UName PackageName,bool bNewShouldBeLoaded,bool bNewShouldBeVisible,bool bNewShouldBlockOnLoad,int32 LODIndex));

using uapi_APlayerController_ClientVoiceHandshakeCompleteFn = void(*)(void(*)(void* target));

using uapi_APlayerController_CreateTouchInterfaceFn = void(*)(void(*)(void* target));

using uapi_APlayerController_DefaultCanUnpauseFn = void(*)(bool(*)(void* target));

using uapi_APlayerController_DelayedPrepareMapChangeFn = void(*)(void(*)(void* target));

using uapi_APlayerController_DestroyNetworkActorHandledFn = void(*)(bool(*)(void* target));

using uapi_APlayerController_DestroyedFn = void(*)(void(*)(void* target));

using uapi_APlayerController_DisableInputFn = void(*)(void(*)(void* target,APlayerController* PlayerController));

using uapi_APlayerController_EnableCheatsFn = void(*)(void(*)(void* target));

using uapi_APlayerController_EnableInputFn = void(*)(void(*)(void* target,APlayerController* PlayerController));

using uapi_APlayerController_EndInactiveStateFn = void(*)(void(*)(void* target));

using uapi_APlayerController_FOVFn = void(*)(void(*)(void* target,float NewFOV));

using uapi_APlayerController_FailedToSpawnPawnFn = void(*)(void(*)(void* target));

using uapi_APlayerController_FlushPressedKeysFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ForceSingleNetUpdateForFn = void(*)(void(*)(void* target,AActor* Target));

using uapi_APlayerController_GameHasEndedFn = void(*)(void(*)(void* target,AActor* EndGameFocus,bool bIsWinner));

using uapi_APlayerController_GameplayUnmuteAllPlayersFn = void(*)(void(*)(void* target));

using uapi_APlayerController_GetFocalLocationFn = void(*)(Vector3(*)(void* target));

using uapi_APlayerController_GetHUDFn = void(*)(void*(*)(void* target));

using uapi_APlayerController_GetInputMouseDeltaFn = void(*)(void(*)(void* target,float& DeltaX,float& DeltaY));

using uapi_APlayerController_GetLocalPlayerFn = void(*)(void*(*)(void* target));

using uapi_APlayerController_GetLocalToServerAsyncPhysicsTickOffsetFn = void(*)(int32(*)(void* target));

using uapi_APlayerController_GetMinRespawnDelayFn = void(*)(float(*)(void* target));

using uapi_APlayerController_GetMousePositionFn = void(*)(bool(*)(void* target,float& LocationX,float& LocationY));

using uapi_APlayerController_GetNetConnectionFn = void(*)(void*(*)(void* target));

using uapi_APlayerController_GetNetOwnerFn = void(*)(void*(*)(void* target));

using uapi_APlayerController_GetNetOwningPlayerFn = void(*)(void*(*)(void* target));

using uapi_APlayerController_GetNextViewablePlayerFn = void(*)(void*(*)(void* target,int32 dir));

using uapi_APlayerController_GetPawnOrSpectatorFn = void(*)(void*(*)(void* target));

using uapi_APlayerController_GetPlayerNetworkAddressFn = void(*)(const char*(*)(void* target));

using uapi_APlayerController_GetServerNetworkAddressFn = void(*)(const char*(*)(void* target));

using uapi_APlayerController_GetSpawnLocationFn = void(*)(Vector3(*)(void* target));

using uapi_APlayerController_GetSplitscreenPlayerByIndexFn = void(*)(void*(*)(void* target,int32 PlayerIndex));

using uapi_APlayerController_GetSplitscreenPlayerCountFn = void(*)(int32(*)(void* target));

using uapi_APlayerController_GetViewTargetFn = void(*)(void*(*)(void* target));

using uapi_APlayerController_GetViewportSizeFn = void(*)(void(*)(void* target,int32& SizeX,int32& SizeY));

using uapi_APlayerController_HasClientLoadedCurrentWorldFn = void(*)(bool(*)(void* target));

using uapi_APlayerController_IncludeInNetConditionGroupFn = void(*)(void(*)(void* target,UName NetGroup));

using uapi_APlayerController_InitInputSystemFn = void(*)(void(*)(void* target));

using uapi_APlayerController_InputEnabledFn = void(*)(bool(*)(void* target));

using uapi_APlayerController_IsFrozenFn = void(*)(bool(*)(void* target));

using uapi_APlayerController_IsInputComponentInStackFn = void(*)(bool(*)(void* target,UInputComponent* Input));

using uapi_APlayerController_IsLocalControllerFn = void(*)(bool(*)(void* target));

using uapi_APlayerController_IsMemberOfNetConditionGroupFn = void(*)(bool(*)(void* target,UName NetGroup));

using uapi_APlayerController_IsPausedFn = void(*)(bool(*)(void* target));

using uapi_APlayerController_IsPrimaryPlayerFn = void(*)(bool(*)(void* target));

using uapi_APlayerController_IsSplitscreenPlayerFn = void(*)(bool(*)(void* target,int32* OutSplitscreenPlayerIndex));

using uapi_APlayerController_IsStreamingSourceEnabledFn = void(*)(bool(*)(void* target));

using uapi_APlayerController_K2_ClientPlayForceFeedbackFn = void(*)(void(*)(void* target,UForceFeedbackEffect* ForceFeedbackEffect,UName Tag,bool bLooping,bool bIgnoreTimeDilation,bool bPlayWhilePaused));

using uapi_APlayerController_LevelStreamingStatusChangedFn = void(*)(void(*)(void* target,ULevelStreaming* LevelObject,bool bNewShouldBeLoaded,bool bNewShouldBeVisible,bool bNewShouldBlockOnLoad,int32 LODIndex));

using uapi_APlayerController_NetworkRemapPathFn = void(*)(UName(*)(void* target,UName InPackageName,bool bReading));

using uapi_APlayerController_NotifyActorChannelFailureFn = void(*)(void(*)(void* target,UActorChannel* ActorChan));

using uapi_APlayerController_NotifyLoadedWorldFn = void(*)(void(*)(void* target,UName WorldPackageName,bool bFinalDest));

using uapi_APlayerController_NotifyServerReceivedClientDataFn = void(*)(bool(*)(void* target,APawn* InPawn,float TimeStamp));

using uapi_APlayerController_OnAddedToPlayerControllerListFn = void(*)(void(*)(void* target));

using uapi_APlayerController_OnNetCleanupFn = void(*)(void(*)(void* target,UNetConnection* Connection));

using uapi_APlayerController_OnRemovedFromPlayerControllerListFn = void(*)(void(*)(void* target));

using uapi_APlayerController_OnServerStartedVisualLoggerFn = void(*)(void(*)(void* target,bool bIsLogging));

using uapi_APlayerController_PauseFn = void(*)(void(*)(void* target));

using uapi_APlayerController_PawnLeavingGameFn = void(*)(void(*)(void* target));

using uapi_APlayerController_PlayerTickFn = void(*)(void(*)(void* target,float DeltaTime));

using uapi_APlayerController_PopInputComponentFn = void(*)(bool(*)(void* target,UInputComponent* Input));

using uapi_APlayerController_PostInitializeComponentsFn = void(*)(void(*)(void* target));

using uapi_APlayerController_PostLoadFn = void(*)(void(*)(void* target));

using uapi_APlayerController_PostProcessInputFn = void(*)(void(*)(void* target,float DeltaTime,bool bGamePaused));

using uapi_APlayerController_PostSeamlessTravelFn = void(*)(void(*)(void* target));

using uapi_APlayerController_PreProcessInputFn = void(*)(void(*)(void* target,float DeltaTime,bool bGamePaused));

using uapi_APlayerController_PushInputComponentFn = void(*)(void(*)(void* target,UInputComponent* Input));

using uapi_APlayerController_ReceivedPlayerFn = void(*)(void(*)(void* target));

using uapi_APlayerController_RemoveFromNetConditionGroupFn = void(*)(void(*)(void* target,UName NetGroup));

using uapi_APlayerController_ResetFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ResetCameraModeFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ResetControllerLightColorFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ResetIgnoreInputFlagsFn = void(*)(void(*)(void* target));

using uapi_APlayerController_RestartLevelFn = void(*)(void(*)(void* target));

using uapi_APlayerController_SafeRetryClientRestartFn = void(*)(void(*)(void* target));

using uapi_APlayerController_SafeServerCheckClientPossessionFn = void(*)(void(*)(void* target));

using uapi_APlayerController_SafeServerUpdateSpectatorStateFn = void(*)(void(*)(void* target));

using uapi_APlayerController_SeamlessTravelFromFn = void(*)(void(*)(void* target,APlayerController* OldPC));

using uapi_APlayerController_SeamlessTravelToFn = void(*)(void(*)(void* target,APlayerController* NewPC));

using uapi_APlayerController_SendClientAdjustmentFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ServerAcknowledgePossessionFn = void(*)(void(*)(void* target,APawn* P));

using uapi_APlayerController_ServerCameraFn = void(*)(void(*)(void* target,UName NewMode));

using uapi_APlayerController_ServerCheckClientPossessionFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ServerCheckClientPossessionReliableFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ServerNotifyLoadedWorldFn = void(*)(void(*)(void* target,UName WorldPackageName));

using uapi_APlayerController_ServerPauseFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ServerRestartPlayerFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ServerSetSpectatorLocationFn = void(*)(void(*)(void* target,Vector3 NewLoc,Rotator NewRot));

using uapi_APlayerController_ServerSetSpectatorWaitingFn = void(*)(void(*)(void* target,bool bWaiting));

using uapi_APlayerController_ServerShortTimeoutFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ServerToggleAILoggingFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ServerVerifyViewTargetFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ServerViewNextPlayerFn = void(*)(void(*)(void* target));

using uapi_APlayerController_ServerViewPrevPlayerFn = void(*)(void(*)(void* target));

using uapi_APlayerController_SetAsLocalPlayerControllerFn = void(*)(void(*)(void* target));

using uapi_APlayerController_SetAudioListenerAttenuationOverrideFn = void(*)(void(*)(void* target,USceneComponent* AttachToComponent,Vector3 AttenuationLocationOVerride));

using uapi_APlayerController_SetAudioListenerOverrideFn = void(*)(void(*)(void* target,USceneComponent* AttachToComponent,Vector3 Location,Rotator Rotation));

using uapi_APlayerController_SetCameraModeFn = void(*)(void(*)(void* target,UName NewCamMode));

using uapi_APlayerController_SetCinematicModeFn = void(*)(void(*)(void* target,bool bInCinematicMode,bool bAffectsMovement,bool bAffectsTurning));

using uapi_APlayerController_SetCinematicMode2Fn = void(*)(void(*)(void* target,bool bInCinematicMode,bool bHidePlayer,bool bAffectsHUD,bool bAffectsMovement,bool bAffectsTurning));

using uapi_APlayerController_SetControllerLightColorFn = void(*)(void(*)(void* target,Color Color));

using uapi_APlayerController_SetDisableHapticsFn = void(*)(void(*)(void* target,bool bNewDisabled));

using uapi_APlayerController_SetMotionControlsEnabledFn = void(*)(void(*)(void* target,bool bEnabled));

using uapi_APlayerController_SetNetSpeedFn = void(*)(void(*)(void* target,int32 NewSpeed));

using uapi_APlayerController_SetPawnFn = void(*)(void(*)(void* target,APawn* InPawn));

using uapi_APlayerController_SetPlayerFn = void(*)(void(*)(void* target,UPlayer* InPlayer));

using uapi_APlayerController_SetShowMouseCursorFn = void(*)(void(*)(void* target,bool bShow));

using uapi_APlayerController_SetVirtualJoystickVisibilityFn = void(*)(void(*)(void* target,bool bVisible));

using uapi_APlayerController_ShouldFlushKeysWhenViewportFocusChangesFn = void(*)(bool(*)(void* target));

using uapi_APlayerController_ShouldParticipateInSeamlessTravelFn = void(*)(bool(*)(void* target));

using uapi_APlayerController_ShouldPerformFullTickWhenPausedFn = void(*)(bool(*)(void* target));

using uapi_APlayerController_ShouldShowMouseCursorFn = void(*)(bool(*)(void* target));

using uapi_APlayerController_SmoothTargetViewRotationFn = void(*)(void(*)(void* target,APawn* TargetPawn,float DeltaSeconds));

using uapi_APlayerController_SpawnDefaultHUDFn = void(*)(void(*)(void* target));

using uapi_APlayerController_SpawnPlayerCameraManagerFn = void(*)(void(*)(void* target));

using uapi_APlayerController_StartFireFn = void(*)(void(*)(void* target,uint8 FireModeNum));

using uapi_APlayerController_StartSpectatingOnlyFn = void(*)(void(*)(void* target));

using uapi_APlayerController_StartTalkingFn = void(*)(void(*)(void* target));

using uapi_APlayerController_StopTalkingFn = void(*)(void(*)(void* target));

using uapi_APlayerController_StreamingSourceShouldActivateFn = void(*)(bool(*)(void* target));

using uapi_APlayerController_StreamingSourceShouldBlockOnSlowStreamingFn = void(*)(bool(*)(void* target));

using uapi_APlayerController_ToggleSpeakingFn = void(*)(void(*)(void* target,bool bInSpeaking));

using uapi_APlayerController_UnFreezeFn = void(*)(void(*)(void* target));

using uapi_APlayerController_UpdateCameraManagerFn = void(*)(void(*)(void* target,float DeltaSeconds));

using uapi_APlayerController_UpdatePingFn = void(*)(void(*)(void* target,float InPing));

using uapi_APlayerController_UpdateRotationFn = void(*)(void(*)(void* target,float DeltaTime));

using uapi_APlayerController_UseShortConnectTimeoutFn = void(*)(bool(*)(void* target));

using uapi_APlayerController_ViewAPlayerFn = void(*)(void(*)(void* target,int32 dir));

using uapi_FRandomStream_FRandFn = void(*)(float(*)(void* target));

using uapi_FRandomStream_GenerateNewSeedFn = void(*)(void(*)(void* target));

using uapi_FRandomStream_GetCurrentSeedFn = void(*)(int32(*)(void* target));

using uapi_FRandomStream_GetFractionFn = void(*)(float(*)(void* target));

using uapi_FRandomStream_GetInitialSeedFn = void(*)(int32(*)(void* target));

using uapi_FRandomStream_GetUnitVectorFn = void(*)(Vector3(*)(void* target));

using uapi_FRandomStream_GetUnsignedIntFn = void(*)(uint32(*)(void* target));

using uapi_FRandomStream_InitializeFn = void(*)(void(*)(void* target,int32 InSeed));

using uapi_FRandomStream_RandHelperFn = void(*)(int32(*)(void* target,int32 A));

using uapi_FRandomStream_RandRangeFn = void(*)(int32(*)(void* target,int32 Min,int32 Max));

using uapi_FRandomStream_ResetFn = void(*)(void(*)(void* target));

using uapi_FRandomStream_ToStringFn = void(*)(const char*(*)(void* target));

using uapi_FRandomStream_VRandFn = void(*)(Vector3(*)(void* target));

using uapi_UGameplayStatics_ActivateReverbEffectFn = void(*)(void(*)(UObject* WorldContextObject,UReverbEffect* ReverbEffect,UName TagName,float Priority,float Volume,float FadeTime));

using uapi_UGameplayStatics_AreSubtitlesEnabledFn = void(*)(bool(*)());

using uapi_UGameplayStatics_CancelAsyncLoadingFn = void(*)(void(*)());

using uapi_UGameplayStatics_ClearSoundMixClassOverrideFn = void(*)(void(*)(UObject* WorldContextObject,USoundMix* InSoundMixModifier,USoundClass* InSoundClass,float FadeOutTime));

using uapi_UGameplayStatics_ClearSoundMixModifiersFn = void(*)(void(*)(UObject* WorldContextObject));

using uapi_UGameplayStatics_CreatePlayerFn = void(*)(void*(*)(UObject* WorldContextObject,int32 ControllerId,bool bSpawnPlayerController));

using uapi_UGameplayStatics_CreateSound2DFn = void(*)(void*(*)(UObject* WorldContextObject,USoundBase* Sound,float VolumeMultiplier,float PitchMultiplier,float StartTime,USoundConcurrency* ConcurrencySettings,bool bPersistAcrossLevelTransition,bool bAutoDestroy));

using uapi_UGameplayStatics_DeactivateReverbEffectFn = void(*)(void(*)(UObject* WorldContextObject,UName TagName));

using uapi_UGameplayStatics_EnableLiveStreamingFn = void(*)(void(*)(bool Enable));

using uapi_UGameplayStatics_FlushLevelStreamingFn = void(*)(void(*)(UObject* WorldContextObject));

using uapi_UGameplayStatics_GetAccurateRealTimeFn = void(*)(void(*)(int32& Seconds,double& PartialSeconds));

using uapi_UGameplayStatics_GetActiveSpatialPluginNameFn = void(*)(UName(*)(UObject* WorldContextObject));

using uapi_UGameplayStatics_GetAudioTimeSecondsFn = void(*)(double(*)(UObject* WorldContextObject));

using uapi_UGameplayStatics_GetCurrentLevelNameFn = void(*)(const char*(*)(UObject* WorldContextObject,bool bRemovePrefixString));

using uapi_UGameplayStatics_GetCurrentReverbEffectFn = void(*)(void*(*)(UObject* WorldContextObject));

using uapi_UGameplayStatics_GetEnableWorldRenderingFn = void(*)(bool(*)(UObject* WorldContextObject));

using uapi_UGameplayStatics_GetGameInstanceFn = void(*)(void*(*)(UObject* WorldContextObject));

using uapi_UGameplayStatics_GetGameModeFn = void(*)(void*(*)(UObject* WorldContextObject));

using uapi_UGameplayStatics_GetGameStateFn = void(*)(void*(*)(UObject* WorldContextObject));

using uapi_UGameplayStatics_GetGlobalTimeDilationFn = void(*)(float(*)(UObject* WorldContextObject));

using uapi_UGameplayStatics_GetMaxAudioChannelCountFn = void(*)(int32(*)(UObject* WorldContextObject));

using uapi_UGameplayStatics_GetNumLocalPlayerControllersFn = void(*)(int32(*)(UObject* WorldContextObject));

using uapi_UGameplayStatics_GetNumPlayerControllersFn = void(*)(int32(*)(UObject* WorldContextObject));

using uapi_UGameplayStatics_GetNumPlayerStatesFn = void(*)(int32(*)(UObject* WorldContextObject));

using uapi_UGameplayStatics_GetObjectClassFn = void(*)(void*(*)(UObject* Object));

using uapi_UGameplayStatics_GetPlatformNameFn = void(*)(const char*(*)());

using uapi_UGameplayStatics_GetPlayerCameraManagerFn = void(*)(void*(*)(UObject* WorldContextObject,int32 PlayerIndex));

using uapi_UGameplayStatics_GetPlayerCharacterFn = void(*)(void*(*)(UObject* WorldContextObject,int32 PlayerIndex));

using uapi_UGameplayStatics_GetPlayerControllerFn = void(*)(void*(*)(UObject* WorldContextObject,int32 PlayerIndex));

using uapi_UGameplayStatics_GetPlayerControllerFromIDFn = void(*)(void*(*)(UObject* WorldContextObject,int32 ControllerID));

using uapi_UGameplayStatics_GetPlayerControllerIDFn = void(*)(int32(*)(APlayerController* Player));

using uapi_UGameplayStatics_GetPlayerPawnFn = void(*)(void*(*)(UObject* WorldContextObject,int32 PlayerIndex));

using uapi_UGameplayStatics_GetPlayerStateFn = void(*)(void*(*)(UObject* WorldContextObject,int32 PlayerStateIndex));

using uapi_UGameplayStatics_GetRealTimeSecondsFn = void(*)(double(*)(UObject* WorldContextObject));

using uapi_UGameplayStatics_GetStreamingLevelFn = void(*)(void*(*)(UObject* WorldContextObject,UName PackageName));

using uapi_UGameplayStatics_GetTimeSecondsFn = void(*)(double(*)(UObject* WorldContextObject));

using uapi_UGameplayStatics_GetUnpausedTimeSecondsFn = void(*)(double(*)(UObject* WorldContextObject));

using uapi_UGameplayStatics_GetWorldDeltaSecondsFn = void(*)(double(*)(UObject* WorldContextObject));

using uapi_UGameplayStatics_GrassOverlappingSphereCountFn = void(*)(int32(*)(UObject* WorldContextObject,UStaticMesh* StaticMesh,Vector3 CenterPosition,float Radius));

using uapi_UGameplayStatics_IsGamePausedFn = void(*)(bool(*)(UObject* WorldContextObject));

using uapi_UGameplayStatics_IsSplitscreenForceDisabledFn = void(*)(bool(*)(UObject* WorldContextObject));

using uapi_UGameplayStatics_OpenLevelFn = void(*)(void(*)(UObject* WorldContextObject,UName LevelName,bool bAbsolute,NativeString Options));

using uapi_UGameplayStatics_PlaySound2DFn = void(*)(void(*)(UObject* WorldContextObject,USoundBase* Sound,float VolumeMultiplier,float PitchMultiplier,float StartTime,USoundConcurrency* ConcurrencySettings,AActor* OwningActor,bool bIsUISound));

using uapi_UGameplayStatics_PlaySoundAtLocationFn = void(*)(void(*)(UObject* WorldContextObject,USoundBase* Sound,Vector3 Location,Rotator Rotation,float VolumeMultiplier,float PitchMultiplier,float StartTime,USoundAttenuation* AttenuationSettings,USoundConcurrency* ConcurrencySettings,AActor* OwningActor,UInitialActiveSoundParams* InitialParams));

using uapi_UGameplayStatics_PlaySoundAtLocation2Fn = void(*)(void(*)(UObject* WorldContextObject,USoundBase* Sound,Vector3 Location,float VolumeMultiplier,float PitchMultiplier,float StartTime,USoundAttenuation* AttenuationSettings,USoundConcurrency* ConcurrencySettings,UInitialActiveSoundParams* InitialParams));

using uapi_UGameplayStatics_PopSoundMixModifierFn = void(*)(void(*)(UObject* WorldContextObject,USoundMix* InSoundMixModifier));

using uapi_UGameplayStatics_PrimeAllSoundsInSoundClassFn = void(*)(void(*)(USoundClass* InSoundClass));

using uapi_UGameplayStatics_PrimeSoundFn = void(*)(void(*)(USoundBase* InSound));

using uapi_UGameplayStatics_PushSoundMixModifierFn = void(*)(void(*)(UObject* WorldContextObject,USoundMix* InSoundMixModifier));

using uapi_UGameplayStatics_RebaseLocalOriginOntoZeroFn = void(*)(Vector3(*)(UObject* WorldContextObject,Vector3 WorldLocation));

using uapi_UGameplayStatics_RebaseZeroOriginOntoLocalFn = void(*)(Vector3(*)(UObject* WorldContextObject,Vector3 WorldLocation));

using uapi_UGameplayStatics_RemovePlayerFn = void(*)(void(*)(APlayerController* Player,bool bDestroyPawn));

using uapi_UGameplayStatics_SetActiveSpatialPluginByNameFn = void(*)(bool(*)(UObject* WorldContextObject,UName InPluginName));

using uapi_UGameplayStatics_SetBaseSoundMixFn = void(*)(void(*)(UObject* WorldContextObject,USoundMix* InSoundMix));

using uapi_UGameplayStatics_SetEnableWorldRenderingFn = void(*)(void(*)(UObject* WorldContextObject,bool bEnable));

using uapi_UGameplayStatics_SetForceDisableSplitscreenFn = void(*)(void(*)(UObject* WorldContextObject,bool bDisable));

using uapi_UGameplayStatics_SetGamePausedFn = void(*)(bool(*)(UObject* WorldContextObject,bool bPaused));

using uapi_UGameplayStatics_SetGlobalListenerFocusParametersFn = void(*)(void(*)(UObject* WorldContextObject,float FocusAzimuthScale,float NonFocusAzimuthScale,float FocusDistanceScale,float NonFocusDistanceScale,float FocusVolumeScale,float NonFocusVolumeScale,float FocusPriorityScale,float NonFocusPriorityScale));

using uapi_UGameplayStatics_SetGlobalPitchModulationFn = void(*)(void(*)(UObject* WorldContextObject,float PitchModulation,float TimeSec));

using uapi_UGameplayStatics_SetGlobalTimeDilationFn = void(*)(void(*)(UObject* WorldContextObject,float TimeDilation));

using uapi_UGameplayStatics_SetMaxAudioChannelsScaledFn = void(*)(void(*)(UObject* WorldContextObject,float MaxChannelCountScale));

using uapi_UGameplayStatics_SetPlayerControllerIDFn = void(*)(void(*)(APlayerController* Player,int32 ControllerId));

using uapi_UGameplayStatics_SetSoundClassDistanceScaleFn = void(*)(void(*)(UObject* WorldContextObject,USoundClass* SoundClass,float DistanceAttenuationScale,float TimeSec));

using uapi_UGameplayStatics_SetSoundMixClassOverrideFn = void(*)(void(*)(UObject* WorldContextObject,USoundMix* InSoundMixModifier,USoundClass* InSoundClass,float Volume,float Pitch,float FadeInTime,bool bApplyToChildren));

using uapi_UGameplayStatics_SetSubtitlesEnabledFn = void(*)(void(*)(bool bEnabled));

using uapi_UGameplayStatics_SpawnDecalAtLocationFn = void(*)(void*(*)(UObject* WorldContextObject,UMaterialInterface* DecalMaterial,Vector3 DecalSize,Vector3 Location,Rotator Rotation,float LifeSpan));

using uapi_UGameplayStatics_SpawnForceFeedbackAtLocationFn = void(*)(void*(*)(UObject* WorldContextObject,UForceFeedbackEffect* ForceFeedbackEffect,Vector3 Location,Rotator Rotation,bool bLooping,float IntensityMultiplier,float StartTime,UForceFeedbackAttenuation* AttenuationSettings,bool bAutoDestroy));

using uapi_UGameplayStatics_SpawnSound2DFn = void(*)(void*(*)(UObject* WorldContextObject,USoundBase* Sound,float VolumeMultiplier,float PitchMultiplier,float StartTime,USoundConcurrency* ConcurrencySettings,bool bPersistAcrossLevelTransition,bool bAutoDestroy));

using uapi_UGameplayStatics_SpawnSoundAtLocationFn = void(*)(void*(*)(UObject* WorldContextObject,USoundBase* Sound,Vector3 Location,Rotator Rotation,float VolumeMultiplier,float PitchMultiplier,float StartTime,USoundAttenuation* AttenuationSettings,USoundConcurrency* ConcurrencySettings,bool bAutoDestroy));

using uapi_UGameplayStatics_UnRetainAllSoundsInSoundClassFn = void(*)(void(*)(USoundClass* InSoundClass));

using uapi_ACharacter_BeginPlayFn = void(*)(void(*)(void* target));

using uapi_ACharacter_CacheInitialMeshOffsetFn = void(*)(void(*)(void* target,Vector3 MeshRelativeLocation,Rotator MeshRelativeRotation));

using uapi_ACharacter_CanCrouchFn = void(*)(bool(*)(void* target));

using uapi_ACharacter_CanJumpFn = void(*)(bool(*)(void* target));

using uapi_ACharacter_CheckJumpInputFn = void(*)(void(*)(void* target,float DeltaTime));

using uapi_ACharacter_ClearCrossLevelReferencesFn = void(*)(void(*)(void* target));

using uapi_ACharacter_ClearJumpInputFn = void(*)(void(*)(void* target,float DeltaTime));

using uapi_ACharacter_ClientAckGoodMoveFn = void(*)(void(*)(void* target,float TimeStamp));

using uapi_ACharacter_ClientAckGoodMove_ImplementationFn = void(*)(void(*)(void* target,float TimeStamp));

using uapi_ACharacter_ClientAdjustPositionFn = void(*)(void(*)(void* target,float TimeStamp,Vector3 NewLoc,Vector3 NewVel,UPrimitiveComponent* NewBase,UName NewBaseBoneName,bool bHasBase,bool bBaseRelativePosition,uint8 ServerMovementMode));

using uapi_ACharacter_ClientAdjustPosition_ImplementationFn = void(*)(void(*)(void* target,float TimeStamp,Vector3 NewLoc,Vector3 NewVel,UPrimitiveComponent* NewBase,UName NewBaseBoneName,bool bHasBase,bool bBaseRelativePosition,uint8 ServerMovementMode));

using uapi_ACharacter_ClientCheatFlyFn = void(*)(void(*)(void* target));

using uapi_ACharacter_ClientCheatFly_ImplementationFn = void(*)(void(*)(void* target));

using uapi_ACharacter_ClientCheatGhostFn = void(*)(void(*)(void* target));

using uapi_ACharacter_ClientCheatGhost_ImplementationFn = void(*)(void(*)(void* target));

using uapi_ACharacter_ClientCheatWalkFn = void(*)(void(*)(void* target));

using uapi_ACharacter_ClientCheatWalk_ImplementationFn = void(*)(void(*)(void* target));

using uapi_ACharacter_ClientVeryShortAdjustPositionFn = void(*)(void(*)(void* target,float TimeStamp,Vector3 NewLoc,UPrimitiveComponent* NewBase,UName NewBaseBoneName,bool bHasBase,bool bBaseRelativePosition,uint8 ServerMovementMode));

using uapi_ACharacter_ClientVeryShortAdjustPosition_ImplementationFn = void(*)(void(*)(void* target,float TimeStamp,Vector3 NewLoc,UPrimitiveComponent* NewBase,UName NewBaseBoneName,bool bHasBase,bool bBaseRelativePosition,uint8 ServerMovementMode));

using uapi_ACharacter_CrouchFn = void(*)(void(*)(void* target,bool bClientSimulation));

using uapi_ACharacter_FallingFn = void(*)(void(*)(void* target));

using uapi_ACharacter_GetAnimRootMotionTranslationScaleFn = void(*)(float(*)(void* target));

using uapi_ACharacter_GetArrowComponentFn = void(*)(void*(*)(void* target));

using uapi_ACharacter_GetBaseRotationOffsetFn = void(*)(Quaternion(*)(void* target));

using uapi_ACharacter_GetBaseRotationOffsetRotatorFn = void(*)(Rotator(*)(void* target));

using uapi_ACharacter_GetBaseTranslationOffsetFn = void(*)(Vector3(*)(void* target));

using uapi_ACharacter_GetCapsuleComponentFn = void(*)(void*(*)(void* target));

using uapi_ACharacter_GetCharacterMovementFn = void(*)(void*(*)(void* target));

using uapi_ACharacter_GetCurrentMontageFn = void(*)(void*(*)(void* target));

using uapi_ACharacter_GetDefaultHalfHeightFn = void(*)(float(*)(void* target));

using uapi_ACharacter_GetJumpMaxHoldTimeFn = void(*)(float(*)(void* target));

using uapi_ACharacter_GetMeshFn = void(*)(void*(*)(void* target));

using uapi_ACharacter_GetMovementBaseFn = void(*)(void*(*)(void* target));

using uapi_ACharacter_GetMovementComponentFn = void(*)(void*(*)(void* target));

using uapi_ACharacter_GetNavAgentLocationFn = void(*)(Vector3(*)(void* target));

using uapi_ACharacter_GetReplicatedMovementModeFn = void(*)(uint8(*)(void* target));

using uapi_ACharacter_GetReplicatedServerLastTransformUpdateTimeStampFn = void(*)(float(*)(void* target));

using uapi_ACharacter_GetRootMotionAnimMontageInstanceFn = void(*)(void*(*)(void* target));

using uapi_ACharacter_GetSimpleCollisionCylinderFn = void(*)(void(*)(void* target,float& CollisionRadius,float& CollisionHalfHeight));

using uapi_ACharacter_HasAnyRootMotionFn = void(*)(bool(*)(void* target));

using uapi_ACharacter_IsJumpProvidingForceFn = void(*)(bool(*)(void* target));

using uapi_ACharacter_IsPlayingNetworkedRootMotionMontageFn = void(*)(bool(*)(void* target));

using uapi_ACharacter_IsPlayingRootMotionFn = void(*)(bool(*)(void* target));

using uapi_ACharacter_JumpFn = void(*)(void(*)(void* target));

using uapi_ACharacter_K2_OnEndCrouchFn = void(*)(void(*)(void* target,float HalfHeightAdjust,float ScaledHalfHeightAdjust));

using uapi_ACharacter_K2_OnStartCrouchFn = void(*)(void(*)(void* target,float HalfHeightAdjust,float ScaledHalfHeightAdjust));

using uapi_ACharacter_K2_UpdateCustomMovementFn = void(*)(void(*)(void* target,float DeltaTime));

using uapi_ACharacter_LaunchCharacterFn = void(*)(void(*)(void* target,Vector3 LaunchVelocity,bool bXYOverride,bool bZOverride));

using uapi_ACharacter_NotifyActorBeginOverlapFn = void(*)(void(*)(void* target,AActor* OtherActor));

using uapi_ACharacter_NotifyActorEndOverlapFn = void(*)(void(*)(void* target,AActor* OtherActor));

using uapi_ACharacter_NotifyJumpApexFn = void(*)(void(*)(void* target));

using uapi_ACharacter_OnEndCrouchFn = void(*)(void(*)(void* target,float HalfHeightAdjust,float ScaledHalfHeightAdjust));

using uapi_ACharacter_OnJumpedFn = void(*)(void(*)(void* target));

using uapi_ACharacter_OnJumped_ImplementationFn = void(*)(void(*)(void* target));

using uapi_ACharacter_OnLaunchedFn = void(*)(void(*)(void* target,Vector3 LaunchVelocity,bool bXYOverride,bool bZOverride));

using uapi_ACharacter_OnRep_IsCrouchedFn = void(*)(void(*)(void* target));

using uapi_ACharacter_OnRep_ReplayLastTransformUpdateTimeStampFn = void(*)(void(*)(void* target));

using uapi_ACharacter_OnRep_ReplicatedBasedMovementFn = void(*)(void(*)(void* target));

using uapi_ACharacter_OnRep_ReplicatedMovementFn = void(*)(void(*)(void* target));

using uapi_ACharacter_OnRep_RootMotionFn = void(*)(void(*)(void* target));

using uapi_ACharacter_OnStartCrouchFn = void(*)(void(*)(void* target,float HalfHeightAdjust,float ScaledHalfHeightAdjust));

using uapi_ACharacter_PawnClientRestartFn = void(*)(void(*)(void* target));

using uapi_ACharacter_PlayAnimMontageFn = void(*)(float(*)(void* target,UAnimMontage* AnimMontage,float InPlayRate,UName StartSectionName));

using uapi_ACharacter_PossessedByFn = void(*)(void(*)(void* target,AController* NewController));

using uapi_ACharacter_PostInitializeComponentsFn = void(*)(void(*)(void* target));

using uapi_ACharacter_PostLoadFn = void(*)(void(*)(void* target));

using uapi_ACharacter_PostNetReceiveFn = void(*)(void(*)(void* target));

using uapi_ACharacter_PostNetReceiveLocationAndRotationFn = void(*)(void(*)(void* target));

using uapi_ACharacter_PreNetReceiveFn = void(*)(void(*)(void* target));

using uapi_ACharacter_RecalculateBaseEyeHeightFn = void(*)(void(*)(void* target));

using uapi_ACharacter_RecalculateCrouchedEyeHeightFn = void(*)(void(*)(void* target));

using uapi_ACharacter_ResetJumpStateFn = void(*)(void(*)(void* target));

using uapi_ACharacter_RestartFn = void(*)(void(*)(void* target));

using uapi_ACharacter_SetAnimRootMotionTranslationScaleFn = void(*)(void(*)(void* target,float InAnimRootMotionTranslationScale));

using uapi_ACharacter_SetBaseFn = void(*)(void(*)(void* target,UPrimitiveComponent* NewBase,UName BoneName,bool bNotifyActor));

using uapi_ACharacter_SetReplicateMovementFn = void(*)(void(*)(void* target,bool bInReplicateMovement));

using uapi_ACharacter_SetupPlayerInputComponentFn = void(*)(void(*)(void* target,UInputComponent* PlayerInputComponent));

using uapi_ACharacter_SimulatedRootMotionPositionFixupFn = void(*)(void(*)(void* target,float DeltaSeconds));

using uapi_ACharacter_StopAnimMontageFn = void(*)(void(*)(void* target,UAnimMontage* AnimMontage));

using uapi_ACharacter_StopJumpingFn = void(*)(void(*)(void* target));

using uapi_ACharacter_TornOffFn = void(*)(void(*)(void* target));

using uapi_ACharacter_TurnOffFn = void(*)(void(*)(void* target));

using uapi_ACharacter_UnCrouchFn = void(*)(void(*)(void* target,bool bClientSimulation));

using uapi_ACharacter_UnPossessedFn = void(*)(void(*)(void* target));

using uapi_ACharacter_UpdateNavigationRelevanceFn = void(*)(void(*)(void* target));

using uapi_AGameModeBase_AllowCheatsFn = void(*)(bool(*)(void* target,APlayerController* P));

using uapi_AGameModeBase_AllowPausingFn = void(*)(bool(*)(void* target,APlayerController* PC));

using uapi_AGameModeBase_CanSpectateFn = void(*)(bool(*)(void* target,APlayerController* Viewer,APlayerState* ViewTarget));

using uapi_AGameModeBase_ChoosePlayerStartFn = void(*)(void*(*)(void* target,AController* Player));

using uapi_AGameModeBase_ClearPauseFn = void(*)(bool(*)(void* target));

using uapi_AGameModeBase_DispatchPostLoginFn = void(*)(void(*)(void* target,AController* NewPlayer));

using uapi_AGameModeBase_ForceClearUnpauseDelegatesFn = void(*)(void(*)(void* target,AActor* PauseActor));

using uapi_AGameModeBase_GetNumPlayersFn = void(*)(int32(*)(void* target));

using uapi_AGameModeBase_GetNumSpectatorsFn = void(*)(int32(*)(void* target));

using uapi_AGameModeBase_HandleStartingNewPlayerFn = void(*)(void(*)(void* target,APlayerController* NewPlayer));

using uapi_AGameModeBase_HasMatchEndedFn = void(*)(bool(*)(void* target));

using uapi_AGameModeBase_HasMatchStartedFn = void(*)(bool(*)(void* target));

using uapi_AGameModeBase_InitGameStateFn = void(*)(void(*)(void* target));

using uapi_AGameModeBase_InitStartSpotFn = void(*)(void(*)(void* target,AActor* StartSpot,AController* NewPlayer));

using uapi_AGameModeBase_IsHandlingReplaysFn = void(*)(bool(*)(void* target));

using uapi_AGameModeBase_IsPausedFn = void(*)(bool(*)(void* target));

using uapi_AGameModeBase_K2_OnLogoutFn = void(*)(void(*)(void* target,AController* ExitingController));

using uapi_AGameModeBase_K2_OnRestartPlayerFn = void(*)(void(*)(void* target,AController* NewPlayer));

using uapi_AGameModeBase_K2_PostLoginFn = void(*)(void(*)(void* target,APlayerController* NewPlayer));

using uapi_AGameModeBase_LogoutFn = void(*)(void(*)(void* target,AController* Exiting));

using uapi_AGameModeBase_MustSpectateFn = void(*)(bool(*)(void* target,APlayerController* NewPlayerController));

using uapi_AGameModeBase_PlayerCanRestartFn = void(*)(bool(*)(void* target,APlayerController* Player));

using uapi_AGameModeBase_PostLoginFn = void(*)(void(*)(void* target,APlayerController* NewPlayer));

using uapi_AGameModeBase_PostSeamlessTravelFn = void(*)(void(*)(void* target));

using uapi_AGameModeBase_PreInitializeComponentsFn = void(*)(void(*)(void* target));

using uapi_AGameModeBase_ResetFn = void(*)(void(*)(void* target));

using uapi_AGameModeBase_ResetLevelFn = void(*)(void(*)(void* target));

using uapi_AGameModeBase_RestartPlayerFn = void(*)(void(*)(void* target,AController* NewPlayer));

using uapi_AGameModeBase_RestartPlayerAtPlayerStartFn = void(*)(void(*)(void* target,AController* NewPlayer,AActor* StartSpot));

using uapi_AGameModeBase_ReturnToMainMenuHostFn = void(*)(void(*)(void* target));

using uapi_AGameModeBase_SetPlayerDefaultsFn = void(*)(void(*)(void* target,APawn* PlayerPawn));

using uapi_AGameModeBase_ShouldResetFn = void(*)(bool(*)(void* target,AActor* ActorToReset));

using uapi_AGameModeBase_SpawnDefaultPawnForFn = void(*)(void*(*)(void* target,AController* NewPlayer,AActor* StartSpot));

using uapi_AGameModeBase_StartPlayFn = void(*)(void(*)(void* target));

using uapi_AGameModeBase_StartToLeaveMapFn = void(*)(void(*)(void* target));

using uapi_AGameModeBase_SwapPlayerControllersFn = void(*)(void(*)(void* target,APlayerController* OldPC,APlayerController* NewPC));

using uapi_USceneComponent_BeginDestroyFn = void(*)(void(*)(void* target));

using uapi_USceneComponent_CalcBoundingCylinderFn = void(*)(void(*)(void* target,float& CylinderRadius,float& CylinderHalfHeight));

using uapi_USceneComponent_CanAttachAsChildFn = void(*)(bool(*)(void* target,USceneComponent* ChildComponent,UName SocketName));

using uapi_USceneComponent_CanEditChangeFn = void(*)(bool(*)(void* target,FProperty* Property));

using uapi_USceneComponent_CanEverRenderFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_CanHaveStaticMobilityFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_ClearSkipUpdateOverlapsFn = void(*)(void(*)(void* target));

using uapi_USceneComponent_ConditionalUpdateComponentToWorldFn = void(*)(void(*)(void* target));

using uapi_USceneComponent_DestroyComponentFn = void(*)(void(*)(void* target,bool bPromoteChildren));

using uapi_USceneComponent_DoesSocketExistFn = void(*)(bool(*)(void* target,UName InSocketName));

using uapi_USceneComponent_GetAbsoluteLocationPropertyNameFn = void(*)(UName(*)());

using uapi_USceneComponent_GetAbsoluteRotationPropertyNameFn = void(*)(UName(*)());

using uapi_USceneComponent_GetAbsoluteScalePropertyNameFn = void(*)(UName(*)());

using uapi_USceneComponent_GetActorPositionForRendererFn = void(*)(Vector3(*)(void* target));

using uapi_USceneComponent_GetAttachParentFn = void(*)(void*(*)(void* target));

using uapi_USceneComponent_GetAttachParentActorFn = void(*)(void*(*)(void* target));

using uapi_USceneComponent_GetAttachSocketNameFn = void(*)(UName(*)(void* target));

using uapi_USceneComponent_GetAttachmentRootFn = void(*)(void*(*)(void* target));

using uapi_USceneComponent_GetAttachmentRootActorFn = void(*)(void*(*)(void* target));

using uapi_USceneComponent_GetChildComponentFn = void(*)(void*(*)(void* target,int32 ChildIndex));

using uapi_USceneComponent_GetCollisionObjectTypeFn = void(*)(ECollisionChannel(*)(void* target));

using uapi_USceneComponent_GetComponentLocationFn = void(*)(Vector3(*)(void* target));

using uapi_USceneComponent_GetComponentQuatFn = void(*)(Quaternion(*)(void* target));

using uapi_USceneComponent_GetComponentRotationFn = void(*)(Rotator(*)(void* target));

using uapi_USceneComponent_GetComponentScaleFn = void(*)(Vector3(*)(void* target));

using uapi_USceneComponent_GetComponentToWorldFn = void(*)(Transform(*)(void* target));

using uapi_USceneComponent_GetComponentTransformFn = void(*)(Transform(*)(void* target));

using uapi_USceneComponent_GetComponentVelocityFn = void(*)(Vector3(*)(void* target));

using uapi_USceneComponent_GetCurrentScopedMovementFn = void(*)(void*(*)(void* target));

using uapi_USceneComponent_GetDefaultSceneRootVariableNameFn = void(*)(UName(*)());

using uapi_USceneComponent_GetForwardVectorFn = void(*)(Vector3(*)(void* target));

using uapi_USceneComponent_GetNumChildrenComponentsFn = void(*)(int32(*)(void* target));

using uapi_USceneComponent_GetNumUncachedStaticLightingInteractionsFn = void(*)(int32(*)(void* target));

using uapi_USceneComponent_GetPhysicsVolumeFn = void(*)(void*(*)(void* target));

using uapi_USceneComponent_GetRelativeLocationFn = void(*)(Vector3(*)(void* target));

using uapi_USceneComponent_GetRelativeLocationPropertyNameFn = void(*)(UName(*)());

using uapi_USceneComponent_GetRelativeLocation_DirectMutableFn = void(*)(Vector3(*)(void* target));

using uapi_USceneComponent_GetRelativeRotationFn = void(*)(Rotator(*)(void* target));

using uapi_USceneComponent_GetRelativeRotationPropertyNameFn = void(*)(UName(*)());

using uapi_USceneComponent_GetRelativeRotation_DirectMutableFn = void(*)(Rotator(*)(void* target));

using uapi_USceneComponent_GetRelativeScale3DFn = void(*)(Vector3(*)(void* target));

using uapi_USceneComponent_GetRelativeScale3DPropertyNameFn = void(*)(UName(*)());

using uapi_USceneComponent_GetRelativeScale3D_DirectMutableFn = void(*)(Vector3(*)(void* target));

using uapi_USceneComponent_GetRelativeTransformFn = void(*)(Transform(*)(void* target));

using uapi_USceneComponent_GetRightVectorFn = void(*)(Vector3(*)(void* target));

using uapi_USceneComponent_GetShouldUpdatePhysicsVolumeFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_GetSocketLocationFn = void(*)(Vector3(*)(void* target,UName InSocketName));

using uapi_USceneComponent_GetSocketQuaternionFn = void(*)(Quaternion(*)(void* target,UName InSocketName));

using uapi_USceneComponent_GetSocketRotationFn = void(*)(Rotator(*)(void* target,UName InSocketName));

using uapi_USceneComponent_GetUpVectorFn = void(*)(Vector3(*)(void* target));

using uapi_USceneComponent_GetVisibleFlagFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_GetVisiblePropertyNameFn = void(*)(UName(*)());

using uapi_USceneComponent_HasAnySocketsFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_IsAnySimulatingPhysicsFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_IsAttachedToFn = void(*)(bool(*)(void* target,USceneComponent* TestComp));

using uapi_USceneComponent_IsCollisionEnabledFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_IsDeferringMovementUpdatesFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_IsPhysicsCollisionEnabledFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_IsPostLoadThreadSafeFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_IsPrecomputedLightingValidFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_IsQueryCollisionEnabledFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_IsSimulatingPhysicsFn = void(*)(bool(*)(void* target,UName BoneName));

using uapi_USceneComponent_IsUsingAbsoluteLocationFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_IsUsingAbsoluteRotationFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_IsUsingAbsoluteScaleFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_IsVisibleFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_IsVisibleInEditorFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_IsWorldGeometryFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_K2_GetComponentLocationFn = void(*)(Vector3(*)(void* target));

using uapi_USceneComponent_K2_GetComponentRotationFn = void(*)(Rotator(*)(void* target));

using uapi_USceneComponent_K2_GetComponentScaleFn = void(*)(Vector3(*)(void* target));

using uapi_USceneComponent_K2_GetComponentToWorldFn = void(*)(Transform(*)(void* target));

using uapi_USceneComponent_NeedsLoadForTargetPlatformFn = void(*)(bool(*)(void* target,ITargetPlatform* TargetPlatform));

using uapi_USceneComponent_OnAttachmentChangedFn = void(*)(void(*)(void* target));

using uapi_USceneComponent_OnComponentDestroyedFn = void(*)(void(*)(void* target,bool bDestroyingHierarchy));

using uapi_USceneComponent_OnRegisterFn = void(*)(void(*)(void* target));

using uapi_USceneComponent_OnUnregisterFn = void(*)(void(*)(void* target));

using uapi_USceneComponent_PostEditComponentMoveFn = void(*)(void(*)(void* target,bool bFinished));

using uapi_USceneComponent_PostInterpChangeFn = void(*)(void(*)(void* target,FProperty* PropertyThatChanged));

using uapi_USceneComponent_PostLoadFn = void(*)(void(*)(void* target));

using uapi_USceneComponent_PostNetReceiveFn = void(*)(void(*)(void* target));

using uapi_USceneComponent_PostRepNotifiesFn = void(*)(void(*)(void* target));

using uapi_USceneComponent_PreNetReceiveFn = void(*)(void(*)(void* target));

using uapi_USceneComponent_PropagateLightingScenarioChangeFn = void(*)(void(*)(void* target));

using uapi_USceneComponent_ResetRelativeTransformFn = void(*)(void(*)(void* target));

using uapi_USceneComponent_SetAbsoluteFn = void(*)(void(*)(void* target,bool bNewAbsoluteLocation,bool bNewAbsoluteRotation,bool bNewAbsoluteScale));

using uapi_USceneComponent_SetHiddenInGameFn = void(*)(void(*)(void* target,bool NewHidden,bool bPropagateToChildren));

using uapi_USceneComponent_SetPhysicsVolumeFn = void(*)(void(*)(void* target,APhysicsVolume* NewVolume,bool bTriggerNotifiers));

using uapi_USceneComponent_SetRelativeLocation_DirectFn = void(*)(void(*)(void* target,Vector3 NewRelativeLocation));

using uapi_USceneComponent_SetRelativeRotation_DirectFn = void(*)(void(*)(void* target,Rotator NewRelativeRotation));

using uapi_USceneComponent_SetRelativeScale3DFn = void(*)(void(*)(void* target,Vector3 NewScale3D));

using uapi_USceneComponent_SetRelativeScale3D_DirectFn = void(*)(void(*)(void* target,Vector3 NewRelativeScale3D));

using uapi_USceneComponent_SetShouldUpdatePhysicsVolumeFn = void(*)(void(*)(void* target,bool bInShouldUpdatePhysicsVolume));

using uapi_USceneComponent_SetUsingAbsoluteLocationFn = void(*)(void(*)(void* target,bool bInAbsoluteLocation));

using uapi_USceneComponent_SetUsingAbsoluteRotationFn = void(*)(void(*)(void* target,bool bInAbsoluteRotation));

using uapi_USceneComponent_SetUsingAbsoluteScaleFn = void(*)(void(*)(void* target,bool bInAbsoluteRotation));

using uapi_USceneComponent_SetVisibilityFn = void(*)(void(*)(void* target,bool bNewVisibility,bool bPropagateToChildren));

using uapi_USceneComponent_SetVisibleFlagFn = void(*)(void(*)(void* target,bool bInVisible));

using uapi_USceneComponent_SetWorldScale3DFn = void(*)(void(*)(void* target,Vector3 NewScale));

using uapi_USceneComponent_SetupAttachmentFn = void(*)(void(*)(void* target,USceneComponent* InParent,UName InSocketName));

using uapi_USceneComponent_ShouldCollideWhenPlacingFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_ShouldComponentAddToSceneFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_ShouldCreateRenderStateFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_ShouldRenderFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_ShouldSkipUpdateOverlapsFn = void(*)(bool(*)(void* target));

using uapi_USceneComponent_ToggleVisibilityFn = void(*)(void(*)(void* target,bool bPropagateToChildren));

using uapi_USceneComponent_UpdateBoundsFn = void(*)(void(*)(void* target));

using uapi_USceneComponent_UpdateOverlapsFn = void(*)(bool(*)(void* target,TOverlapArrayView* PendingOverlaps,bool bDoNotifies,TOverlapArrayView* OverlapsAtEndLocation));

using uapi_USceneComponent_UpdatePhysicsVolumeFn = void(*)(void(*)(void* target,bool bTriggerNotifiers));

using uapi_UActorComponent_ActivateFn = void(*)(void(*)(void* target,bool bReset));

using uapi_UActorComponent_AddAssetUserDataFn = void(*)(void(*)(void* target,UAssetUserData* InUserData));

using uapi_UActorComponent_AddTickPrerequisiteActorFn = void(*)(void(*)(void* target,AActor* PrerequisiteActor));

using uapi_UActorComponent_AddTickPrerequisiteComponentFn = void(*)(void(*)(void* target,UActorComponent* PrerequisiteComponent));

using uapi_UActorComponent_AdditionalStatObjectFn = void(*)(void*(*)(void* target));

using uapi_UActorComponent_AllowReregistrationFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_AsyncPhysicsTickComponentFn = void(*)(void(*)(void* target,float DeltaTime,float SimTime));

using uapi_UActorComponent_BeginDestroyFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_BeginPlayFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_CallRemoteFunctionFn = void(*)(bool(*)(void* target,UFunction* Function,void* Parameters,FOutParmRec* OutParms,FFrame* Stack));

using uapi_UActorComponent_CanEditChangeFn = void(*)(bool(*)(void* target,FProperty* InProperty));

using uapi_UActorComponent_CanEverAffectNavigationFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_CheckForErrorsFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_ClearNeedEndOfFrameUpdateFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_ClearUCSModifiedPropertiesFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_ComponentHasTagFn = void(*)(bool(*)(void* target,UName Tag));

using uapi_UActorComponent_ComponentIsInLevelFn = void(*)(bool(*)(void* target,ULevel* TestLevel));

using uapi_UActorComponent_ComponentIsInPersistentLevelFn = void(*)(bool(*)(void* target,bool bIncludeLevelStreamingPersistent));

using uapi_UActorComponent_CreatePhysicsStateFn = void(*)(void(*)(void* target,bool bAllowDeferral));

using uapi_UActorComponent_DeactivateFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_DestroyComponentFn = void(*)(void(*)(void* target,bool bPromoteChildren));

using uapi_UActorComponent_DestroyPhysicsStateFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_DetermineUCSModifiedPropertiesFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_DoDeferredRenderUpdates_ConcurrentFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_GetComponentClassCanReplicateFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_GetComponentLevelFn = void(*)(void*(*)(void* target));

using uapi_UActorComponent_GetComponentTickIntervalFn = void(*)(float(*)(void* target));

using uapi_UActorComponent_GetFunctionCallspaceFn = void(*)(int32(*)(void* target,UFunction* Function,FFrame* Stack));

using uapi_UActorComponent_GetIsReplicatedFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_GetMarkedForEndOfFrameUpdateStateFn = void(*)(uint32(*)(void* target));

using uapi_UActorComponent_GetMarkedForPreEndOfFrameSyncFn = void(*)(uint32(*)(void* target));

using uapi_UActorComponent_GetOwnerFn = void(*)(void*(*)(void* target));

using uapi_UActorComponent_GetReadableNameFn = void(*)(const char*(*)(void* target));

using uapi_UActorComponent_GetSceneFn = void(*)(void*(*)(void* target));

using uapi_UActorComponent_GetUCSSerializationIndexFn = void(*)(int32(*)(void* target));

using uapi_UActorComponent_GetWorldFn = void(*)(void*(*)(void* target));

using uapi_UActorComponent_HasBeenCreatedFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_HasBeenInitializedFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_HasBegunPlayFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_InitializeComponentFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_InvalidateLightingCacheFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_InvalidateLightingCacheDetailedFn = void(*)(void(*)(void* target,bool bInvalidateBuildEnqueuedLighting,bool bTranslationOnly));

using uapi_UActorComponent_IsActiveFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsBeingDestroyedFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsComponentTickEnabledFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsCreatedByConstructionScriptFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsEditableWhenInheritedFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsEditorOnlyFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsHLODRelevantFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsNameStableForNetworkingFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsNavigationRelevantFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsNetSimulatingFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsNetStartupComponentFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsOwnerRunningUserConstructionScriptFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsOwnerSelectedFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsPhysicsStateCreatedFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsReadyForOwnerToAutoDestroyFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsReadyForReplicationFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsRegisteredFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsRenderInstancesDirtyFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsRenderStateCreatedFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsRenderStateDirtyFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsRenderTransformDirtyFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsReplicatedSubObjectRegisteredFn = void(*)(bool(*)(void* target,UObject* SubObject));

using uapi_UActorComponent_IsSelectedInEditorFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsSupportedForNetworkingFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsUsingRegisteredSubObjectListFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_IsVisualizationComponentFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_K2_DestroyComponentFn = void(*)(void(*)(void* target,UObject* Object));

using uapi_UActorComponent_MarkAsEditorOnlySubobjectFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_MarkForNeededEndOfFrameRecreateFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_MarkForNeededEndOfFrameUpdateFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_MarkRenderDynamicDataDirtyFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_MarkRenderInstancesDirtyFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_MarkRenderStateDirtyFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_MarkRenderTransformDirtyFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_ModifyFn = void(*)(bool(*)(void* target,bool bAlwaysMarkDirty));

using uapi_UActorComponent_NeedsLoadForClientFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_NeedsLoadForEditorGameFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_NeedsLoadForServerFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_OnActorEnableCollisionChangedFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_OnComponentCreatedFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_OnComponentDestroyedFn = void(*)(void(*)(void* target,bool bDestroyingHierarchy));

using uapi_UActorComponent_OnCreatedFromReplicationFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_OnDestroyedFromReplicationFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_OnEndOfFrameUpdateDuringTickFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_OnPreEndOfFrameSyncFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_OnRep_IsActiveFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_PostApplyToComponentFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_PostEditUndoFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_PostInitPropertiesFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_PostLoadFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_PostRenameFn = void(*)(void(*)(void* target,UObject* OldOuter,UName OldName));

using uapi_UActorComponent_PreEditChangeFn = void(*)(void(*)(void* target,FProperty* PropertyThatWillChange));

using uapi_UActorComponent_PreEditUndoFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_ReadyForReplicationFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_ReceiveAsyncPhysicsTickFn = void(*)(void(*)(void* target,float DeltaSeconds,float SimSeconds));

using uapi_UActorComponent_ReceiveBeginPlayFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_ReceiveTickFn = void(*)(void(*)(void* target,float DeltaSeconds));

using uapi_UActorComponent_RecreatePhysicsStateFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_RecreateRenderState_ConcurrentFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_RegisterAllComponentTickFunctionsFn = void(*)(void(*)(void* target,bool bRegister));

using uapi_UActorComponent_RegisterComponentFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_RegisterComponentWithWorldFn = void(*)(void(*)(void* target,UWorld* InWorld,FRegisterComponentContext* Context));

using uapi_UActorComponent_RemoveReplicatedSubObjectFn = void(*)(void(*)(void* target,UObject* SubObject));

using uapi_UActorComponent_RemoveTickPrerequisiteActorFn = void(*)(void(*)(void* target,AActor* PrerequisiteActor));

using uapi_UActorComponent_RemoveTickPrerequisiteComponentFn = void(*)(void(*)(void* target,UActorComponent* PrerequisiteComponent));

using uapi_UActorComponent_ReplicateSubobjectsFn = void(*)(bool(*)(void* target,UActorChannel* Channel,FOutBunch* Bunch,FReplicationFlags* RepFlags));

using uapi_UActorComponent_RequiresGameThreadEndOfFrameRecreateFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_RequiresGameThreadEndOfFrameUpdatesFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_RequiresPreEndOfFrameSyncFn = void(*)(bool(*)(void* target));

using uapi_UActorComponent_ReregisterComponentFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_SetActiveFn = void(*)(void(*)(void* target,bool bNewActive,bool bReset));

using uapi_UActorComponent_SetActiveFlagFn = void(*)(void(*)(void* target,bool bNewIsActive));

using uapi_UActorComponent_SetAutoActivateFn = void(*)(void(*)(void* target,bool bNewAutoActivate));

using uapi_UActorComponent_SetCanEverAffectNavigationFn = void(*)(void(*)(void* target,bool bRelevant));

using uapi_UActorComponent_SetComponentTickEnabledFn = void(*)(void(*)(void* target,bool bEnabled));

using uapi_UActorComponent_SetComponentTickEnabledAsyncFn = void(*)(void(*)(void* target,bool bEnabled));

using uapi_UActorComponent_SetComponentTickIntervalFn = void(*)(void(*)(void* target,float TickInterval));

using uapi_UActorComponent_SetComponentTickIntervalAndCooldownFn = void(*)(void(*)(void* target,float TickInterval));

using uapi_UActorComponent_SetIsNetStartupComponentFn = void(*)(void(*)(void* target,bool bInIsNetStartupComponent));

using uapi_UActorComponent_SetIsReplicatedFn = void(*)(void(*)(void* target,bool ShouldReplicate));

using uapi_UActorComponent_SetIsVisualizationComponentFn = void(*)(void(*)(void* target,bool bInIsVisualizationComponent));

using uapi_UActorComponent_SetNetAddressableFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_SetPackageExternalFn = void(*)(void(*)(void* target,bool bExternal,bool bShouldDirty));

using uapi_UActorComponent_SetTickableWhenPausedFn = void(*)(void(*)(void* target,bool bTickableWhenPaused));

using uapi_UActorComponent_SetupActorComponentTickFunctionFn = void(*)(bool(*)(void* target,FTickFunction* TickFunction));

using uapi_UActorComponent_ToggleActiveFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_UninitializeComponentFn = void(*)(void(*)(void* target));

using uapi_UActorComponent_UnregisterComponentFn = void(*)(void(*)(void* target));

using uapi_UWorld_AddControllerFn = void(*)(void(*)(void* target,AController* Controller));

using uapi_UWorld_AddLevelFn = void(*)(bool(*)(void* target,ULevel* InLevel));

using uapi_UWorld_AddNetworkActorFn = void(*)(void(*)(void* target,AActor* Actor));

using uapi_UWorld_AddParameterCollectionInstanceFn = void(*)(void(*)(void* target,UMaterialParameterCollection* Collection,bool bUpdateScene));

using uapi_UWorld_AddPhysicsVolumeFn = void(*)(void(*)(void* target,APhysicsVolume* Volume));

using uapi_UWorld_AddPostProcessingSettingsFn = void(*)(void(*)(void* target,Vector3 ViewLocation,FSceneView* SceneView));

using uapi_UWorld_AddStreamingLevelFn = void(*)(void(*)(void* target,ULevelStreaming* StreamingLevelToAdd));

using uapi_UWorld_AddUniqueStreamingLevelFn = void(*)(void(*)(void* target,ULevelStreaming* StreamingLevelToAdd));

using uapi_UWorld_AllowAudioPlaybackFn = void(*)(bool(*)(void* target));

using uapi_UWorld_AllowLevelLoadRequestsFn = void(*)(bool(*)(void* target));

using uapi_UWorld_AreActorsInitializedFn = void(*)(bool(*)(void* target));

using uapi_UWorld_AreAlwaysLoadedLevelsLoadedFn = void(*)(bool(*)(void* target));

using uapi_UWorld_AsyncLoadAlwaysLoadedLevelsForSeamlessTravelFn = void(*)(void(*)(void* target));

using uapi_UWorld_BeginDestroyFn = void(*)(void(*)(void* target));

using uapi_UWorld_BeginPlayFn = void(*)(void(*)(void* target));

using uapi_UWorld_BeginTearingDownFn = void(*)(void(*)(void* target));

using uapi_UWorld_BlockTillLevelStreamingCompletedFn = void(*)(void(*)(void* target));

using uapi_UWorld_BroadcastLevelsChangedFn = void(*)(void(*)(void* target));

using uapi_UWorld_BuildPIEPackagePrefixFn = void(*)(const char*(*)(int32 PIEInstanceID));

using uapi_UWorld_CancelPendingMapChangeFn = void(*)(void(*)(void* target));

using uapi_UWorld_CleanupActorsFn = void(*)(void(*)(void* target));

using uapi_UWorld_CleanupWorldFn = void(*)(void(*)(void* target,bool bSessionEnded,bool bCleanupResources,UWorld* NewWorld));

using uapi_UWorld_ClearActorComponentEndOfFrameUpdateFn = void(*)(void(*)(void* target,UActorComponent* Component));

using uapi_UWorld_ClearDemoNetDriverFn = void(*)(void(*)(void* target));

using uapi_UWorld_ClearNetDriverFn = void(*)(void(*)(void* target,UNetDriver* Driver));

using uapi_UWorld_ClearStreamingLevelsFn = void(*)(void(*)(void* target));

using uapi_UWorld_ClearWorldComponentsFn = void(*)(void(*)(void* target));

using uapi_UWorld_CommitMapChangeFn = void(*)(void(*)(void* target));

using uapi_UWorld_CommitModelSurfacesFn = void(*)(void(*)(void* target));

using uapi_UWorld_ConditionallyBuildStreamingDataFn = void(*)(void(*)(void* target));

using uapi_UWorld_ContainsActorFn = void(*)(bool(*)(void* target,AActor* Actor));

using uapi_UWorld_ContainsLevelFn = void(*)(bool(*)(void* target,ULevel* InLevel));

using uapi_UWorld_CopyGameStateFn = void(*)(void(*)(void* target,AGameModeBase* FromGameMode,AGameStateBase* FromGameState));

using uapi_UWorld_CreateAISystemFn = void(*)(void*(*)(void* target));

using uapi_UWorld_CreateFXSystemFn = void(*)(void(*)(void* target));

using uapi_UWorld_CreatePhysicsSceneFn = void(*)(void(*)(void* target,AWorldSettings* Settings));

using uapi_UWorld_DeSelectLevelFn = void(*)(void(*)(void* target,ULevel* InLevel));

using uapi_UWorld_DelayStreamingVolumeUpdatesFn = void(*)(void(*)(void* target,int32 InFrameDelay));

using uapi_UWorld_DestroyActorFn = void(*)(bool(*)(void* target,AActor* Actor,bool bNetForce,bool bShouldModifyLevel));

using uapi_UWorld_DestroyDemoNetDriverFn = void(*)(void(*)(void* target));

using uapi_UWorld_DestroySwappedPCFn = void(*)(bool(*)(void* target,UNetConnection* Connection));

using uapi_UWorld_DestroyWorldFn = void(*)(void(*)(void* target,bool bInformEngineOfWorld,UWorld* NewWorld));

using uapi_UWorld_DuplicateRequestedLevelsFn = void(*)(void(*)(void* target,UName MapName));

using uapi_UWorld_EditorDestroyActorFn = void(*)(bool(*)(void* target,AActor* Actor,bool bShouldModifyLevel));

using uapi_UWorld_EnsureCollisionTreeIsBuiltFn = void(*)(void(*)(void* target));

using uapi_UWorld_FindWorldInPackageFn = void(*)(void*(*)(UPackage* Package));

using uapi_UWorld_FinishDestroyFn = void(*)(void(*)(void* target));

using uapi_UWorld_FinishPhysicsSimFn = void(*)(void(*)(void* target));

using uapi_UWorld_FlushDeferredParameterCollectionInstanceUpdatesFn = void(*)(void(*)(void* target));

using uapi_UWorld_GetAISystemFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetActiveLevelCollectionFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetActiveLevelCollectionIndexFn = void(*)(int32(*)(void* target));

using uapi_UWorld_GetActiveLightingScenarioFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetActorCountFn = void(*)(int32(*)(void* target));

using uapi_UWorld_GetAddressURLFn = void(*)(const char*(*)(void* target));

using uapi_UWorld_GetAllowDeferredPhysicsStateCreationFn = void(*)(bool(*)(void* target));

using uapi_UWorld_GetAudioDeviceRawFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetAudioTimeSecondsFn = void(*)(double(*)(void* target));

using uapi_UWorld_GetAvoidanceManagerFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetBlockTillLevelStreamingCompletedEpochFn = void(*)(int32(*)(void* target));

using uapi_UWorld_GetCanvasForDrawMaterialToRenderTargetFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetCanvasForRenderingToTargetFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetCurrentLevelFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetCurrentLevelPendingInvisibilityFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetCurrentLevelPendingVisibilityFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetDebugDisplayNameFn = void(*)(const char*(*)(void* target));

using uapi_UWorld_GetDefaultBrushFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetDefaultGravityZFn = void(*)(float(*)(void* target));

using uapi_UWorld_GetDefaultPhysicsVolumeFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetDeltaSecondsFn = void(*)(float(*)(void* target));

using uapi_UWorld_GetDemoNetDriverFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetDetailModeFn = void(*)(int32(*)(void* target));

using uapi_UWorld_GetDuplicatedWorldForPIEFn = void(*)(void*(*)(UWorld* InWorld,UPackage* InPIEackage,int32 PIEInstanceID));

using uapi_UWorld_GetFirstLocalPlayerFromControllerFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetFirstPlayerControllerFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetGameInstanceFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetGameStateFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetGameViewportFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetGravityZFn = void(*)(float(*)(void* target));

using uapi_UWorld_GetIsInBlockTillLevelStreamingCompletedFn = void(*)(bool(*)(void* target));

using uapi_UWorld_GetLevelFn = void(*)(void*(*)(void* target,int32 InLevelIndex));

using uapi_UWorld_GetLevelScriptActorFn = void(*)(void*(*)(void* target,ULevel* OwnerLevel));

using uapi_UWorld_GetLevelStreamingForPackageNameFn = void(*)(void*(*)(void* target,UName PackageName));

using uapi_UWorld_GetLocalURLFn = void(*)(const char*(*)(void* target));

using uapi_UWorld_GetMapNameFn = void(*)(const char*(*)(void* target));

using uapi_UWorld_GetNetDriverFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetNonDefaultPhysicsVolumeCountFn = void(*)(int32(*)(void* target));

using uapi_UWorld_GetNumControllersFn = void(*)(int32(*)(void* target));

using uapi_UWorld_GetNumLevelsFn = void(*)(int32(*)(void* target));

using uapi_UWorld_GetNumPlayerControllersFn = void(*)(int32(*)(void* target));

using uapi_UWorld_GetNumSelectedLevelsFn = void(*)(int32(*)(void* target));

using uapi_UWorld_GetParameterCollectionInstanceFn = void(*)(void*(*)(void* target,UMaterialParameterCollection* Collection));

using uapi_UWorld_GetPhysicsSceneFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetProgressDenominatorFn = void(*)(int32(*)(void* target));

using uapi_UWorld_GetRealTimeSecondsFn = void(*)(double(*)(void* target));

using uapi_UWorld_GetSelectedLevelFn = void(*)(void*(*)(void* target,int32 InLevelIndex));

using uapi_UWorld_GetServerStreamingLevelsVisibilityFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetShouldForceUnloadStreamingLevelsFn = void(*)(bool(*)(void* target));

using uapi_UWorld_GetShouldForceVisibleStreamingLevelsFn = void(*)(bool(*)(void* target));

using uapi_UWorld_GetTimeSecondsFn = void(*)(double(*)(void* target));

using uapi_UWorld_GetUnpausedTimeSecondsFn = void(*)(double(*)(void* target));

using uapi_UWorld_GetWorldFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetWorldPartitionFn = void(*)(void*(*)(void* target));

using uapi_UWorld_GetWorldSettingsFn = void(*)(void*(*)(void* target,bool bCheckStreamingPersistent,bool bChecked));

using uapi_UWorld_HandleTimelineScrubbedFn = void(*)(void(*)(void* target));

using uapi_UWorld_HasBegunPlayFn = void(*)(bool(*)(void* target));

using uapi_UWorld_HasDefaultPhysicsVolumeFn = void(*)(bool(*)(void* target));

using uapi_UWorld_HasEndOfFrameUpdatesFn = void(*)(bool(*)(void* target));

using uapi_UWorld_HasEverBeenInitializedFn = void(*)(bool(*)(void* target));

using uapi_UWorld_HasMarkedObjectsPendingKillFn = void(*)(bool(*)(void* target));

using uapi_UWorld_HasStreamingLevelsToConsiderFn = void(*)(bool(*)(void* target));

using uapi_UWorld_InitializeSubsystemsFn = void(*)(void(*)(void* target));

using uapi_UWorld_InsertPostProcessVolumeFn = void(*)(void(*)(void* target,IInterface_PostProcessVolume* InVolume));

using uapi_UWorld_InvalidateAllSkyCapturesFn = void(*)(void(*)(void* target));

using uapi_UWorld_InvalidateModelGeometryFn = void(*)(void(*)(void* target,ULevel* InLevel));

using uapi_UWorld_InvalidateModelSurfaceFn = void(*)(void(*)(void* target,bool bCurrentLevelOnly));

using uapi_UWorld_IsCameraMoveableFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsEditorWorldFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsGameWorldFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsInSeamlessTravelFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsInitializedFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsInstancedFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsLevelSelectedFn = void(*)(bool(*)(void* target,ULevel* InLevel));

using uapi_UWorld_IsMapChangeReadyFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsMovieSceneSequenceTickHandlerBoundFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsNameStableForNetworkingFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsNavigationRebuiltFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsPartitionedWorldFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsPartitionedWorld2Fn = void(*)(bool(*)(UWorld* InWorld));

using uapi_UWorld_IsPausedFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsPlayInEditorFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsPlayInMobilePreviewFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsPlayInPreviewFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsPlayInVulkanPreviewFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsPlayingClientReplayFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsPlayingReplayFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsPreparingMapChangeFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsPreviewWorldFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsReadyForFinishDestroyFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsRecordingClientReplayFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsRecordingReplayFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsRefreshingStreamingLevelsFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsStreamingLevelBeingConsideredFn = void(*)(bool(*)(void* target,ULevelStreaming* StreamingLevel));

using uapi_UWorld_IsVisibilityRequestPendingFn = void(*)(bool(*)(void* target));

using uapi_UWorld_IsWorldOrExternalActorPackageFn = void(*)(bool(*)(UPackage* Package));

using uapi_UWorld_IssueEditorLoadWarningsFn = void(*)(void(*)(void* target));

using uapi_UWorld_K2_GetWorldSettingsFn = void(*)(void*(*)(void* target));

using uapi_UWorld_MarkActorComponentForNeededEndOfFrameUpdateFn = void(*)(void(*)(void* target,UActorComponent* Component,bool bForceGameThread));

using uapi_UWorld_MarkObjectsPendingKillFn = void(*)(void(*)(void* target));

using uapi_UWorld_ModifyLevelFn = void(*)(void(*)(void* target,ULevel* Level));

using uapi_UWorld_NotifyAcceptedConnectionFn = void(*)(void(*)(void* target,UNetConnection* Connection));

using uapi_UWorld_NotifyAcceptingChannelFn = void(*)(bool(*)(void* target,UChannel* Channel));

using uapi_UWorld_NotifyOfBlueprintDebuggingAssociationFn = void(*)(void(*)(void* target,UBlueprint* Blueprint,UObject* DebugObject));

using uapi_UWorld_PopulateStreamingLevelsToConsiderFn = void(*)(void(*)(void* target));

using uapi_UWorld_PostDuplicateFn = void(*)(void(*)(void* target,bool bDuplicateForPIE));

using uapi_UWorld_PostInitializeSubsystemsFn = void(*)(void(*)(void* target));

using uapi_UWorld_PostLoadFn = void(*)(void(*)(void* target));

using uapi_UWorld_PropagateLightingScenarioChangeFn = void(*)(void(*)(void* target));

using uapi_UWorld_RefreshStreamingLevelsFn = void(*)(void(*)(void* target));

using uapi_UWorld_RegisterAutoActivateCameraFn = void(*)(void(*)(void* target,ACameraActor* CameraActor,int32 PlayerIndex));

using uapi_UWorld_ReleasePhysicsSceneFn = void(*)(void(*)(void* target));

using uapi_UWorld_RemoveActorFn = void(*)(void(*)(void* target,AActor* Actor,bool bShouldModifyLevel));

using uapi_UWorld_RemoveControllerFn = void(*)(void(*)(void* target,AController* Controller));

using uapi_UWorld_RemoveLevelFn = void(*)(bool(*)(void* target,ULevel* InLevel));

using uapi_UWorld_RemoveNetworkActorFn = void(*)(void(*)(void* target,AActor* Actor));

using uapi_UWorld_RemovePhysicsVolumeFn = void(*)(void(*)(void* target,APhysicsVolume* Volume));

using uapi_UWorld_RemovePostProcessVolumeFn = void(*)(void(*)(void* target,IInterface_PostProcessVolume* InVolume));

using uapi_UWorld_RemoveStreamingLevelFn = void(*)(bool(*)(void* target,ULevelStreaming* StreamingLevelToRemove));

using uapi_UWorld_RemoveStreamingLevelAtFn = void(*)(bool(*)(void* target,int32 IndexToRemove));

using uapi_UWorld_RenameToPIEWorldFn = void(*)(void(*)(void* target,int32 PIEInstanceID));

using uapi_UWorld_RequiresHitProxiesFn = void(*)(bool(*)(void* target));

using uapi_UWorld_SelectLevelFn = void(*)(void(*)(void* target,ULevel* InLevel));

using uapi_UWorld_SendAllEndOfFrameUpdatesFn = void(*)(void(*)(void* target));

using uapi_UWorld_SetActiveLevelCollectionFn = void(*)(void(*)(void* target,int32 LevelCollectionIndex));

using uapi_UWorld_SetAllowDeferredPhysicsStateCreationFn = void(*)(void(*)(void* target,bool bAllow));

using uapi_UWorld_SetCurrentLevelFn = void(*)(bool(*)(void* target,ULevel* InLevel));

using uapi_UWorld_SetDemoNetDriverFn = void(*)(void(*)(void* target,UDemoNetDriver* InDemoNetDriver));

using uapi_UWorld_SetGameInstanceFn = void(*)(void(*)(void* target,UGameInstance* NewGI));

using uapi_UWorld_SetGameStateFn = void(*)(void(*)(void* target,AGameStateBase* NewGameState));

using uapi_UWorld_SetMapNeedsLightingFullyRebuiltFn = void(*)(void(*)(void* target,int32 InNumLightingUnbuiltObjects,int32 InNumUnbuiltReflectionCaptures));

using uapi_UWorld_SetMaterialParameterCollectionInstanceNeedsUpdateFn = void(*)(void(*)(void* target));

using uapi_UWorld_SetNavigationSystemFn = void(*)(void(*)(void* target,UNavigationSystemBase* InNavigationSystem));

using uapi_UWorld_SetNetDriverFn = void(*)(void(*)(void* target,UNetDriver* NewDriver));

using uapi_UWorld_SetPhysicsSceneFn = void(*)(void(*)(void* target,FPhysScene* InScene));

using uapi_UWorld_SetSeamlessTravelMidpointPauseFn = void(*)(void(*)(void* target,bool bNowPaused));

using uapi_UWorld_SetShouldForceUnloadStreamingLevelsFn = void(*)(void(*)(void* target,bool bInShouldForceUnloadStreamingLevels));

using uapi_UWorld_SetShouldForceVisibleStreamingLevelsFn = void(*)(void(*)(void* target,bool bInShouldForceVisibleStreamingLevels));

using uapi_UWorld_SetShouldTickFn = void(*)(void(*)(void* target,bool bInShouldTick));

using uapi_UWorld_SetWorldDataLayersFn = void(*)(void(*)(void* target,AWorldDataLayers* NewWorldDataLayers));

using uapi_UWorld_SetupParameterCollectionInstancesFn = void(*)(void(*)(void* target));

using uapi_UWorld_SetupPhysicsTickFunctionsFn = void(*)(void(*)(void* target,float DeltaSeconds));

using uapi_UWorld_ShouldTickFn = void(*)(bool(*)(void* target));

using uapi_UWorld_ShrinkLevelFn = void(*)(void(*)(void* target));

using uapi_UWorld_SpawnBrushFn = void(*)(void*(*)(void* target));

using uapi_UWorld_StartPhysicsSimFn = void(*)(void(*)(void* target));

using uapi_UWorld_SupportsMakingInvisibleTransactionRequestsFn = void(*)(bool(*)(void* target));

using uapi_UWorld_SupportsMakingVisibleTransactionRequestsFn = void(*)(bool(*)(void* target));

using uapi_UWorld_TickNetClientFn = void(*)(void(*)(void* target,float DeltaSeconds));

using uapi_UWorld_TimeSinceFn = void(*)(double(*)(void* target,double Time));

using uapi_UWorld_TransferBlueprintDebugReferencesFn = void(*)(void(*)(void* target,UWorld* NewWorld));

using uapi_UWorld_TriggerStreamingDataRebuildFn = void(*)(void(*)(void* target));

using uapi_UWorld_UpdateActorComponentEndOfFrameUpdateStateFn = void(*)(void(*)(void* target,UActorComponent* Component));

using uapi_UWorld_UpdateAllSkyCapturesFn = void(*)(void(*)(void* target));

using uapi_UWorld_UpdateConstraintActorsFn = void(*)(void(*)(void* target));

using uapi_UWorld_UpdateCullDistanceVolumesFn = void(*)(bool(*)(void* target,AActor* ActorToUpdate,UPrimitiveComponent* ComponentToUpdate));

using uapi_UWorld_UpdateLevelStreamingFn = void(*)(void(*)(void* target));

using uapi_UWorld_UpdateParameterCollectionInstancesFn = void(*)(void(*)(void* target,bool bUpdateInstanceUniformBuffers,bool bRecreateUniformBuffer));

using uapi_UWorld_UpdateStreamingLevelPriorityFn = void(*)(void(*)(void* target,ULevelStreaming* StreamingLevel));

using uapi_UWorld_UpdateStreamingLevelShouldBeConsideredFn = void(*)(void(*)(void* target,ULevelStreaming* StreamingLevelToConsider));

using uapi_UWorld_UpdateWorldComponentsFn = void(*)(void(*)(void* target,bool bRerunConstructionScripts,bool bCurrentLevelOnly,FRegisterComponentContext* Context));

using uapi_UWorld_UsesGameHiddenFlagsFn = void(*)(bool(*)(void* target));

using uapi_UWorld_WelcomePlayerFn = void(*)(void(*)(void* target,UNetConnection* Connection));

using uapi_UPrimitiveComponent_AddAngularImpulseInDegreesFn = void(*)(void(*)(void* target,Vector3 Impulse,UName BoneName,bool bVelChange));

using uapi_UPrimitiveComponent_AddAngularImpulseInRadiansFn = void(*)(void(*)(void* target,Vector3 Impulse,UName BoneName,bool bVelChange));

using uapi_UPrimitiveComponent_AddForceFn = void(*)(void(*)(void* target,Vector3 Force,UName BoneName,bool bAccelChange));

using uapi_UPrimitiveComponent_AddForceAtLocationFn = void(*)(void(*)(void* target,Vector3 Force,Vector3 Location,UName BoneName));

using uapi_UPrimitiveComponent_AddForceAtLocationLocalFn = void(*)(void(*)(void* target,Vector3 Force,Vector3 Location,UName BoneName));

using uapi_UPrimitiveComponent_AddImpulseFn = void(*)(void(*)(void* target,Vector3 Impulse,UName BoneName,bool bVelChange));

using uapi_UPrimitiveComponent_AddImpulseAtLocationFn = void(*)(void(*)(void* target,Vector3 Impulse,Vector3 Location,UName BoneName));

using uapi_UPrimitiveComponent_AddTorqueInDegreesFn = void(*)(void(*)(void* target,Vector3 Torque,UName BoneName,bool bAccelChange));

using uapi_UPrimitiveComponent_AddTorqueInRadiansFn = void(*)(void(*)(void* target,Vector3 Torque,UName BoneName,bool bAccelChange));

using uapi_UPrimitiveComponent_AddVelocityChangeImpulseAtLocationFn = void(*)(void(*)(void* target,Vector3 Impulse,Vector3 Location,UName BoneName));

using uapi_UPrimitiveComponent_BeginDestroyFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_BeginPlayFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_CalculateMassFn = void(*)(float(*)(void* target,UName BoneName));

using uapi_UPrimitiveComponent_CanCharacterStepUpFn = void(*)(bool(*)(void* target,APawn* Pawn));

using uapi_UPrimitiveComponent_CanEditChangeFn = void(*)(bool(*)(void* target,FProperty* InProperty));

using uapi_UPrimitiveComponent_CanEditSimulatePhysicsFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_CanSkipGetTextureStreamingRenderAssetInfoFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_CheckForErrorsFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_ClearMoveIgnoreActorsFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_ClearMoveIgnoreComponentsFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_ComputeHashTextureStreamingBuiltDataFn = void(*)(uint32(*)(void* target));

using uapi_UPrimitiveComponent_CreateRenderState_ConcurrentFn = void(*)(void(*)(void* target,FRegisterComponentContext* Context));

using uapi_UPrimitiveComponent_CreateSceneProxyFn = void(*)(void*(*)(void* target));

using uapi_UPrimitiveComponent_DestroyRenderState_ConcurrentFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_DispatchMouseOverEventsFn = void(*)(void(*)(UPrimitiveComponent* CurrentComponent,UPrimitiveComponent* NewComponent));

using uapi_UPrimitiveComponent_FinishDestroyFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_GetAngularDampingFn = void(*)(float(*)(void* target));

using uapi_UPrimitiveComponent_GetBodyInstanceFn = void(*)(void*(*)(void* target,UName BoneName,bool bGetWelded,int32 Index));

using uapi_UPrimitiveComponent_GetBodySetupFn = void(*)(void*(*)(void* target));

using uapi_UPrimitiveComponent_GetCenterOfMassFn = void(*)(Vector3(*)(void* target,UName BoneName));

using uapi_UPrimitiveComponent_GetCollisionObjectTypeFn = void(*)(ECollisionChannel(*)(void* target));

using uapi_UPrimitiveComponent_GetCollisionProfileNameFn = void(*)(UName(*)(void* target));

using uapi_UPrimitiveComponent_GetCollisionShapeFn = void(*)(CollisionShape(*)(void* target,float Inflation));

using uapi_UPrimitiveComponent_GetComponentTransformFromBodyInstanceFn = void(*)(Transform(*)(void* target,FBodyInstance* UseBI));

using uapi_UPrimitiveComponent_GetComponentVelocityFn = void(*)(Vector3(*)(void* target));

using uapi_UPrimitiveComponent_GetCustomPrimitiveDataIndexForScalarParameterFn = void(*)(int32(*)(void* target,UName ParameterName));

using uapi_UPrimitiveComponent_GetCustomPrimitiveDataIndexForVectorParameterFn = void(*)(int32(*)(void* target,UName ParameterName));

using uapi_UPrimitiveComponent_GetDiffuseBoostFn = void(*)(float(*)(void* target,int32 ElementIndex));

using uapi_UPrimitiveComponent_GetEditorMaterialFn = void(*)(void*(*)(void* target,int32 ElementIndex));

using uapi_UPrimitiveComponent_GetEmissiveBoostFn = void(*)(float(*)(void* target,int32 ElementIndex));

using uapi_UPrimitiveComponent_GetGenerateOverlapEventsFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_GetHiddenEditorViewsFn = void(*)(uint64(*)(void* target));

using uapi_UPrimitiveComponent_GetInertiaTensorFn = void(*)(Vector3(*)(void* target,UName BoneName));

using uapi_UPrimitiveComponent_GetLODParentPrimitiveFn = void(*)(void*(*)(void* target));

using uapi_UPrimitiveComponent_GetLastRenderTimeFn = void(*)(float(*)(void* target));

using uapi_UPrimitiveComponent_GetLastRenderTimeOnScreenFn = void(*)(float(*)(void* target));

using uapi_UPrimitiveComponent_GetLevelInstanceEditingStateFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_GetLightAndShadowMapMemoryUsageFn = void(*)(void(*)(void* target,int32& LightMapMemoryUsage,int32& ShadowMapMemoryUsage));

using uapi_UPrimitiveComponent_GetLightMapResolutionFn = void(*)(bool(*)(void* target,int32& Width,int32& Height));

using uapi_UPrimitiveComponent_GetLightingAttachmentRootFn = void(*)(void*(*)(void* target));

using uapi_UPrimitiveComponent_GetLinearDampingFn = void(*)(float(*)(void* target));

using uapi_UPrimitiveComponent_GetMassFn = void(*)(float(*)(void* target));

using uapi_UPrimitiveComponent_GetMassScaleFn = void(*)(float(*)(void* target,UName BoneName));

using uapi_UPrimitiveComponent_GetMaterialFn = void(*)(void*(*)(void* target,int32 ElementIndex));

using uapi_UPrimitiveComponent_GetMaterialFromCollisionFaceIndexFn = void(*)(void*(*)(void* target,int32 FaceIndex,int32& SectionIndex));

using uapi_UPrimitiveComponent_GetNumMaterialsFn = void(*)(int32(*)(void* target));

using uapi_UPrimitiveComponent_GetNumUncachedStaticLightingInteractionsFn = void(*)(int32(*)(void* target));

using uapi_UPrimitiveComponent_GetPhysicsAngularVelocityInDegreesFn = void(*)(Vector3(*)(void* target,UName BoneName));

using uapi_UPrimitiveComponent_GetPhysicsAngularVelocityInRadiansFn = void(*)(Vector3(*)(void* target,UName BoneName));

using uapi_UPrimitiveComponent_GetPhysicsLinearVelocityFn = void(*)(Vector3(*)(void* target,UName BoneName));

using uapi_UPrimitiveComponent_GetPhysicsLinearVelocityAtPointFn = void(*)(Vector3(*)(void* target,Vector3 Point,UName BoneName));

using uapi_UPrimitiveComponent_GetRayTracingGroupIdFn = void(*)(int32(*)(void* target));

using uapi_UPrimitiveComponent_GetShadowIndirectOnlyFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_GetStaticLightMapResolutionFn = void(*)(int32(*)(void* target));

using uapi_UPrimitiveComponent_GetStreamingScaleFn = void(*)(float(*)(void* target));

using uapi_UPrimitiveComponent_GetVirtualTextureMainPassMaxDrawDistanceFn = void(*)(float(*)(void* target));

using uapi_UPrimitiveComponent_HasStaticLightingFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_HasValidPhysicsStateFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_HasValidSettingsForStaticLightingFn = void(*)(bool(*)(void* target,bool bOverlookInvalidComponents));

using uapi_UPrimitiveComponent_IgnoreActorWhenMovingFn = void(*)(void(*)(void* target,AActor* Actor,bool bShouldIgnore));

using uapi_UPrimitiveComponent_IgnoreBoundsForEditorFocusFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_IgnoreComponentWhenMovingFn = void(*)(void(*)(void* target,UPrimitiveComponent* Component,bool bShouldIgnore));

using uapi_UPrimitiveComponent_InvalidateLightingCacheDetailedFn = void(*)(void(*)(void* target,bool bInvalidateBuildEnqueuedLighting,bool bTranslationOnly));

using uapi_UPrimitiveComponent_InvalidateLumenSurfaceCacheFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_IsAnyRigidBodyAwakeFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_IsAttachedToStreamingManagerFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_IsCompilingFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_IsComponentIndividuallySelectedFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_IsEditorOnlyFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_IsGravityEnabledFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_IsNavigationRelevantFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_IsOverlappingActorFn = void(*)(bool(*)(void* target,AActor* Other));

using uapi_UPrimitiveComponent_IsOverlappingComponentFn = void(*)(bool(*)(void* target,UPrimitiveComponent* OtherComp));

using uapi_UPrimitiveComponent_IsReadyForFinishDestroyFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_IsSimulatingPhysicsFn = void(*)(bool(*)(void* target,UName BoneName));

using uapi_UPrimitiveComponent_IsWeldedFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_IsWorldGeometryFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_IsZeroExtentFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_K2_IsCollisionEnabledFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_K2_IsPhysicsCollisionEnabledFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_K2_IsQueryCollisionEnabledFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_NeedsLoadForClientFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_NeedsLoadForServerFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_OnActorEnableCollisionChangedFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_OnAttachmentChangedFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_OnComponentDestroyedFn = void(*)(void(*)(void* target,bool bDestroyingHierarchy));

using uapi_UPrimitiveComponent_OnCreatePhysicsStateFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_OnDestroyPhysicsStateFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_OnRegisterFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_OnUnregisterFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_PostDuplicateFn = void(*)(void(*)(void* target,bool bDuplicateForPIE));

using uapi_UPrimitiveComponent_PostEditImportFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_PostInitPropertiesFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_PostLoadFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_PushEditorVisibilityToProxyFn = void(*)(void(*)(void* target,uint64 InVisibility));

using uapi_UPrimitiveComponent_PushHoveredToProxyFn = void(*)(void(*)(void* target,bool bInHovered));

using uapi_UPrimitiveComponent_PushLevelInstanceEditingStateToProxyFn = void(*)(void(*)(void* target,bool bInEditingState));

using uapi_UPrimitiveComponent_PushSelectionToProxyFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_PutAllRigidBodiesToSleepFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_PutRigidBodyToSleepFn = void(*)(void(*)(void* target,UName BoneName));

using uapi_UPrimitiveComponent_RemapActorTextureStreamingBuiltDataToLevelFn = void(*)(bool(*)(void* target,UActorTextureStreamingBuildDataComponent* InActorTextureBuildData));

using uapi_UPrimitiveComponent_RigidBodyIsAwakeFn = void(*)(bool(*)(void* target,UName BoneName));

using uapi_UPrimitiveComponent_ScaleByMomentOfInertiaFn = void(*)(Vector3(*)(void* target,Vector3 InputVector,UName BoneName));

using uapi_UPrimitiveComponent_SendRenderDebugPhysicsFn = void(*)(void(*)(void* target,FPrimitiveSceneProxy* OverrideSceneProxy));

using uapi_UPrimitiveComponent_SendRenderTransform_ConcurrentFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_SetAllMassScaleFn = void(*)(void(*)(void* target,float InMassScale));

using uapi_UPrimitiveComponent_SetAllPhysicsLinearVelocityFn = void(*)(void(*)(void* target,Vector3 NewVel,bool bAddToCurrent));

using uapi_UPrimitiveComponent_SetAllPhysicsPositionFn = void(*)(void(*)(void* target,Vector3 NewPos));

using uapi_UPrimitiveComponent_SetAllPhysicsRotationFn = void(*)(void(*)(void* target,Rotator NewRot));

using uapi_UPrimitiveComponent_SetAllUseCCDFn = void(*)(void(*)(void* target,bool InUseCCD));

using uapi_UPrimitiveComponent_SetAngularDampingFn = void(*)(void(*)(void* target,float InDamping));

using uapi_UPrimitiveComponent_SetBoundsScaleFn = void(*)(void(*)(void* target,float NewBoundsScale));

using uapi_UPrimitiveComponent_SetCachedMaxDrawDistanceFn = void(*)(void(*)(void* target,float NewCachedMaxDrawDistance));

using uapi_UPrimitiveComponent_SetCastHiddenShadowFn = void(*)(void(*)(void* target,bool NewCastHiddenShadow));

using uapi_UPrimitiveComponent_SetCastShadowFn = void(*)(void(*)(void* target,bool NewCastShadow));

using uapi_UPrimitiveComponent_SetCenterOfMassFn = void(*)(void(*)(void* target,Vector3 CenterOfMassOffset,UName BoneName));

using uapi_UPrimitiveComponent_SetCollisionObjectTypeFn = void(*)(void(*)(void* target,ECollisionChannel Channel));

using uapi_UPrimitiveComponent_SetCollisionProfileNameFn = void(*)(void(*)(void* target,UName InCollisionProfileName,bool bUpdateOverlaps));

using uapi_UPrimitiveComponent_SetCullDistanceFn = void(*)(void(*)(void* target,float NewCullDistance));

using uapi_UPrimitiveComponent_SetCustomDepthStencilValueFn = void(*)(void(*)(void* target,int32 Value));

using uapi_UPrimitiveComponent_SetCustomPrimitiveDataFloatFn = void(*)(void(*)(void* target,int32 DataIndex,float Value));

using uapi_UPrimitiveComponent_SetCustomPrimitiveDataVector2Fn = void(*)(void(*)(void* target,int32 DataIndex,Vector2 Value));

using uapi_UPrimitiveComponent_SetCustomPrimitiveDataVector3Fn = void(*)(void(*)(void* target,int32 DataIndex,Vector3 Value));

using uapi_UPrimitiveComponent_SetCustomPrimitiveDataVector4Fn = void(*)(void(*)(void* target,int32 DataIndex,Vector4 Value));

using uapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataFloatFn = void(*)(void(*)(void* target,int32 DataIndex,float Value));

using uapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector2Fn = void(*)(void(*)(void* target,int32 DataIndex,Vector2 Value));

using uapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector3Fn = void(*)(void(*)(void* target,int32 DataIndex,Vector3 Value));

using uapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector4Fn = void(*)(void(*)(void* target,int32 DataIndex,Vector4 Value));

using uapi_UPrimitiveComponent_SetEmissiveLightSourceFn = void(*)(void(*)(void* target,bool NewEmissiveLightSource));

using uapi_UPrimitiveComponent_SetEnableGravityFn = void(*)(void(*)(void* target,bool bGravityEnabled));

using uapi_UPrimitiveComponent_SetGenerateOverlapEventsFn = void(*)(void(*)(void* target,bool bInGenerateOverlapEvents));

using uapi_UPrimitiveComponent_SetHiddenInSceneCaptureFn = void(*)(void(*)(void* target,bool bValue));

using uapi_UPrimitiveComponent_SetIgnoreBoundsForEditorFocusFn = void(*)(void(*)(void* target,bool bIgnore));

using uapi_UPrimitiveComponent_SetIsBeingMovedByEditorFn = void(*)(void(*)(void* target,bool bNewIsBeingMoved));

using uapi_UPrimitiveComponent_SetLODParentPrimitiveFn = void(*)(void(*)(void* target,UPrimitiveComponent* InLODParentPrimitive));

using uapi_UPrimitiveComponent_SetLastRenderTimeFn = void(*)(void(*)(void* target,float InLastRenderTime));

using uapi_UPrimitiveComponent_SetLightingChannelsFn = void(*)(void(*)(void* target,bool bChannel0,bool bChannel1,bool bChannel2));

using uapi_UPrimitiveComponent_SetLinearDampingFn = void(*)(void(*)(void* target,float InDamping));

using uapi_UPrimitiveComponent_SetMassOverrideInKgFn = void(*)(void(*)(void* target,UName BoneName,float MassInKg,bool bOverrideMass));

using uapi_UPrimitiveComponent_SetMassScaleFn = void(*)(void(*)(void* target,UName BoneName,float InMassScale));

using uapi_UPrimitiveComponent_SetMaterialFn = void(*)(void(*)(void* target,int32 ElementIndex,UMaterialInterface* Material));

using uapi_UPrimitiveComponent_SetMaterialByNameFn = void(*)(void(*)(void* target,UName MaterialSlotName,UMaterialInterface* Material));

using uapi_UPrimitiveComponent_SetNotifyRigidBodyCollisionFn = void(*)(void(*)(void* target,bool bNewNotifyRigidBodyCollision));

using uapi_UPrimitiveComponent_SetOnlyOwnerSeeFn = void(*)(void(*)(void* target,bool bNewOnlyOwnerSee));

using uapi_UPrimitiveComponent_SetOwnerNoSeeFn = void(*)(void(*)(void* target,bool bNewOwnerNoSee));

using uapi_UPrimitiveComponent_SetPhysMaterialOverrideFn = void(*)(void(*)(void* target,UPhysicalMaterial* NewPhysMaterial));

using uapi_UPrimitiveComponent_SetPhysicsAngularVelocityInDegreesFn = void(*)(void(*)(void* target,Vector3 NewAngVel,bool bAddToCurrent,UName BoneName));

using uapi_UPrimitiveComponent_SetPhysicsAngularVelocityInRadiansFn = void(*)(void(*)(void* target,Vector3 NewAngVel,bool bAddToCurrent,UName BoneName));

using uapi_UPrimitiveComponent_SetPhysicsLinearVelocityFn = void(*)(void(*)(void* target,Vector3 NewVel,bool bAddToCurrent,UName BoneName));

using uapi_UPrimitiveComponent_SetPhysicsMaxAngularVelocityInDegreesFn = void(*)(void(*)(void* target,float NewMaxAngVel,bool bAddToCurrent,UName BoneName));

using uapi_UPrimitiveComponent_SetPhysicsMaxAngularVelocityInRadiansFn = void(*)(void(*)(void* target,float NewMaxAngVel,bool bAddToCurrent,UName BoneName));

using uapi_UPrimitiveComponent_SetReceivesDecalsFn = void(*)(void(*)(void* target,bool bNewReceivesDecals));

using uapi_UPrimitiveComponent_SetRenderCustomDepthFn = void(*)(void(*)(void* target,bool bValue));

using uapi_UPrimitiveComponent_SetRenderInDepthPassFn = void(*)(void(*)(void* target,bool bValue));

using uapi_UPrimitiveComponent_SetRenderInMainPassFn = void(*)(void(*)(void* target,bool bValue));

using uapi_UPrimitiveComponent_SetScalarParameterForCustomPrimitiveDataFn = void(*)(void(*)(void* target,UName ParameterName,float Value));

using uapi_UPrimitiveComponent_SetScalarParameterForDefaultCustomPrimitiveDataFn = void(*)(void(*)(void* target,UName ParameterName,float Value));

using uapi_UPrimitiveComponent_SetSimulatePhysicsFn = void(*)(void(*)(void* target,bool bSimulate));

using uapi_UPrimitiveComponent_SetSingleSampleShadowFromStationaryLightsFn = void(*)(void(*)(void* target,bool bNewSingleSampleShadowFromStationaryLights));

using uapi_UPrimitiveComponent_SetTranslucencySortDistanceOffsetFn = void(*)(void(*)(void* target,float NewTranslucencySortDistanceOffset));

using uapi_UPrimitiveComponent_SetTranslucentSortPriorityFn = void(*)(void(*)(void* target,int32 NewTranslucentSortPriority));

using uapi_UPrimitiveComponent_SetUseCCDFn = void(*)(void(*)(void* target,bool InUseCCD,UName BoneName));

using uapi_UPrimitiveComponent_SetVectorParameterForCustomPrimitiveDataFn = void(*)(void(*)(void* target,UName ParameterName,Vector4 Value));

using uapi_UPrimitiveComponent_SetVectorParameterForDefaultCustomPrimitiveDataFn = void(*)(void(*)(void* target,UName ParameterName,Vector4 Value));

using uapi_UPrimitiveComponent_SetVisibleInRayTracingFn = void(*)(void(*)(void* target,bool bNewVisibleInRayTracing));

using uapi_UPrimitiveComponent_SetVisibleInSceneCaptureOnlyFn = void(*)(void(*)(void* target,bool bValue));

using uapi_UPrimitiveComponent_ShouldComponentAddToSceneFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_ShouldCreatePhysicsStateFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_ShouldGenerateAutoLODFn = void(*)(bool(*)(void* target,int32 HierarchicalLevelIndex));

using uapi_UPrimitiveComponent_ShouldRecreateProxyOnUpdateTransformFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_ShouldRenderSelectedFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_SupportsWorldPositionOffsetVelocityFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_SyncComponentToRBPhysicsFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_UnWeldChildrenFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_UnWeldFromParentFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_UpdateBoundsFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_UpdateCollisionProfileFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_UpdateOcclusionBoundsSlackFn = void(*)(void(*)(void* target,float NewSlack));

using uapi_UPrimitiveComponent_UpdateOverlapsImplFn = void(*)(bool(*)(void* target,TOverlapArrayView* NewPendingOverlaps,bool bDoNotifies,TOverlapArrayView* OverlapsAtEndLocation));

using uapi_UPrimitiveComponent_UpdatePhysicsVolumeFn = void(*)(void(*)(void* target,bool bTriggerNotifiers));

using uapi_UPrimitiveComponent_UsesOnlyUnlitMaterialsFn = void(*)(bool(*)(void* target));

using uapi_UPrimitiveComponent_WakeAllRigidBodiesFn = void(*)(void(*)(void* target));

using uapi_UPrimitiveComponent_WakeRigidBodyFn = void(*)(void(*)(void* target,UName BoneName));

using uapi_UPrimitiveComponent_WasRecentlyRenderedFn = void(*)(bool(*)(void* target,float Tolerance));

using uapi_UPrimitiveComponent_WeldToFn = void(*)(void(*)(void* target,USceneComponent* InParent,UName InSocketName));

using uapi_UPrimitiveComponent_WeldToImplementationFn = void(*)(bool(*)(void* target,USceneComponent* InParent,UName ParentSocketName,bool bWeldSimulatedChild));

using uapi_UAnimInstance_AddExternalNotifyHandlerFn = void(*)(void(*)(void* target,UObject* ExternalHandlerObject,UName NotifyEventName));

using uapi_UAnimInstance_BeginDestroyFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_BlueprintBeginPlayFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_BlueprintInitializeAnimationFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_BlueprintLinkedAnimationLayersInitializedFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_BlueprintPostEvaluateAnimationFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_BlueprintThreadSafeUpdateAnimationFn = void(*)(void(*)(void* target,float DeltaTime));

using uapi_UAnimInstance_BlueprintUpdateAnimationFn = void(*)(void(*)(void* target,float DeltaTimeX));

using uapi_UAnimInstance_CanRunParallelWorkFn = void(*)(bool(*)(void* target));

using uapi_UAnimInstance_CanTransitionSignatureFn = void(*)(bool(*)(void* target));

using uapi_UAnimInstance_ClearAllTransitionEventsFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_ClearMorphTargetsFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_ClearTransitionEventsFn = void(*)(void(*)(void* target,UName EventName));

using uapi_UAnimInstance_CopyCurveValuesFn = void(*)(void(*)(void* target,UAnimInstance* InSourceInstance));

using uapi_UAnimInstance_DispatchQueuedAnimEventsFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_EndNotifyStatesFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_GetActiveInstanceForMontageFn = void(*)(void*(*)(void* target,UAnimMontage* Montage));

using uapi_UAnimInstance_GetActiveMontageInstanceFn = void(*)(void*(*)(void* target));

using uapi_UAnimInstance_GetCurrentActiveMontageFn = void(*)(void*(*)(void* target));

using uapi_UAnimInstance_GetCurrentStateNameFn = void(*)(UName(*)(void* target,int32 MachineIndex));

using uapi_UAnimInstance_GetCurveValueFn = void(*)(float(*)(void* target,UName CurveName));

using uapi_UAnimInstance_GetCurveValue2Fn = void(*)(bool(*)(void* target,UName CurveName,float& OutValue));

using uapi_UAnimInstance_GetCurveValueWithDefaultFn = void(*)(bool(*)(void* target,UName CurveName,float DefaultValue,float& OutValue));

using uapi_UAnimInstance_GetDeltaSecondsFn = void(*)(float(*)(void* target));

using uapi_UAnimInstance_GetInstanceAssetPlayerIndexFn = void(*)(int32(*)(void* target,UName MachineName,UName StateName,UName InstanceName));

using uapi_UAnimInstance_GetInstanceAssetPlayerLengthFn = void(*)(float(*)(void* target,int32 AssetPlayerIndex));

using uapi_UAnimInstance_GetInstanceAssetPlayerTimeFn = void(*)(float(*)(void* target,int32 AssetPlayerIndex));

using uapi_UAnimInstance_GetInstanceAssetPlayerTimeFractionFn = void(*)(float(*)(void* target,int32 AssetPlayerIndex));

using uapi_UAnimInstance_GetInstanceAssetPlayerTimeFromEndFn = void(*)(float(*)(void* target,int32 AssetPlayerIndex));

using uapi_UAnimInstance_GetInstanceAssetPlayerTimeFromEndFractionFn = void(*)(float(*)(void* target,int32 AssetPlayerIndex));

using uapi_UAnimInstance_GetInstanceCurrentStateElapsedTimeFn = void(*)(float(*)(void* target,int32 MachineIndex));

using uapi_UAnimInstance_GetInstanceMachineWeightFn = void(*)(float(*)(void* target,int32 MachineIndex));

using uapi_UAnimInstance_GetInstanceStateWeightFn = void(*)(float(*)(void* target,int32 MachineIndex,int32 StateIndex));

using uapi_UAnimInstance_GetInstanceTransitionCrossfadeDurationFn = void(*)(float(*)(void* target,int32 MachineIndex,int32 TransitionIndex));

using uapi_UAnimInstance_GetInstanceTransitionTimeElapsedFn = void(*)(float(*)(void* target,int32 MachineIndex,int32 TransitionIndex));

using uapi_UAnimInstance_GetInstanceTransitionTimeElapsedFractionFn = void(*)(float(*)(void* target,int32 MachineIndex,int32 TransitionIndex));

using uapi_UAnimInstance_GetLODLevelFn = void(*)(int32(*)(void* target));

using uapi_UAnimInstance_GetLinkedAnimGraphInstanceByTagFn = void(*)(void*(*)(void* target,UName InTag));

using uapi_UAnimInstance_GetLinkedAnimLayerInstanceByGroupFn = void(*)(void*(*)(void* target,UName InGroup));

using uapi_UAnimInstance_GetLinkedInputPoseNodeFn = void(*)(void*(*)(void* target,UName InSubInput,UName InGraph));

using uapi_UAnimInstance_GetMachineDescriptionFn = void(*)(void*(*)(void* target,IAnimClassInterface* AnimBlueprintClass,FAnimNode_StateMachine* MachineInstance));

using uapi_UAnimInstance_GetMontageInstanceForIDFn = void(*)(void*(*)(void* target,int32 MontageInstanceID));

using uapi_UAnimInstance_GetOwningActorFn = void(*)(void*(*)(void* target));

using uapi_UAnimInstance_GetOwningComponentFn = void(*)(void*(*)(void* target));

using uapi_UAnimInstance_GetPoseSnapshotFn = void(*)(void*(*)(void* target,UName SnapshotName));

using uapi_UAnimInstance_GetPropagateNotifiesToLinkedInstancesFn = void(*)(bool(*)(void* target));

using uapi_UAnimInstance_GetReceiveNotifiesFromLinkedInstancesFn = void(*)(bool(*)(void* target));

using uapi_UAnimInstance_GetRelevantAnimLengthFn = void(*)(float(*)(void* target,int32 MachineIndex,int32 StateIndex));

using uapi_UAnimInstance_GetRelevantAnimTimeFn = void(*)(float(*)(void* target,int32 MachineIndex,int32 StateIndex));

using uapi_UAnimInstance_GetRelevantAnimTimeFractionFn = void(*)(float(*)(void* target,int32 MachineIndex,int32 StateIndex));

using uapi_UAnimInstance_GetRelevantAnimTimeRemainingFn = void(*)(float(*)(void* target,int32 MachineIndex,int32 StateIndex));

using uapi_UAnimInstance_GetRelevantAnimTimeRemainingFractionFn = void(*)(float(*)(void* target,int32 MachineIndex,int32 StateIndex));

using uapi_UAnimInstance_GetRootMotionMontageInstanceFn = void(*)(void*(*)(void* target));

using uapi_UAnimInstance_GetSkelMeshComponentFn = void(*)(void*(*)(void* target));

using uapi_UAnimInstance_GetStateMachineIndexFn = void(*)(int32(*)(void* target,UName MachineName));

using uapi_UAnimInstance_GetStateMachineInstanceFn = void(*)(void*(*)(void* target,int32 MachineIndex));

using uapi_UAnimInstance_GetStateMachineInstanceDescFn = void(*)(void*(*)(void* target,UName MachineName));

using uapi_UAnimInstance_GetStateMachineInstanceFromNameFn = void(*)(void*(*)(void* target,UName MachineName));

using uapi_UAnimInstance_GetSyncGroupIndexFromNameFn = void(*)(int32(*)(void* target,UName SyncGroupName));

using uapi_UAnimInstance_GetTimeToClosestMarkerFn = void(*)(bool(*)(void* target,UName SyncGroup,UName MarkerName,float& OutMarkerTime));

using uapi_UAnimInstance_GetWorldFn = void(*)(void*(*)(void* target));

using uapi_UAnimInstance_HasActiveCurvesFn = void(*)(bool(*)(void* target));

using uapi_UAnimInstance_HasMarkerBeenHitThisFrameFn = void(*)(bool(*)(void* target,UName SyncGroup,UName MarkerName));

using uapi_UAnimInstance_HasMorphTargetCurvesFn = void(*)(bool(*)(void* target));

using uapi_UAnimInstance_InitializeAnimationFn = void(*)(void(*)(void* target,bool bInDeferRootNodeInitialization));

using uapi_UAnimInstance_InitializeGroupedLayersFn = void(*)(void(*)(void* target,bool bInDeferSubGraphInitialization));

using uapi_UAnimInstance_IsAnyMontagePlayingFn = void(*)(bool(*)(void* target));

using uapi_UAnimInstance_IsBeingDebuggedFn = void(*)(bool(*)(void* target));

using uapi_UAnimInstance_IsPlayingSlotAnimationFn = void(*)(bool(*)(void* target,UAnimSequenceBase* Asset,UName SlotNodeName));

using uapi_UAnimInstance_IsPostUpdatingAnimationFn = void(*)(bool(*)(void* target));

using uapi_UAnimInstance_IsRunningParallelEvaluationFn = void(*)(bool(*)(void* target));

using uapi_UAnimInstance_IsSyncGroupBetweenMarkersFn = void(*)(bool(*)(void* target,UName InSyncGroupName,UName PreviousMarker,UName NextMarker,bool bRespectMarkerOrder));

using uapi_UAnimInstance_IsUpdatingAnimationFn = void(*)(bool(*)(void* target));

using uapi_UAnimInstance_IsUsingMainInstanceMontageEvaluationDataFn = void(*)(bool(*)(void* target));

using uapi_UAnimInstance_LockAIResourcesFn = void(*)(void(*)(void* target,bool bLockMovement,bool LockAILogic));

using uapi_UAnimInstance_MontageSync_FollowFn = void(*)(void(*)(void* target,UAnimMontage* MontageFollower,UAnimInstance* OtherAnimInstance,UAnimMontage* MontageLeader));

using uapi_UAnimInstance_MontageSync_StopFollowingFn = void(*)(void(*)(void* target,UAnimMontage* MontageFollower));

using uapi_UAnimInstance_Montage_GetBlendTimeFn = void(*)(float(*)(void* target,UAnimMontage* Montage));

using uapi_UAnimInstance_Montage_GetBlendingOutDelegateFn = void(*)(void*(*)(void* target,UAnimMontage* Montage));

using uapi_UAnimInstance_Montage_GetCurrentSectionFn = void(*)(UName(*)(void* target,UAnimMontage* Montage));

using uapi_UAnimInstance_Montage_GetIsStoppedFn = void(*)(bool(*)(void* target,UAnimMontage* Montage));

using uapi_UAnimInstance_Montage_GetPlayRateFn = void(*)(float(*)(void* target,UAnimMontage* Montage));

using uapi_UAnimInstance_Montage_GetPositionFn = void(*)(float(*)(void* target,UAnimMontage* Montage));

using uapi_UAnimInstance_Montage_IsActiveFn = void(*)(bool(*)(void* target,UAnimMontage* Montage));

using uapi_UAnimInstance_Montage_IsPlayingFn = void(*)(bool(*)(void* target,UAnimMontage* Montage));

using uapi_UAnimInstance_Montage_JumpToSectionFn = void(*)(void(*)(void* target,UName SectionName,UAnimMontage* Montage));

using uapi_UAnimInstance_Montage_JumpToSectionsEndFn = void(*)(void(*)(void* target,UName SectionName,UAnimMontage* Montage));

using uapi_UAnimInstance_Montage_PauseFn = void(*)(void(*)(void* target,UAnimMontage* Montage));

using uapi_UAnimInstance_Montage_PlayFn = void(*)(float(*)(void* target,UAnimMontage* MontageToPlay,float InPlayRate,EMontagePlayReturnType ReturnValueType,float InTimeToStartMontageAt,bool bStopAllMontages));

using uapi_UAnimInstance_Montage_ResumeFn = void(*)(void(*)(void* target,UAnimMontage* Montage));

using uapi_UAnimInstance_Montage_SetNextSectionFn = void(*)(void(*)(void* target,UName SectionNameToChange,UName NextSection,UAnimMontage* Montage));

using uapi_UAnimInstance_Montage_SetPlayRateFn = void(*)(void(*)(void* target,UAnimMontage* Montage,float NewPlayRate));

using uapi_UAnimInstance_Montage_SetPositionFn = void(*)(void(*)(void* target,UAnimMontage* Montage,float NewPosition));

using uapi_UAnimInstance_Montage_StopFn = void(*)(void(*)(void* target,float InBlendOutTime,UAnimMontage* Montage));

using uapi_UAnimInstance_Montage_StopGroupByNameFn = void(*)(void(*)(void* target,float InBlendOutTime,UName GroupName));

using uapi_UAnimInstance_NativeBeginPlayFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_NativeInitializeAnimationFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_NativePostEvaluateAnimationFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_NativeThreadSafeUpdateAnimationFn = void(*)(void(*)(void* target,float DeltaSeconds));

using uapi_UAnimInstance_NativeUninitializeAnimationFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_NativeUpdateAnimationFn = void(*)(void(*)(void* target,float DeltaSeconds));

using uapi_UAnimInstance_NeedsUpdateFn = void(*)(bool(*)(void* target));

using uapi_UAnimInstance_OnUROSkipTickAnimationFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_PCV_ShouldNotifyAboutNodesNotUsingFastPathFn = void(*)(bool(*)(void* target));

using uapi_UAnimInstance_PCV_ShouldWarnAboutNodesNotUsingFastPathFn = void(*)(bool(*)(void* target));

using uapi_UAnimInstance_ParallelCanEvaluateFn = void(*)(bool(*)(void* target,USkeletalMesh* InSkeletalMesh));

using uapi_UAnimInstance_ParallelUpdateAnimationFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_PlaySlotAnimationAsDynamicMontageFn = void(*)(void*(*)(void* target,UAnimSequenceBase* Asset,UName SlotNodeName,float BlendInTime,float BlendOutTime,float InPlayRate,int32 LoopCount,float BlendOutTriggerTime,float InTimeToStartMontageAt));

using uapi_UAnimInstance_PostEvaluateAnimationFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_PostInitPropertiesFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_PostUpdateAnimationFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_PreEvaluateAnimationFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_PreUpdateLinkedInstancesFn = void(*)(void(*)(void* target,float DeltaSeconds));

using uapi_UAnimInstance_QueryAndMarkTransitionEventFn = void(*)(bool(*)(void* target,int32 MachineIndex,int32 TransitionIndex,UName EventName));

using uapi_UAnimInstance_QueryTransitionEventFn = void(*)(bool(*)(void* target,int32 MachineIndex,int32 TransitionIndex,UName EventName));

using uapi_UAnimInstance_RecalcRequiredBonesFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_RecordMachineWeightFn = void(*)(void(*)(void* target,int32 InMachineClassIndex,float InMachineWeight));

using uapi_UAnimInstance_RecordStateWeightFn = void(*)(void(*)(void* target,int32 InMachineClassIndex,int32 InStateIndex,float InStateWeight,float InElapsedTime));

using uapi_UAnimInstance_RefreshCurvesFn = void(*)(void(*)(void* target,USkeletalMeshComponent* Component));

using uapi_UAnimInstance_RemoveExternalNotifyHandlerFn = void(*)(void(*)(void* target,UObject* ExternalHandlerObject,UName NotifyEventName));

using uapi_UAnimInstance_RemovePoseSnapshotFn = void(*)(void(*)(void* target,UName SnapshotName));

using uapi_UAnimInstance_RequestMontageInertializationFn = void(*)(void(*)(void* target,UAnimMontage* Montage,float Duration,UBlendProfile* BlendProfile));

using uapi_UAnimInstance_RequestSlotGroupInertializationFn = void(*)(void(*)(void* target,UName InSlotGroupName,float Duration,UBlendProfile* BlendProfile));

using uapi_UAnimInstance_SavePoseSnapshotFn = void(*)(void(*)(void* target,UName SnapshotName));

using uapi_UAnimInstance_SetMorphTargetFn = void(*)(void(*)(void* target,UName MorphTargetName,float Value));

using uapi_UAnimInstance_SetPropagateNotifiesToLinkedInstancesFn = void(*)(void(*)(void* target,bool bSet));

using uapi_UAnimInstance_SetReceiveNotifiesFromLinkedInstancesFn = void(*)(void(*)(void* target,bool bSet));

using uapi_UAnimInstance_SetUseMainInstanceMontageEvaluationDataFn = void(*)(void(*)(void* target,bool bSet));

using uapi_UAnimInstance_ShouldExtractRootMotionFn = void(*)(bool(*)(void* target));

using uapi_UAnimInstance_ShouldTriggerAnimNotifyStateFn = void(*)(bool(*)(void* target,UAnimNotifyState* AnimNotifyState));

using uapi_UAnimInstance_StopAllMontagesFn = void(*)(void(*)(void* target,float BlendOut));

using uapi_UAnimInstance_StopSlotAnimationFn = void(*)(void(*)(void* target,float InBlendOutTime,UName SlotNodeName));

using uapi_UAnimInstance_TriggerAnimNotifiesFn = void(*)(void(*)(void* target,float DeltaSeconds));

using uapi_UAnimInstance_TriggerSingleAnimNotifyFn = void(*)(void(*)(void* target,FAnimNotifyEvent* AnimNotifyEvent));

using uapi_UAnimInstance_TryGetPawnOwnerFn = void(*)(void*(*)(void* target));

using uapi_UAnimInstance_UninitializeAnimationFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_UnlockAIResourcesFn = void(*)(void(*)(void* target,bool bUnlockMovement,bool UnlockAILogic));

using uapi_UAnimInstance_UpdateCurvesPostEvaluationFn = void(*)(void(*)(void* target));

using uapi_UAnimInstance_WasAnimNotifyNameTriggeredInAnyStateFn = void(*)(bool(*)(void* target,UName NotifyName));

using uapi_UAnimInstance_WasAnimNotifyNameTriggeredInSourceStateFn = void(*)(bool(*)(void* target,int32 MachineIndex,int32 StateIndex,UName NotifyName));

using uapi_UAnimInstance_WasAnimNotifyNameTriggeredInStateMachineFn = void(*)(bool(*)(void* target,int32 MachineIndex,UName NotifyName));

using uapi_UKismetSystemLibrary_CancelTransactionFn = void(*)(void(*)(int32 Index));

using uapi_UKismetSystemLibrary_CollectGarbageFn = void(*)(void(*)());

using uapi_UKismetSystemLibrary_ControlScreensaverFn = void(*)(void(*)(bool bAllowScreenSaver));

using uapi_UKismetSystemLibrary_CreateCopyForUndoBufferFn = void(*)(void(*)(UObject* ObjectToModify));

using uapi_UKismetSystemLibrary_DrawDebugCoordinateSystemFn = void(*)(void(*)(UObject* WorldContextObject,Vector3 AxisLoc,Rotator AxisRot,float Scale,float Duration,float Thickness));

using uapi_UKismetSystemLibrary_EndTransactionFn = void(*)(int32(*)());

using uapi_UKismetSystemLibrary_FlushDebugStringsFn = void(*)(void(*)(UObject* WorldContextObject));

using uapi_UKismetSystemLibrary_FlushPersistentDebugLinesFn = void(*)(void(*)(UObject* WorldContextObject));

using uapi_UKismetSystemLibrary_ForceCloseAdBannerFn = void(*)(void(*)());

using uapi_UKismetSystemLibrary_Generic_GetEditorPropertyFn = void(*)(bool(*)(UObject* Object,FProperty* ObjectProp,void* ValuePtr,FProperty* ValueProp));

using uapi_UKismetSystemLibrary_Generic_SetStructurePropertyByNameFn = void(*)(void(*)(UObject* OwnerObject,UName StructPropertyName,void* SrcStructAddr));

using uapi_UKismetSystemLibrary_GetAdIDCountFn = void(*)(int32(*)());

using uapi_UKismetSystemLibrary_GetBuildConfigurationFn = void(*)(const char*(*)());

using uapi_UKismetSystemLibrary_GetBuildVersionFn = void(*)(const char*(*)());

using uapi_UKismetSystemLibrary_GetClassDisplayNameFn = void(*)(const char*(*)(UClass* arg0));

using uapi_UKismetSystemLibrary_GetCommandLineFn = void(*)(const char*(*)());

using uapi_UKismetSystemLibrary_GetDefaultLanguageFn = void(*)(const char*(*)());

using uapi_UKismetSystemLibrary_GetDefaultLocaleFn = void(*)(const char*(*)());

using uapi_UKismetSystemLibrary_GetDeviceIdFn = void(*)(const char*(*)());

using uapi_UKismetSystemLibrary_GetDisplayNameFn = void(*)(const char*(*)(UObject* Object));

using uapi_UKismetSystemLibrary_GetEditorPropertyFn = void(*)(bool(*)(UObject* Object,UName PropertyName,int32& PropertyValue));

using uapi_UKismetSystemLibrary_GetEngineVersionFn = void(*)(const char*(*)());

using uapi_UKismetSystemLibrary_GetFrameCountFn = void(*)(int64(*)());

using uapi_UKismetSystemLibrary_GetGameBundleIdFn = void(*)(const char*(*)());

using uapi_UKismetSystemLibrary_GetGameNameFn = void(*)(const char*(*)());

using uapi_UKismetSystemLibrary_GetGameTimeInSecondsFn = void(*)(double(*)(UObject* WorldContextObject));

using uapi_UKismetSystemLibrary_GetGamepadControllerNameFn = void(*)(const char*(*)(int32 ControllerId));

using uapi_UKismetSystemLibrary_GetLocalCurrencyCodeFn = void(*)(const char*(*)());

using uapi_UKismetSystemLibrary_GetLocalCurrencySymbolFn = void(*)(const char*(*)());

using uapi_UKismetSystemLibrary_GetMinYResolutionFor3DViewFn = void(*)(int32(*)());

using uapi_UKismetSystemLibrary_GetMinYResolutionForUIFn = void(*)(int32(*)());

using uapi_UKismetSystemLibrary_GetObjectNameFn = void(*)(const char*(*)(UObject* Object));

using uapi_UKismetSystemLibrary_GetOuterObjectFn = void(*)(void*(*)(UObject* Object));

using uapi_UKismetSystemLibrary_GetPathNameFn = void(*)(const char*(*)(UObject* Object));

using uapi_UKismetSystemLibrary_GetPlatformUserDirFn = void(*)(const char*(*)());

using uapi_UKismetSystemLibrary_GetPlatformUserNameFn = void(*)(const char*(*)());

using uapi_UKismetSystemLibrary_GetProjectContentDirectoryFn = void(*)(const char*(*)());

using uapi_UKismetSystemLibrary_GetProjectDirectoryFn = void(*)(const char*(*)());

using uapi_UKismetSystemLibrary_GetProjectSavedDirectoryFn = void(*)(const char*(*)());

using uapi_UKismetSystemLibrary_GetRenderingDetailModeFn = void(*)(int32(*)());

using uapi_UKismetSystemLibrary_GetRenderingMaterialQualityLevelFn = void(*)(int32(*)());

using uapi_UKismetSystemLibrary_GetSystemPathFn = void(*)(const char*(*)(UObject* Object));

using uapi_UKismetSystemLibrary_GetUniqueDeviceIdFn = void(*)(const char*(*)());

using uapi_UKismetSystemLibrary_GetVolumeButtonsHandledBySystemFn = void(*)(bool(*)());

using uapi_UKismetSystemLibrary_HasMultipleLocalPlayersFn = void(*)(bool(*)(UObject* WorldContextObject));

using uapi_UKismetSystemLibrary_HideAdBannerFn = void(*)(void(*)());

using uapi_UKismetSystemLibrary_IsControllerAssignedToGamepadFn = void(*)(bool(*)(int32 ControllerId));

using uapi_UKismetSystemLibrary_IsDedicatedServerFn = void(*)(bool(*)(UObject* WorldContextObject));

using uapi_UKismetSystemLibrary_IsInterstitialAdAvailableFn = void(*)(bool(*)());

using uapi_UKismetSystemLibrary_IsInterstitialAdRequestedFn = void(*)(bool(*)());

using uapi_UKismetSystemLibrary_IsLoggedInFn = void(*)(bool(*)(APlayerController* SpecificPlayer));

using uapi_UKismetSystemLibrary_IsPackagedForDistributionFn = void(*)(bool(*)());

using uapi_UKismetSystemLibrary_IsScreensaverEnabledFn = void(*)(bool(*)());

using uapi_UKismetSystemLibrary_IsServerFn = void(*)(bool(*)(UObject* WorldContextObject));

using uapi_UKismetSystemLibrary_IsStandaloneFn = void(*)(bool(*)(UObject* WorldContextObject));

using uapi_UKismetSystemLibrary_IsUnattendedFn = void(*)(bool(*)());

using uapi_UKismetSystemLibrary_K2_ClearTimerFn = void(*)(void(*)(UObject* Object,NativeString FunctionName));

using uapi_UKismetSystemLibrary_K2_GetTimerElapsedTimeFn = void(*)(float(*)(UObject* Object,NativeString FunctionName));

using uapi_UKismetSystemLibrary_K2_GetTimerRemainingTimeFn = void(*)(float(*)(UObject* Object,NativeString FunctionName));

using uapi_UKismetSystemLibrary_K2_IsTimerActiveFn = void(*)(bool(*)(UObject* Object,NativeString FunctionName));

using uapi_UKismetSystemLibrary_K2_IsTimerPausedFn = void(*)(bool(*)(UObject* Object,NativeString FunctionName));

using uapi_UKismetSystemLibrary_K2_PauseTimerFn = void(*)(void(*)(UObject* Object,NativeString FunctionName));

using uapi_UKismetSystemLibrary_K2_TimerExistsFn = void(*)(bool(*)(UObject* Object,NativeString FunctionName));

using uapi_UKismetSystemLibrary_K2_UnPauseTimerFn = void(*)(void(*)(UObject* Object,NativeString FunctionName));

using uapi_UKismetSystemLibrary_LoadInterstitialAdFn = void(*)(void(*)(int32 AdIdIndex));

using uapi_UKismetSystemLibrary_MakeLiteralBoolFn = void(*)(bool(*)(bool Value));

using uapi_UKismetSystemLibrary_MakeLiteralByteFn = void(*)(uint8(*)(uint8 Value));

using uapi_UKismetSystemLibrary_MakeLiteralDoubleFn = void(*)(double(*)(double Value));

using uapi_UKismetSystemLibrary_MakeLiteralIntFn = void(*)(int32(*)(int32 Value));

using uapi_UKismetSystemLibrary_MakeLiteralInt64Fn = void(*)(int64(*)(int64 Value));

using uapi_UKismetSystemLibrary_MakeLiteralNameFn = void(*)(UName(*)(UName Value));

using uapi_UKismetSystemLibrary_MakeLiteralStringFn = void(*)(const char*(*)(NativeString Value));

using uapi_UKismetSystemLibrary_MakeLiteralTextFn = void(*)(const char*(*)(NativeString Value));

using uapi_UKismetSystemLibrary_QuitEditorFn = void(*)(void(*)());

using uapi_UKismetSystemLibrary_RegisterForRemoteNotificationsFn = void(*)(void(*)());

using uapi_UKismetSystemLibrary_ResetGamepadAssignmentToControllerFn = void(*)(void(*)(int32 ControllerId));

using uapi_UKismetSystemLibrary_ResetGamepadAssignmentsFn = void(*)(void(*)());

using uapi_UKismetSystemLibrary_SetBoolPropertyByNameFn = void(*)(void(*)(UObject* Object,UName PropertyName,bool Value));

using uapi_UKismetSystemLibrary_SetBytePropertyByNameFn = void(*)(void(*)(UObject* Object,UName PropertyName,uint8 Value));

using uapi_UKismetSystemLibrary_SetDoublePropertyByNameFn = void(*)(void(*)(UObject* Object,UName PropertyName,double Value));

using uapi_UKismetSystemLibrary_SetGamepadsBlockDeviceFeedbackFn = void(*)(void(*)(bool bBlock));

using uapi_UKismetSystemLibrary_SetInt64PropertyByNameFn = void(*)(void(*)(UObject* Object,UName PropertyName,int64 Value));

using uapi_UKismetSystemLibrary_SetIntPropertyByNameFn = void(*)(void(*)(UObject* Object,UName PropertyName,int32 Value));

using uapi_UKismetSystemLibrary_SetObjectPropertyByNameFn = void(*)(void(*)(UObject* Object,UName PropertyName,UObject* Value));

using uapi_UKismetSystemLibrary_SetSuppressViewportTransitionMessageFn = void(*)(void(*)(UObject* WorldContextObject,bool bState));

using uapi_UKismetSystemLibrary_SetVolumeButtonsHandledBySystemFn = void(*)(void(*)(bool bEnabled));

using uapi_UKismetSystemLibrary_ShowAdBannerFn = void(*)(void(*)(int32 AdIdIndex,bool bShowOnBottomOfScreen));

using uapi_UKismetSystemLibrary_ShowInterstitialAdFn = void(*)(void(*)());

using uapi_UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreenFn = void(*)(void(*)(APlayerController* SpecificPlayer));

using uapi_UKismetSystemLibrary_SnapshotObjectFn = void(*)(void(*)(UObject* Object));

using uapi_UKismetSystemLibrary_TransactObjectFn = void(*)(void(*)(UObject* Object));

using uapi_UKismetSystemLibrary_UnregisterForRemoteNotificationsFn = void(*)(void(*)());

using uapi_UAnimMontage_AddAnimCompositeSectionFn = void(*)(int32(*)(void* target,UName InSectionName,float StartPos));

using uapi_UAnimMontage_CalculateSequenceLengthFn = void(*)(float(*)(void* target));

using uapi_UAnimMontage_CanBeUsedInCompositionFn = void(*)(bool(*)(void* target));

using uapi_UAnimMontage_CanUseMarkerSyncFn = void(*)(bool(*)(void* target));

using uapi_UAnimMontage_CreateSlotAnimationAsDynamicMontageFn = void(*)(void*(*)(UAnimSequenceBase* Asset,UName SlotNodeName,float BlendInTime,float BlendOutTime,float InPlayRate,int32 LoopCount,float BlendOutTriggerTime,float InTimeToStartMontageAt));

using uapi_UAnimMontage_DeleteAnimCompositeSectionFn = void(*)(bool(*)(void* target,int32 SectionIndex));

using uapi_UAnimMontage_ExtractRootMotionFromTrackRangeFn = void(*)(Transform(*)(void* target,float StartTrackPosition,float EndTrackPosition));

using uapi_UAnimMontage_GetAnimCompositeSectionIndexFromPosFn = void(*)(int32(*)(void* target,float CurrentTime,float& PosWithinCompositeSection));

using uapi_UAnimMontage_GetAnimationDataFn = void(*)(void*(*)(void* target,UName SlotName));

using uapi_UAnimMontage_GetDefaultBlendInTimeFn = void(*)(float(*)(void* target));

using uapi_UAnimMontage_GetDefaultBlendOutTimeFn = void(*)(float(*)(void* target));

using uapi_UAnimMontage_GetGroupNameFn = void(*)(UName(*)(void* target));

using uapi_UAnimMontage_GetNumSectionsFn = void(*)(int32(*)(void* target));

using uapi_UAnimMontage_GetSectionIndexFn = void(*)(int32(*)(void* target,UName InSectionName));

using uapi_UAnimMontage_GetSectionIndexFromPositionFn = void(*)(int32(*)(void* target,float Position));

using uapi_UAnimMontage_GetSectionLengthFn = void(*)(float(*)(void* target,int32 SectionIndex));

using uapi_UAnimMontage_GetSectionNameFn = void(*)(UName(*)(void* target,int32 SectionIndex));

using uapi_UAnimMontage_GetSectionStartAndEndTimeFn = void(*)(void(*)(void* target,int32 SectionIndex,float& OutStartTime,float& OutEndTime));

using uapi_UAnimMontage_GetSectionTimeLeftFromPosFn = void(*)(float(*)(void* target,float Position));

using uapi_UAnimMontage_HasRootMotionFn = void(*)(bool(*)(void* target));

using uapi_UAnimMontage_InvalidateRecursiveAssetFn = void(*)(void(*)(void* target));

using uapi_UAnimMontage_IsValidAdditiveFn = void(*)(bool(*)(void* target));

using uapi_UAnimMontage_IsValidSectionIndexFn = void(*)(bool(*)(void* target,int32 SectionIndex));

using uapi_UAnimMontage_IsValidSectionNameFn = void(*)(bool(*)(void* target,UName InSectionName));

using uapi_UAnimMontage_IsValidSlotFn = void(*)(bool(*)(void* target,UName InSlotName));

using uapi_UAnimMontage_PostLoadFn = void(*)(void(*)(void* target));

using uapi_UAnimMontage_RefreshCacheDataFn = void(*)(void(*)(void* target));

using uapi_UAnimMontage_SetCompositeLengthFn = void(*)(void(*)(void* target,float InLength));

using uapi_UAnimMontage_UnregisterOnMontageChangedFn = void(*)(void(*)(void* target,void* Unregister));

using uapi_UAnimMontage_UpdateLinkableElementsFn = void(*)(void(*)(void* target));

using uapi_UAnimMontage_UpdateLinkableElements2Fn = void(*)(void(*)(void* target,int32 SlotIdx,int32 SegmentIdx));

using uapi_USkeletalMeshComponent_AddClothCollisionSourceFn = void(*)(void(*)(void* target,USkeletalMeshComponent* InSourceComponent,UPhysicsAsset* InSourcePhysicsAsset));

using uapi_USkeletalMeshComponent_AddForceToAllBodiesBelowFn = void(*)(void(*)(void* target,Vector3 Force,UName BoneName,bool bAccelChange,bool bIncludeSelf));

using uapi_USkeletalMeshComponent_AddImpulseToAllBodiesBelowFn = void(*)(void(*)(void* target,Vector3 Impulse,UName BoneName,bool bVelChange,bool bIncludeSelf));

using uapi_USkeletalMeshComponent_AllocateTransformDataFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_AllowAnimCurveEvaluationFn = void(*)(void(*)(void* target,UName NameOfCurve,bool bAllow));

using uapi_USkeletalMeshComponent_ApplyEditedComponentSpaceTransformsFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_BeginPlayFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_BindClothToLeaderPoseComponentFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_BreakConstraintFn = void(*)(void(*)(void* target,Vector3 Impulse,Vector3 HitLocation,UName InBoneName));

using uapi_USkeletalMeshComponent_CalculateMassFn = void(*)(float(*)(void* target,UName BoneName));

using uapi_USkeletalMeshComponent_CanEditSimulatePhysicsFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_CanHaveStaticMobilityFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_CanSimulateClothingFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_CheckClothTeleportFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_ClearAnimNotifyErrorsFn = void(*)(void(*)(void* target,UObject* InSourceNotify));

using uapi_USkeletalMeshComponent_ClearAnimScriptInstanceFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_ClearCachedAnimPropertiesFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_ClearMorphTargetsFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_ClearRefPoseOverrideFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_CompleteParallelAnimationEvaluationFn = void(*)(void(*)(void* target,bool bDoPostAnimEvaluation));

using uapi_USkeletalMeshComponent_CompleteParallelClothSimulationFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_ConditionallyDispatchQueuedAnimEventsFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_DeallocateTransformDataFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_DebugDrawClothingFn = void(*)(void(*)(void* target,FPrimitiveDrawInterface* PDI));

using uapi_USkeletalMeshComponent_DebugDrawClothingTextsFn = void(*)(void(*)(void* target,FCanvas* Canvas,FSceneView* SceneView));

using uapi_USkeletalMeshComponent_FinalizeBoneTransformFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_FindConstraintBoneNameFn = void(*)(UName(*)(void* target,int32 ConstraintIndex));

using uapi_USkeletalMeshComponent_FindConstraintIndexFn = void(*)(int32(*)(void* target,UName ConstraintName));

using uapi_USkeletalMeshComponent_FindConstraintInstanceFn = void(*)(void*(*)(void* target,UName ConName));

using uapi_USkeletalMeshComponent_FindRootBodyIndexFn = void(*)(int32(*)(void* target));

using uapi_USkeletalMeshComponent_ForceClothNextUpdateTeleportFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_ForceClothNextUpdateTeleportAndResetFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_GetAllowClothActorsFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_GetAllowRigidBodyAnimNodeFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_GetAllowedAnimCurveEvaluateFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_GetBodyInstanceFn = void(*)(void*(*)(void* target,UName BoneName,bool bGetWelded,int32 Index));

using uapi_USkeletalMeshComponent_GetBodySetupFn = void(*)(void*(*)(void* target));

using uapi_USkeletalMeshComponent_GetBoneMassFn = void(*)(float(*)(void* target,UName BoneName,bool bScaleMass));

using uapi_USkeletalMeshComponent_GetClothMaxDistanceScaleFn = void(*)(float(*)(void* target));

using uapi_USkeletalMeshComponent_GetClothingSimulationFn = void(*)(void*(*)(void* target));

using uapi_USkeletalMeshComponent_GetClothingSimulationContextFn = void(*)(void*(*)(void* target));

using uapi_USkeletalMeshComponent_GetClothingSimulationInteractorFn = void(*)(void*(*)(void* target));

using uapi_USkeletalMeshComponent_GetConstraintInstanceByIndexFn = void(*)(void*(*)(void* target,uint32 Index));

using uapi_USkeletalMeshComponent_GetCurrentJointAnglesFn = void(*)(void(*)(void* target,UName InBoneName,float& Swing1Angle,float& TwistAngle,float& Swing2Angle));

using uapi_USkeletalMeshComponent_GetDisablePostProcessBlueprintFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_GetLinkedAnimGraphInstanceByTagFn = void(*)(void*(*)(void* target,UName InTag));

using uapi_USkeletalMeshComponent_GetLinkedAnimLayerInstanceByGroupFn = void(*)(void*(*)(void* target,UName InGroup));

using uapi_USkeletalMeshComponent_GetMassFn = void(*)(float(*)(void* target));

using uapi_USkeletalMeshComponent_GetMorphTargetFn = void(*)(float(*)(void* target,UName MorphTargetName));

using uapi_USkeletalMeshComponent_GetPlayRateFn = void(*)(float(*)(void* target));

using uapi_USkeletalMeshComponent_GetPositionFn = void(*)(float(*)(void* target));

using uapi_USkeletalMeshComponent_GetSingleNodeInstanceFn = void(*)(void*(*)(void* target));

using uapi_USkeletalMeshComponent_GetSkeletalCenterOfMassFn = void(*)(Vector3(*)(void* target));

using uapi_USkeletalMeshComponent_GetSkeletalMeshAssetFn = void(*)(void*(*)(void* target));

using uapi_USkeletalMeshComponent_GetTeleportDistanceThresholdFn = void(*)(float(*)(void* target));

using uapi_USkeletalMeshComponent_GetTeleportRotationThresholdFn = void(*)(float(*)(void* target));

using uapi_USkeletalMeshComponent_GetTotalMassBelowBoneFn = void(*)(float(*)(void* target,UName InBoneName));

using uapi_USkeletalMeshComponent_GetUpdateAnimationInEditorFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_GetUpdateClothInEditorFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_HandleExistingParallelEvaluationTaskFn = void(*)(bool(*)(void* target,bool bBlockOnTask,bool bPerformPostAnimEvaluation));

using uapi_USkeletalMeshComponent_HasValidAnimationInstanceFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_InitAnimFn = void(*)(void(*)(void* target,bool bForceReinit));

using uapi_USkeletalMeshComponent_InitArticulatedFn = void(*)(void(*)(void* target,FPhysScene* PhysScene));

using uapi_USkeletalMeshComponent_InitCollisionRelationshipsFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_InitializeAnimScriptInstanceFn = void(*)(bool(*)(void* target,bool bForceReinit,bool bInDeferRootNodeInitialization));

using uapi_USkeletalMeshComponent_InitializeComponentFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_IsAnimBlueprintInstancedFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_IsAnyRigidBodyAwakeFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_IsAnySimulatingPhysicsFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_IsBodyGravityEnabledFn = void(*)(bool(*)(void* target,UName BoneName));

using uapi_USkeletalMeshComponent_IsClothBoundToLeaderComponentFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_IsClothingSimulationSuspendedFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_IsGravityEnabledFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_IsPlayingFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_IsPlayingNetworkedRootMotionMontageFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_IsPlayingRootMotionFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_IsPlayingRootMotionFromEverythingFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_IsPostEvaluatingAnimationFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_IsRunningParallelEvaluationFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_IsWindEnabledFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_NotifySkelControlBeyondLimitFn = void(*)(void(*)(void* target,USkelControlLookAt* LookAt));

using uapi_USkeletalMeshComponent_OnComponentCollisionSettingsChangedFn = void(*)(void(*)(void* target,bool bUpdateOverlaps));

using uapi_USkeletalMeshComponent_OnPreEndOfFrameSyncFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_OverrideAnimationDataFn = void(*)(void(*)(void* target,UAnimationAsset* InAnimToPlay,bool bIsLooping,bool bIsPlaying,float Position,float PlayRate));

using uapi_USkeletalMeshComponent_ParallelAnimationEvaluationFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_PlayFn = void(*)(void(*)(void* target,bool bLooping));

using uapi_USkeletalMeshComponent_PlayAnimationFn = void(*)(void(*)(void* target,UAnimationAsset* NewAnimToPlay,bool bLooping));

using uapi_USkeletalMeshComponent_PoseTickedThisFrameFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_PostLoadFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_PutAllRigidBodiesToSleepFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_RecalcRequiredBonesFn = void(*)(void(*)(void* target,int32 LODIndex));

using uapi_USkeletalMeshComponent_RecalcRequiredCurvesFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_RecreateClothingActorsFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_RefreshBoneTransformsFn = void(*)(void(*)(void* target,FActorComponentTickFunction* TickFunction));

using uapi_USkeletalMeshComponent_RegisterClothTickFn = void(*)(void(*)(void* target,bool bRegister));

using uapi_USkeletalMeshComponent_RegisterEndPhysicsTickFn = void(*)(void(*)(void* target,bool bRegister));

using uapi_USkeletalMeshComponent_ReleaseAllClothingResourcesFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_RemoveAllClothingActorsFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_RemoveClothCollisionSourceFn = void(*)(void(*)(void* target,USkeletalMeshComponent* InSourceComponent));

using uapi_USkeletalMeshComponent_RemoveClothCollisionSource2Fn = void(*)(void(*)(void* target,USkeletalMeshComponent* InSourceComponent,UPhysicsAsset* InSourcePhysicsAsset));

using uapi_USkeletalMeshComponent_RequiresPreEndOfFrameSyncFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_ResetAllBodiesSimulatePhysicsFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_ResetAllowedAnimCurveEvaluationFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_ResetClothCollisionSourcesFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_ResetClothTeleportModeFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_ResetRootBodyIndexFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_ResumeClothingSimulationFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_SetAllBodiesCollisionObjectTypeFn = void(*)(void(*)(void* target,ECollisionChannel NewChannel));

using uapi_USkeletalMeshComponent_SetAllBodiesNotifyRigidBodyCollisionFn = void(*)(void(*)(void* target,bool bNewNotifyRigidBodyCollision));

using uapi_USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeightFn = void(*)(void(*)(void* target,float PhysicsBlendWeight,bool bSkipCustomPhysicsType));

using uapi_USkeletalMeshComponent_SetAllBodiesSimulatePhysicsFn = void(*)(void(*)(void* target,bool bNewSimulate));

using uapi_USkeletalMeshComponent_SetAllMassScaleFn = void(*)(void(*)(void* target,float InMassScale));

using uapi_USkeletalMeshComponent_SetAllMotorsAngularDriveParamsFn = void(*)(void(*)(void* target,float InSpring,float InDamping,float InForceLimit,bool bSkipCustomPhysicsType));

using uapi_USkeletalMeshComponent_SetAllMotorsAngularPositionDriveFn = void(*)(void(*)(void* target,bool bEnableSwingDrive,bool bEnableTwistDrive,bool bSkipCustomPhysicsType));

using uapi_USkeletalMeshComponent_SetAllMotorsAngularVelocityDriveFn = void(*)(void(*)(void* target,bool bEnableSwingDrive,bool bEnableTwistDrive,bool bSkipCustomPhysicsType));

using uapi_USkeletalMeshComponent_SetAllPhysicsLinearVelocityFn = void(*)(void(*)(void* target,Vector3 NewVel,bool bAddToCurrent));

using uapi_USkeletalMeshComponent_SetAllPhysicsPositionFn = void(*)(void(*)(void* target,Vector3 NewPos));

using uapi_USkeletalMeshComponent_SetAllPhysicsRotationFn = void(*)(void(*)(void* target,Rotator NewRot));

using uapi_USkeletalMeshComponent_SetAllUseCCDFn = void(*)(void(*)(void* target,bool InUseCCD));

using uapi_USkeletalMeshComponent_SetAllowAnimCurveEvaluationFn = void(*)(void(*)(void* target,bool bInAllow));

using uapi_USkeletalMeshComponent_SetAllowClothActorsFn = void(*)(void(*)(void* target,bool bInAllow));

using uapi_USkeletalMeshComponent_SetAllowRigidBodyAnimNodeFn = void(*)(void(*)(void* target,bool bInAllow,bool bReinitAnim));

using uapi_USkeletalMeshComponent_SetAngularLimitsFn = void(*)(void(*)(void* target,UName InBoneName,float Swing1LimitAngle,float TwistLimitAngle,float Swing2LimitAngle));

using uapi_USkeletalMeshComponent_SetAnimationFn = void(*)(void(*)(void* target,UAnimationAsset* NewAnimToPlay));

using uapi_USkeletalMeshComponent_SetBodyNotifyRigidBodyCollisionFn = void(*)(void(*)(void* target,bool bNewNotifyRigidBodyCollision,UName BoneName));

using uapi_USkeletalMeshComponent_SetClothMaxDistanceScaleFn = void(*)(void(*)(void* target,float Scale));

using uapi_USkeletalMeshComponent_SetCollisionObjectTypeFn = void(*)(void(*)(void* target,ECollisionChannel Channel));

using uapi_USkeletalMeshComponent_SetComponentTickEnabledFn = void(*)(void(*)(void* target,bool bEnabled));

using uapi_USkeletalMeshComponent_SetConstraintProfileFn = void(*)(void(*)(void* target,UName JointName,UName ProfileName,bool bDefaultIfNotFound));

using uapi_USkeletalMeshComponent_SetConstraintProfileForAllFn = void(*)(void(*)(void* target,UName ProfileName,bool bDefaultIfNotFound));

using uapi_USkeletalMeshComponent_SetDisablePostProcessBlueprintFn = void(*)(void(*)(void* target,bool bInDisablePostProcess));

using uapi_USkeletalMeshComponent_SetEnableBodyGravityFn = void(*)(void(*)(void* target,bool bEnableGravity,UName BoneName));

using uapi_USkeletalMeshComponent_SetEnableGravityFn = void(*)(void(*)(void* target,bool bGravityEnabled));

using uapi_USkeletalMeshComponent_SetEnableGravityOnAllBodiesBelowFn = void(*)(void(*)(void* target,bool bEnableGravity,UName BoneName,bool bIncludeSelf));

using uapi_USkeletalMeshComponent_SetEnablePhysicsBlendingFn = void(*)(void(*)(void* target,bool bNewBlendPhysics));

using uapi_USkeletalMeshComponent_SetForceRefPoseFn = void(*)(void(*)(void* target,bool bNewForceRefPose));

using uapi_USkeletalMeshComponent_SetMorphTargetFn = void(*)(void(*)(void* target,UName MorphTargetName,float Value,bool bRemoveZeroWeight));

using uapi_USkeletalMeshComponent_SetNotifyRigidBodyCollisionFn = void(*)(void(*)(void* target,bool bNewNotifyRigidBodyCollision));

using uapi_USkeletalMeshComponent_SetNotifyRigidBodyCollisionBelowFn = void(*)(void(*)(void* target,bool bNewNotifyRigidBodyCollision,UName BoneName,bool bIncludeSelf));

using uapi_USkeletalMeshComponent_SetPhysMaterialOverrideFn = void(*)(void(*)(void* target,UPhysicalMaterial* NewPhysMaterial));

using uapi_USkeletalMeshComponent_SetPhysicsAssetFn = void(*)(void(*)(void* target,UPhysicsAsset* NewPhysicsAsset,bool bForceReInit));

using uapi_USkeletalMeshComponent_SetPhysicsBlendWeightFn = void(*)(void(*)(void* target,float PhysicsBlendWeight));

using uapi_USkeletalMeshComponent_SetPlayRateFn = void(*)(void(*)(void* target,float Rate));

using uapi_USkeletalMeshComponent_SetPositionFn = void(*)(void(*)(void* target,float InPos,bool bFireNotifies));

using uapi_USkeletalMeshComponent_SetPredictedLODLevelFn = void(*)(void(*)(void* target,int32 InPredictedLODLevel));

using uapi_USkeletalMeshComponent_SetRootBodyIndexFn = void(*)(void(*)(void* target,int32 InBodyIndex));

using uapi_USkeletalMeshComponent_SetSimulatePhysicsFn = void(*)(void(*)(void* target,bool bEnabled));

using uapi_USkeletalMeshComponent_SetSkeletalMeshAssetFn = void(*)(void(*)(void* target,USkeletalMesh* NewMesh));

using uapi_USkeletalMeshComponent_SetSkinnedAssetAndUpdateFn = void(*)(void(*)(void* target,USkinnedAsset* InSkinnedAsset,bool bReinitPose));

using uapi_USkeletalMeshComponent_SetTeleportDistanceThresholdFn = void(*)(void(*)(void* target,float Threshold));

using uapi_USkeletalMeshComponent_SetTeleportRotationThresholdFn = void(*)(void(*)(void* target,float Threshold));

using uapi_USkeletalMeshComponent_SetUpdateAnimationInEditorFn = void(*)(void(*)(void* target,bool NewUpdateState));

using uapi_USkeletalMeshComponent_SetUpdateClothInEditorFn = void(*)(void(*)(void* target,bool NewUpdateState));

using uapi_USkeletalMeshComponent_ShouldEvaluatePostProcessInstanceFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_ShouldOnlyTickMontagesFn = void(*)(bool(*)(void* target,float DeltaTime));

using uapi_USkeletalMeshComponent_ShouldPostUpdatePostProcessInstanceFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_ShouldTickAnimationFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_ShouldTickPoseFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_ShouldUpdatePostProcessInstanceFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_ShouldUpdateTransformFn = void(*)(bool(*)(void* target,bool bLODHasChanged));

using uapi_USkeletalMeshComponent_SkelMeshCompOnParticleSystemFinishedFn = void(*)(void(*)(void* target,UParticleSystemComponent* PSC));

using uapi_USkeletalMeshComponent_StopFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_SuspendClothingSimulationFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_TermArticulatedFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_TermBodiesBelowFn = void(*)(void(*)(void* target,UName ParentBoneName));

using uapi_USkeletalMeshComponent_TermCollisionRelationshipsFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_TickAnimInstancesFn = void(*)(void(*)(void* target,float DeltaTime,bool bNeedsValidRootMotion));

using uapi_USkeletalMeshComponent_TickAnimationFn = void(*)(void(*)(void* target,float DeltaTime,bool bNeedsValidRootMotion));

using uapi_USkeletalMeshComponent_TickPoseFn = void(*)(void(*)(void* target,float DeltaTime,bool bNeedsValidRootMotion));

using uapi_USkeletalMeshComponent_ToggleDisablePostProcessBlueprintFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_UnHideBoneFn = void(*)(void(*)(void* target,int32 BoneIndex));

using uapi_USkeletalMeshComponent_UnbindClothFromLeaderPoseComponentFn = void(*)(void(*)(void* target,bool bRestoreSimulationSpace));

using uapi_USkeletalMeshComponent_UpdateBoneBodyMappingFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_UpdateClothTransformFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_UpdateCollisionProfileFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_UpdateFollowerComponentFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_UpdateHasValidBodiesFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_UpdateLODStatusFn = void(*)(bool(*)(void* target));

using uapi_USkeletalMeshComponent_UpdateMeshForBrokenConstraintsFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_UpdateOverlapsImplFn = void(*)(bool(*)(void* target,TOverlapArrayView* PendingOverlaps,bool bDoNotifies,TOverlapArrayView* OverlapsAtEndLocation));

using uapi_USkeletalMeshComponent_UpdatePhysicsToRBChannelsFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_UpdatePoseWatchesFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_UpdateRBJointMotorsFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_ValidateAnimationFn = void(*)(void(*)(void* target));

using uapi_USkeletalMeshComponent_WakeAllRigidBodiesFn = void(*)(void(*)(void* target));

using uapi_UCapsuleComponent_CalcBoundingCylinderFn = void(*)(void(*)(void* target,float& CylinderRadius,float& CylinderHalfHeight));

using uapi_UCapsuleComponent_CreateSceneProxyFn = void(*)(void*(*)(void* target));

using uapi_UCapsuleComponent_GetCollisionShapeFn = void(*)(CollisionShape(*)(void* target,float Inflation));

using uapi_UCapsuleComponent_GetScaledCapsuleHalfHeightFn = void(*)(float(*)(void* target));

using uapi_UCapsuleComponent_GetScaledCapsuleHalfHeight_WithoutHemisphereFn = void(*)(float(*)(void* target));

using uapi_UCapsuleComponent_GetScaledCapsuleRadiusFn = void(*)(float(*)(void* target));

using uapi_UCapsuleComponent_GetScaledCapsuleSizeFn = void(*)(void(*)(void* target,float& OutRadius,float& OutHalfHeight));

using uapi_UCapsuleComponent_GetScaledCapsuleSize_WithoutHemisphereFn = void(*)(void(*)(void* target,float& OutRadius,float& OutHalfHeightWithoutHemisphere));

using uapi_UCapsuleComponent_GetShapeScaleFn = void(*)(float(*)(void* target));

using uapi_UCapsuleComponent_GetUnscaledCapsuleHalfHeightFn = void(*)(float(*)(void* target));

using uapi_UCapsuleComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphereFn = void(*)(float(*)(void* target));

using uapi_UCapsuleComponent_GetUnscaledCapsuleRadiusFn = void(*)(float(*)(void* target));

using uapi_UCapsuleComponent_GetUnscaledCapsuleSizeFn = void(*)(void(*)(void* target,float& OutRadius,float& OutHalfHeight));

using uapi_UCapsuleComponent_GetUnscaledCapsuleSize_WithoutHemisphereFn = void(*)(void(*)(void* target,float& OutRadius,float& OutHalfHeightWithoutHemisphere));

using uapi_UCapsuleComponent_InitCapsuleSizeFn = void(*)(void(*)(void* target,float InRadius,float InHalfHeight));

using uapi_UCapsuleComponent_IsZeroExtentFn = void(*)(bool(*)(void* target));

using uapi_UCapsuleComponent_PostLoadFn = void(*)(void(*)(void* target));

using uapi_UCapsuleComponent_SetCapsuleHalfHeightFn = void(*)(void(*)(void* target,float HalfHeight,bool bUpdateOverlaps));

using uapi_UCapsuleComponent_SetCapsuleRadiusFn = void(*)(void(*)(void* target,float Radius,bool bUpdateOverlaps));

using uapi_UCapsuleComponent_SetCapsuleSizeFn = void(*)(void(*)(void* target,float InRadius,float InHalfHeight,bool bUpdateOverlaps));

using uapi_UCapsuleComponent_UpdateBodySetupFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_AddForceFn = void(*)(void(*)(void* target,Vector3 Force));

using uapi_UCharacterMovementComponent_AddImpulseFn = void(*)(void(*)(void* target,Vector3 Impulse,bool bVelocityChange));

using uapi_UCharacterMovementComponent_AdjustFloorHeightFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_ApplyAccumulatedForcesFn = void(*)(void(*)(void* target,float DeltaSeconds));

using uapi_UCharacterMovementComponent_ApplyDownwardForceFn = void(*)(void(*)(void* target,float DeltaSeconds));

using uapi_UCharacterMovementComponent_ApplyNetworkMovementModeFn = void(*)(void(*)(void* target,uint8 ReceivedMode));

using uapi_UCharacterMovementComponent_ApplyRepulsionForceFn = void(*)(void(*)(void* target,float DeltaSeconds));

using uapi_UCharacterMovementComponent_BeginDestroyFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_BeginPlayFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_CalcAvoidanceVelocityFn = void(*)(void(*)(void* target,float DeltaTime));

using uapi_UCharacterMovementComponent_CalcVelocityFn = void(*)(void(*)(void* target,float DeltaTime,float Friction,bool bFluid,float BrakingDeceleration));

using uapi_UCharacterMovementComponent_CanAttemptJumpFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_CanCrouchInCurrentStateFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_CanStartPathFollowingFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_CanStopPathFollowingFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_CanWalkOffLedgesFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_ClearAccumulatedForcesFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_ClientAckGoodMoveFn = void(*)(void(*)(void* target,float TimeStamp));

using uapi_UCharacterMovementComponent_ClientAckGoodMove_ImplementationFn = void(*)(void(*)(void* target,float TimeStamp));

using uapi_UCharacterMovementComponent_ClientAdjustPositionFn = void(*)(void(*)(void* target,float TimeStamp,Vector3 NewLoc,Vector3 NewVel,UPrimitiveComponent* NewBase,UName NewBaseBoneName,bool bHasBase,bool bBaseRelativePosition,uint8 ServerMovementMode));

using uapi_UCharacterMovementComponent_ClientVeryShortAdjustPositionFn = void(*)(void(*)(void* target,float TimeStamp,Vector3 NewLoc,UPrimitiveComponent* NewBase,UName NewBaseBoneName,bool bHasBase,bool bBaseRelativePosition,uint8 ServerMovementMode));

using uapi_UCharacterMovementComponent_ClientVeryShortAdjustPosition_ImplementationFn = void(*)(void(*)(void* target,float TimeStamp,Vector3 NewLoc,UPrimitiveComponent* NewBase,UName NewBaseBoneName,bool bHasBase,bool bBaseRelativePosition,uint8 ServerMovementMode));

using uapi_UCharacterMovementComponent_CrouchFn = void(*)(void(*)(void* target,bool bClientSimulation));

using uapi_UCharacterMovementComponent_DeactivateFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_DisableMovementFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_DoJumpFn = void(*)(bool(*)(void* target,bool bReplayingMoves));

using uapi_UCharacterMovementComponent_FindWaterLineFn = void(*)(Vector3(*)(void* target,Vector3 Start,Vector3 End));

using uapi_UCharacterMovementComponent_FlushServerMovesFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_ForceClientAdjustmentFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_ForcePositionUpdateFn = void(*)(bool(*)(void* target,float DeltaTime));

using uapi_UCharacterMovementComponent_ForceReplicationUpdateFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_GetAnalogInputModifierFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_GetAvoidanceGroupMaskFn = void(*)(int32(*)(void* target));

using uapi_UCharacterMovementComponent_GetBestDirectionOffActorFn = void(*)(Vector3(*)(void* target,AActor* BaseActor));

using uapi_UCharacterMovementComponent_GetCharacterOwnerFn = void(*)(void*(*)(void* target));

using uapi_UCharacterMovementComponent_GetCrouchedHalfHeightFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_GetCurrentAccelerationFn = void(*)(Vector3(*)(void* target));

using uapi_UCharacterMovementComponent_GetCurrentReplayedSavedMoveFn = void(*)(void*(*)(void* target));

using uapi_UCharacterMovementComponent_GetDeltaRotationFn = void(*)(Rotator(*)(void* target,float DeltaTime));

using uapi_UCharacterMovementComponent_GetFallingLateralAccelerationFn = void(*)(Vector3(*)(void* target,float DeltaTime));

using uapi_UCharacterMovementComponent_GetGravityZFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_GetGroupsToAvoidMaskFn = void(*)(int32(*)(void* target));

using uapi_UCharacterMovementComponent_GetGroupsToIgnoreMaskFn = void(*)(int32(*)(void* target));

using uapi_UCharacterMovementComponent_GetImpartedMovementBaseVelocityFn = void(*)(Vector3(*)(void* target));

using uapi_UCharacterMovementComponent_GetLastUpdateLocationFn = void(*)(Vector3(*)(void* target));

using uapi_UCharacterMovementComponent_GetLastUpdateQuatFn = void(*)(Quaternion(*)(void* target));

using uapi_UCharacterMovementComponent_GetLastUpdateRequestedVelocityFn = void(*)(Vector3(*)(void* target));

using uapi_UCharacterMovementComponent_GetLastUpdateRotationFn = void(*)(Rotator(*)(void* target));

using uapi_UCharacterMovementComponent_GetLastUpdateVelocityFn = void(*)(Vector3(*)(void* target));

using uapi_UCharacterMovementComponent_GetMaxAccelerationFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_GetMaxBrakingDecelerationFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_GetMaxJumpHeightFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_GetMaxJumpHeightWithJumpTimeFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_GetMaxSpeedFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_GetMinAnalogSpeedFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_GetMovementBaseFn = void(*)(void*(*)(void* target));

using uapi_UCharacterMovementComponent_GetMovementNameFn = void(*)(const char*(*)(void* target));

using uapi_UCharacterMovementComponent_GetNetworkSafeRandomAngleDegreesFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_GetPathFollowingBrakingDistanceFn = void(*)(float(*)(void* target,float MaxSpeed));

using uapi_UCharacterMovementComponent_GetPerchRadiusThresholdFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_GetPredictionData_ClientFn = void(*)(void*(*)(void* target));

using uapi_UCharacterMovementComponent_GetPredictionData_Client_CharacterFn = void(*)(void*(*)(void* target));

using uapi_UCharacterMovementComponent_GetPredictionData_ServerFn = void(*)(void*(*)(void* target));

using uapi_UCharacterMovementComponent_GetPredictionData_Server_CharacterFn = void(*)(void*(*)(void* target));

using uapi_UCharacterMovementComponent_GetRVOAvoidanceConsiderationRadiusFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_GetRVOAvoidanceHeightFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_GetRVOAvoidanceOriginFn = void(*)(Vector3(*)(void* target));

using uapi_UCharacterMovementComponent_GetRVOAvoidanceRadiusFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_GetRVOAvoidanceUIDFn = void(*)(int32(*)(void* target));

using uapi_UCharacterMovementComponent_GetRVOAvoidanceUIDFastFn = void(*)(int32(*)(void* target));

using uapi_UCharacterMovementComponent_GetRVOAvoidanceWeightFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_GetServerLastTransformUpdateTimeStampFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_GetSimulationTimeStepFn = void(*)(float(*)(void* target,float RemainingTime,int32 Iterations));

using uapi_UCharacterMovementComponent_GetValidPerchRadiusFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_GetVelocityForRVOConsiderationFn = void(*)(Vector3(*)(void* target));

using uapi_UCharacterMovementComponent_GetWalkableFloorAngleFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_GetWalkableFloorZFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_HandlePendingLaunchFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_HasAnimRootMotionFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_HasPredictionData_ClientFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_HasPredictionData_ServerFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_HasRootMotionSourcesFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_HasValidDataFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_ImmersionDepthFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_IsCrouchingFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_IsFallingFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_IsFlyingFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_IsMovementInProgressFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_IsMovingOnGroundFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_IsSwimmingFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_IsWalkingFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_JumpOffFn = void(*)(void(*)(void* target,AActor* MovementBaseActor));

using uapi_UCharacterMovementComponent_JumpOutOfWaterFn = void(*)(void(*)(void* target,Vector3 WallNormal));

using uapi_UCharacterMovementComponent_K2_GetWalkableFloorAngleFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_K2_GetWalkableFloorZFn = void(*)(float(*)(void* target));

using uapi_UCharacterMovementComponent_MaybeSaveBaseLocationFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_MaybeUpdateBasedMovementFn = void(*)(void(*)(void* target,float DeltaSeconds));

using uapi_UCharacterMovementComponent_NotifyBumpedPawnFn = void(*)(void(*)(void* target,APawn* BumpedPawn));

using uapi_UCharacterMovementComponent_NotifyJumpApexFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_OnRegisterFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_OnRootMotionSourceBeingAppliedFn = void(*)(void(*)(void* target,FRootMotionSource* Source));

using uapi_UCharacterMovementComponent_OnTeleportedFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_PackNetworkMovementModeFn = void(*)(uint8(*)(void* target));

using uapi_UCharacterMovementComponent_PackYawAndPitchTo32Fn = void(*)(uint32(*)(float Yaw,float Pitch));

using uapi_UCharacterMovementComponent_PerformAirControlForPathFollowingFn = void(*)(void(*)(void* target,Vector3 Direction,float ZDiff));

using uapi_UCharacterMovementComponent_PhysFallingFn = void(*)(void(*)(void* target,float deltaTime,int32 Iterations));

using uapi_UCharacterMovementComponent_PhysicsRotationFn = void(*)(void(*)(void* target,float DeltaTime));

using uapi_UCharacterMovementComponent_PhysicsVolumeChangedFn = void(*)(void(*)(void* target,APhysicsVolume* NewVolume));

using uapi_UCharacterMovementComponent_PostLoadFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_RegisterComponentTickFunctionsFn = void(*)(void(*)(void* target,bool bRegister));

using uapi_UCharacterMovementComponent_RemoveRootMotionSourceFn = void(*)(void(*)(void* target,UName InstanceName));

using uapi_UCharacterMovementComponent_RemoveRootMotionSourceByIDFn = void(*)(void(*)(void* target,uint16 RootMotionSourceID));

using uapi_UCharacterMovementComponent_ResetPredictionData_ClientFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_ResetPredictionData_ServerFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_RoundAccelerationFn = void(*)(Vector3(*)(void* target,Vector3 InAccel));

using uapi_UCharacterMovementComponent_SaveBaseLocationFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_SendClientAdjustmentFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_SetAvoidanceEnabledFn = void(*)(void(*)(void* target,bool bEnable));

using uapi_UCharacterMovementComponent_SetAvoidanceGroupFn = void(*)(void(*)(void* target,int32 GroupFlags));

using uapi_UCharacterMovementComponent_SetAvoidanceVelocityLockFn = void(*)(void(*)(void* target,UAvoidanceManager* Avoidance,float Duration));

using uapi_UCharacterMovementComponent_SetBaseFn = void(*)(void(*)(void* target,UPrimitiveComponent* NewBase,UName BoneName,bool bNotifyActor));

using uapi_UCharacterMovementComponent_SetCrouchedHalfHeightFn = void(*)(void(*)(void* target,float NewValue));

using uapi_UCharacterMovementComponent_SetDefaultMovementModeFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_SetGroupsToAvoidFn = void(*)(void(*)(void* target,int32 GroupFlags));

using uapi_UCharacterMovementComponent_SetGroupsToIgnoreFn = void(*)(void(*)(void* target,int32 GroupFlags));

using uapi_UCharacterMovementComponent_SetRVOAvoidanceUIDFn = void(*)(void(*)(void* target,int32 UID));

using uapi_UCharacterMovementComponent_SetRVOAvoidanceWeightFn = void(*)(void(*)(void* target,float Weight));

using uapi_UCharacterMovementComponent_SetUpdatedComponentFn = void(*)(void(*)(void* target,USceneComponent* NewUpdatedComponent));

using uapi_UCharacterMovementComponent_SetWalkableFloorAngleFn = void(*)(void(*)(void* target,float InWalkableFloorAngle));

using uapi_UCharacterMovementComponent_SetWalkableFloorZFn = void(*)(void(*)(void* target,float InWalkableFloorZ));

using uapi_UCharacterMovementComponent_ShouldCorrectRotationFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_ShouldPerformAirControlForPathFollowingFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_ShouldRemainVerticalFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_ShouldUsePackedMovementRPCsFn = void(*)(bool(*)(void* target));

using uapi_UCharacterMovementComponent_StartNewPhysicsFn = void(*)(void(*)(void* target,float deltaTime,int32 Iterations));

using uapi_UCharacterMovementComponent_StartSwimmingFn = void(*)(void(*)(void* target,Vector3 OldLocation,Vector3 OldVelocity,float timeTick,float remainingTime,int32 Iterations));

using uapi_UCharacterMovementComponent_StopActiveMovementFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_UnCrouchFn = void(*)(void(*)(void* target,bool bClientSimulation));

using uapi_UCharacterMovementComponent_UpdateBasedMovementFn = void(*)(void(*)(void* target,float DeltaSeconds));

using uapi_UCharacterMovementComponent_UpdateCharacterStateAfterMovementFn = void(*)(void(*)(void* target,float DeltaSeconds));

using uapi_UCharacterMovementComponent_UpdateCharacterStateBeforeMovementFn = void(*)(void(*)(void* target,float DeltaSeconds));

using uapi_UCharacterMovementComponent_UpdateFloorFromAdjustmentFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_UpdateProxyAccelerationFn = void(*)(void(*)(void* target));

using uapi_UCharacterMovementComponent_VisualizeMovementFn = void(*)(float(*)(void* target));

void register_all(Plugin* plugin){
    
	auto const api_create_native_string = (create_native_string_handler)plugin->GetDllExport(TEXT("create_native_string\0"));
	if(api_create_native_string){ create_native_string = api_create_native_string; }
	
	auto const api_reset_rust_string = (reset_rust_string_handler)plugin->GetDllExport(TEXT("reset_rust_string\0"));
	if(api_reset_rust_string){ reset_rust_string = api_reset_rust_string; }

    auto const apiuapi_UObject_AbortInsideMemberFunction = (uapi_UObject_AbortInsideMemberFunctionFn)plugin->GetDllExport(TEXT("set_UObject_AbortInsideMemberFunction_handler\0"));
    if(apiuapi_UObject_AbortInsideMemberFunction){
        apiuapi_UObject_AbortInsideMemberFunction(&uapi_UObject_AbortInsideMemberFunction);
    }

    auto const apiuapi_UObject_AreNativePropertiesIdenticalTo = (uapi_UObject_AreNativePropertiesIdenticalToFn)plugin->GetDllExport(TEXT("set_UObject_AreNativePropertiesIdenticalTo_handler\0"));
    if(apiuapi_UObject_AreNativePropertiesIdenticalTo){
        apiuapi_UObject_AreNativePropertiesIdenticalTo(&uapi_UObject_AreNativePropertiesIdenticalTo);
    }

    auto const apiuapi_UObject_BeginCacheForCookedPlatformData = (uapi_UObject_BeginCacheForCookedPlatformDataFn)plugin->GetDllExport(TEXT("set_UObject_BeginCacheForCookedPlatformData_handler\0"));
    if(apiuapi_UObject_BeginCacheForCookedPlatformData){
        apiuapi_UObject_BeginCacheForCookedPlatformData(&uapi_UObject_BeginCacheForCookedPlatformData);
    }

    auto const apiuapi_UObject_BeginDestroy = (uapi_UObject_BeginDestroyFn)plugin->GetDllExport(TEXT("set_UObject_BeginDestroy_handler\0"));
    if(apiuapi_UObject_BeginDestroy){
        apiuapi_UObject_BeginDestroy(&uapi_UObject_BeginDestroy);
    }

    auto const apiuapi_UObject_CallRemoteFunction = (uapi_UObject_CallRemoteFunctionFn)plugin->GetDllExport(TEXT("set_UObject_CallRemoteFunction_handler\0"));
    if(apiuapi_UObject_CallRemoteFunction){
        apiuapi_UObject_CallRemoteFunction(&uapi_UObject_CallRemoteFunction);
    }

    auto const apiuapi_UObject_CanCreateInCurrentContext = (uapi_UObject_CanCreateInCurrentContextFn)plugin->GetDllExport(TEXT("set_UObject_CanCreateInCurrentContext_handler\0"));
    if(apiuapi_UObject_CanCreateInCurrentContext){
        apiuapi_UObject_CanCreateInCurrentContext(&uapi_UObject_CanCreateInCurrentContext);
    }

    auto const apiuapi_UObject_CanEditChange = (uapi_UObject_CanEditChangeFn)plugin->GetDllExport(TEXT("set_UObject_CanEditChange_handler\0"));
    if(apiuapi_UObject_CanEditChange){
        apiuapi_UObject_CanEditChange(&uapi_UObject_CanEditChange);
    }

    auto const apiuapi_UObject_CanModify = (uapi_UObject_CanModifyFn)plugin->GetDllExport(TEXT("set_UObject_CanModify_handler\0"));
    if(apiuapi_UObject_CanModify){
        apiuapi_UObject_CanModify(&uapi_UObject_CanModify);
    }

    auto const apiuapi_UObject_CheckDefaultSubobjects = (uapi_UObject_CheckDefaultSubobjectsFn)plugin->GetDllExport(TEXT("set_UObject_CheckDefaultSubobjects_handler\0"));
    if(apiuapi_UObject_CheckDefaultSubobjects){
        apiuapi_UObject_CheckDefaultSubobjects(&uapi_UObject_CheckDefaultSubobjects);
    }

    auto const apiuapi_UObject_ClearAllCachedCookedPlatformData = (uapi_UObject_ClearAllCachedCookedPlatformDataFn)plugin->GetDllExport(TEXT("set_UObject_ClearAllCachedCookedPlatformData_handler\0"));
    if(apiuapi_UObject_ClearAllCachedCookedPlatformData){
        apiuapi_UObject_ClearAllCachedCookedPlatformData(&uapi_UObject_ClearAllCachedCookedPlatformData);
    }

    auto const apiuapi_UObject_ClearCachedCookedPlatformData = (uapi_UObject_ClearCachedCookedPlatformDataFn)plugin->GetDllExport(TEXT("set_UObject_ClearCachedCookedPlatformData_handler\0"));
    if(apiuapi_UObject_ClearCachedCookedPlatformData){
        apiuapi_UObject_ClearCachedCookedPlatformData(&uapi_UObject_ClearCachedCookedPlatformData);
    }

    auto const apiuapi_UObject_ConditionalBeginDestroy = (uapi_UObject_ConditionalBeginDestroyFn)plugin->GetDllExport(TEXT("set_UObject_ConditionalBeginDestroy_handler\0"));
    if(apiuapi_UObject_ConditionalBeginDestroy){
        apiuapi_UObject_ConditionalBeginDestroy(&uapi_UObject_ConditionalBeginDestroy);
    }

    auto const apiuapi_UObject_ConditionalFinishDestroy = (uapi_UObject_ConditionalFinishDestroyFn)plugin->GetDllExport(TEXT("set_UObject_ConditionalFinishDestroy_handler\0"));
    if(apiuapi_UObject_ConditionalFinishDestroy){
        apiuapi_UObject_ConditionalFinishDestroy(&uapi_UObject_ConditionalFinishDestroy);
    }

    auto const apiuapi_UObject_ConditionalPostLoad = (uapi_UObject_ConditionalPostLoadFn)plugin->GetDllExport(TEXT("set_UObject_ConditionalPostLoad_handler\0"));
    if(apiuapi_UObject_ConditionalPostLoad){
        apiuapi_UObject_ConditionalPostLoad(&uapi_UObject_ConditionalPostLoad);
    }

    auto const apiuapi_UObject_ConditionalPostLoadSubobjects = (uapi_UObject_ConditionalPostLoadSubobjectsFn)plugin->GetDllExport(TEXT("set_UObject_ConditionalPostLoadSubobjects_handler\0"));
    if(apiuapi_UObject_ConditionalPostLoadSubobjects){
        apiuapi_UObject_ConditionalPostLoadSubobjects(&uapi_UObject_ConditionalPostLoadSubobjects);
    }

    auto const apiuapi_UObject_DestroyNonNativeProperties = (uapi_UObject_DestroyNonNativePropertiesFn)plugin->GetDllExport(TEXT("set_UObject_DestroyNonNativeProperties_handler\0"));
    if(apiuapi_UObject_DestroyNonNativeProperties){
        apiuapi_UObject_DestroyNonNativeProperties(&uapi_UObject_DestroyNonNativeProperties);
    }

    auto const apiuapi_UObject_ExecuteUbergraph = (uapi_UObject_ExecuteUbergraphFn)plugin->GetDllExport(TEXT("set_UObject_ExecuteUbergraph_handler\0"));
    if(apiuapi_UObject_ExecuteUbergraph){
        apiuapi_UObject_ExecuteUbergraph(&uapi_UObject_ExecuteUbergraph);
    }

    auto const apiuapi_UObject_FindFunction = (uapi_UObject_FindFunctionFn)plugin->GetDllExport(TEXT("set_UObject_FindFunction_handler\0"));
    if(apiuapi_UObject_FindFunction){
        apiuapi_UObject_FindFunction(&uapi_UObject_FindFunction);
    }

    auto const apiuapi_UObject_FindFunctionChecked = (uapi_UObject_FindFunctionCheckedFn)plugin->GetDllExport(TEXT("set_UObject_FindFunctionChecked_handler\0"));
    if(apiuapi_UObject_FindFunctionChecked){
        apiuapi_UObject_FindFunctionChecked(&uapi_UObject_FindFunctionChecked);
    }

    auto const apiuapi_UObject_FinishDestroy = (uapi_UObject_FinishDestroyFn)plugin->GetDllExport(TEXT("set_UObject_FinishDestroy_handler\0"));
    if(apiuapi_UObject_FinishDestroy){
        apiuapi_UObject_FinishDestroy(&uapi_UObject_FinishDestroy);
    }

    auto const apiuapi_UObject_GetArchetype = (uapi_UObject_GetArchetypeFn)plugin->GetDllExport(TEXT("set_UObject_GetArchetype_handler\0"));
    if(apiuapi_UObject_GetArchetype){
        apiuapi_UObject_GetArchetype(&uapi_UObject_GetArchetype);
    }

    auto const apiuapi_UObject_GetConfigOverridePlatform = (uapi_UObject_GetConfigOverridePlatformFn)plugin->GetDllExport(TEXT("set_UObject_GetConfigOverridePlatform_handler\0"));
    if(apiuapi_UObject_GetConfigOverridePlatform){
        apiuapi_UObject_GetConfigOverridePlatform(&uapi_UObject_GetConfigOverridePlatform);
    }

    auto const apiuapi_UObject_GetDefaultConfigFilename = (uapi_UObject_GetDefaultConfigFilenameFn)plugin->GetDllExport(TEXT("set_UObject_GetDefaultConfigFilename_handler\0"));
    if(apiuapi_UObject_GetDefaultConfigFilename){
        apiuapi_UObject_GetDefaultConfigFilename(&uapi_UObject_GetDefaultConfigFilename);
    }

    auto const apiuapi_UObject_GetDesc = (uapi_UObject_GetDescFn)plugin->GetDllExport(TEXT("set_UObject_GetDesc_handler\0"));
    if(apiuapi_UObject_GetDesc){
        apiuapi_UObject_GetDesc(&uapi_UObject_GetDesc);
    }

    auto const apiuapi_UObject_GetDetailedInfo = (uapi_UObject_GetDetailedInfoFn)plugin->GetDllExport(TEXT("set_UObject_GetDetailedInfo_handler\0"));
    if(apiuapi_UObject_GetDetailedInfo){
        apiuapi_UObject_GetDetailedInfo(&uapi_UObject_GetDetailedInfo);
    }

    auto const apiuapi_UObject_GetExporterName = (uapi_UObject_GetExporterNameFn)plugin->GetDllExport(TEXT("set_UObject_GetExporterName_handler\0"));
    if(apiuapi_UObject_GetExporterName){
        apiuapi_UObject_GetExporterName(&uapi_UObject_GetExporterName);
    }

    auto const apiuapi_UObject_GetGlobalUserConfigFilename = (uapi_UObject_GetGlobalUserConfigFilenameFn)plugin->GetDllExport(TEXT("set_UObject_GetGlobalUserConfigFilename_handler\0"));
    if(apiuapi_UObject_GetGlobalUserConfigFilename){
        apiuapi_UObject_GetGlobalUserConfigFilename(&uapi_UObject_GetGlobalUserConfigFilename);
    }

    auto const apiuapi_UObject_GetNetPushIdDynamic = (uapi_UObject_GetNetPushIdDynamicFn)plugin->GetDllExport(TEXT("set_UObject_GetNetPushIdDynamic_handler\0"));
    if(apiuapi_UObject_GetNetPushIdDynamic){
        apiuapi_UObject_GetNetPushIdDynamic(&uapi_UObject_GetNetPushIdDynamic);
    }

    auto const apiuapi_UObject_GetProjectUserConfigFilename = (uapi_UObject_GetProjectUserConfigFilenameFn)plugin->GetDllExport(TEXT("set_UObject_GetProjectUserConfigFilename_handler\0"));
    if(apiuapi_UObject_GetProjectUserConfigFilename){
        apiuapi_UObject_GetProjectUserConfigFilename(&uapi_UObject_GetProjectUserConfigFilename);
    }

    auto const apiuapi_UObject_GetSparseClassDataStruct = (uapi_UObject_GetSparseClassDataStructFn)plugin->GetDllExport(TEXT("set_UObject_GetSparseClassDataStruct_handler\0"));
    if(apiuapi_UObject_GetSparseClassDataStruct){
        apiuapi_UObject_GetSparseClassDataStruct(&uapi_UObject_GetSparseClassDataStruct);
    }

    auto const apiuapi_UObject_GetWorld = (uapi_UObject_GetWorldFn)plugin->GetDllExport(TEXT("set_UObject_GetWorld_handler\0"));
    if(apiuapi_UObject_GetWorld){
        apiuapi_UObject_GetWorld(&uapi_UObject_GetWorld);
    }

    auto const apiuapi_UObject_GetWorldChecked = (uapi_UObject_GetWorldCheckedFn)plugin->GetDllExport(TEXT("set_UObject_GetWorldChecked_handler\0"));
    if(apiuapi_UObject_GetWorldChecked){
        apiuapi_UObject_GetWorldChecked(&uapi_UObject_GetWorldChecked);
    }

    auto const apiuapi_UObject_HasNonEditorOnlyReferences = (uapi_UObject_HasNonEditorOnlyReferencesFn)plugin->GetDllExport(TEXT("set_UObject_HasNonEditorOnlyReferences_handler\0"));
    if(apiuapi_UObject_HasNonEditorOnlyReferences){
        apiuapi_UObject_HasNonEditorOnlyReferences(&uapi_UObject_HasNonEditorOnlyReferences);
    }

    auto const apiuapi_UObject_ImplementsGetWorld = (uapi_UObject_ImplementsGetWorldFn)plugin->GetDllExport(TEXT("set_UObject_ImplementsGetWorld_handler\0"));
    if(apiuapi_UObject_ImplementsGetWorld){
        apiuapi_UObject_ImplementsGetWorld(&uapi_UObject_ImplementsGetWorld);
    }

    auto const apiuapi_UObject_ImportCustomProperties = (uapi_UObject_ImportCustomPropertiesFn)plugin->GetDllExport(TEXT("set_UObject_ImportCustomProperties_handler\0"));
    if(apiuapi_UObject_ImportCustomProperties){
        apiuapi_UObject_ImportCustomProperties(&uapi_UObject_ImportCustomProperties);
    }

    auto const apiuapi_UObject_InstanceSubobjectTemplates = (uapi_UObject_InstanceSubobjectTemplatesFn)plugin->GetDllExport(TEXT("set_UObject_InstanceSubobjectTemplates_handler\0"));
    if(apiuapi_UObject_InstanceSubobjectTemplates){
        apiuapi_UObject_InstanceSubobjectTemplates(&uapi_UObject_InstanceSubobjectTemplates);
    }

    auto const apiuapi_UObject_IsAsset = (uapi_UObject_IsAssetFn)plugin->GetDllExport(TEXT("set_UObject_IsAsset_handler\0"));
    if(apiuapi_UObject_IsAsset){
        apiuapi_UObject_IsAsset(&uapi_UObject_IsAsset);
    }

    auto const apiuapi_UObject_IsBasedOnArchetype = (uapi_UObject_IsBasedOnArchetypeFn)plugin->GetDllExport(TEXT("set_UObject_IsBasedOnArchetype_handler\0"));
    if(apiuapi_UObject_IsBasedOnArchetype){
        apiuapi_UObject_IsBasedOnArchetype(&uapi_UObject_IsBasedOnArchetype);
    }

    auto const apiuapi_UObject_IsCachedCookedPlatformDataLoaded = (uapi_UObject_IsCachedCookedPlatformDataLoadedFn)plugin->GetDllExport(TEXT("set_UObject_IsCachedCookedPlatformDataLoaded_handler\0"));
    if(apiuapi_UObject_IsCachedCookedPlatformDataLoaded){
        apiuapi_UObject_IsCachedCookedPlatformDataLoaded(&uapi_UObject_IsCachedCookedPlatformDataLoaded);
    }

    auto const apiuapi_UObject_IsDestructionThreadSafe = (uapi_UObject_IsDestructionThreadSafeFn)plugin->GetDllExport(TEXT("set_UObject_IsDestructionThreadSafe_handler\0"));
    if(apiuapi_UObject_IsDestructionThreadSafe){
        apiuapi_UObject_IsDestructionThreadSafe(&uapi_UObject_IsDestructionThreadSafe);
    }

    auto const apiuapi_UObject_IsEditorOnly = (uapi_UObject_IsEditorOnlyFn)plugin->GetDllExport(TEXT("set_UObject_IsEditorOnly_handler\0"));
    if(apiuapi_UObject_IsEditorOnly){
        apiuapi_UObject_IsEditorOnly(&uapi_UObject_IsEditorOnly);
    }

    auto const apiuapi_UObject_IsFullNameStableForNetworking = (uapi_UObject_IsFullNameStableForNetworkingFn)plugin->GetDllExport(TEXT("set_UObject_IsFullNameStableForNetworking_handler\0"));
    if(apiuapi_UObject_IsFullNameStableForNetworking){
        apiuapi_UObject_IsFullNameStableForNetworking(&uapi_UObject_IsFullNameStableForNetworking);
    }

    auto const apiuapi_UObject_IsInBlueprint = (uapi_UObject_IsInBlueprintFn)plugin->GetDllExport(TEXT("set_UObject_IsInBlueprint_handler\0"));
    if(apiuapi_UObject_IsInBlueprint){
        apiuapi_UObject_IsInBlueprint(&uapi_UObject_IsInBlueprint);
    }

    auto const apiuapi_UObject_IsLocalizedResource = (uapi_UObject_IsLocalizedResourceFn)plugin->GetDllExport(TEXT("set_UObject_IsLocalizedResource_handler\0"));
    if(apiuapi_UObject_IsLocalizedResource){
        apiuapi_UObject_IsLocalizedResource(&uapi_UObject_IsLocalizedResource);
    }

    auto const apiuapi_UObject_IsNameStableForNetworking = (uapi_UObject_IsNameStableForNetworkingFn)plugin->GetDllExport(TEXT("set_UObject_IsNameStableForNetworking_handler\0"));
    if(apiuapi_UObject_IsNameStableForNetworking){
        apiuapi_UObject_IsNameStableForNetworking(&uapi_UObject_IsNameStableForNetworking);
    }

    auto const apiuapi_UObject_IsPostLoadThreadSafe = (uapi_UObject_IsPostLoadThreadSafeFn)plugin->GetDllExport(TEXT("set_UObject_IsPostLoadThreadSafe_handler\0"));
    if(apiuapi_UObject_IsPostLoadThreadSafe){
        apiuapi_UObject_IsPostLoadThreadSafe(&uapi_UObject_IsPostLoadThreadSafe);
    }

    auto const apiuapi_UObject_IsReadyForAsyncPostLoad = (uapi_UObject_IsReadyForAsyncPostLoadFn)plugin->GetDllExport(TEXT("set_UObject_IsReadyForAsyncPostLoad_handler\0"));
    if(apiuapi_UObject_IsReadyForAsyncPostLoad){
        apiuapi_UObject_IsReadyForAsyncPostLoad(&uapi_UObject_IsReadyForAsyncPostLoad);
    }

    auto const apiuapi_UObject_IsReadyForFinishDestroy = (uapi_UObject_IsReadyForFinishDestroyFn)plugin->GetDllExport(TEXT("set_UObject_IsReadyForFinishDestroy_handler\0"));
    if(apiuapi_UObject_IsReadyForFinishDestroy){
        apiuapi_UObject_IsReadyForFinishDestroy(&uapi_UObject_IsReadyForFinishDestroy);
    }

    auto const apiuapi_UObject_IsSafeForRootSet = (uapi_UObject_IsSafeForRootSetFn)plugin->GetDllExport(TEXT("set_UObject_IsSafeForRootSet_handler\0"));
    if(apiuapi_UObject_IsSafeForRootSet){
        apiuapi_UObject_IsSafeForRootSet(&uapi_UObject_IsSafeForRootSet);
    }

    auto const apiuapi_UObject_IsSelected = (uapi_UObject_IsSelectedFn)plugin->GetDllExport(TEXT("set_UObject_IsSelected_handler\0"));
    if(apiuapi_UObject_IsSelected){
        apiuapi_UObject_IsSelected(&uapi_UObject_IsSelected);
    }

    auto const apiuapi_UObject_IsSupportedForNetworking = (uapi_UObject_IsSupportedForNetworkingFn)plugin->GetDllExport(TEXT("set_UObject_IsSupportedForNetworking_handler\0"));
    if(apiuapi_UObject_IsSupportedForNetworking){
        apiuapi_UObject_IsSupportedForNetworking(&uapi_UObject_IsSupportedForNetworking);
    }

    auto const apiuapi_UObject_LoadConfig = (uapi_UObject_LoadConfigFn)plugin->GetDllExport(TEXT("set_UObject_LoadConfig_handler\0"));
    if(apiuapi_UObject_LoadConfig){
        apiuapi_UObject_LoadConfig(&uapi_UObject_LoadConfig);
    }

    auto const apiuapi_UObject_MarkAsEditorOnlySubobject = (uapi_UObject_MarkAsEditorOnlySubobjectFn)plugin->GetDllExport(TEXT("set_UObject_MarkAsEditorOnlySubobject_handler\0"));
    if(apiuapi_UObject_MarkAsEditorOnlySubobject){
        apiuapi_UObject_MarkAsEditorOnlySubobject(&uapi_UObject_MarkAsEditorOnlySubobject);
    }

    auto const apiuapi_UObject_Modify = (uapi_UObject_ModifyFn)plugin->GetDllExport(TEXT("set_UObject_Modify_handler\0"));
    if(apiuapi_UObject_Modify){
        apiuapi_UObject_Modify(&uapi_UObject_Modify);
    }

    auto const apiuapi_UObject_MoveDataToSparseClassDataStruct = (uapi_UObject_MoveDataToSparseClassDataStructFn)plugin->GetDllExport(TEXT("set_UObject_MoveDataToSparseClassDataStruct_handler\0"));
    if(apiuapi_UObject_MoveDataToSparseClassDataStruct){
        apiuapi_UObject_MoveDataToSparseClassDataStruct(&uapi_UObject_MoveDataToSparseClassDataStruct);
    }

    auto const apiuapi_UObject_NeedsLoadForClient = (uapi_UObject_NeedsLoadForClientFn)plugin->GetDllExport(TEXT("set_UObject_NeedsLoadForClient_handler\0"));
    if(apiuapi_UObject_NeedsLoadForClient){
        apiuapi_UObject_NeedsLoadForClient(&uapi_UObject_NeedsLoadForClient);
    }

    auto const apiuapi_UObject_NeedsLoadForEditorGame = (uapi_UObject_NeedsLoadForEditorGameFn)plugin->GetDllExport(TEXT("set_UObject_NeedsLoadForEditorGame_handler\0"));
    if(apiuapi_UObject_NeedsLoadForEditorGame){
        apiuapi_UObject_NeedsLoadForEditorGame(&uapi_UObject_NeedsLoadForEditorGame);
    }

    auto const apiuapi_UObject_NeedsLoadForServer = (uapi_UObject_NeedsLoadForServerFn)plugin->GetDllExport(TEXT("set_UObject_NeedsLoadForServer_handler\0"));
    if(apiuapi_UObject_NeedsLoadForServer){
        apiuapi_UObject_NeedsLoadForServer(&uapi_UObject_NeedsLoadForServer);
    }

    auto const apiuapi_UObject_NeedsLoadForTargetPlatform = (uapi_UObject_NeedsLoadForTargetPlatformFn)plugin->GetDllExport(TEXT("set_UObject_NeedsLoadForTargetPlatform_handler\0"));
    if(apiuapi_UObject_NeedsLoadForTargetPlatform){
        apiuapi_UObject_NeedsLoadForTargetPlatform(&uapi_UObject_NeedsLoadForTargetPlatform);
    }

    auto const apiuapi_UObject_ParseParms = (uapi_UObject_ParseParmsFn)plugin->GetDllExport(TEXT("set_UObject_ParseParms_handler\0"));
    if(apiuapi_UObject_ParseParms){
        apiuapi_UObject_ParseParms(&uapi_UObject_ParseParms);
    }

    auto const apiuapi_UObject_PostCDOContruct = (uapi_UObject_PostCDOContructFn)plugin->GetDllExport(TEXT("set_UObject_PostCDOContruct_handler\0"));
    if(apiuapi_UObject_PostCDOContruct){
        apiuapi_UObject_PostCDOContruct(&uapi_UObject_PostCDOContruct);
    }

    auto const apiuapi_UObject_PostDuplicate = (uapi_UObject_PostDuplicateFn)plugin->GetDllExport(TEXT("set_UObject_PostDuplicate_handler\0"));
    if(apiuapi_UObject_PostDuplicate){
        apiuapi_UObject_PostDuplicate(&uapi_UObject_PostDuplicate);
    }

    auto const apiuapi_UObject_PostEditChange = (uapi_UObject_PostEditChangeFn)plugin->GetDllExport(TEXT("set_UObject_PostEditChange_handler\0"));
    if(apiuapi_UObject_PostEditChange){
        apiuapi_UObject_PostEditChange(&uapi_UObject_PostEditChange);
    }

    auto const apiuapi_UObject_PostEditImport = (uapi_UObject_PostEditImportFn)plugin->GetDllExport(TEXT("set_UObject_PostEditImport_handler\0"));
    if(apiuapi_UObject_PostEditImport){
        apiuapi_UObject_PostEditImport(&uapi_UObject_PostEditImport);
    }

    auto const apiuapi_UObject_PostEditUndo = (uapi_UObject_PostEditUndoFn)plugin->GetDllExport(TEXT("set_UObject_PostEditUndo_handler\0"));
    if(apiuapi_UObject_PostEditUndo){
        apiuapi_UObject_PostEditUndo(&uapi_UObject_PostEditUndo);
    }

    auto const apiuapi_UObject_PostInitProperties = (uapi_UObject_PostInitPropertiesFn)plugin->GetDllExport(TEXT("set_UObject_PostInitProperties_handler\0"));
    if(apiuapi_UObject_PostInitProperties){
        apiuapi_UObject_PostInitProperties(&uapi_UObject_PostInitProperties);
    }

    auto const apiuapi_UObject_PostInterpChange = (uapi_UObject_PostInterpChangeFn)plugin->GetDllExport(TEXT("set_UObject_PostInterpChange_handler\0"));
    if(apiuapi_UObject_PostInterpChange){
        apiuapi_UObject_PostInterpChange(&uapi_UObject_PostInterpChange);
    }

    auto const apiuapi_UObject_PostLinkerChange = (uapi_UObject_PostLinkerChangeFn)plugin->GetDllExport(TEXT("set_UObject_PostLinkerChange_handler\0"));
    if(apiuapi_UObject_PostLinkerChange){
        apiuapi_UObject_PostLinkerChange(&uapi_UObject_PostLinkerChange);
    }

    auto const apiuapi_UObject_PostLoad = (uapi_UObject_PostLoadFn)plugin->GetDllExport(TEXT("set_UObject_PostLoad_handler\0"));
    if(apiuapi_UObject_PostLoad){
        apiuapi_UObject_PostLoad(&uapi_UObject_PostLoad);
    }

    auto const apiuapi_UObject_PostLoadSubobjects = (uapi_UObject_PostLoadSubobjectsFn)plugin->GetDllExport(TEXT("set_UObject_PostLoadSubobjects_handler\0"));
    if(apiuapi_UObject_PostLoadSubobjects){
        apiuapi_UObject_PostLoadSubobjects(&uapi_UObject_PostLoadSubobjects);
    }

    auto const apiuapi_UObject_PostNetReceive = (uapi_UObject_PostNetReceiveFn)plugin->GetDllExport(TEXT("set_UObject_PostNetReceive_handler\0"));
    if(apiuapi_UObject_PostNetReceive){
        apiuapi_UObject_PostNetReceive(&uapi_UObject_PostNetReceive);
    }

    auto const apiuapi_UObject_PostReinitProperties = (uapi_UObject_PostReinitPropertiesFn)plugin->GetDllExport(TEXT("set_UObject_PostReinitProperties_handler\0"));
    if(apiuapi_UObject_PostReinitProperties){
        apiuapi_UObject_PostReinitProperties(&uapi_UObject_PostReinitProperties);
    }

    auto const apiuapi_UObject_PostReloadConfig = (uapi_UObject_PostReloadConfigFn)plugin->GetDllExport(TEXT("set_UObject_PostReloadConfig_handler\0"));
    if(apiuapi_UObject_PostReloadConfig){
        apiuapi_UObject_PostReloadConfig(&uapi_UObject_PostReloadConfig);
    }

    auto const apiuapi_UObject_PostRename = (uapi_UObject_PostRenameFn)plugin->GetDllExport(TEXT("set_UObject_PostRename_handler\0"));
    if(apiuapi_UObject_PostRename){
        apiuapi_UObject_PostRename(&uapi_UObject_PostRename);
    }

    auto const apiuapi_UObject_PostRepNotifies = (uapi_UObject_PostRepNotifiesFn)plugin->GetDllExport(TEXT("set_UObject_PostRepNotifies_handler\0"));
    if(apiuapi_UObject_PostRepNotifies){
        apiuapi_UObject_PostRepNotifies(&uapi_UObject_PostRepNotifies);
    }

    auto const apiuapi_UObject_PreDestroyFromReplication = (uapi_UObject_PreDestroyFromReplicationFn)plugin->GetDllExport(TEXT("set_UObject_PreDestroyFromReplication_handler\0"));
    if(apiuapi_UObject_PreDestroyFromReplication){
        apiuapi_UObject_PreDestroyFromReplication(&uapi_UObject_PreDestroyFromReplication);
    }

    auto const apiuapi_UObject_PreEditChange = (uapi_UObject_PreEditChangeFn)plugin->GetDllExport(TEXT("set_UObject_PreEditChange_handler\0"));
    if(apiuapi_UObject_PreEditChange){
        apiuapi_UObject_PreEditChange(&uapi_UObject_PreEditChange);
    }

    auto const apiuapi_UObject_PreEditUndo = (uapi_UObject_PreEditUndoFn)plugin->GetDllExport(TEXT("set_UObject_PreEditUndo_handler\0"));
    if(apiuapi_UObject_PreEditUndo){
        apiuapi_UObject_PreEditUndo(&uapi_UObject_PreEditUndo);
    }

    auto const apiuapi_UObject_PreNetReceive = (uapi_UObject_PreNetReceiveFn)plugin->GetDllExport(TEXT("set_UObject_PreNetReceive_handler\0"));
    if(apiuapi_UObject_PreNetReceive){
        apiuapi_UObject_PreNetReceive(&uapi_UObject_PreNetReceive);
    }

    auto const apiuapi_UObject_RegenerateClass = (uapi_UObject_RegenerateClassFn)plugin->GetDllExport(TEXT("set_UObject_RegenerateClass_handler\0"));
    if(apiuapi_UObject_RegenerateClass){
        apiuapi_UObject_RegenerateClass(&uapi_UObject_RegenerateClass);
    }

    auto const apiuapi_UObject_ReinitializeProperties = (uapi_UObject_ReinitializePropertiesFn)plugin->GetDllExport(TEXT("set_UObject_ReinitializeProperties_handler\0"));
    if(apiuapi_UObject_ReinitializeProperties){
        apiuapi_UObject_ReinitializeProperties(&uapi_UObject_ReinitializeProperties);
    }

    auto const apiuapi_UObject_ReloadConfig = (uapi_UObject_ReloadConfigFn)plugin->GetDllExport(TEXT("set_UObject_ReloadConfig_handler\0"));
    if(apiuapi_UObject_ReloadConfig){
        apiuapi_UObject_ReloadConfig(&uapi_UObject_ReloadConfig);
    }

    auto const apiuapi_UObject_SaveConfig = (uapi_UObject_SaveConfigFn)plugin->GetDllExport(TEXT("set_UObject_SaveConfig_handler\0"));
    if(apiuapi_UObject_SaveConfig){
        apiuapi_UObject_SaveConfig(&uapi_UObject_SaveConfig);
    }

    auto const apiuapi_UObject_SetLinker = (uapi_UObject_SetLinkerFn)plugin->GetDllExport(TEXT("set_UObject_SetLinker_handler\0"));
    if(apiuapi_UObject_SetLinker){
        apiuapi_UObject_SetLinker(&uapi_UObject_SetLinker);
    }

    auto const apiuapi_UObject_ShutdownAfterError = (uapi_UObject_ShutdownAfterErrorFn)plugin->GetDllExport(TEXT("set_UObject_ShutdownAfterError_handler\0"));
    if(apiuapi_UObject_ShutdownAfterError){
        apiuapi_UObject_ShutdownAfterError(&uapi_UObject_ShutdownAfterError);
    }

    auto const apiuapi_UObject_UpdateGlobalUserConfigFile = (uapi_UObject_UpdateGlobalUserConfigFileFn)plugin->GetDllExport(TEXT("set_UObject_UpdateGlobalUserConfigFile_handler\0"));
    if(apiuapi_UObject_UpdateGlobalUserConfigFile){
        apiuapi_UObject_UpdateGlobalUserConfigFile(&uapi_UObject_UpdateGlobalUserConfigFile);
    }

    auto const apiuapi_UObject_UpdateProjectUserConfigFile = (uapi_UObject_UpdateProjectUserConfigFileFn)plugin->GetDllExport(TEXT("set_UObject_UpdateProjectUserConfigFile_handler\0"));
    if(apiuapi_UObject_UpdateProjectUserConfigFile){
        apiuapi_UObject_UpdateProjectUserConfigFile(&uapi_UObject_UpdateProjectUserConfigFile);
    }

    auto const apiuapi_UObject_WillNeverCacheCookedPlatformDataAgain = (uapi_UObject_WillNeverCacheCookedPlatformDataAgainFn)plugin->GetDllExport(TEXT("set_UObject_WillNeverCacheCookedPlatformDataAgain_handler\0"));
    if(apiuapi_UObject_WillNeverCacheCookedPlatformDataAgain){
        apiuapi_UObject_WillNeverCacheCookedPlatformDataAgain(&uapi_UObject_WillNeverCacheCookedPlatformDataAgain);
    }

    auto const apiuapi_AActor_ActorHasTag = (uapi_AActor_ActorHasTagFn)plugin->GetDllExport(TEXT("set_AActor_ActorHasTag_handler\0"));
    if(apiuapi_AActor_ActorHasTag){
        apiuapi_AActor_ActorHasTag(&uapi_AActor_ActorHasTag);
    }

    auto const apiuapi_AActor_ActorToWorld = (uapi_AActor_ActorToWorldFn)plugin->GetDllExport(TEXT("set_AActor_ActorToWorld_handler\0"));
    if(apiuapi_AActor_ActorToWorld){
        apiuapi_AActor_ActorToWorld(&uapi_AActor_ActorToWorld);
    }

    auto const apiuapi_AActor_AddDataLayer = (uapi_AActor_AddDataLayerFn)plugin->GetDllExport(TEXT("set_AActor_AddDataLayer_handler\0"));
    if(apiuapi_AActor_AddDataLayer){
        apiuapi_AActor_AddDataLayer(&uapi_AActor_AddDataLayer);
    }

    auto const apiuapi_AActor_AddInstanceComponent = (uapi_AActor_AddInstanceComponentFn)plugin->GetDllExport(TEXT("set_AActor_AddInstanceComponent_handler\0"));
    if(apiuapi_AActor_AddInstanceComponent){
        apiuapi_AActor_AddInstanceComponent(&uapi_AActor_AddInstanceComponent);
    }

    auto const apiuapi_AActor_AddOwnedComponent = (uapi_AActor_AddOwnedComponentFn)plugin->GetDllExport(TEXT("set_AActor_AddOwnedComponent_handler\0"));
    if(apiuapi_AActor_AddOwnedComponent){
        apiuapi_AActor_AddOwnedComponent(&uapi_AActor_AddOwnedComponent);
    }

    auto const apiuapi_AActor_AddTickPrerequisiteActor = (uapi_AActor_AddTickPrerequisiteActorFn)plugin->GetDllExport(TEXT("set_AActor_AddTickPrerequisiteActor_handler\0"));
    if(apiuapi_AActor_AddTickPrerequisiteActor){
        apiuapi_AActor_AddTickPrerequisiteActor(&uapi_AActor_AddTickPrerequisiteActor);
    }

    auto const apiuapi_AActor_AddTickPrerequisiteComponent = (uapi_AActor_AddTickPrerequisiteComponentFn)plugin->GetDllExport(TEXT("set_AActor_AddTickPrerequisiteComponent_handler\0"));
    if(apiuapi_AActor_AddTickPrerequisiteComponent){
        apiuapi_AActor_AddTickPrerequisiteComponent(&uapi_AActor_AddTickPrerequisiteComponent);
    }

    auto const apiuapi_AActor_AllowReceiveTickEventOnDedicatedServer = (uapi_AActor_AllowReceiveTickEventOnDedicatedServerFn)plugin->GetDllExport(TEXT("set_AActor_AllowReceiveTickEventOnDedicatedServer_handler\0"));
    if(apiuapi_AActor_AllowReceiveTickEventOnDedicatedServer){
        apiuapi_AActor_AllowReceiveTickEventOnDedicatedServer(&uapi_AActor_AllowReceiveTickEventOnDedicatedServer);
    }

    auto const apiuapi_AActor_AsyncPhysicsTickActor = (uapi_AActor_AsyncPhysicsTickActorFn)plugin->GetDllExport(TEXT("set_AActor_AsyncPhysicsTickActor_handler\0"));
    if(apiuapi_AActor_AsyncPhysicsTickActor){
        apiuapi_AActor_AsyncPhysicsTickActor(&uapi_AActor_AsyncPhysicsTickActor);
    }

    auto const apiuapi_AActor_BecomeViewTarget = (uapi_AActor_BecomeViewTargetFn)plugin->GetDllExport(TEXT("set_AActor_BecomeViewTarget_handler\0"));
    if(apiuapi_AActor_BecomeViewTarget){
        apiuapi_AActor_BecomeViewTarget(&uapi_AActor_BecomeViewTarget);
    }

    auto const apiuapi_AActor_CallPreReplication = (uapi_AActor_CallPreReplicationFn)plugin->GetDllExport(TEXT("set_AActor_CallPreReplication_handler\0"));
    if(apiuapi_AActor_CallPreReplication){
        apiuapi_AActor_CallPreReplication(&uapi_AActor_CallPreReplication);
    }

    auto const apiuapi_AActor_CallRemoteFunction = (uapi_AActor_CallRemoteFunctionFn)plugin->GetDllExport(TEXT("set_AActor_CallRemoteFunction_handler\0"));
    if(apiuapi_AActor_CallRemoteFunction){
        apiuapi_AActor_CallRemoteFunction(&uapi_AActor_CallRemoteFunction);
    }

    auto const apiuapi_AActor_CanBeBaseForCharacter = (uapi_AActor_CanBeBaseForCharacterFn)plugin->GetDllExport(TEXT("set_AActor_CanBeBaseForCharacter_handler\0"));
    if(apiuapi_AActor_CanBeBaseForCharacter){
        apiuapi_AActor_CanBeBaseForCharacter(&uapi_AActor_CanBeBaseForCharacter);
    }

    auto const apiuapi_AActor_CanBeDamaged = (uapi_AActor_CanBeDamagedFn)plugin->GetDllExport(TEXT("set_AActor_CanBeDamaged_handler\0"));
    if(apiuapi_AActor_CanBeDamaged){
        apiuapi_AActor_CanBeDamaged(&uapi_AActor_CanBeDamaged);
    }

    auto const apiuapi_AActor_CanBeInCluster = (uapi_AActor_CanBeInClusterFn)plugin->GetDllExport(TEXT("set_AActor_CanBeInCluster_handler\0"));
    if(apiuapi_AActor_CanBeInCluster){
        apiuapi_AActor_CanBeInCluster(&uapi_AActor_CanBeInCluster);
    }

    auto const apiuapi_AActor_CanChangeIsSpatiallyLoadedFlag = (uapi_AActor_CanChangeIsSpatiallyLoadedFlagFn)plugin->GetDllExport(TEXT("set_AActor_CanChangeIsSpatiallyLoadedFlag_handler\0"));
    if(apiuapi_AActor_CanChangeIsSpatiallyLoadedFlag){
        apiuapi_AActor_CanChangeIsSpatiallyLoadedFlag(&uapi_AActor_CanChangeIsSpatiallyLoadedFlag);
    }

    auto const apiuapi_AActor_CanEditChange = (uapi_AActor_CanEditChangeFn)plugin->GetDllExport(TEXT("set_AActor_CanEditChange_handler\0"));
    if(apiuapi_AActor_CanEditChange){
        apiuapi_AActor_CanEditChange(&uapi_AActor_CanEditChange);
    }

    auto const apiuapi_AActor_CanEditChangeComponent = (uapi_AActor_CanEditChangeComponentFn)plugin->GetDllExport(TEXT("set_AActor_CanEditChangeComponent_handler\0"));
    if(apiuapi_AActor_CanEditChangeComponent){
        apiuapi_AActor_CanEditChangeComponent(&uapi_AActor_CanEditChangeComponent);
    }

    auto const apiuapi_AActor_CanEverTick = (uapi_AActor_CanEverTickFn)plugin->GetDllExport(TEXT("set_AActor_CanEverTick_handler\0"));
    if(apiuapi_AActor_CanEverTick){
        apiuapi_AActor_CanEverTick(&uapi_AActor_CanEverTick);
    }

    auto const apiuapi_AActor_CanPlayFromHere = (uapi_AActor_CanPlayFromHereFn)plugin->GetDllExport(TEXT("set_AActor_CanPlayFromHere_handler\0"));
    if(apiuapi_AActor_CanPlayFromHere){
        apiuapi_AActor_CanPlayFromHere(&uapi_AActor_CanPlayFromHere);
    }

    auto const apiuapi_AActor_CheckComponentInstanceName = (uapi_AActor_CheckComponentInstanceNameFn)plugin->GetDllExport(TEXT("set_AActor_CheckComponentInstanceName_handler\0"));
    if(apiuapi_AActor_CheckComponentInstanceName){
        apiuapi_AActor_CheckComponentInstanceName(&uapi_AActor_CheckComponentInstanceName);
    }

    auto const apiuapi_AActor_CheckDefaultSubobjectsInternal = (uapi_AActor_CheckDefaultSubobjectsInternalFn)plugin->GetDllExport(TEXT("set_AActor_CheckDefaultSubobjectsInternal_handler\0"));
    if(apiuapi_AActor_CheckDefaultSubobjectsInternal){
        apiuapi_AActor_CheckDefaultSubobjectsInternal(&uapi_AActor_CheckDefaultSubobjectsInternal);
    }

    auto const apiuapi_AActor_CheckForDeprecated = (uapi_AActor_CheckForDeprecatedFn)plugin->GetDllExport(TEXT("set_AActor_CheckForDeprecated_handler\0"));
    if(apiuapi_AActor_CheckForDeprecated){
        apiuapi_AActor_CheckForDeprecated(&uapi_AActor_CheckForDeprecated);
    }

    auto const apiuapi_AActor_CheckForErrors = (uapi_AActor_CheckForErrorsFn)plugin->GetDllExport(TEXT("set_AActor_CheckForErrors_handler\0"));
    if(apiuapi_AActor_CheckForErrors){
        apiuapi_AActor_CheckForErrors(&uapi_AActor_CheckForErrors);
    }

    auto const apiuapi_AActor_CheckStillInWorld = (uapi_AActor_CheckStillInWorldFn)plugin->GetDllExport(TEXT("set_AActor_CheckStillInWorld_handler\0"));
    if(apiuapi_AActor_CheckStillInWorld){
        apiuapi_AActor_CheckStillInWorld(&uapi_AActor_CheckStillInWorld);
    }

    auto const apiuapi_AActor_ClearActorLabel = (uapi_AActor_ClearActorLabelFn)plugin->GetDllExport(TEXT("set_AActor_ClearActorLabel_handler\0"));
    if(apiuapi_AActor_ClearActorLabel){
        apiuapi_AActor_ClearActorLabel(&uapi_AActor_ClearActorLabel);
    }

    auto const apiuapi_AActor_ClearComponentOverlaps = (uapi_AActor_ClearComponentOverlapsFn)plugin->GetDllExport(TEXT("set_AActor_ClearComponentOverlaps_handler\0"));
    if(apiuapi_AActor_ClearComponentOverlaps){
        apiuapi_AActor_ClearComponentOverlaps(&uapi_AActor_ClearComponentOverlaps);
    }

    auto const apiuapi_AActor_ClearCrossLevelReferences = (uapi_AActor_ClearCrossLevelReferencesFn)plugin->GetDllExport(TEXT("set_AActor_ClearCrossLevelReferences_handler\0"));
    if(apiuapi_AActor_ClearCrossLevelReferences){
        apiuapi_AActor_ClearCrossLevelReferences(&uapi_AActor_ClearCrossLevelReferences);
    }

    auto const apiuapi_AActor_ClearInstanceComponents = (uapi_AActor_ClearInstanceComponentsFn)plugin->GetDllExport(TEXT("set_AActor_ClearInstanceComponents_handler\0"));
    if(apiuapi_AActor_ClearInstanceComponents){
        apiuapi_AActor_ClearInstanceComponents(&uapi_AActor_ClearInstanceComponents);
    }

    auto const apiuapi_AActor_ContainsDataLayer = (uapi_AActor_ContainsDataLayerFn)plugin->GetDllExport(TEXT("set_AActor_ContainsDataLayer_handler\0"));
    if(apiuapi_AActor_ContainsDataLayer){
        apiuapi_AActor_ContainsDataLayer(&uapi_AActor_ContainsDataLayer);
    }

    auto const apiuapi_AActor_CopyRemoteRoleFrom = (uapi_AActor_CopyRemoteRoleFromFn)plugin->GetDllExport(TEXT("set_AActor_CopyRemoteRoleFrom_handler\0"));
    if(apiuapi_AActor_CopyRemoteRoleFrom){
        apiuapi_AActor_CopyRemoteRoleFrom(&uapi_AActor_CopyRemoteRoleFrom);
    }

    auto const apiuapi_AActor_CreateComponentFromTemplate = (uapi_AActor_CreateComponentFromTemplateFn)plugin->GetDllExport(TEXT("set_AActor_CreateComponentFromTemplate_handler\0"));
    if(apiuapi_AActor_CreateComponentFromTemplate){
        apiuapi_AActor_CreateComponentFromTemplate(&uapi_AActor_CreateComponentFromTemplate);
    }

    auto const apiuapi_AActor_CreateComponentFromTemplateData = (uapi_AActor_CreateComponentFromTemplateDataFn)plugin->GetDllExport(TEXT("set_AActor_CreateComponentFromTemplateData_handler\0"));
    if(apiuapi_AActor_CreateComponentFromTemplateData){
        apiuapi_AActor_CreateComponentFromTemplateData(&uapi_AActor_CreateComponentFromTemplateData);
    }

    auto const apiuapi_AActor_CreateOrUpdateActorFolder = (uapi_AActor_CreateOrUpdateActorFolderFn)plugin->GetDllExport(TEXT("set_AActor_CreateOrUpdateActorFolder_handler\0"));
    if(apiuapi_AActor_CreateOrUpdateActorFolder){
        apiuapi_AActor_CreateOrUpdateActorFolder(&uapi_AActor_CreateOrUpdateActorFolder);
    }

    auto const apiuapi_AActor_DebugShowComponentHierarchy = (uapi_AActor_DebugShowComponentHierarchyFn)plugin->GetDllExport(TEXT("set_AActor_DebugShowComponentHierarchy_handler\0"));
    if(apiuapi_AActor_DebugShowComponentHierarchy){
        apiuapi_AActor_DebugShowComponentHierarchy(&uapi_AActor_DebugShowComponentHierarchy);
    }

    auto const apiuapi_AActor_DebugShowOneComponentHierarchy = (uapi_AActor_DebugShowOneComponentHierarchyFn)plugin->GetDllExport(TEXT("set_AActor_DebugShowOneComponentHierarchy_handler\0"));
    if(apiuapi_AActor_DebugShowOneComponentHierarchy){
        apiuapi_AActor_DebugShowOneComponentHierarchy(&uapi_AActor_DebugShowOneComponentHierarchy);
    }

    auto const apiuapi_AActor_Destroy = (uapi_AActor_DestroyFn)plugin->GetDllExport(TEXT("set_AActor_Destroy_handler\0"));
    if(apiuapi_AActor_Destroy){
        apiuapi_AActor_Destroy(&uapi_AActor_Destroy);
    }

    auto const apiuapi_AActor_DestroyConstructedComponents = (uapi_AActor_DestroyConstructedComponentsFn)plugin->GetDllExport(TEXT("set_AActor_DestroyConstructedComponents_handler\0"));
    if(apiuapi_AActor_DestroyConstructedComponents){
        apiuapi_AActor_DestroyConstructedComponents(&uapi_AActor_DestroyConstructedComponents);
    }

    auto const apiuapi_AActor_DestroyNetworkActorHandled = (uapi_AActor_DestroyNetworkActorHandledFn)plugin->GetDllExport(TEXT("set_AActor_DestroyNetworkActorHandled_handler\0"));
    if(apiuapi_AActor_DestroyNetworkActorHandled){
        apiuapi_AActor_DestroyNetworkActorHandled(&uapi_AActor_DestroyNetworkActorHandled);
    }

    auto const apiuapi_AActor_Destroyed = (uapi_AActor_DestroyedFn)plugin->GetDllExport(TEXT("set_AActor_Destroyed_handler\0"));
    if(apiuapi_AActor_Destroyed){
        apiuapi_AActor_Destroyed(&uapi_AActor_Destroyed);
    }

    auto const apiuapi_AActor_DisableComponentsSimulatePhysics = (uapi_AActor_DisableComponentsSimulatePhysicsFn)plugin->GetDllExport(TEXT("set_AActor_DisableComponentsSimulatePhysics_handler\0"));
    if(apiuapi_AActor_DisableComponentsSimulatePhysics){
        apiuapi_AActor_DisableComponentsSimulatePhysics(&uapi_AActor_DisableComponentsSimulatePhysics);
    }

    auto const apiuapi_AActor_DisableInput = (uapi_AActor_DisableInputFn)plugin->GetDllExport(TEXT("set_AActor_DisableInput_handler\0"));
    if(apiuapi_AActor_DisableInput){
        apiuapi_AActor_DisableInput(&uapi_AActor_DisableInput);
    }

    auto const apiuapi_AActor_DispatchBeginPlay = (uapi_AActor_DispatchBeginPlayFn)plugin->GetDllExport(TEXT("set_AActor_DispatchBeginPlay_handler\0"));
    if(apiuapi_AActor_DispatchBeginPlay){
        apiuapi_AActor_DispatchBeginPlay(&uapi_AActor_DispatchBeginPlay);
    }

    auto const apiuapi_AActor_EditorReplacedActor = (uapi_AActor_EditorReplacedActorFn)plugin->GetDllExport(TEXT("set_AActor_EditorReplacedActor_handler\0"));
    if(apiuapi_AActor_EditorReplacedActor){
        apiuapi_AActor_EditorReplacedActor(&uapi_AActor_EditorReplacedActor);
    }

    auto const apiuapi_AActor_EnableInput = (uapi_AActor_EnableInputFn)plugin->GetDllExport(TEXT("set_AActor_EnableInput_handler\0"));
    if(apiuapi_AActor_EnableInput){
        apiuapi_AActor_EnableInput(&uapi_AActor_EnableInput);
    }

    auto const apiuapi_AActor_EndViewTarget = (uapi_AActor_EndViewTargetFn)plugin->GetDllExport(TEXT("set_AActor_EndViewTarget_handler\0"));
    if(apiuapi_AActor_EndViewTarget){
        apiuapi_AActor_EndViewTarget(&uapi_AActor_EndViewTarget);
    }

    auto const apiuapi_AActor_ExchangeNetRoles = (uapi_AActor_ExchangeNetRolesFn)plugin->GetDllExport(TEXT("set_AActor_ExchangeNetRoles_handler\0"));
    if(apiuapi_AActor_ExchangeNetRoles){
        apiuapi_AActor_ExchangeNetRoles(&uapi_AActor_ExchangeNetRoles);
    }

    auto const apiuapi_AActor_FindActorInPackage = (uapi_AActor_FindActorInPackageFn)plugin->GetDllExport(TEXT("set_AActor_FindActorInPackage_handler\0"));
    if(apiuapi_AActor_FindActorInPackage){
        apiuapi_AActor_FindActorInPackage(&uapi_AActor_FindActorInPackage);
    }

    auto const apiuapi_AActor_FinishAndRegisterComponent = (uapi_AActor_FinishAndRegisterComponentFn)plugin->GetDllExport(TEXT("set_AActor_FinishAndRegisterComponent_handler\0"));
    if(apiuapi_AActor_FinishAndRegisterComponent){
        apiuapi_AActor_FinishAndRegisterComponent(&uapi_AActor_FinishAndRegisterComponent);
    }

    auto const apiuapi_AActor_FixupActorFolder = (uapi_AActor_FixupActorFolderFn)plugin->GetDllExport(TEXT("set_AActor_FixupActorFolder_handler\0"));
    if(apiuapi_AActor_FixupActorFolder){
        apiuapi_AActor_FixupActorFolder(&uapi_AActor_FixupActorFolder);
    }

    auto const apiuapi_AActor_FixupDataLayers = (uapi_AActor_FixupDataLayersFn)plugin->GetDllExport(TEXT("set_AActor_FixupDataLayers_handler\0"));
    if(apiuapi_AActor_FixupDataLayers){
        apiuapi_AActor_FixupDataLayers(&uapi_AActor_FixupDataLayers);
    }

    auto const apiuapi_AActor_FlushNetDormancy = (uapi_AActor_FlushNetDormancyFn)plugin->GetDllExport(TEXT("set_AActor_FlushNetDormancy_handler\0"));
    if(apiuapi_AActor_FlushNetDormancy){
        apiuapi_AActor_FlushNetDormancy(&uapi_AActor_FlushNetDormancy);
    }

    auto const apiuapi_AActor_ForceNetRelevant = (uapi_AActor_ForceNetRelevantFn)plugin->GetDllExport(TEXT("set_AActor_ForceNetRelevant_handler\0"));
    if(apiuapi_AActor_ForceNetRelevant){
        apiuapi_AActor_ForceNetRelevant(&uapi_AActor_ForceNetRelevant);
    }

    auto const apiuapi_AActor_ForceNetUpdate = (uapi_AActor_ForceNetUpdateFn)plugin->GetDllExport(TEXT("set_AActor_ForceNetUpdate_handler\0"));
    if(apiuapi_AActor_ForceNetUpdate){
        apiuapi_AActor_ForceNetUpdate(&uapi_AActor_ForceNetUpdate);
    }

    auto const apiuapi_AActor_ForcePropertyCompare = (uapi_AActor_ForcePropertyCompareFn)plugin->GetDllExport(TEXT("set_AActor_ForcePropertyCompare_handler\0"));
    if(apiuapi_AActor_ForcePropertyCompare){
        apiuapi_AActor_ForcePropertyCompare(&uapi_AActor_ForcePropertyCompare);
    }

    auto const apiuapi_AActor_GatherCurrentMovement = (uapi_AActor_GatherCurrentMovementFn)plugin->GetDllExport(TEXT("set_AActor_GatherCurrentMovement_handler\0"));
    if(apiuapi_AActor_GatherCurrentMovement){
        apiuapi_AActor_GatherCurrentMovement(&uapi_AActor_GatherCurrentMovement);
    }

    auto const apiuapi_AActor_GetActorEnableCollision = (uapi_AActor_GetActorEnableCollisionFn)plugin->GetDllExport(TEXT("set_AActor_GetActorEnableCollision_handler\0"));
    if(apiuapi_AActor_GetActorEnableCollision){
        apiuapi_AActor_GetActorEnableCollision(&uapi_AActor_GetActorEnableCollision);
    }

    auto const apiuapi_AActor_GetActorForwardVector = (uapi_AActor_GetActorForwardVectorFn)plugin->GetDllExport(TEXT("set_AActor_GetActorForwardVector_handler\0"));
    if(apiuapi_AActor_GetActorForwardVector){
        apiuapi_AActor_GetActorForwardVector(&uapi_AActor_GetActorForwardVector);
    }

    auto const apiuapi_AActor_GetActorGuid = (uapi_AActor_GetActorGuidFn)plugin->GetDllExport(TEXT("set_AActor_GetActorGuid_handler\0"));
    if(apiuapi_AActor_GetActorGuid){
        apiuapi_AActor_GetActorGuid(&uapi_AActor_GetActorGuid);
    }

    auto const apiuapi_AActor_GetActorLocation = (uapi_AActor_GetActorLocationFn)plugin->GetDllExport(TEXT("set_AActor_GetActorLocation_handler\0"));
    if(apiuapi_AActor_GetActorLocation){
        apiuapi_AActor_GetActorLocation(&uapi_AActor_GetActorLocation);
    }

    auto const apiuapi_AActor_GetActorNameOrLabel = (uapi_AActor_GetActorNameOrLabelFn)plugin->GetDllExport(TEXT("set_AActor_GetActorNameOrLabel_handler\0"));
    if(apiuapi_AActor_GetActorNameOrLabel){
        apiuapi_AActor_GetActorNameOrLabel(&uapi_AActor_GetActorNameOrLabel);
    }

    auto const apiuapi_AActor_GetActorQuat = (uapi_AActor_GetActorQuatFn)plugin->GetDllExport(TEXT("set_AActor_GetActorQuat_handler\0"));
    if(apiuapi_AActor_GetActorQuat){
        apiuapi_AActor_GetActorQuat(&uapi_AActor_GetActorQuat);
    }

    auto const apiuapi_AActor_GetActorRelativeScale3D = (uapi_AActor_GetActorRelativeScale3DFn)plugin->GetDllExport(TEXT("set_AActor_GetActorRelativeScale3D_handler\0"));
    if(apiuapi_AActor_GetActorRelativeScale3D){
        apiuapi_AActor_GetActorRelativeScale3D(&uapi_AActor_GetActorRelativeScale3D);
    }

    auto const apiuapi_AActor_GetActorRightVector = (uapi_AActor_GetActorRightVectorFn)plugin->GetDllExport(TEXT("set_AActor_GetActorRightVector_handler\0"));
    if(apiuapi_AActor_GetActorRightVector){
        apiuapi_AActor_GetActorRightVector(&uapi_AActor_GetActorRightVector);
    }

    auto const apiuapi_AActor_GetActorRotation = (uapi_AActor_GetActorRotationFn)plugin->GetDllExport(TEXT("set_AActor_GetActorRotation_handler\0"));
    if(apiuapi_AActor_GetActorRotation){
        apiuapi_AActor_GetActorRotation(&uapi_AActor_GetActorRotation);
    }

    auto const apiuapi_AActor_GetActorScale = (uapi_AActor_GetActorScaleFn)plugin->GetDllExport(TEXT("set_AActor_GetActorScale_handler\0"));
    if(apiuapi_AActor_GetActorScale){
        apiuapi_AActor_GetActorScale(&uapi_AActor_GetActorScale);
    }

    auto const apiuapi_AActor_GetActorScale3D = (uapi_AActor_GetActorScale3DFn)plugin->GetDllExport(TEXT("set_AActor_GetActorScale3D_handler\0"));
    if(apiuapi_AActor_GetActorScale3D){
        apiuapi_AActor_GetActorScale3D(&uapi_AActor_GetActorScale3D);
    }

    auto const apiuapi_AActor_GetActorTickInterval = (uapi_AActor_GetActorTickIntervalFn)plugin->GetDllExport(TEXT("set_AActor_GetActorTickInterval_handler\0"));
    if(apiuapi_AActor_GetActorTickInterval){
        apiuapi_AActor_GetActorTickInterval(&uapi_AActor_GetActorTickInterval);
    }

    auto const apiuapi_AActor_GetActorTimeDilation = (uapi_AActor_GetActorTimeDilationFn)plugin->GetDllExport(TEXT("set_AActor_GetActorTimeDilation_handler\0"));
    if(apiuapi_AActor_GetActorTimeDilation){
        apiuapi_AActor_GetActorTimeDilation(&uapi_AActor_GetActorTimeDilation);
    }

    auto const apiuapi_AActor_GetActorTimeDilation2 = (uapi_AActor_GetActorTimeDilation2Fn)plugin->GetDllExport(TEXT("set_AActor_GetActorTimeDilation2_handler\0"));
    if(apiuapi_AActor_GetActorTimeDilation2){
        apiuapi_AActor_GetActorTimeDilation2(&uapi_AActor_GetActorTimeDilation2);
    }

    auto const apiuapi_AActor_GetActorTransform = (uapi_AActor_GetActorTransformFn)plugin->GetDllExport(TEXT("set_AActor_GetActorTransform_handler\0"));
    if(apiuapi_AActor_GetActorTransform){
        apiuapi_AActor_GetActorTransform(&uapi_AActor_GetActorTransform);
    }

    auto const apiuapi_AActor_GetActorUpVector = (uapi_AActor_GetActorUpVectorFn)plugin->GetDllExport(TEXT("set_AActor_GetActorUpVector_handler\0"));
    if(apiuapi_AActor_GetActorUpVector){
        apiuapi_AActor_GetActorUpVector(&uapi_AActor_GetActorUpVector);
    }

    auto const apiuapi_AActor_GetAttachParentActor = (uapi_AActor_GetAttachParentActorFn)plugin->GetDllExport(TEXT("set_AActor_GetAttachParentActor_handler\0"));
    if(apiuapi_AActor_GetAttachParentActor){
        apiuapi_AActor_GetAttachParentActor(&uapi_AActor_GetAttachParentActor);
    }

    auto const apiuapi_AActor_GetAttachParentSocketName = (uapi_AActor_GetAttachParentSocketNameFn)plugin->GetDllExport(TEXT("set_AActor_GetAttachParentSocketName_handler\0"));
    if(apiuapi_AActor_GetAttachParentSocketName){
        apiuapi_AActor_GetAttachParentSocketName(&uapi_AActor_GetAttachParentSocketName);
    }

    auto const apiuapi_AActor_GetAutoDestroyWhenFinished = (uapi_AActor_GetAutoDestroyWhenFinishedFn)plugin->GetDllExport(TEXT("set_AActor_GetAutoDestroyWhenFinished_handler\0"));
    if(apiuapi_AActor_GetAutoDestroyWhenFinished){
        apiuapi_AActor_GetAutoDestroyWhenFinished(&uapi_AActor_GetAutoDestroyWhenFinished);
    }

    auto const apiuapi_AActor_GetCanBeDamagedPropertyName = (uapi_AActor_GetCanBeDamagedPropertyNameFn)plugin->GetDllExport(TEXT("set_AActor_GetCanBeDamagedPropertyName_handler\0"));
    if(apiuapi_AActor_GetCanBeDamagedPropertyName){
        apiuapi_AActor_GetCanBeDamagedPropertyName(&uapi_AActor_GetCanBeDamagedPropertyName);
    }

    auto const apiuapi_AActor_GetComponentsBoundingCylinder = (uapi_AActor_GetComponentsBoundingCylinderFn)plugin->GetDllExport(TEXT("set_AActor_GetComponentsBoundingCylinder_handler\0"));
    if(apiuapi_AActor_GetComponentsBoundingCylinder){
        apiuapi_AActor_GetComponentsBoundingCylinder(&uapi_AActor_GetComponentsBoundingCylinder);
    }

    auto const apiuapi_AActor_GetContentBundleGuid = (uapi_AActor_GetContentBundleGuidFn)plugin->GetDllExport(TEXT("set_AActor_GetContentBundleGuid_handler\0"));
    if(apiuapi_AActor_GetContentBundleGuid){
        apiuapi_AActor_GetContentBundleGuid(&uapi_AActor_GetContentBundleGuid);
    }

    auto const apiuapi_AActor_GetCustomIconName = (uapi_AActor_GetCustomIconNameFn)plugin->GetDllExport(TEXT("set_AActor_GetCustomIconName_handler\0"));
    if(apiuapi_AActor_GetCustomIconName){
        apiuapi_AActor_GetCustomIconName(&uapi_AActor_GetCustomIconName);
    }

    auto const apiuapi_AActor_GetDataLayerAssetsPropertyName = (uapi_AActor_GetDataLayerAssetsPropertyNameFn)plugin->GetDllExport(TEXT("set_AActor_GetDataLayerAssetsPropertyName_handler\0"));
    if(apiuapi_AActor_GetDataLayerAssetsPropertyName){
        apiuapi_AActor_GetDataLayerAssetsPropertyName(&uapi_AActor_GetDataLayerAssetsPropertyName);
    }

    auto const apiuapi_AActor_GetDefaultActorLabel = (uapi_AActor_GetDefaultActorLabelFn)plugin->GetDllExport(TEXT("set_AActor_GetDefaultActorLabel_handler\0"));
    if(apiuapi_AActor_GetDefaultActorLabel){
        apiuapi_AActor_GetDefaultActorLabel(&uapi_AActor_GetDefaultActorLabel);
    }

    auto const apiuapi_AActor_GetDefaultAttachComponent = (uapi_AActor_GetDefaultAttachComponentFn)plugin->GetDllExport(TEXT("set_AActor_GetDefaultAttachComponent_handler\0"));
    if(apiuapi_AActor_GetDefaultAttachComponent){
        apiuapi_AActor_GetDefaultAttachComponent(&uapi_AActor_GetDefaultAttachComponent);
    }

    auto const apiuapi_AActor_GetDistanceTo = (uapi_AActor_GetDistanceToFn)plugin->GetDllExport(TEXT("set_AActor_GetDistanceTo_handler\0"));
    if(apiuapi_AActor_GetDistanceTo){
        apiuapi_AActor_GetDistanceTo(&uapi_AActor_GetDistanceTo);
    }

    auto const apiuapi_AActor_GetDotProductTo = (uapi_AActor_GetDotProductToFn)plugin->GetDllExport(TEXT("set_AActor_GetDotProductTo_handler\0"));
    if(apiuapi_AActor_GetDotProductTo){
        apiuapi_AActor_GetDotProductTo(&uapi_AActor_GetDotProductTo);
    }

    auto const apiuapi_AActor_GetFolderGuid = (uapi_AActor_GetFolderGuidFn)plugin->GetDllExport(TEXT("set_AActor_GetFolderGuid_handler\0"));
    if(apiuapi_AActor_GetFolderGuid){
        apiuapi_AActor_GetFolderGuid(&uapi_AActor_GetFolderGuid);
    }

    auto const apiuapi_AActor_GetFolderPath = (uapi_AActor_GetFolderPathFn)plugin->GetDllExport(TEXT("set_AActor_GetFolderPath_handler\0"));
    if(apiuapi_AActor_GetFolderPath){
        apiuapi_AActor_GetFolderPath(&uapi_AActor_GetFolderPath);
    }

    auto const apiuapi_AActor_GetFunctionCallspace = (uapi_AActor_GetFunctionCallspaceFn)plugin->GetDllExport(TEXT("set_AActor_GetFunctionCallspace_handler\0"));
    if(apiuapi_AActor_GetFunctionCallspace){
        apiuapi_AActor_GetFunctionCallspace(&uapi_AActor_GetFunctionCallspace);
    }

    auto const apiuapi_AActor_GetGameInstance = (uapi_AActor_GetGameInstanceFn)plugin->GetDllExport(TEXT("set_AActor_GetGameInstance_handler\0"));
    if(apiuapi_AActor_GetGameInstance){
        apiuapi_AActor_GetGameInstance(&uapi_AActor_GetGameInstance);
    }

    auto const apiuapi_AActor_GetGameTimeSinceCreation = (uapi_AActor_GetGameTimeSinceCreationFn)plugin->GetDllExport(TEXT("set_AActor_GetGameTimeSinceCreation_handler\0"));
    if(apiuapi_AActor_GetGameTimeSinceCreation){
        apiuapi_AActor_GetGameTimeSinceCreation(&uapi_AActor_GetGameTimeSinceCreation);
    }

    auto const apiuapi_AActor_GetHLODLayer = (uapi_AActor_GetHLODLayerFn)plugin->GetDllExport(TEXT("set_AActor_GetHLODLayer_handler\0"));
    if(apiuapi_AActor_GetHLODLayer){
        apiuapi_AActor_GetHLODLayer(&uapi_AActor_GetHLODLayer);
    }

    auto const apiuapi_AActor_GetHLODLayerPropertyName = (uapi_AActor_GetHLODLayerPropertyNameFn)plugin->GetDllExport(TEXT("set_AActor_GetHLODLayerPropertyName_handler\0"));
    if(apiuapi_AActor_GetHLODLayerPropertyName){
        apiuapi_AActor_GetHLODLayerPropertyName(&uapi_AActor_GetHLODLayerPropertyName);
    }

    auto const apiuapi_AActor_GetHiddenPropertyName = (uapi_AActor_GetHiddenPropertyNameFn)plugin->GetDllExport(TEXT("set_AActor_GetHiddenPropertyName_handler\0"));
    if(apiuapi_AActor_GetHiddenPropertyName){
        apiuapi_AActor_GetHiddenPropertyName(&uapi_AActor_GetHiddenPropertyName);
    }

    auto const apiuapi_AActor_GetHorizontalDistanceTo = (uapi_AActor_GetHorizontalDistanceToFn)plugin->GetDllExport(TEXT("set_AActor_GetHorizontalDistanceTo_handler\0"));
    if(apiuapi_AActor_GetHorizontalDistanceTo){
        apiuapi_AActor_GetHorizontalDistanceTo(&uapi_AActor_GetHorizontalDistanceTo);
    }

    auto const apiuapi_AActor_GetHorizontalDotProductTo = (uapi_AActor_GetHorizontalDotProductToFn)plugin->GetDllExport(TEXT("set_AActor_GetHorizontalDotProductTo_handler\0"));
    if(apiuapi_AActor_GetHorizontalDotProductTo){
        apiuapi_AActor_GetHorizontalDotProductTo(&uapi_AActor_GetHorizontalDotProductTo);
    }

    auto const apiuapi_AActor_GetHumanReadableName = (uapi_AActor_GetHumanReadableNameFn)plugin->GetDllExport(TEXT("set_AActor_GetHumanReadableName_handler\0"));
    if(apiuapi_AActor_GetHumanReadableName){
        apiuapi_AActor_GetHumanReadableName(&uapi_AActor_GetHumanReadableName);
    }

    auto const apiuapi_AActor_GetInputAxisValue = (uapi_AActor_GetInputAxisValueFn)plugin->GetDllExport(TEXT("set_AActor_GetInputAxisValue_handler\0"));
    if(apiuapi_AActor_GetInputAxisValue){
        apiuapi_AActor_GetInputAxisValue(&uapi_AActor_GetInputAxisValue);
    }

    auto const apiuapi_AActor_GetInstigator = (uapi_AActor_GetInstigatorFn)plugin->GetDllExport(TEXT("set_AActor_GetInstigator_handler\0"));
    if(apiuapi_AActor_GetInstigator){
        apiuapi_AActor_GetInstigator(&uapi_AActor_GetInstigator);
    }

    auto const apiuapi_AActor_GetInstigatorController = (uapi_AActor_GetInstigatorControllerFn)plugin->GetDllExport(TEXT("set_AActor_GetInstigatorController_handler\0"));
    if(apiuapi_AActor_GetInstigatorController){
        apiuapi_AActor_GetInstigatorController(&uapi_AActor_GetInstigatorController);
    }

    auto const apiuapi_AActor_GetInstigatorPropertyName = (uapi_AActor_GetInstigatorPropertyNameFn)plugin->GetDllExport(TEXT("set_AActor_GetInstigatorPropertyName_handler\0"));
    if(apiuapi_AActor_GetInstigatorPropertyName){
        apiuapi_AActor_GetInstigatorPropertyName(&uapi_AActor_GetInstigatorPropertyName);
    }

    auto const apiuapi_AActor_GetIsReplicated = (uapi_AActor_GetIsReplicatedFn)plugin->GetDllExport(TEXT("set_AActor_GetIsReplicated_handler\0"));
    if(apiuapi_AActor_GetIsReplicated){
        apiuapi_AActor_GetIsReplicated(&uapi_AActor_GetIsReplicated);
    }

    auto const apiuapi_AActor_GetIsSpatiallyLoaded = (uapi_AActor_GetIsSpatiallyLoadedFn)plugin->GetDllExport(TEXT("set_AActor_GetIsSpatiallyLoaded_handler\0"));
    if(apiuapi_AActor_GetIsSpatiallyLoaded){
        apiuapi_AActor_GetIsSpatiallyLoaded(&uapi_AActor_GetIsSpatiallyLoaded);
    }

    auto const apiuapi_AActor_GetIsSpatiallyLoadedPropertyName = (uapi_AActor_GetIsSpatiallyLoadedPropertyNameFn)plugin->GetDllExport(TEXT("set_AActor_GetIsSpatiallyLoadedPropertyName_handler\0"));
    if(apiuapi_AActor_GetIsSpatiallyLoadedPropertyName){
        apiuapi_AActor_GetIsSpatiallyLoadedPropertyName(&uapi_AActor_GetIsSpatiallyLoadedPropertyName);
    }

    auto const apiuapi_AActor_GetLastRenderTime = (uapi_AActor_GetLastRenderTimeFn)plugin->GetDllExport(TEXT("set_AActor_GetLastRenderTime_handler\0"));
    if(apiuapi_AActor_GetLastRenderTime){
        apiuapi_AActor_GetLastRenderTime(&uapi_AActor_GetLastRenderTime);
    }

    auto const apiuapi_AActor_GetLevel = (uapi_AActor_GetLevelFn)plugin->GetDllExport(TEXT("set_AActor_GetLevel_handler\0"));
    if(apiuapi_AActor_GetLevel){
        apiuapi_AActor_GetLevel(&uapi_AActor_GetLevel);
    }

    auto const apiuapi_AActor_GetLevelTransform = (uapi_AActor_GetLevelTransformFn)plugin->GetDllExport(TEXT("set_AActor_GetLevelTransform_handler\0"));
    if(apiuapi_AActor_GetLevelTransform){
        apiuapi_AActor_GetLevelTransform(&uapi_AActor_GetLevelTransform);
    }

    auto const apiuapi_AActor_GetLifeSpan = (uapi_AActor_GetLifeSpanFn)plugin->GetDllExport(TEXT("set_AActor_GetLifeSpan_handler\0"));
    if(apiuapi_AActor_GetLifeSpan){
        apiuapi_AActor_GetLifeSpan(&uapi_AActor_GetLifeSpan);
    }

    auto const apiuapi_AActor_GetNetConnection = (uapi_AActor_GetNetConnectionFn)plugin->GetDllExport(TEXT("set_AActor_GetNetConnection_handler\0"));
    if(apiuapi_AActor_GetNetConnection){
        apiuapi_AActor_GetNetConnection(&uapi_AActor_GetNetConnection);
    }

    auto const apiuapi_AActor_GetNetDriver = (uapi_AActor_GetNetDriverFn)plugin->GetDllExport(TEXT("set_AActor_GetNetDriver_handler\0"));
    if(apiuapi_AActor_GetNetDriver){
        apiuapi_AActor_GetNetDriver(&uapi_AActor_GetNetDriver);
    }

    auto const apiuapi_AActor_GetNetDriverName = (uapi_AActor_GetNetDriverNameFn)plugin->GetDllExport(TEXT("set_AActor_GetNetDriverName_handler\0"));
    if(apiuapi_AActor_GetNetDriverName){
        apiuapi_AActor_GetNetDriverName(&uapi_AActor_GetNetDriverName);
    }

    auto const apiuapi_AActor_GetNetOwner = (uapi_AActor_GetNetOwnerFn)plugin->GetDllExport(TEXT("set_AActor_GetNetOwner_handler\0"));
    if(apiuapi_AActor_GetNetOwner){
        apiuapi_AActor_GetNetOwner(&uapi_AActor_GetNetOwner);
    }

    auto const apiuapi_AActor_GetNetOwningPlayer = (uapi_AActor_GetNetOwningPlayerFn)plugin->GetDllExport(TEXT("set_AActor_GetNetOwningPlayer_handler\0"));
    if(apiuapi_AActor_GetNetOwningPlayer){
        apiuapi_AActor_GetNetOwningPlayer(&uapi_AActor_GetNetOwningPlayer);
    }

    auto const apiuapi_AActor_GetNumUncachedStaticLightingInteractions = (uapi_AActor_GetNumUncachedStaticLightingInteractionsFn)plugin->GetDllExport(TEXT("set_AActor_GetNumUncachedStaticLightingInteractions_handler\0"));
    if(apiuapi_AActor_GetNumUncachedStaticLightingInteractions){
        apiuapi_AActor_GetNumUncachedStaticLightingInteractions(&uapi_AActor_GetNumUncachedStaticLightingInteractions);
    }

    auto const apiuapi_AActor_GetOwner = (uapi_AActor_GetOwnerFn)plugin->GetDllExport(TEXT("set_AActor_GetOwner_handler\0"));
    if(apiuapi_AActor_GetOwner){
        apiuapi_AActor_GetOwner(&uapi_AActor_GetOwner);
    }

    auto const apiuapi_AActor_GetParentActor = (uapi_AActor_GetParentActorFn)plugin->GetDllExport(TEXT("set_AActor_GetParentActor_handler\0"));
    if(apiuapi_AActor_GetParentActor){
        apiuapi_AActor_GetParentActor(&uapi_AActor_GetParentActor);
    }

    auto const apiuapi_AActor_GetParentComponent = (uapi_AActor_GetParentComponentFn)plugin->GetDllExport(TEXT("set_AActor_GetParentComponent_handler\0"));
    if(apiuapi_AActor_GetParentComponent){
        apiuapi_AActor_GetParentComponent(&uapi_AActor_GetParentComponent);
    }

    auto const apiuapi_AActor_GetPhysicsVolume = (uapi_AActor_GetPhysicsVolumeFn)plugin->GetDllExport(TEXT("set_AActor_GetPhysicsVolume_handler\0"));
    if(apiuapi_AActor_GetPhysicsVolume){
        apiuapi_AActor_GetPhysicsVolume(&uapi_AActor_GetPhysicsVolume);
    }

    auto const apiuapi_AActor_GetPivotOffset = (uapi_AActor_GetPivotOffsetFn)plugin->GetDllExport(TEXT("set_AActor_GetPivotOffset_handler\0"));
    if(apiuapi_AActor_GetPivotOffset){
        apiuapi_AActor_GetPivotOffset(&uapi_AActor_GetPivotOffset);
    }

    auto const apiuapi_AActor_GetPlacementExtent = (uapi_AActor_GetPlacementExtentFn)plugin->GetDllExport(TEXT("set_AActor_GetPlacementExtent_handler\0"));
    if(apiuapi_AActor_GetPlacementExtent){
        apiuapi_AActor_GetPlacementExtent(&uapi_AActor_GetPlacementExtent);
    }

    auto const apiuapi_AActor_GetRayTracingGroupId = (uapi_AActor_GetRayTracingGroupIdFn)plugin->GetDllExport(TEXT("set_AActor_GetRayTracingGroupId_handler\0"));
    if(apiuapi_AActor_GetRayTracingGroupId){
        apiuapi_AActor_GetRayTracingGroupId(&uapi_AActor_GetRayTracingGroupId);
    }

    auto const apiuapi_AActor_GetReplicateMovementPropertyName = (uapi_AActor_GetReplicateMovementPropertyNameFn)plugin->GetDllExport(TEXT("set_AActor_GetReplicateMovementPropertyName_handler\0"));
    if(apiuapi_AActor_GetReplicateMovementPropertyName){
        apiuapi_AActor_GetReplicateMovementPropertyName(&uapi_AActor_GetReplicateMovementPropertyName);
    }

    auto const apiuapi_AActor_GetRolePropertyName = (uapi_AActor_GetRolePropertyNameFn)plugin->GetDllExport(TEXT("set_AActor_GetRolePropertyName_handler\0"));
    if(apiuapi_AActor_GetRolePropertyName){
        apiuapi_AActor_GetRolePropertyName(&uapi_AActor_GetRolePropertyName);
    }

    auto const apiuapi_AActor_GetRootComponent = (uapi_AActor_GetRootComponentFn)plugin->GetDllExport(TEXT("set_AActor_GetRootComponent_handler\0"));
    if(apiuapi_AActor_GetRootComponent){
        apiuapi_AActor_GetRootComponent(&uapi_AActor_GetRootComponent);
    }

    auto const apiuapi_AActor_GetRootSelectionParent = (uapi_AActor_GetRootSelectionParentFn)plugin->GetDllExport(TEXT("set_AActor_GetRootSelectionParent_handler\0"));
    if(apiuapi_AActor_GetRootSelectionParent){
        apiuapi_AActor_GetRootSelectionParent(&uapi_AActor_GetRootSelectionParent);
    }

    auto const apiuapi_AActor_GetRuntimeGrid = (uapi_AActor_GetRuntimeGridFn)plugin->GetDllExport(TEXT("set_AActor_GetRuntimeGrid_handler\0"));
    if(apiuapi_AActor_GetRuntimeGrid){
        apiuapi_AActor_GetRuntimeGrid(&uapi_AActor_GetRuntimeGrid);
    }

    auto const apiuapi_AActor_GetRuntimeGridPropertyName = (uapi_AActor_GetRuntimeGridPropertyNameFn)plugin->GetDllExport(TEXT("set_AActor_GetRuntimeGridPropertyName_handler\0"));
    if(apiuapi_AActor_GetRuntimeGridPropertyName){
        apiuapi_AActor_GetRuntimeGridPropertyName(&uapi_AActor_GetRuntimeGridPropertyName);
    }

    auto const apiuapi_AActor_GetSceneOutlinerParent = (uapi_AActor_GetSceneOutlinerParentFn)plugin->GetDllExport(TEXT("set_AActor_GetSceneOutlinerParent_handler\0"));
    if(apiuapi_AActor_GetSceneOutlinerParent){
        apiuapi_AActor_GetSceneOutlinerParent(&uapi_AActor_GetSceneOutlinerParent);
    }

    auto const apiuapi_AActor_GetSelectionParent = (uapi_AActor_GetSelectionParentFn)plugin->GetDllExport(TEXT("set_AActor_GetSelectionParent_handler\0"));
    if(apiuapi_AActor_GetSelectionParent){
        apiuapi_AActor_GetSelectionParent(&uapi_AActor_GetSelectionParent);
    }

    auto const apiuapi_AActor_GetSimpleCollisionCylinder = (uapi_AActor_GetSimpleCollisionCylinderFn)plugin->GetDllExport(TEXT("set_AActor_GetSimpleCollisionCylinder_handler\0"));
    if(apiuapi_AActor_GetSimpleCollisionCylinder){
        apiuapi_AActor_GetSimpleCollisionCylinder(&uapi_AActor_GetSimpleCollisionCylinder);
    }

    auto const apiuapi_AActor_GetSimpleCollisionCylinderExtent = (uapi_AActor_GetSimpleCollisionCylinderExtentFn)plugin->GetDllExport(TEXT("set_AActor_GetSimpleCollisionCylinderExtent_handler\0"));
    if(apiuapi_AActor_GetSimpleCollisionCylinderExtent){
        apiuapi_AActor_GetSimpleCollisionCylinderExtent(&uapi_AActor_GetSimpleCollisionCylinderExtent);
    }

    auto const apiuapi_AActor_GetSimpleCollisionHalfHeight = (uapi_AActor_GetSimpleCollisionHalfHeightFn)plugin->GetDllExport(TEXT("set_AActor_GetSimpleCollisionHalfHeight_handler\0"));
    if(apiuapi_AActor_GetSimpleCollisionHalfHeight){
        apiuapi_AActor_GetSimpleCollisionHalfHeight(&uapi_AActor_GetSimpleCollisionHalfHeight);
    }

    auto const apiuapi_AActor_GetSimpleCollisionRadius = (uapi_AActor_GetSimpleCollisionRadiusFn)plugin->GetDllExport(TEXT("set_AActor_GetSimpleCollisionRadius_handler\0"));
    if(apiuapi_AActor_GetSimpleCollisionRadius){
        apiuapi_AActor_GetSimpleCollisionRadius(&uapi_AActor_GetSimpleCollisionRadius);
    }

    auto const apiuapi_AActor_GetSquaredDistanceTo = (uapi_AActor_GetSquaredDistanceToFn)plugin->GetDllExport(TEXT("set_AActor_GetSquaredDistanceTo_handler\0"));
    if(apiuapi_AActor_GetSquaredDistanceTo){
        apiuapi_AActor_GetSquaredDistanceTo(&uapi_AActor_GetSquaredDistanceTo);
    }

    auto const apiuapi_AActor_GetSquaredHorizontalDistanceTo = (uapi_AActor_GetSquaredHorizontalDistanceToFn)plugin->GetDllExport(TEXT("set_AActor_GetSquaredHorizontalDistanceTo_handler\0"));
    if(apiuapi_AActor_GetSquaredHorizontalDistanceTo){
        apiuapi_AActor_GetSquaredHorizontalDistanceTo(&uapi_AActor_GetSquaredHorizontalDistanceTo);
    }

    auto const apiuapi_AActor_GetTargetLocation = (uapi_AActor_GetTargetLocationFn)plugin->GetDllExport(TEXT("set_AActor_GetTargetLocation_handler\0"));
    if(apiuapi_AActor_GetTargetLocation){
        apiuapi_AActor_GetTargetLocation(&uapi_AActor_GetTargetLocation);
    }

    auto const apiuapi_AActor_GetTearOff = (uapi_AActor_GetTearOffFn)plugin->GetDllExport(TEXT("set_AActor_GetTearOff_handler\0"));
    if(apiuapi_AActor_GetTearOff){
        apiuapi_AActor_GetTearOff(&uapi_AActor_GetTearOff);
    }

    auto const apiuapi_AActor_GetTickableWhenPaused = (uapi_AActor_GetTickableWhenPausedFn)plugin->GetDllExport(TEXT("set_AActor_GetTickableWhenPaused_handler\0"));
    if(apiuapi_AActor_GetTickableWhenPaused){
        apiuapi_AActor_GetTickableWhenPaused(&uapi_AActor_GetTickableWhenPaused);
    }

    auto const apiuapi_AActor_GetTransform = (uapi_AActor_GetTransformFn)plugin->GetDllExport(TEXT("set_AActor_GetTransform_handler\0"));
    if(apiuapi_AActor_GetTransform){
        apiuapi_AActor_GetTransform(&uapi_AActor_GetTransform);
    }

    auto const apiuapi_AActor_GetVelocity = (uapi_AActor_GetVelocityFn)plugin->GetDllExport(TEXT("set_AActor_GetVelocity_handler\0"));
    if(apiuapi_AActor_GetVelocity){
        apiuapi_AActor_GetVelocity(&uapi_AActor_GetVelocity);
    }

    auto const apiuapi_AActor_GetVerticalDistanceTo = (uapi_AActor_GetVerticalDistanceToFn)plugin->GetDllExport(TEXT("set_AActor_GetVerticalDistanceTo_handler\0"));
    if(apiuapi_AActor_GetVerticalDistanceTo){
        apiuapi_AActor_GetVerticalDistanceTo(&uapi_AActor_GetVerticalDistanceTo);
    }

    auto const apiuapi_AActor_GetWorld = (uapi_AActor_GetWorldFn)plugin->GetDllExport(TEXT("set_AActor_GetWorld_handler\0"));
    if(apiuapi_AActor_GetWorld){
        apiuapi_AActor_GetWorld(&uapi_AActor_GetWorld);
    }

    auto const apiuapi_AActor_GetWorldSettings = (uapi_AActor_GetWorldSettingsFn)plugin->GetDllExport(TEXT("set_AActor_GetWorldSettings_handler\0"));
    if(apiuapi_AActor_GetWorldSettings){
        apiuapi_AActor_GetWorldSettings(&uapi_AActor_GetWorldSettings);
    }

    auto const apiuapi_AActor_HandleRegisterComponentWithWorld = (uapi_AActor_HandleRegisterComponentWithWorldFn)plugin->GetDllExport(TEXT("set_AActor_HandleRegisterComponentWithWorld_handler\0"));
    if(apiuapi_AActor_HandleRegisterComponentWithWorld){
        apiuapi_AActor_HandleRegisterComponentWithWorld(&uapi_AActor_HandleRegisterComponentWithWorld);
    }

    auto const apiuapi_AActor_HasActiveCameraComponent = (uapi_AActor_HasActiveCameraComponentFn)plugin->GetDllExport(TEXT("set_AActor_HasActiveCameraComponent_handler\0"));
    if(apiuapi_AActor_HasActiveCameraComponent){
        apiuapi_AActor_HasActiveCameraComponent(&uapi_AActor_HasActiveCameraComponent);
    }

    auto const apiuapi_AActor_HasActivePawnControlCameraComponent = (uapi_AActor_HasActivePawnControlCameraComponentFn)plugin->GetDllExport(TEXT("set_AActor_HasActivePawnControlCameraComponent_handler\0"));
    if(apiuapi_AActor_HasActivePawnControlCameraComponent){
        apiuapi_AActor_HasActivePawnControlCameraComponent(&uapi_AActor_HasActivePawnControlCameraComponent);
    }

    auto const apiuapi_AActor_HasActorBegunPlay = (uapi_AActor_HasActorBegunPlayFn)plugin->GetDllExport(TEXT("set_AActor_HasActorBegunPlay_handler\0"));
    if(apiuapi_AActor_HasActorBegunPlay){
        apiuapi_AActor_HasActorBegunPlay(&uapi_AActor_HasActorBegunPlay);
    }

    auto const apiuapi_AActor_HasActorRegisteredAllComponents = (uapi_AActor_HasActorRegisteredAllComponentsFn)plugin->GetDllExport(TEXT("set_AActor_HasActorRegisteredAllComponents_handler\0"));
    if(apiuapi_AActor_HasActorRegisteredAllComponents){
        apiuapi_AActor_HasActorRegisteredAllComponents(&uapi_AActor_HasActorRegisteredAllComponents);
    }

    auto const apiuapi_AActor_HasAuthority = (uapi_AActor_HasAuthorityFn)plugin->GetDllExport(TEXT("set_AActor_HasAuthority_handler\0"));
    if(apiuapi_AActor_HasAuthority){
        apiuapi_AActor_HasAuthority(&uapi_AActor_HasAuthority);
    }

    auto const apiuapi_AActor_HasDataLayers = (uapi_AActor_HasDataLayersFn)plugin->GetDllExport(TEXT("set_AActor_HasDataLayers_handler\0"));
    if(apiuapi_AActor_HasDataLayers){
        apiuapi_AActor_HasDataLayers(&uapi_AActor_HasDataLayers);
    }

    auto const apiuapi_AActor_HasDeferredComponentRegistration = (uapi_AActor_HasDeferredComponentRegistrationFn)plugin->GetDllExport(TEXT("set_AActor_HasDeferredComponentRegistration_handler\0"));
    if(apiuapi_AActor_HasDeferredComponentRegistration){
        apiuapi_AActor_HasDeferredComponentRegistration(&uapi_AActor_HasDeferredComponentRegistration);
    }

    auto const apiuapi_AActor_HasLocalNetOwner = (uapi_AActor_HasLocalNetOwnerFn)plugin->GetDllExport(TEXT("set_AActor_HasLocalNetOwner_handler\0"));
    if(apiuapi_AActor_HasLocalNetOwner){
        apiuapi_AActor_HasLocalNetOwner(&uapi_AActor_HasLocalNetOwner);
    }

    auto const apiuapi_AActor_HasNetOwner = (uapi_AActor_HasNetOwnerFn)plugin->GetDllExport(TEXT("set_AActor_HasNetOwner_handler\0"));
    if(apiuapi_AActor_HasNetOwner){
        apiuapi_AActor_HasNetOwner(&uapi_AActor_HasNetOwner);
    }

    auto const apiuapi_AActor_HasNonTrivialUserConstructionScript = (uapi_AActor_HasNonTrivialUserConstructionScriptFn)plugin->GetDllExport(TEXT("set_AActor_HasNonTrivialUserConstructionScript_handler\0"));
    if(apiuapi_AActor_HasNonTrivialUserConstructionScript){
        apiuapi_AActor_HasNonTrivialUserConstructionScript(&uapi_AActor_HasNonTrivialUserConstructionScript);
    }

    auto const apiuapi_AActor_HasValidRootComponent = (uapi_AActor_HasValidRootComponentFn)plugin->GetDllExport(TEXT("set_AActor_HasValidRootComponent_handler\0"));
    if(apiuapi_AActor_HasValidRootComponent){
        apiuapi_AActor_HasValidRootComponent(&uapi_AActor_HasValidRootComponent);
    }

    auto const apiuapi_AActor_IncrementalRegisterComponents = (uapi_AActor_IncrementalRegisterComponentsFn)plugin->GetDllExport(TEXT("set_AActor_IncrementalRegisterComponents_handler\0"));
    if(apiuapi_AActor_IncrementalRegisterComponents){
        apiuapi_AActor_IncrementalRegisterComponents(&uapi_AActor_IncrementalRegisterComponents);
    }

    auto const apiuapi_AActor_InitializeComponents = (uapi_AActor_InitializeComponentsFn)plugin->GetDllExport(TEXT("set_AActor_InitializeComponents_handler\0"));
    if(apiuapi_AActor_InitializeComponents){
        apiuapi_AActor_InitializeComponents(&uapi_AActor_InitializeComponents);
    }

    auto const apiuapi_AActor_InvalidateLightingCache = (uapi_AActor_InvalidateLightingCacheFn)plugin->GetDllExport(TEXT("set_AActor_InvalidateLightingCache_handler\0"));
    if(apiuapi_AActor_InvalidateLightingCache){
        apiuapi_AActor_InvalidateLightingCache(&uapi_AActor_InvalidateLightingCache);
    }

    auto const apiuapi_AActor_InvalidateLightingCacheDetailed = (uapi_AActor_InvalidateLightingCacheDetailedFn)plugin->GetDllExport(TEXT("set_AActor_InvalidateLightingCacheDetailed_handler\0"));
    if(apiuapi_AActor_InvalidateLightingCacheDetailed){
        apiuapi_AActor_InvalidateLightingCacheDetailed(&uapi_AActor_InvalidateLightingCacheDetailed);
    }

    auto const apiuapi_AActor_IsActorBeginningPlay = (uapi_AActor_IsActorBeginningPlayFn)plugin->GetDllExport(TEXT("set_AActor_IsActorBeginningPlay_handler\0"));
    if(apiuapi_AActor_IsActorBeginningPlay){
        apiuapi_AActor_IsActorBeginningPlay(&uapi_AActor_IsActorBeginningPlay);
    }

    auto const apiuapi_AActor_IsActorBeginningPlayFromLevelStreaming = (uapi_AActor_IsActorBeginningPlayFromLevelStreamingFn)plugin->GetDllExport(TEXT("set_AActor_IsActorBeginningPlayFromLevelStreaming_handler\0"));
    if(apiuapi_AActor_IsActorBeginningPlayFromLevelStreaming){
        apiuapi_AActor_IsActorBeginningPlayFromLevelStreaming(&uapi_AActor_IsActorBeginningPlayFromLevelStreaming);
    }

    auto const apiuapi_AActor_IsActorBeingDestroyed = (uapi_AActor_IsActorBeingDestroyedFn)plugin->GetDllExport(TEXT("set_AActor_IsActorBeingDestroyed_handler\0"));
    if(apiuapi_AActor_IsActorBeingDestroyed){
        apiuapi_AActor_IsActorBeingDestroyed(&uapi_AActor_IsActorBeingDestroyed);
    }

    auto const apiuapi_AActor_IsActorComponentReplicatedSubObjectRegistered = (uapi_AActor_IsActorComponentReplicatedSubObjectRegisteredFn)plugin->GetDllExport(TEXT("set_AActor_IsActorComponentReplicatedSubObjectRegistered_handler\0"));
    if(apiuapi_AActor_IsActorComponentReplicatedSubObjectRegistered){
        apiuapi_AActor_IsActorComponentReplicatedSubObjectRegistered(&uapi_AActor_IsActorComponentReplicatedSubObjectRegistered);
    }

    auto const apiuapi_AActor_IsActorInitialized = (uapi_AActor_IsActorInitializedFn)plugin->GetDllExport(TEXT("set_AActor_IsActorInitialized_handler\0"));
    if(apiuapi_AActor_IsActorInitialized){
        apiuapi_AActor_IsActorInitialized(&uapi_AActor_IsActorInitialized);
    }

    auto const apiuapi_AActor_IsActorLabelEditable = (uapi_AActor_IsActorLabelEditableFn)plugin->GetDllExport(TEXT("set_AActor_IsActorLabelEditable_handler\0"));
    if(apiuapi_AActor_IsActorLabelEditable){
        apiuapi_AActor_IsActorLabelEditable(&uapi_AActor_IsActorLabelEditable);
    }

    auto const apiuapi_AActor_IsActorOrSelectionParentSelected = (uapi_AActor_IsActorOrSelectionParentSelectedFn)plugin->GetDllExport(TEXT("set_AActor_IsActorOrSelectionParentSelected_handler\0"));
    if(apiuapi_AActor_IsActorOrSelectionParentSelected){
        apiuapi_AActor_IsActorOrSelectionParentSelected(&uapi_AActor_IsActorOrSelectionParentSelected);
    }

    auto const apiuapi_AActor_IsActorTickEnabled = (uapi_AActor_IsActorTickEnabledFn)plugin->GetDllExport(TEXT("set_AActor_IsActorTickEnabled_handler\0"));
    if(apiuapi_AActor_IsActorTickEnabled){
        apiuapi_AActor_IsActorTickEnabled(&uapi_AActor_IsActorTickEnabled);
    }

    auto const apiuapi_AActor_IsAsset = (uapi_AActor_IsAssetFn)plugin->GetDllExport(TEXT("set_AActor_IsAsset_handler\0"));
    if(apiuapi_AActor_IsAsset){
        apiuapi_AActor_IsAsset(&uapi_AActor_IsAsset);
    }

    auto const apiuapi_AActor_IsAttachedTo = (uapi_AActor_IsAttachedToFn)plugin->GetDllExport(TEXT("set_AActor_IsAttachedTo_handler\0"));
    if(apiuapi_AActor_IsAttachedTo){
        apiuapi_AActor_IsAttachedTo(&uapi_AActor_IsAttachedTo);
    }

    auto const apiuapi_AActor_IsBasedOnActor = (uapi_AActor_IsBasedOnActorFn)plugin->GetDllExport(TEXT("set_AActor_IsBasedOnActor_handler\0"));
    if(apiuapi_AActor_IsBasedOnActor){
        apiuapi_AActor_IsBasedOnActor(&uapi_AActor_IsBasedOnActor);
    }

    auto const apiuapi_AActor_IsChildActor = (uapi_AActor_IsChildActorFn)plugin->GetDllExport(TEXT("set_AActor_IsChildActor_handler\0"));
    if(apiuapi_AActor_IsChildActor){
        apiuapi_AActor_IsChildActor(&uapi_AActor_IsChildActor);
    }

    auto const apiuapi_AActor_IsComponentRelevantForNavigation = (uapi_AActor_IsComponentRelevantForNavigationFn)plugin->GetDllExport(TEXT("set_AActor_IsComponentRelevantForNavigation_handler\0"));
    if(apiuapi_AActor_IsComponentRelevantForNavigation){
        apiuapi_AActor_IsComponentRelevantForNavigation(&uapi_AActor_IsComponentRelevantForNavigation);
    }

    auto const apiuapi_AActor_IsDefaultPreviewEnabled = (uapi_AActor_IsDefaultPreviewEnabledFn)plugin->GetDllExport(TEXT("set_AActor_IsDefaultPreviewEnabled_handler\0"));
    if(apiuapi_AActor_IsDefaultPreviewEnabled){
        apiuapi_AActor_IsDefaultPreviewEnabled(&uapi_AActor_IsDefaultPreviewEnabled);
    }

    auto const apiuapi_AActor_IsEditable = (uapi_AActor_IsEditableFn)plugin->GetDllExport(TEXT("set_AActor_IsEditable_handler\0"));
    if(apiuapi_AActor_IsEditable){
        apiuapi_AActor_IsEditable(&uapi_AActor_IsEditable);
    }

    auto const apiuapi_AActor_IsEditorOnly = (uapi_AActor_IsEditorOnlyFn)plugin->GetDllExport(TEXT("set_AActor_IsEditorOnly_handler\0"));
    if(apiuapi_AActor_IsEditorOnly){
        apiuapi_AActor_IsEditorOnly(&uapi_AActor_IsEditorOnly);
    }

    auto const apiuapi_AActor_IsForceExternalActorLevelReferenceForPIE = (uapi_AActor_IsForceExternalActorLevelReferenceForPIEFn)plugin->GetDllExport(TEXT("set_AActor_IsForceExternalActorLevelReferenceForPIE_handler\0"));
    if(apiuapi_AActor_IsForceExternalActorLevelReferenceForPIE){
        apiuapi_AActor_IsForceExternalActorLevelReferenceForPIE(&uapi_AActor_IsForceExternalActorLevelReferenceForPIE);
    }

    auto const apiuapi_AActor_IsHLODRelevant = (uapi_AActor_IsHLODRelevantFn)plugin->GetDllExport(TEXT("set_AActor_IsHLODRelevant_handler\0"));
    if(apiuapi_AActor_IsHLODRelevant){
        apiuapi_AActor_IsHLODRelevant(&uapi_AActor_IsHLODRelevant);
    }

    auto const apiuapi_AActor_IsHidden = (uapi_AActor_IsHiddenFn)plugin->GetDllExport(TEXT("set_AActor_IsHidden_handler\0"));
    if(apiuapi_AActor_IsHidden){
        apiuapi_AActor_IsHidden(&uapi_AActor_IsHidden);
    }

    auto const apiuapi_AActor_IsHiddenEd = (uapi_AActor_IsHiddenEdFn)plugin->GetDllExport(TEXT("set_AActor_IsHiddenEd_handler\0"));
    if(apiuapi_AActor_IsHiddenEd){
        apiuapi_AActor_IsHiddenEd(&uapi_AActor_IsHiddenEd);
    }

    auto const apiuapi_AActor_IsHiddenEdAtStartup = (uapi_AActor_IsHiddenEdAtStartupFn)plugin->GetDllExport(TEXT("set_AActor_IsHiddenEdAtStartup_handler\0"));
    if(apiuapi_AActor_IsHiddenEdAtStartup){
        apiuapi_AActor_IsHiddenEdAtStartup(&uapi_AActor_IsHiddenEdAtStartup);
    }

    auto const apiuapi_AActor_IsInEditingLevelInstance = (uapi_AActor_IsInEditingLevelInstanceFn)plugin->GetDllExport(TEXT("set_AActor_IsInEditingLevelInstance_handler\0"));
    if(apiuapi_AActor_IsInEditingLevelInstance){
        apiuapi_AActor_IsInEditingLevelInstance(&uapi_AActor_IsInEditingLevelInstance);
    }

    auto const apiuapi_AActor_IsInLevel = (uapi_AActor_IsInLevelFn)plugin->GetDllExport(TEXT("set_AActor_IsInLevel_handler\0"));
    if(apiuapi_AActor_IsInLevel){
        apiuapi_AActor_IsInLevel(&uapi_AActor_IsInLevel);
    }

    auto const apiuapi_AActor_IsInPersistentLevel = (uapi_AActor_IsInPersistentLevelFn)plugin->GetDllExport(TEXT("set_AActor_IsInPersistentLevel_handler\0"));
    if(apiuapi_AActor_IsInPersistentLevel){
        apiuapi_AActor_IsInPersistentLevel(&uapi_AActor_IsInPersistentLevel);
    }

    auto const apiuapi_AActor_IsLevelBoundsRelevant = (uapi_AActor_IsLevelBoundsRelevantFn)plugin->GetDllExport(TEXT("set_AActor_IsLevelBoundsRelevant_handler\0"));
    if(apiuapi_AActor_IsLevelBoundsRelevant){
        apiuapi_AActor_IsLevelBoundsRelevant(&uapi_AActor_IsLevelBoundsRelevant);
    }

    auto const apiuapi_AActor_IsListedInSceneOutliner = (uapi_AActor_IsListedInSceneOutlinerFn)plugin->GetDllExport(TEXT("set_AActor_IsListedInSceneOutliner_handler\0"));
    if(apiuapi_AActor_IsListedInSceneOutliner){
        apiuapi_AActor_IsListedInSceneOutliner(&uapi_AActor_IsListedInSceneOutliner);
    }

    auto const apiuapi_AActor_IsLockLocation = (uapi_AActor_IsLockLocationFn)plugin->GetDllExport(TEXT("set_AActor_IsLockLocation_handler\0"));
    if(apiuapi_AActor_IsLockLocation){
        apiuapi_AActor_IsLockLocation(&uapi_AActor_IsLockLocation);
    }

    auto const apiuapi_AActor_IsMainPackageActor = (uapi_AActor_IsMainPackageActorFn)plugin->GetDllExport(TEXT("set_AActor_IsMainPackageActor_handler\0"));
    if(apiuapi_AActor_IsMainPackageActor){
        apiuapi_AActor_IsMainPackageActor(&uapi_AActor_IsMainPackageActor);
    }

    auto const apiuapi_AActor_IsNameStableForNetworking = (uapi_AActor_IsNameStableForNetworkingFn)plugin->GetDllExport(TEXT("set_AActor_IsNameStableForNetworking_handler\0"));
    if(apiuapi_AActor_IsNameStableForNetworking){
        apiuapi_AActor_IsNameStableForNetworking(&uapi_AActor_IsNameStableForNetworking);
    }

    auto const apiuapi_AActor_IsNetStartupActor = (uapi_AActor_IsNetStartupActorFn)plugin->GetDllExport(TEXT("set_AActor_IsNetStartupActor_handler\0"));
    if(apiuapi_AActor_IsNetStartupActor){
        apiuapi_AActor_IsNetStartupActor(&uapi_AActor_IsNetStartupActor);
    }

    auto const apiuapi_AActor_IsOverlappingActor = (uapi_AActor_IsOverlappingActorFn)plugin->GetDllExport(TEXT("set_AActor_IsOverlappingActor_handler\0"));
    if(apiuapi_AActor_IsOverlappingActor){
        apiuapi_AActor_IsOverlappingActor(&uapi_AActor_IsOverlappingActor);
    }

    auto const apiuapi_AActor_IsOwnedBy = (uapi_AActor_IsOwnedByFn)plugin->GetDllExport(TEXT("set_AActor_IsOwnedBy_handler\0"));
    if(apiuapi_AActor_IsOwnedBy){
        apiuapi_AActor_IsOwnedBy(&uapi_AActor_IsOwnedBy);
    }

    auto const apiuapi_AActor_IsPendingKillPending = (uapi_AActor_IsPendingKillPendingFn)plugin->GetDllExport(TEXT("set_AActor_IsPendingKillPending_handler\0"));
    if(apiuapi_AActor_IsPendingKillPending){
        apiuapi_AActor_IsPendingKillPending(&uapi_AActor_IsPendingKillPending);
    }

    auto const apiuapi_AActor_IsReadyForFinishDestroy = (uapi_AActor_IsReadyForFinishDestroyFn)plugin->GetDllExport(TEXT("set_AActor_IsReadyForFinishDestroy_handler\0"));
    if(apiuapi_AActor_IsReadyForFinishDestroy){
        apiuapi_AActor_IsReadyForFinishDestroy(&uapi_AActor_IsReadyForFinishDestroy);
    }

    auto const apiuapi_AActor_IsRelevancyOwnerFor = (uapi_AActor_IsRelevancyOwnerForFn)plugin->GetDllExport(TEXT("set_AActor_IsRelevancyOwnerFor_handler\0"));
    if(apiuapi_AActor_IsRelevancyOwnerFor){
        apiuapi_AActor_IsRelevancyOwnerFor(&uapi_AActor_IsRelevancyOwnerFor);
    }

    auto const apiuapi_AActor_IsReplicatedActorComponentRegistered = (uapi_AActor_IsReplicatedActorComponentRegisteredFn)plugin->GetDllExport(TEXT("set_AActor_IsReplicatedActorComponentRegistered_handler\0"));
    if(apiuapi_AActor_IsReplicatedActorComponentRegistered){
        apiuapi_AActor_IsReplicatedActorComponentRegistered(&uapi_AActor_IsReplicatedActorComponentRegistered);
    }

    auto const apiuapi_AActor_IsReplicatedSubObjectRegistered = (uapi_AActor_IsReplicatedSubObjectRegisteredFn)plugin->GetDllExport(TEXT("set_AActor_IsReplicatedSubObjectRegistered_handler\0"));
    if(apiuapi_AActor_IsReplicatedSubObjectRegistered){
        apiuapi_AActor_IsReplicatedSubObjectRegistered(&uapi_AActor_IsReplicatedSubObjectRegistered);
    }

    auto const apiuapi_AActor_IsReplicatingMovement = (uapi_AActor_IsReplicatingMovementFn)plugin->GetDllExport(TEXT("set_AActor_IsReplicatingMovement_handler\0"));
    if(apiuapi_AActor_IsReplicatingMovement){
        apiuapi_AActor_IsReplicatingMovement(&uapi_AActor_IsReplicatingMovement);
    }

    auto const apiuapi_AActor_IsRootComponentCollisionRegistered = (uapi_AActor_IsRootComponentCollisionRegisteredFn)plugin->GetDllExport(TEXT("set_AActor_IsRootComponentCollisionRegistered_handler\0"));
    if(apiuapi_AActor_IsRootComponentCollisionRegistered){
        apiuapi_AActor_IsRootComponentCollisionRegistered(&uapi_AActor_IsRootComponentCollisionRegistered);
    }

    auto const apiuapi_AActor_IsRootComponentMovable = (uapi_AActor_IsRootComponentMovableFn)plugin->GetDllExport(TEXT("set_AActor_IsRootComponentMovable_handler\0"));
    if(apiuapi_AActor_IsRootComponentMovable){
        apiuapi_AActor_IsRootComponentMovable(&uapi_AActor_IsRootComponentMovable);
    }

    auto const apiuapi_AActor_IsRootComponentStatic = (uapi_AActor_IsRootComponentStaticFn)plugin->GetDllExport(TEXT("set_AActor_IsRootComponentStatic_handler\0"));
    if(apiuapi_AActor_IsRootComponentStatic){
        apiuapi_AActor_IsRootComponentStatic(&uapi_AActor_IsRootComponentStatic);
    }

    auto const apiuapi_AActor_IsRootComponentStationary = (uapi_AActor_IsRootComponentStationaryFn)plugin->GetDllExport(TEXT("set_AActor_IsRootComponentStationary_handler\0"));
    if(apiuapi_AActor_IsRootComponentStationary){
        apiuapi_AActor_IsRootComponentStationary(&uapi_AActor_IsRootComponentStationary);
    }

    auto const apiuapi_AActor_IsRunningUserConstructionScript = (uapi_AActor_IsRunningUserConstructionScriptFn)plugin->GetDllExport(TEXT("set_AActor_IsRunningUserConstructionScript_handler\0"));
    if(apiuapi_AActor_IsRunningUserConstructionScript){
        apiuapi_AActor_IsRunningUserConstructionScript(&uapi_AActor_IsRunningUserConstructionScript);
    }

    auto const apiuapi_AActor_IsRuntimeOnly = (uapi_AActor_IsRuntimeOnlyFn)plugin->GetDllExport(TEXT("set_AActor_IsRuntimeOnly_handler\0"));
    if(apiuapi_AActor_IsRuntimeOnly){
        apiuapi_AActor_IsRuntimeOnly(&uapi_AActor_IsRuntimeOnly);
    }

    auto const apiuapi_AActor_IsSelectable = (uapi_AActor_IsSelectableFn)plugin->GetDllExport(TEXT("set_AActor_IsSelectable_handler\0"));
    if(apiuapi_AActor_IsSelectable){
        apiuapi_AActor_IsSelectable(&uapi_AActor_IsSelectable);
    }

    auto const apiuapi_AActor_IsSelectedInEditor = (uapi_AActor_IsSelectedInEditorFn)plugin->GetDllExport(TEXT("set_AActor_IsSelectedInEditor_handler\0"));
    if(apiuapi_AActor_IsSelectedInEditor){
        apiuapi_AActor_IsSelectedInEditor(&uapi_AActor_IsSelectedInEditor);
    }

    auto const apiuapi_AActor_IsSelectionChild = (uapi_AActor_IsSelectionChildFn)plugin->GetDllExport(TEXT("set_AActor_IsSelectionChild_handler\0"));
    if(apiuapi_AActor_IsSelectionChild){
        apiuapi_AActor_IsSelectionChild(&uapi_AActor_IsSelectionChild);
    }

    auto const apiuapi_AActor_IsSelectionParentOfAttachedActors = (uapi_AActor_IsSelectionParentOfAttachedActorsFn)plugin->GetDllExport(TEXT("set_AActor_IsSelectionParentOfAttachedActors_handler\0"));
    if(apiuapi_AActor_IsSelectionParentOfAttachedActors){
        apiuapi_AActor_IsSelectionParentOfAttachedActors(&uapi_AActor_IsSelectionParentOfAttachedActors);
    }

    auto const apiuapi_AActor_IsSupportedForNetworking = (uapi_AActor_IsSupportedForNetworkingFn)plugin->GetDllExport(TEXT("set_AActor_IsSupportedForNetworking_handler\0"));
    if(apiuapi_AActor_IsSupportedForNetworking){
        apiuapi_AActor_IsSupportedForNetworking(&uapi_AActor_IsSupportedForNetworking);
    }

    auto const apiuapi_AActor_IsTemporarilyHiddenInEditor = (uapi_AActor_IsTemporarilyHiddenInEditorFn)plugin->GetDllExport(TEXT("set_AActor_IsTemporarilyHiddenInEditor_handler\0"));
    if(apiuapi_AActor_IsTemporarilyHiddenInEditor){
        apiuapi_AActor_IsTemporarilyHiddenInEditor(&uapi_AActor_IsTemporarilyHiddenInEditor);
    }

    auto const apiuapi_AActor_IsUserManaged = (uapi_AActor_IsUserManagedFn)plugin->GetDllExport(TEXT("set_AActor_IsUserManaged_handler\0"));
    if(apiuapi_AActor_IsUserManaged){
        apiuapi_AActor_IsUserManaged(&uapi_AActor_IsUserManaged);
    }

    auto const apiuapi_AActor_IsUsingRegisteredSubObjectList = (uapi_AActor_IsUsingRegisteredSubObjectListFn)plugin->GetDllExport(TEXT("set_AActor_IsUsingRegisteredSubObjectList_handler\0"));
    if(apiuapi_AActor_IsUsingRegisteredSubObjectList){
        apiuapi_AActor_IsUsingRegisteredSubObjectList(&uapi_AActor_IsUsingRegisteredSubObjectList);
    }

    auto const apiuapi_AActor_K2_DestroyActor = (uapi_AActor_K2_DestroyActorFn)plugin->GetDllExport(TEXT("set_AActor_K2_DestroyActor_handler\0"));
    if(apiuapi_AActor_K2_DestroyActor){
        apiuapi_AActor_K2_DestroyActor(&uapi_AActor_K2_DestroyActor);
    }

    auto const apiuapi_AActor_K2_GetActorLocation = (uapi_AActor_K2_GetActorLocationFn)plugin->GetDllExport(TEXT("set_AActor_K2_GetActorLocation_handler\0"));
    if(apiuapi_AActor_K2_GetActorLocation){
        apiuapi_AActor_K2_GetActorLocation(&uapi_AActor_K2_GetActorLocation);
    }

    auto const apiuapi_AActor_K2_GetActorRotation = (uapi_AActor_K2_GetActorRotationFn)plugin->GetDllExport(TEXT("set_AActor_K2_GetActorRotation_handler\0"));
    if(apiuapi_AActor_K2_GetActorRotation){
        apiuapi_AActor_K2_GetActorRotation(&uapi_AActor_K2_GetActorRotation);
    }

    auto const apiuapi_AActor_K2_GetRootComponent = (uapi_AActor_K2_GetRootComponentFn)plugin->GetDllExport(TEXT("set_AActor_K2_GetRootComponent_handler\0"));
    if(apiuapi_AActor_K2_GetRootComponent){
        apiuapi_AActor_K2_GetRootComponent(&uapi_AActor_K2_GetRootComponent);
    }

    auto const apiuapi_AActor_K2_OnBecomeViewTarget = (uapi_AActor_K2_OnBecomeViewTargetFn)plugin->GetDllExport(TEXT("set_AActor_K2_OnBecomeViewTarget_handler\0"));
    if(apiuapi_AActor_K2_OnBecomeViewTarget){
        apiuapi_AActor_K2_OnBecomeViewTarget(&uapi_AActor_K2_OnBecomeViewTarget);
    }

    auto const apiuapi_AActor_K2_OnEndViewTarget = (uapi_AActor_K2_OnEndViewTargetFn)plugin->GetDllExport(TEXT("set_AActor_K2_OnEndViewTarget_handler\0"));
    if(apiuapi_AActor_K2_OnEndViewTarget){
        apiuapi_AActor_K2_OnEndViewTarget(&uapi_AActor_K2_OnEndViewTarget);
    }

    auto const apiuapi_AActor_K2_OnReset = (uapi_AActor_K2_OnResetFn)plugin->GetDllExport(TEXT("set_AActor_K2_OnReset_handler\0"));
    if(apiuapi_AActor_K2_OnReset){
        apiuapi_AActor_K2_OnReset(&uapi_AActor_K2_OnReset);
    }

    auto const apiuapi_AActor_K2_SetActorRotation = (uapi_AActor_K2_SetActorRotationFn)plugin->GetDllExport(TEXT("set_AActor_K2_SetActorRotation_handler\0"));
    if(apiuapi_AActor_K2_SetActorRotation){
        apiuapi_AActor_K2_SetActorRotation(&uapi_AActor_K2_SetActorRotation);
    }

    auto const apiuapi_AActor_K2_TeleportTo = (uapi_AActor_K2_TeleportToFn)plugin->GetDllExport(TEXT("set_AActor_K2_TeleportTo_handler\0"));
    if(apiuapi_AActor_K2_TeleportTo){
        apiuapi_AActor_K2_TeleportTo(&uapi_AActor_K2_TeleportTo);
    }

    auto const apiuapi_AActor_LifeSpanExpired = (uapi_AActor_LifeSpanExpiredFn)plugin->GetDllExport(TEXT("set_AActor_LifeSpanExpired_handler\0"));
    if(apiuapi_AActor_LifeSpanExpired){
        apiuapi_AActor_LifeSpanExpired(&uapi_AActor_LifeSpanExpired);
    }

    auto const apiuapi_AActor_MakeNoise = (uapi_AActor_MakeNoiseFn)plugin->GetDllExport(TEXT("set_AActor_MakeNoise_handler\0"));
    if(apiuapi_AActor_MakeNoise){
        apiuapi_AActor_MakeNoise(&uapi_AActor_MakeNoise);
    }

    auto const apiuapi_AActor_MarkComponentsAsPendingKill = (uapi_AActor_MarkComponentsAsPendingKillFn)plugin->GetDllExport(TEXT("set_AActor_MarkComponentsAsPendingKill_handler\0"));
    if(apiuapi_AActor_MarkComponentsAsPendingKill){
        apiuapi_AActor_MarkComponentsAsPendingKill(&uapi_AActor_MarkComponentsAsPendingKill);
    }

    auto const apiuapi_AActor_MarkComponentsRenderStateDirty = (uapi_AActor_MarkComponentsRenderStateDirtyFn)plugin->GetDllExport(TEXT("set_AActor_MarkComponentsRenderStateDirty_handler\0"));
    if(apiuapi_AActor_MarkComponentsRenderStateDirty){
        apiuapi_AActor_MarkComponentsRenderStateDirty(&uapi_AActor_MarkComponentsRenderStateDirty);
    }

    auto const apiuapi_AActor_Modify = (uapi_AActor_ModifyFn)plugin->GetDllExport(TEXT("set_AActor_Modify_handler\0"));
    if(apiuapi_AActor_Modify){
        apiuapi_AActor_Modify(&uapi_AActor_Modify);
    }

    auto const apiuapi_AActor_NeedsLoadForTargetPlatform = (uapi_AActor_NeedsLoadForTargetPlatformFn)plugin->GetDllExport(TEXT("set_AActor_NeedsLoadForTargetPlatform_handler\0"));
    if(apiuapi_AActor_NeedsLoadForTargetPlatform){
        apiuapi_AActor_NeedsLoadForTargetPlatform(&uapi_AActor_NeedsLoadForTargetPlatform);
    }

    auto const apiuapi_AActor_NotifyActorBeginCursorOver = (uapi_AActor_NotifyActorBeginCursorOverFn)plugin->GetDllExport(TEXT("set_AActor_NotifyActorBeginCursorOver_handler\0"));
    if(apiuapi_AActor_NotifyActorBeginCursorOver){
        apiuapi_AActor_NotifyActorBeginCursorOver(&uapi_AActor_NotifyActorBeginCursorOver);
    }

    auto const apiuapi_AActor_NotifyActorBeginOverlap = (uapi_AActor_NotifyActorBeginOverlapFn)plugin->GetDllExport(TEXT("set_AActor_NotifyActorBeginOverlap_handler\0"));
    if(apiuapi_AActor_NotifyActorBeginOverlap){
        apiuapi_AActor_NotifyActorBeginOverlap(&uapi_AActor_NotifyActorBeginOverlap);
    }

    auto const apiuapi_AActor_NotifyActorEndCursorOver = (uapi_AActor_NotifyActorEndCursorOverFn)plugin->GetDllExport(TEXT("set_AActor_NotifyActorEndCursorOver_handler\0"));
    if(apiuapi_AActor_NotifyActorEndCursorOver){
        apiuapi_AActor_NotifyActorEndCursorOver(&uapi_AActor_NotifyActorEndCursorOver);
    }

    auto const apiuapi_AActor_NotifyActorEndOverlap = (uapi_AActor_NotifyActorEndOverlapFn)plugin->GetDllExport(TEXT("set_AActor_NotifyActorEndOverlap_handler\0"));
    if(apiuapi_AActor_NotifyActorEndOverlap){
        apiuapi_AActor_NotifyActorEndOverlap(&uapi_AActor_NotifyActorEndOverlap);
    }

    auto const apiuapi_AActor_OnNetCleanup = (uapi_AActor_OnNetCleanupFn)plugin->GetDllExport(TEXT("set_AActor_OnNetCleanup_handler\0"));
    if(apiuapi_AActor_OnNetCleanup){
        apiuapi_AActor_OnNetCleanup(&uapi_AActor_OnNetCleanup);
    }

    auto const apiuapi_AActor_OnPlayFromHere = (uapi_AActor_OnPlayFromHereFn)plugin->GetDllExport(TEXT("set_AActor_OnPlayFromHere_handler\0"));
    if(apiuapi_AActor_OnPlayFromHere){
        apiuapi_AActor_OnPlayFromHere(&uapi_AActor_OnPlayFromHere);
    }

    auto const apiuapi_AActor_OnRep_AttachmentReplication = (uapi_AActor_OnRep_AttachmentReplicationFn)plugin->GetDllExport(TEXT("set_AActor_OnRep_AttachmentReplication_handler\0"));
    if(apiuapi_AActor_OnRep_AttachmentReplication){
        apiuapi_AActor_OnRep_AttachmentReplication(&uapi_AActor_OnRep_AttachmentReplication);
    }

    auto const apiuapi_AActor_OnRep_Instigator = (uapi_AActor_OnRep_InstigatorFn)plugin->GetDllExport(TEXT("set_AActor_OnRep_Instigator_handler\0"));
    if(apiuapi_AActor_OnRep_Instigator){
        apiuapi_AActor_OnRep_Instigator(&uapi_AActor_OnRep_Instigator);
    }

    auto const apiuapi_AActor_OnRep_ReplicateMovement = (uapi_AActor_OnRep_ReplicateMovementFn)plugin->GetDllExport(TEXT("set_AActor_OnRep_ReplicateMovement_handler\0"));
    if(apiuapi_AActor_OnRep_ReplicateMovement){
        apiuapi_AActor_OnRep_ReplicateMovement(&uapi_AActor_OnRep_ReplicateMovement);
    }

    auto const apiuapi_AActor_OnRep_ReplicatedMovement = (uapi_AActor_OnRep_ReplicatedMovementFn)plugin->GetDllExport(TEXT("set_AActor_OnRep_ReplicatedMovement_handler\0"));
    if(apiuapi_AActor_OnRep_ReplicatedMovement){
        apiuapi_AActor_OnRep_ReplicatedMovement(&uapi_AActor_OnRep_ReplicatedMovement);
    }

    auto const apiuapi_AActor_OnReplicationPausedChanged = (uapi_AActor_OnReplicationPausedChangedFn)plugin->GetDllExport(TEXT("set_AActor_OnReplicationPausedChanged_handler\0"));
    if(apiuapi_AActor_OnReplicationPausedChanged){
        apiuapi_AActor_OnReplicationPausedChanged(&uapi_AActor_OnReplicationPausedChanged);
    }

    auto const apiuapi_AActor_OnSubobjectCreatedFromReplication = (uapi_AActor_OnSubobjectCreatedFromReplicationFn)plugin->GetDllExport(TEXT("set_AActor_OnSubobjectCreatedFromReplication_handler\0"));
    if(apiuapi_AActor_OnSubobjectCreatedFromReplication){
        apiuapi_AActor_OnSubobjectCreatedFromReplication(&uapi_AActor_OnSubobjectCreatedFromReplication);
    }

    auto const apiuapi_AActor_OnSubobjectDestroyFromReplication = (uapi_AActor_OnSubobjectDestroyFromReplicationFn)plugin->GetDllExport(TEXT("set_AActor_OnSubobjectDestroyFromReplication_handler\0"));
    if(apiuapi_AActor_OnSubobjectDestroyFromReplication){
        apiuapi_AActor_OnSubobjectDestroyFromReplication(&uapi_AActor_OnSubobjectDestroyFromReplication);
    }

    auto const apiuapi_AActor_OpenAssetEditor = (uapi_AActor_OpenAssetEditorFn)plugin->GetDllExport(TEXT("set_AActor_OpenAssetEditor_handler\0"));
    if(apiuapi_AActor_OpenAssetEditor){
        apiuapi_AActor_OpenAssetEditor(&uapi_AActor_OpenAssetEditor);
    }

    auto const apiuapi_AActor_OutsideWorldBounds = (uapi_AActor_OutsideWorldBoundsFn)plugin->GetDllExport(TEXT("set_AActor_OutsideWorldBounds_handler\0"));
    if(apiuapi_AActor_OutsideWorldBounds){
        apiuapi_AActor_OutsideWorldBounds(&uapi_AActor_OutsideWorldBounds);
    }

    auto const apiuapi_AActor_OwnsComponent = (uapi_AActor_OwnsComponentFn)plugin->GetDllExport(TEXT("set_AActor_OwnsComponent_handler\0"));
    if(apiuapi_AActor_OwnsComponent){
        apiuapi_AActor_OwnsComponent(&uapi_AActor_OwnsComponent);
    }

    auto const apiuapi_AActor_PostActorConstruction = (uapi_AActor_PostActorConstructionFn)plugin->GetDllExport(TEXT("set_AActor_PostActorConstruction_handler\0"));
    if(apiuapi_AActor_PostActorConstruction){
        apiuapi_AActor_PostActorConstruction(&uapi_AActor_PostActorConstruction);
    }

    auto const apiuapi_AActor_PostActorCreated = (uapi_AActor_PostActorCreatedFn)plugin->GetDllExport(TEXT("set_AActor_PostActorCreated_handler\0"));
    if(apiuapi_AActor_PostActorCreated){
        apiuapi_AActor_PostActorCreated(&uapi_AActor_PostActorCreated);
    }

    auto const apiuapi_AActor_PostEditImport = (uapi_AActor_PostEditImportFn)plugin->GetDllExport(TEXT("set_AActor_PostEditImport_handler\0"));
    if(apiuapi_AActor_PostEditImport){
        apiuapi_AActor_PostEditImport(&uapi_AActor_PostEditImport);
    }

    auto const apiuapi_AActor_PostEditMove = (uapi_AActor_PostEditMoveFn)plugin->GetDllExport(TEXT("set_AActor_PostEditMove_handler\0"));
    if(apiuapi_AActor_PostEditMove){
        apiuapi_AActor_PostEditMove(&uapi_AActor_PostEditMove);
    }

    auto const apiuapi_AActor_PostEditUndo = (uapi_AActor_PostEditUndoFn)plugin->GetDllExport(TEXT("set_AActor_PostEditUndo_handler\0"));
    if(apiuapi_AActor_PostEditUndo){
        apiuapi_AActor_PostEditUndo(&uapi_AActor_PostEditUndo);
    }

    auto const apiuapi_AActor_PostInitProperties = (uapi_AActor_PostInitPropertiesFn)plugin->GetDllExport(TEXT("set_AActor_PostInitProperties_handler\0"));
    if(apiuapi_AActor_PostInitProperties){
        apiuapi_AActor_PostInitProperties(&uapi_AActor_PostInitProperties);
    }

    auto const apiuapi_AActor_PostInitializeComponents = (uapi_AActor_PostInitializeComponentsFn)plugin->GetDllExport(TEXT("set_AActor_PostInitializeComponents_handler\0"));
    if(apiuapi_AActor_PostInitializeComponents){
        apiuapi_AActor_PostInitializeComponents(&uapi_AActor_PostInitializeComponents);
    }

    auto const apiuapi_AActor_PostLoad = (uapi_AActor_PostLoadFn)plugin->GetDllExport(TEXT("set_AActor_PostLoad_handler\0"));
    if(apiuapi_AActor_PostLoad){
        apiuapi_AActor_PostLoad(&uapi_AActor_PostLoad);
    }

    auto const apiuapi_AActor_PostLoadSubobjects = (uapi_AActor_PostLoadSubobjectsFn)plugin->GetDllExport(TEXT("set_AActor_PostLoadSubobjects_handler\0"));
    if(apiuapi_AActor_PostLoadSubobjects){
        apiuapi_AActor_PostLoadSubobjects(&uapi_AActor_PostLoadSubobjects);
    }

    auto const apiuapi_AActor_PostNetInit = (uapi_AActor_PostNetInitFn)plugin->GetDllExport(TEXT("set_AActor_PostNetInit_handler\0"));
    if(apiuapi_AActor_PostNetInit){
        apiuapi_AActor_PostNetInit(&uapi_AActor_PostNetInit);
    }

    auto const apiuapi_AActor_PostNetReceive = (uapi_AActor_PostNetReceiveFn)plugin->GetDllExport(TEXT("set_AActor_PostNetReceive_handler\0"));
    if(apiuapi_AActor_PostNetReceive){
        apiuapi_AActor_PostNetReceive(&uapi_AActor_PostNetReceive);
    }

    auto const apiuapi_AActor_PostNetReceiveLocationAndRotation = (uapi_AActor_PostNetReceiveLocationAndRotationFn)plugin->GetDllExport(TEXT("set_AActor_PostNetReceiveLocationAndRotation_handler\0"));
    if(apiuapi_AActor_PostNetReceiveLocationAndRotation){
        apiuapi_AActor_PostNetReceiveLocationAndRotation(&uapi_AActor_PostNetReceiveLocationAndRotation);
    }

    auto const apiuapi_AActor_PostNetReceivePhysicState = (uapi_AActor_PostNetReceivePhysicStateFn)plugin->GetDllExport(TEXT("set_AActor_PostNetReceivePhysicState_handler\0"));
    if(apiuapi_AActor_PostNetReceivePhysicState){
        apiuapi_AActor_PostNetReceivePhysicState(&uapi_AActor_PostNetReceivePhysicState);
    }

    auto const apiuapi_AActor_PostNetReceiveRole = (uapi_AActor_PostNetReceiveRoleFn)plugin->GetDllExport(TEXT("set_AActor_PostNetReceiveRole_handler\0"));
    if(apiuapi_AActor_PostNetReceiveRole){
        apiuapi_AActor_PostNetReceiveRole(&uapi_AActor_PostNetReceiveRole);
    }

    auto const apiuapi_AActor_PostRegisterAllComponents = (uapi_AActor_PostRegisterAllComponentsFn)plugin->GetDllExport(TEXT("set_AActor_PostRegisterAllComponents_handler\0"));
    if(apiuapi_AActor_PostRegisterAllComponents){
        apiuapi_AActor_PostRegisterAllComponents(&uapi_AActor_PostRegisterAllComponents);
    }

    auto const apiuapi_AActor_PostRename = (uapi_AActor_PostRenameFn)plugin->GetDllExport(TEXT("set_AActor_PostRename_handler\0"));
    if(apiuapi_AActor_PostRename){
        apiuapi_AActor_PostRename(&uapi_AActor_PostRename);
    }

    auto const apiuapi_AActor_PostRenderFor = (uapi_AActor_PostRenderForFn)plugin->GetDllExport(TEXT("set_AActor_PostRenderFor_handler\0"));
    if(apiuapi_AActor_PostRenderFor){
        apiuapi_AActor_PostRenderFor(&uapi_AActor_PostRenderFor);
    }

    auto const apiuapi_AActor_PostUnregisterAllComponents = (uapi_AActor_PostUnregisterAllComponentsFn)plugin->GetDllExport(TEXT("set_AActor_PostUnregisterAllComponents_handler\0"));
    if(apiuapi_AActor_PostUnregisterAllComponents){
        apiuapi_AActor_PostUnregisterAllComponents(&uapi_AActor_PostUnregisterAllComponents);
    }

    auto const apiuapi_AActor_PreEditChange = (uapi_AActor_PreEditChangeFn)plugin->GetDllExport(TEXT("set_AActor_PreEditChange_handler\0"));
    if(apiuapi_AActor_PreEditChange){
        apiuapi_AActor_PreEditChange(&uapi_AActor_PreEditChange);
    }

    auto const apiuapi_AActor_PreEditUndo = (uapi_AActor_PreEditUndoFn)plugin->GetDllExport(TEXT("set_AActor_PreEditUndo_handler\0"));
    if(apiuapi_AActor_PreEditUndo){
        apiuapi_AActor_PreEditUndo(&uapi_AActor_PreEditUndo);
    }

    auto const apiuapi_AActor_PreInitializeComponents = (uapi_AActor_PreInitializeComponentsFn)plugin->GetDllExport(TEXT("set_AActor_PreInitializeComponents_handler\0"));
    if(apiuapi_AActor_PreInitializeComponents){
        apiuapi_AActor_PreInitializeComponents(&uapi_AActor_PreInitializeComponents);
    }

    auto const apiuapi_AActor_PreNetReceive = (uapi_AActor_PreNetReceiveFn)plugin->GetDllExport(TEXT("set_AActor_PreNetReceive_handler\0"));
    if(apiuapi_AActor_PreNetReceive){
        apiuapi_AActor_PreNetReceive(&uapi_AActor_PreNetReceive);
    }

    auto const apiuapi_AActor_PreRegisterAllComponents = (uapi_AActor_PreRegisterAllComponentsFn)plugin->GetDllExport(TEXT("set_AActor_PreRegisterAllComponents_handler\0"));
    if(apiuapi_AActor_PreRegisterAllComponents){
        apiuapi_AActor_PreRegisterAllComponents(&uapi_AActor_PreRegisterAllComponents);
    }

    auto const apiuapi_AActor_PrestreamTextures = (uapi_AActor_PrestreamTexturesFn)plugin->GetDllExport(TEXT("set_AActor_PrestreamTextures_handler\0"));
    if(apiuapi_AActor_PrestreamTextures){
        apiuapi_AActor_PrestreamTextures(&uapi_AActor_PrestreamTextures);
    }

    auto const apiuapi_AActor_ProcessEvent = (uapi_AActor_ProcessEventFn)plugin->GetDllExport(TEXT("set_AActor_ProcessEvent_handler\0"));
    if(apiuapi_AActor_ProcessEvent){
        apiuapi_AActor_ProcessEvent(&uapi_AActor_ProcessEvent);
    }

    auto const apiuapi_AActor_PushLevelInstanceEditingStateToProxies = (uapi_AActor_PushLevelInstanceEditingStateToProxiesFn)plugin->GetDllExport(TEXT("set_AActor_PushLevelInstanceEditingStateToProxies_handler\0"));
    if(apiuapi_AActor_PushLevelInstanceEditingStateToProxies){
        apiuapi_AActor_PushLevelInstanceEditingStateToProxies(&uapi_AActor_PushLevelInstanceEditingStateToProxies);
    }

    auto const apiuapi_AActor_PushSelectionToProxies = (uapi_AActor_PushSelectionToProxiesFn)plugin->GetDllExport(TEXT("set_AActor_PushSelectionToProxies_handler\0"));
    if(apiuapi_AActor_PushSelectionToProxies){
        apiuapi_AActor_PushSelectionToProxies(&uapi_AActor_PushSelectionToProxies);
    }

    auto const apiuapi_AActor_ReceiveActorBeginCursorOver = (uapi_AActor_ReceiveActorBeginCursorOverFn)plugin->GetDllExport(TEXT("set_AActor_ReceiveActorBeginCursorOver_handler\0"));
    if(apiuapi_AActor_ReceiveActorBeginCursorOver){
        apiuapi_AActor_ReceiveActorBeginCursorOver(&uapi_AActor_ReceiveActorBeginCursorOver);
    }

    auto const apiuapi_AActor_ReceiveActorBeginOverlap = (uapi_AActor_ReceiveActorBeginOverlapFn)plugin->GetDllExport(TEXT("set_AActor_ReceiveActorBeginOverlap_handler\0"));
    if(apiuapi_AActor_ReceiveActorBeginOverlap){
        apiuapi_AActor_ReceiveActorBeginOverlap(&uapi_AActor_ReceiveActorBeginOverlap);
    }

    auto const apiuapi_AActor_ReceiveActorEndCursorOver = (uapi_AActor_ReceiveActorEndCursorOverFn)plugin->GetDllExport(TEXT("set_AActor_ReceiveActorEndCursorOver_handler\0"));
    if(apiuapi_AActor_ReceiveActorEndCursorOver){
        apiuapi_AActor_ReceiveActorEndCursorOver(&uapi_AActor_ReceiveActorEndCursorOver);
    }

    auto const apiuapi_AActor_ReceiveActorEndOverlap = (uapi_AActor_ReceiveActorEndOverlapFn)plugin->GetDllExport(TEXT("set_AActor_ReceiveActorEndOverlap_handler\0"));
    if(apiuapi_AActor_ReceiveActorEndOverlap){
        apiuapi_AActor_ReceiveActorEndOverlap(&uapi_AActor_ReceiveActorEndOverlap);
    }

    auto const apiuapi_AActor_ReceiveAnyDamage = (uapi_AActor_ReceiveAnyDamageFn)plugin->GetDllExport(TEXT("set_AActor_ReceiveAnyDamage_handler\0"));
    if(apiuapi_AActor_ReceiveAnyDamage){
        apiuapi_AActor_ReceiveAnyDamage(&uapi_AActor_ReceiveAnyDamage);
    }

    auto const apiuapi_AActor_ReceiveAsyncPhysicsTick = (uapi_AActor_ReceiveAsyncPhysicsTickFn)plugin->GetDllExport(TEXT("set_AActor_ReceiveAsyncPhysicsTick_handler\0"));
    if(apiuapi_AActor_ReceiveAsyncPhysicsTick){
        apiuapi_AActor_ReceiveAsyncPhysicsTick(&uapi_AActor_ReceiveAsyncPhysicsTick);
    }

    auto const apiuapi_AActor_ReceiveDestroyed = (uapi_AActor_ReceiveDestroyedFn)plugin->GetDllExport(TEXT("set_AActor_ReceiveDestroyed_handler\0"));
    if(apiuapi_AActor_ReceiveDestroyed){
        apiuapi_AActor_ReceiveDestroyed(&uapi_AActor_ReceiveDestroyed);
    }

    auto const apiuapi_AActor_ReceiveTick = (uapi_AActor_ReceiveTickFn)plugin->GetDllExport(TEXT("set_AActor_ReceiveTick_handler\0"));
    if(apiuapi_AActor_ReceiveTick){
        apiuapi_AActor_ReceiveTick(&uapi_AActor_ReceiveTick);
    }

    auto const apiuapi_AActor_RegisterAllActorTickFunctions = (uapi_AActor_RegisterAllActorTickFunctionsFn)plugin->GetDllExport(TEXT("set_AActor_RegisterAllActorTickFunctions_handler\0"));
    if(apiuapi_AActor_RegisterAllActorTickFunctions){
        apiuapi_AActor_RegisterAllActorTickFunctions(&uapi_AActor_RegisterAllActorTickFunctions);
    }

    auto const apiuapi_AActor_RegisterAllComponents = (uapi_AActor_RegisterAllComponentsFn)plugin->GetDllExport(TEXT("set_AActor_RegisterAllComponents_handler\0"));
    if(apiuapi_AActor_RegisterAllComponents){
        apiuapi_AActor_RegisterAllComponents(&uapi_AActor_RegisterAllComponents);
    }

    auto const apiuapi_AActor_RemoveActorComponentReplicatedSubObject = (uapi_AActor_RemoveActorComponentReplicatedSubObjectFn)plugin->GetDllExport(TEXT("set_AActor_RemoveActorComponentReplicatedSubObject_handler\0"));
    if(apiuapi_AActor_RemoveActorComponentReplicatedSubObject){
        apiuapi_AActor_RemoveActorComponentReplicatedSubObject(&uapi_AActor_RemoveActorComponentReplicatedSubObject);
    }

    auto const apiuapi_AActor_RemoveAllDataLayers = (uapi_AActor_RemoveAllDataLayersFn)plugin->GetDllExport(TEXT("set_AActor_RemoveAllDataLayers_handler\0"));
    if(apiuapi_AActor_RemoveAllDataLayers){
        apiuapi_AActor_RemoveAllDataLayers(&uapi_AActor_RemoveAllDataLayers);
    }

    auto const apiuapi_AActor_RemoveDataLayer = (uapi_AActor_RemoveDataLayerFn)plugin->GetDllExport(TEXT("set_AActor_RemoveDataLayer_handler\0"));
    if(apiuapi_AActor_RemoveDataLayer){
        apiuapi_AActor_RemoveDataLayer(&uapi_AActor_RemoveDataLayer);
    }

    auto const apiuapi_AActor_RemoveInstanceComponent = (uapi_AActor_RemoveInstanceComponentFn)plugin->GetDllExport(TEXT("set_AActor_RemoveInstanceComponent_handler\0"));
    if(apiuapi_AActor_RemoveInstanceComponent){
        apiuapi_AActor_RemoveInstanceComponent(&uapi_AActor_RemoveInstanceComponent);
    }

    auto const apiuapi_AActor_RemoveOwnedComponent = (uapi_AActor_RemoveOwnedComponentFn)plugin->GetDllExport(TEXT("set_AActor_RemoveOwnedComponent_handler\0"));
    if(apiuapi_AActor_RemoveOwnedComponent){
        apiuapi_AActor_RemoveOwnedComponent(&uapi_AActor_RemoveOwnedComponent);
    }

    auto const apiuapi_AActor_RemoveReplicatedSubObject = (uapi_AActor_RemoveReplicatedSubObjectFn)plugin->GetDllExport(TEXT("set_AActor_RemoveReplicatedSubObject_handler\0"));
    if(apiuapi_AActor_RemoveReplicatedSubObject){
        apiuapi_AActor_RemoveReplicatedSubObject(&uapi_AActor_RemoveReplicatedSubObject);
    }

    auto const apiuapi_AActor_RemoveTickPrerequisiteActor = (uapi_AActor_RemoveTickPrerequisiteActorFn)plugin->GetDllExport(TEXT("set_AActor_RemoveTickPrerequisiteActor_handler\0"));
    if(apiuapi_AActor_RemoveTickPrerequisiteActor){
        apiuapi_AActor_RemoveTickPrerequisiteActor(&uapi_AActor_RemoveTickPrerequisiteActor);
    }

    auto const apiuapi_AActor_RemoveTickPrerequisiteComponent = (uapi_AActor_RemoveTickPrerequisiteComponentFn)plugin->GetDllExport(TEXT("set_AActor_RemoveTickPrerequisiteComponent_handler\0"));
    if(apiuapi_AActor_RemoveTickPrerequisiteComponent){
        apiuapi_AActor_RemoveTickPrerequisiteComponent(&uapi_AActor_RemoveTickPrerequisiteComponent);
    }

    auto const apiuapi_AActor_ReplicateSubobjects = (uapi_AActor_ReplicateSubobjectsFn)plugin->GetDllExport(TEXT("set_AActor_ReplicateSubobjects_handler\0"));
    if(apiuapi_AActor_ReplicateSubobjects){
        apiuapi_AActor_ReplicateSubobjects(&uapi_AActor_ReplicateSubobjects);
    }

    auto const apiuapi_AActor_ReregisterAllComponents = (uapi_AActor_ReregisterAllComponentsFn)plugin->GetDllExport(TEXT("set_AActor_ReregisterAllComponents_handler\0"));
    if(apiuapi_AActor_ReregisterAllComponents){
        apiuapi_AActor_ReregisterAllComponents(&uapi_AActor_ReregisterAllComponents);
    }

    auto const apiuapi_AActor_ReregisterComponentsWhenModified = (uapi_AActor_ReregisterComponentsWhenModifiedFn)plugin->GetDllExport(TEXT("set_AActor_ReregisterComponentsWhenModified_handler\0"));
    if(apiuapi_AActor_ReregisterComponentsWhenModified){
        apiuapi_AActor_ReregisterComponentsWhenModified(&uapi_AActor_ReregisterComponentsWhenModified);
    }

    auto const apiuapi_AActor_RerunConstructionScripts = (uapi_AActor_RerunConstructionScriptsFn)plugin->GetDllExport(TEXT("set_AActor_RerunConstructionScripts_handler\0"));
    if(apiuapi_AActor_RerunConstructionScripts){
        apiuapi_AActor_RerunConstructionScripts(&uapi_AActor_RerunConstructionScripts);
    }

    auto const apiuapi_AActor_Reset = (uapi_AActor_ResetFn)plugin->GetDllExport(TEXT("set_AActor_Reset_handler\0"));
    if(apiuapi_AActor_Reset){
        apiuapi_AActor_Reset(&uapi_AActor_Reset);
    }

    auto const apiuapi_AActor_ResetOwnedComponents = (uapi_AActor_ResetOwnedComponentsFn)plugin->GetDllExport(TEXT("set_AActor_ResetOwnedComponents_handler\0"));
    if(apiuapi_AActor_ResetOwnedComponents){
        apiuapi_AActor_ResetOwnedComponents(&uapi_AActor_ResetOwnedComponents);
    }

    auto const apiuapi_AActor_ResetPropertiesForConstruction = (uapi_AActor_ResetPropertiesForConstructionFn)plugin->GetDllExport(TEXT("set_AActor_ResetPropertiesForConstruction_handler\0"));
    if(apiuapi_AActor_ResetPropertiesForConstruction){
        apiuapi_AActor_ResetPropertiesForConstruction(&uapi_AActor_ResetPropertiesForConstruction);
    }

    auto const apiuapi_AActor_RewindForReplay = (uapi_AActor_RewindForReplayFn)plugin->GetDllExport(TEXT("set_AActor_RewindForReplay_handler\0"));
    if(apiuapi_AActor_RewindForReplay){
        apiuapi_AActor_RewindForReplay(&uapi_AActor_RewindForReplay);
    }

    auto const apiuapi_AActor_SeedAllRandomStreams = (uapi_AActor_SeedAllRandomStreamsFn)plugin->GetDllExport(TEXT("set_AActor_SeedAllRandomStreams_handler\0"));
    if(apiuapi_AActor_SeedAllRandomStreams){
        apiuapi_AActor_SeedAllRandomStreams(&uapi_AActor_SeedAllRandomStreams);
    }

    auto const apiuapi_AActor_SetActorEnableCollision = (uapi_AActor_SetActorEnableCollisionFn)plugin->GetDllExport(TEXT("set_AActor_SetActorEnableCollision_handler\0"));
    if(apiuapi_AActor_SetActorEnableCollision){
        apiuapi_AActor_SetActorEnableCollision(&uapi_AActor_SetActorEnableCollision);
    }

    auto const apiuapi_AActor_SetActorHiddenInGame = (uapi_AActor_SetActorHiddenInGameFn)plugin->GetDllExport(TEXT("set_AActor_SetActorHiddenInGame_handler\0"));
    if(apiuapi_AActor_SetActorHiddenInGame){
        apiuapi_AActor_SetActorHiddenInGame(&uapi_AActor_SetActorHiddenInGame);
    }

    auto const apiuapi_AActor_SetActorRelativeScale3D = (uapi_AActor_SetActorRelativeScale3DFn)plugin->GetDllExport(TEXT("set_AActor_SetActorRelativeScale3D_handler\0"));
    if(apiuapi_AActor_SetActorRelativeScale3D){
        apiuapi_AActor_SetActorRelativeScale3D(&uapi_AActor_SetActorRelativeScale3D);
    }

    auto const apiuapi_AActor_SetActorScale3D = (uapi_AActor_SetActorScale3DFn)plugin->GetDllExport(TEXT("set_AActor_SetActorScale3D_handler\0"));
    if(apiuapi_AActor_SetActorScale3D){
        apiuapi_AActor_SetActorScale3D(&uapi_AActor_SetActorScale3D);
    }

    auto const apiuapi_AActor_SetActorTickEnabled = (uapi_AActor_SetActorTickEnabledFn)plugin->GetDllExport(TEXT("set_AActor_SetActorTickEnabled_handler\0"));
    if(apiuapi_AActor_SetActorTickEnabled){
        apiuapi_AActor_SetActorTickEnabled(&uapi_AActor_SetActorTickEnabled);
    }

    auto const apiuapi_AActor_SetActorTickInterval = (uapi_AActor_SetActorTickIntervalFn)plugin->GetDllExport(TEXT("set_AActor_SetActorTickInterval_handler\0"));
    if(apiuapi_AActor_SetActorTickInterval){
        apiuapi_AActor_SetActorTickInterval(&uapi_AActor_SetActorTickInterval);
    }

    auto const apiuapi_AActor_SetAutoDestroyWhenFinished = (uapi_AActor_SetAutoDestroyWhenFinishedFn)plugin->GetDllExport(TEXT("set_AActor_SetAutoDestroyWhenFinished_handler\0"));
    if(apiuapi_AActor_SetAutoDestroyWhenFinished){
        apiuapi_AActor_SetAutoDestroyWhenFinished(&uapi_AActor_SetAutoDestroyWhenFinished);
    }

    auto const apiuapi_AActor_SetAutonomousProxy = (uapi_AActor_SetAutonomousProxyFn)plugin->GetDllExport(TEXT("set_AActor_SetAutonomousProxy_handler\0"));
    if(apiuapi_AActor_SetAutonomousProxy){
        apiuapi_AActor_SetAutonomousProxy(&uapi_AActor_SetAutonomousProxy);
    }

    auto const apiuapi_AActor_SetCallPreReplication = (uapi_AActor_SetCallPreReplicationFn)plugin->GetDllExport(TEXT("set_AActor_SetCallPreReplication_handler\0"));
    if(apiuapi_AActor_SetCallPreReplication){
        apiuapi_AActor_SetCallPreReplication(&uapi_AActor_SetCallPreReplication);
    }

    auto const apiuapi_AActor_SetCallPreReplicationForReplay = (uapi_AActor_SetCallPreReplicationForReplayFn)plugin->GetDllExport(TEXT("set_AActor_SetCallPreReplicationForReplay_handler\0"));
    if(apiuapi_AActor_SetCallPreReplicationForReplay){
        apiuapi_AActor_SetCallPreReplicationForReplay(&uapi_AActor_SetCallPreReplicationForReplay);
    }

    auto const apiuapi_AActor_SetCanBeDamaged = (uapi_AActor_SetCanBeDamagedFn)plugin->GetDllExport(TEXT("set_AActor_SetCanBeDamaged_handler\0"));
    if(apiuapi_AActor_SetCanBeDamaged){
        apiuapi_AActor_SetCanBeDamaged(&uapi_AActor_SetCanBeDamaged);
    }

    auto const apiuapi_AActor_SetForceExternalActorLevelReferenceForPIE = (uapi_AActor_SetForceExternalActorLevelReferenceForPIEFn)plugin->GetDllExport(TEXT("set_AActor_SetForceExternalActorLevelReferenceForPIE_handler\0"));
    if(apiuapi_AActor_SetForceExternalActorLevelReferenceForPIE){
        apiuapi_AActor_SetForceExternalActorLevelReferenceForPIE(&uapi_AActor_SetForceExternalActorLevelReferenceForPIE);
    }

    auto const apiuapi_AActor_SetHLODLayer = (uapi_AActor_SetHLODLayerFn)plugin->GetDllExport(TEXT("set_AActor_SetHLODLayer_handler\0"));
    if(apiuapi_AActor_SetHLODLayer){
        apiuapi_AActor_SetHLODLayer(&uapi_AActor_SetHLODLayer);
    }

    auto const apiuapi_AActor_SetHasActorRegisteredAllComponents = (uapi_AActor_SetHasActorRegisteredAllComponentsFn)plugin->GetDllExport(TEXT("set_AActor_SetHasActorRegisteredAllComponents_handler\0"));
    if(apiuapi_AActor_SetHasActorRegisteredAllComponents){
        apiuapi_AActor_SetHasActorRegisteredAllComponents(&uapi_AActor_SetHasActorRegisteredAllComponents);
    }

    auto const apiuapi_AActor_SetHidden = (uapi_AActor_SetHiddenFn)plugin->GetDllExport(TEXT("set_AActor_SetHidden_handler\0"));
    if(apiuapi_AActor_SetHidden){
        apiuapi_AActor_SetHidden(&uapi_AActor_SetHidden);
    }

    auto const apiuapi_AActor_SetInstigator = (uapi_AActor_SetInstigatorFn)plugin->GetDllExport(TEXT("set_AActor_SetInstigator_handler\0"));
    if(apiuapi_AActor_SetInstigator){
        apiuapi_AActor_SetInstigator(&uapi_AActor_SetInstigator);
    }

    auto const apiuapi_AActor_SetIsHiddenEdLayer = (uapi_AActor_SetIsHiddenEdLayerFn)plugin->GetDllExport(TEXT("set_AActor_SetIsHiddenEdLayer_handler\0"));
    if(apiuapi_AActor_SetIsHiddenEdLayer){
        apiuapi_AActor_SetIsHiddenEdLayer(&uapi_AActor_SetIsHiddenEdLayer);
    }

    auto const apiuapi_AActor_SetIsSpatiallyLoaded = (uapi_AActor_SetIsSpatiallyLoadedFn)plugin->GetDllExport(TEXT("set_AActor_SetIsSpatiallyLoaded_handler\0"));
    if(apiuapi_AActor_SetIsSpatiallyLoaded){
        apiuapi_AActor_SetIsSpatiallyLoaded(&uapi_AActor_SetIsSpatiallyLoaded);
    }

    auto const apiuapi_AActor_SetIsTemporarilyHiddenInEditor = (uapi_AActor_SetIsTemporarilyHiddenInEditorFn)plugin->GetDllExport(TEXT("set_AActor_SetIsTemporarilyHiddenInEditor_handler\0"));
    if(apiuapi_AActor_SetIsTemporarilyHiddenInEditor){
        apiuapi_AActor_SetIsTemporarilyHiddenInEditor(&uapi_AActor_SetIsTemporarilyHiddenInEditor);
    }

    auto const apiuapi_AActor_SetLODParent = (uapi_AActor_SetLODParentFn)plugin->GetDllExport(TEXT("set_AActor_SetLODParent_handler\0"));
    if(apiuapi_AActor_SetLODParent){
        apiuapi_AActor_SetLODParent(&uapi_AActor_SetLODParent);
    }

    auto const apiuapi_AActor_SetLifeSpan = (uapi_AActor_SetLifeSpanFn)plugin->GetDllExport(TEXT("set_AActor_SetLifeSpan_handler\0"));
    if(apiuapi_AActor_SetLifeSpan){
        apiuapi_AActor_SetLifeSpan(&uapi_AActor_SetLifeSpan);
    }

    auto const apiuapi_AActor_SetLockLocation = (uapi_AActor_SetLockLocationFn)plugin->GetDllExport(TEXT("set_AActor_SetLockLocation_handler\0"));
    if(apiuapi_AActor_SetLockLocation){
        apiuapi_AActor_SetLockLocation(&uapi_AActor_SetLockLocation);
    }

    auto const apiuapi_AActor_SetNetAddressable = (uapi_AActor_SetNetAddressableFn)plugin->GetDllExport(TEXT("set_AActor_SetNetAddressable_handler\0"));
    if(apiuapi_AActor_SetNetAddressable){
        apiuapi_AActor_SetNetAddressable(&uapi_AActor_SetNetAddressable);
    }

    auto const apiuapi_AActor_SetNetDriverName = (uapi_AActor_SetNetDriverNameFn)plugin->GetDllExport(TEXT("set_AActor_SetNetDriverName_handler\0"));
    if(apiuapi_AActor_SetNetDriverName){
        apiuapi_AActor_SetNetDriverName(&uapi_AActor_SetNetDriverName);
    }

    auto const apiuapi_AActor_SetOwner = (uapi_AActor_SetOwnerFn)plugin->GetDllExport(TEXT("set_AActor_SetOwner_handler\0"));
    if(apiuapi_AActor_SetOwner){
        apiuapi_AActor_SetOwner(&uapi_AActor_SetOwner);
    }

    auto const apiuapi_AActor_SetPackageExternal = (uapi_AActor_SetPackageExternalFn)plugin->GetDllExport(TEXT("set_AActor_SetPackageExternal_handler\0"));
    if(apiuapi_AActor_SetPackageExternal){
        apiuapi_AActor_SetPackageExternal(&uapi_AActor_SetPackageExternal);
    }

    auto const apiuapi_AActor_SetRayTracingGroupId = (uapi_AActor_SetRayTracingGroupIdFn)plugin->GetDllExport(TEXT("set_AActor_SetRayTracingGroupId_handler\0"));
    if(apiuapi_AActor_SetRayTracingGroupId){
        apiuapi_AActor_SetRayTracingGroupId(&uapi_AActor_SetRayTracingGroupId);
    }

    auto const apiuapi_AActor_SetReplicateMovement = (uapi_AActor_SetReplicateMovementFn)plugin->GetDllExport(TEXT("set_AActor_SetReplicateMovement_handler\0"));
    if(apiuapi_AActor_SetReplicateMovement){
        apiuapi_AActor_SetReplicateMovement(&uapi_AActor_SetReplicateMovement);
    }

    auto const apiuapi_AActor_SetReplicates = (uapi_AActor_SetReplicatesFn)plugin->GetDllExport(TEXT("set_AActor_SetReplicates_handler\0"));
    if(apiuapi_AActor_SetReplicates){
        apiuapi_AActor_SetReplicates(&uapi_AActor_SetReplicates);
    }

    auto const apiuapi_AActor_SetReplicatingMovement = (uapi_AActor_SetReplicatingMovementFn)plugin->GetDllExport(TEXT("set_AActor_SetReplicatingMovement_handler\0"));
    if(apiuapi_AActor_SetReplicatingMovement){
        apiuapi_AActor_SetReplicatingMovement(&uapi_AActor_SetReplicatingMovement);
    }

    auto const apiuapi_AActor_SetRootComponent = (uapi_AActor_SetRootComponentFn)plugin->GetDllExport(TEXT("set_AActor_SetRootComponent_handler\0"));
    if(apiuapi_AActor_SetRootComponent){
        apiuapi_AActor_SetRootComponent(&uapi_AActor_SetRootComponent);
    }

    auto const apiuapi_AActor_SetRuntimeGrid = (uapi_AActor_SetRuntimeGridFn)plugin->GetDllExport(TEXT("set_AActor_SetRuntimeGrid_handler\0"));
    if(apiuapi_AActor_SetRuntimeGrid){
        apiuapi_AActor_SetRuntimeGrid(&uapi_AActor_SetRuntimeGrid);
    }

    auto const apiuapi_AActor_SetTickableWhenPaused = (uapi_AActor_SetTickableWhenPausedFn)plugin->GetDllExport(TEXT("set_AActor_SetTickableWhenPaused_handler\0"));
    if(apiuapi_AActor_SetTickableWhenPaused){
        apiuapi_AActor_SetTickableWhenPaused(&uapi_AActor_SetTickableWhenPaused);
    }

    auto const apiuapi_AActor_ShouldCookOptimizedBPComponentData = (uapi_AActor_ShouldCookOptimizedBPComponentDataFn)plugin->GetDllExport(TEXT("set_AActor_ShouldCookOptimizedBPComponentData_handler\0"));
    if(apiuapi_AActor_ShouldCookOptimizedBPComponentData){
        apiuapi_AActor_ShouldCookOptimizedBPComponentData(&uapi_AActor_ShouldCookOptimizedBPComponentData);
    }

    auto const apiuapi_AActor_ShouldExport = (uapi_AActor_ShouldExportFn)plugin->GetDllExport(TEXT("set_AActor_ShouldExport_handler\0"));
    if(apiuapi_AActor_ShouldExport){
        apiuapi_AActor_ShouldExport(&uapi_AActor_ShouldExport);
    }

    auto const apiuapi_AActor_ShouldImport = (uapi_AActor_ShouldImportFn)plugin->GetDllExport(TEXT("set_AActor_ShouldImport_handler\0"));
    if(apiuapi_AActor_ShouldImport){
        apiuapi_AActor_ShouldImport(&uapi_AActor_ShouldImport);
    }

    auto const apiuapi_AActor_ShouldLevelKeepRefIfExternal = (uapi_AActor_ShouldLevelKeepRefIfExternalFn)plugin->GetDllExport(TEXT("set_AActor_ShouldLevelKeepRefIfExternal_handler\0"));
    if(apiuapi_AActor_ShouldLevelKeepRefIfExternal){
        apiuapi_AActor_ShouldLevelKeepRefIfExternal(&uapi_AActor_ShouldLevelKeepRefIfExternal);
    }

    auto const apiuapi_AActor_ShouldTickIfViewportsOnly = (uapi_AActor_ShouldTickIfViewportsOnlyFn)plugin->GetDllExport(TEXT("set_AActor_ShouldTickIfViewportsOnly_handler\0"));
    if(apiuapi_AActor_ShouldTickIfViewportsOnly){
        apiuapi_AActor_ShouldTickIfViewportsOnly(&uapi_AActor_ShouldTickIfViewportsOnly);
    }

    auto const apiuapi_AActor_SupportsDataLayer = (uapi_AActor_SupportsDataLayerFn)plugin->GetDllExport(TEXT("set_AActor_SupportsDataLayer_handler\0"));
    if(apiuapi_AActor_SupportsDataLayer){
        apiuapi_AActor_SupportsDataLayer(&uapi_AActor_SupportsDataLayer);
    }

    auto const apiuapi_AActor_SupportsExternalPackaging = (uapi_AActor_SupportsExternalPackagingFn)plugin->GetDllExport(TEXT("set_AActor_SupportsExternalPackaging_handler\0"));
    if(apiuapi_AActor_SupportsExternalPackaging){
        apiuapi_AActor_SupportsExternalPackaging(&uapi_AActor_SupportsExternalPackaging);
    }

    auto const apiuapi_AActor_SupportsLayers = (uapi_AActor_SupportsLayersFn)plugin->GetDllExport(TEXT("set_AActor_SupportsLayers_handler\0"));
    if(apiuapi_AActor_SupportsLayers){
        apiuapi_AActor_SupportsLayers(&uapi_AActor_SupportsLayers);
    }

    auto const apiuapi_AActor_SwapRoles = (uapi_AActor_SwapRolesFn)plugin->GetDllExport(TEXT("set_AActor_SwapRoles_handler\0"));
    if(apiuapi_AActor_SwapRoles){
        apiuapi_AActor_SwapRoles(&uapi_AActor_SwapRoles);
    }

    auto const apiuapi_AActor_TearOff = (uapi_AActor_TearOffFn)plugin->GetDllExport(TEXT("set_AActor_TearOff_handler\0"));
    if(apiuapi_AActor_TearOff){
        apiuapi_AActor_TearOff(&uapi_AActor_TearOff);
    }

    auto const apiuapi_AActor_TeleportSucceeded = (uapi_AActor_TeleportSucceededFn)plugin->GetDllExport(TEXT("set_AActor_TeleportSucceeded_handler\0"));
    if(apiuapi_AActor_TeleportSucceeded){
        apiuapi_AActor_TeleportSucceeded(&uapi_AActor_TeleportSucceeded);
    }

    auto const apiuapi_AActor_Tick = (uapi_AActor_TickFn)plugin->GetDllExport(TEXT("set_AActor_Tick_handler\0"));
    if(apiuapi_AActor_Tick){
        apiuapi_AActor_Tick(&uapi_AActor_Tick);
    }

    auto const apiuapi_AActor_TornOff = (uapi_AActor_TornOffFn)plugin->GetDllExport(TEXT("set_AActor_TornOff_handler\0"));
    if(apiuapi_AActor_TornOff){
        apiuapi_AActor_TornOff(&uapi_AActor_TornOff);
    }

    auto const apiuapi_AActor_UninitializeComponents = (uapi_AActor_UninitializeComponentsFn)plugin->GetDllExport(TEXT("set_AActor_UninitializeComponents_handler\0"));
    if(apiuapi_AActor_UninitializeComponents){
        apiuapi_AActor_UninitializeComponents(&uapi_AActor_UninitializeComponents);
    }

    auto const apiuapi_AActor_UnregisterAllComponents = (uapi_AActor_UnregisterAllComponentsFn)plugin->GetDllExport(TEXT("set_AActor_UnregisterAllComponents_handler\0"));
    if(apiuapi_AActor_UnregisterAllComponents){
        apiuapi_AActor_UnregisterAllComponents(&uapi_AActor_UnregisterAllComponents);
    }

    auto const apiuapi_AActor_UpdateAllReplicatedComponents = (uapi_AActor_UpdateAllReplicatedComponentsFn)plugin->GetDllExport(TEXT("set_AActor_UpdateAllReplicatedComponents_handler\0"));
    if(apiuapi_AActor_UpdateAllReplicatedComponents){
        apiuapi_AActor_UpdateAllReplicatedComponents(&uapi_AActor_UpdateAllReplicatedComponents);
    }

    auto const apiuapi_AActor_UpdateComponentTransforms = (uapi_AActor_UpdateComponentTransformsFn)plugin->GetDllExport(TEXT("set_AActor_UpdateComponentTransforms_handler\0"));
    if(apiuapi_AActor_UpdateComponentTransforms){
        apiuapi_AActor_UpdateComponentTransforms(&uapi_AActor_UpdateComponentTransforms);
    }

    auto const apiuapi_AActor_UpdateOverlaps = (uapi_AActor_UpdateOverlapsFn)plugin->GetDllExport(TEXT("set_AActor_UpdateOverlaps_handler\0"));
    if(apiuapi_AActor_UpdateOverlaps){
        apiuapi_AActor_UpdateOverlaps(&uapi_AActor_UpdateOverlaps);
    }

    auto const apiuapi_AActor_UpdateReplicatedComponent = (uapi_AActor_UpdateReplicatedComponentFn)plugin->GetDllExport(TEXT("set_AActor_UpdateReplicatedComponent_handler\0"));
    if(apiuapi_AActor_UpdateReplicatedComponent){
        apiuapi_AActor_UpdateReplicatedComponent(&uapi_AActor_UpdateReplicatedComponent);
    }

    auto const apiuapi_AActor_UseShortConnectTimeout = (uapi_AActor_UseShortConnectTimeoutFn)plugin->GetDllExport(TEXT("set_AActor_UseShortConnectTimeout_handler\0"));
    if(apiuapi_AActor_UseShortConnectTimeout){
        apiuapi_AActor_UseShortConnectTimeout(&uapi_AActor_UseShortConnectTimeout);
    }

    auto const apiuapi_AActor_UserConstructionScript = (uapi_AActor_UserConstructionScriptFn)plugin->GetDllExport(TEXT("set_AActor_UserConstructionScript_handler\0"));
    if(apiuapi_AActor_UserConstructionScript){
        apiuapi_AActor_UserConstructionScript(&uapi_AActor_UserConstructionScript);
    }

    auto const apiuapi_AActor_WasRecentlyRendered = (uapi_AActor_WasRecentlyRenderedFn)plugin->GetDllExport(TEXT("set_AActor_WasRecentlyRendered_handler\0"));
    if(apiuapi_AActor_WasRecentlyRendered){
        apiuapi_AActor_WasRecentlyRendered(&uapi_AActor_WasRecentlyRendered);
    }

    auto const apiuapi_APawn_GetController = (uapi_APawn_GetControllerFn)plugin->GetDllExport(TEXT("set_APawn_GetController_handler\0"));
    if(apiuapi_APawn_GetController){
        apiuapi_APawn_GetController(&uapi_APawn_GetController);
    }

    auto const apiuapi_APawn_GetLocalViewingPlayerController = (uapi_APawn_GetLocalViewingPlayerControllerFn)plugin->GetDllExport(TEXT("set_APawn_GetLocalViewingPlayerController_handler\0"));
    if(apiuapi_APawn_GetLocalViewingPlayerController){
        apiuapi_APawn_GetLocalViewingPlayerController(&uapi_APawn_GetLocalViewingPlayerController);
    }

    auto const apiuapi_APawn_GetMovementBase = (uapi_APawn_GetMovementBaseFn)plugin->GetDllExport(TEXT("set_APawn_GetMovementBase_handler\0"));
    if(apiuapi_APawn_GetMovementBase){
        apiuapi_APawn_GetMovementBase(&uapi_APawn_GetMovementBase);
    }

    auto const apiuapi_APawn_GetMovementComponent = (uapi_APawn_GetMovementComponentFn)plugin->GetDllExport(TEXT("set_APawn_GetMovementComponent_handler\0"));
    if(apiuapi_APawn_GetMovementComponent){
        apiuapi_APawn_GetMovementComponent(&uapi_APawn_GetMovementComponent);
    }

    auto const apiuapi_APawn_GetPawnNoiseEmitterComponent = (uapi_APawn_GetPawnNoiseEmitterComponentFn)plugin->GetDllExport(TEXT("set_APawn_GetPawnNoiseEmitterComponent_handler\0"));
    if(apiuapi_APawn_GetPawnNoiseEmitterComponent){
        apiuapi_APawn_GetPawnNoiseEmitterComponent(&uapi_APawn_GetPawnNoiseEmitterComponent);
    }

    auto const apiuapi_APawn_GetPlayerState = (uapi_APawn_GetPlayerStateFn)plugin->GetDllExport(TEXT("set_APawn_GetPlayerState_handler\0"));
    if(apiuapi_APawn_GetPlayerState){
        apiuapi_APawn_GetPlayerState(&uapi_APawn_GetPlayerState);
    }

    auto const apiuapi_APawn_IsLocalPlayerControllerViewingAPawn = (uapi_APawn_IsLocalPlayerControllerViewingAPawnFn)plugin->GetDllExport(TEXT("set_APawn_IsLocalPlayerControllerViewingAPawn_handler\0"));
    if(apiuapi_APawn_IsLocalPlayerControllerViewingAPawn){
        apiuapi_APawn_IsLocalPlayerControllerViewingAPawn(&uapi_APawn_IsLocalPlayerControllerViewingAPawn);
    }

    auto const apiuapi_APawn_IsLocallyViewed = (uapi_APawn_IsLocallyViewedFn)plugin->GetDllExport(TEXT("set_APawn_IsLocallyViewed_handler\0"));
    if(apiuapi_APawn_IsLocallyViewed){
        apiuapi_APawn_IsLocallyViewed(&uapi_APawn_IsLocallyViewed);
    }

    auto const apiuapi_APawn_PawnMakeNoise = (uapi_APawn_PawnMakeNoiseFn)plugin->GetDllExport(TEXT("set_APawn_PawnMakeNoise_handler\0"));
    if(apiuapi_APawn_PawnMakeNoise){
        apiuapi_APawn_PawnMakeNoise(&uapi_APawn_PawnMakeNoise);
    }

    auto const apiuapi_APawn_SetPlayerState = (uapi_APawn_SetPlayerStateFn)plugin->GetDllExport(TEXT("set_APawn_SetPlayerState_handler\0"));
    if(apiuapi_APawn_SetPlayerState){
        apiuapi_APawn_SetPlayerState(&uapi_APawn_SetPlayerState);
    }

    auto const apiuapi_AController_ChangeState = (uapi_AController_ChangeStateFn)plugin->GetDllExport(TEXT("set_AController_ChangeState_handler\0"));
    if(apiuapi_AController_ChangeState){
        apiuapi_AController_ChangeState(&uapi_AController_ChangeState);
    }

    auto const apiuapi_AController_CleanupPlayerState = (uapi_AController_CleanupPlayerStateFn)plugin->GetDllExport(TEXT("set_AController_CleanupPlayerState_handler\0"));
    if(apiuapi_AController_CleanupPlayerState){
        apiuapi_AController_CleanupPlayerState(&uapi_AController_CleanupPlayerState);
    }

    auto const apiuapi_AController_ClientSetLocation = (uapi_AController_ClientSetLocationFn)plugin->GetDllExport(TEXT("set_AController_ClientSetLocation_handler\0"));
    if(apiuapi_AController_ClientSetLocation){
        apiuapi_AController_ClientSetLocation(&uapi_AController_ClientSetLocation);
    }

    auto const apiuapi_AController_ClientSetRotation = (uapi_AController_ClientSetRotationFn)plugin->GetDllExport(TEXT("set_AController_ClientSetRotation_handler\0"));
    if(apiuapi_AController_ClientSetRotation){
        apiuapi_AController_ClientSetRotation(&uapi_AController_ClientSetRotation);
    }

    auto const apiuapi_AController_CurrentLevelUnloaded = (uapi_AController_CurrentLevelUnloadedFn)plugin->GetDllExport(TEXT("set_AController_CurrentLevelUnloaded_handler\0"));
    if(apiuapi_AController_CurrentLevelUnloaded){
        apiuapi_AController_CurrentLevelUnloaded(&uapi_AController_CurrentLevelUnloaded);
    }

    auto const apiuapi_AController_Destroyed = (uapi_AController_DestroyedFn)plugin->GetDllExport(TEXT("set_AController_Destroyed_handler\0"));
    if(apiuapi_AController_Destroyed){
        apiuapi_AController_Destroyed(&uapi_AController_Destroyed);
    }

    auto const apiuapi_AController_FailedToSpawnPawn = (uapi_AController_FailedToSpawnPawnFn)plugin->GetDllExport(TEXT("set_AController_FailedToSpawnPawn_handler\0"));
    if(apiuapi_AController_FailedToSpawnPawn){
        apiuapi_AController_FailedToSpawnPawn(&uapi_AController_FailedToSpawnPawn);
    }

    auto const apiuapi_AController_GameHasEnded = (uapi_AController_GameHasEndedFn)plugin->GetDllExport(TEXT("set_AController_GameHasEnded_handler\0"));
    if(apiuapi_AController_GameHasEnded){
        apiuapi_AController_GameHasEnded(&uapi_AController_GameHasEnded);
    }

    auto const apiuapi_AController_GetCharacter = (uapi_AController_GetCharacterFn)plugin->GetDllExport(TEXT("set_AController_GetCharacter_handler\0"));
    if(apiuapi_AController_GetCharacter){
        apiuapi_AController_GetCharacter(&uapi_AController_GetCharacter);
    }

    auto const apiuapi_AController_GetControlRotation = (uapi_AController_GetControlRotationFn)plugin->GetDllExport(TEXT("set_AController_GetControlRotation_handler\0"));
    if(apiuapi_AController_GetControlRotation){
        apiuapi_AController_GetControlRotation(&uapi_AController_GetControlRotation);
    }

    auto const apiuapi_AController_GetDesiredRotation = (uapi_AController_GetDesiredRotationFn)plugin->GetDllExport(TEXT("set_AController_GetDesiredRotation_handler\0"));
    if(apiuapi_AController_GetDesiredRotation){
        apiuapi_AController_GetDesiredRotation(&uapi_AController_GetDesiredRotation);
    }

    auto const apiuapi_AController_GetHumanReadableName = (uapi_AController_GetHumanReadableNameFn)plugin->GetDllExport(TEXT("set_AController_GetHumanReadableName_handler\0"));
    if(apiuapi_AController_GetHumanReadableName){
        apiuapi_AController_GetHumanReadableName(&uapi_AController_GetHumanReadableName);
    }

    auto const apiuapi_AController_GetNavAgentLocation = (uapi_AController_GetNavAgentLocationFn)plugin->GetDllExport(TEXT("set_AController_GetNavAgentLocation_handler\0"));
    if(apiuapi_AController_GetNavAgentLocation){
        apiuapi_AController_GetNavAgentLocation(&uapi_AController_GetNavAgentLocation);
    }

    auto const apiuapi_AController_GetPawn = (uapi_AController_GetPawnFn)plugin->GetDllExport(TEXT("set_AController_GetPawn_handler\0"));
    if(apiuapi_AController_GetPawn){
        apiuapi_AController_GetPawn(&uapi_AController_GetPawn);
    }

    auto const apiuapi_AController_GetStateName = (uapi_AController_GetStateNameFn)plugin->GetDllExport(TEXT("set_AController_GetStateName_handler\0"));
    if(apiuapi_AController_GetStateName){
        apiuapi_AController_GetStateName(&uapi_AController_GetStateName);
    }

    auto const apiuapi_AController_GetViewTarget = (uapi_AController_GetViewTargetFn)plugin->GetDllExport(TEXT("set_AController_GetViewTarget_handler\0"));
    if(apiuapi_AController_GetViewTarget){
        apiuapi_AController_GetViewTarget(&uapi_AController_GetViewTarget);
    }

    auto const apiuapi_AController_InitPlayerState = (uapi_AController_InitPlayerStateFn)plugin->GetDllExport(TEXT("set_AController_InitPlayerState_handler\0"));
    if(apiuapi_AController_InitPlayerState){
        apiuapi_AController_InitPlayerState(&uapi_AController_InitPlayerState);
    }

    auto const apiuapi_AController_InstigatedAnyDamage = (uapi_AController_InstigatedAnyDamageFn)plugin->GetDllExport(TEXT("set_AController_InstigatedAnyDamage_handler\0"));
    if(apiuapi_AController_InstigatedAnyDamage){
        apiuapi_AController_InstigatedAnyDamage(&uapi_AController_InstigatedAnyDamage);
    }

    auto const apiuapi_AController_IsFollowingAPath = (uapi_AController_IsFollowingAPathFn)plugin->GetDllExport(TEXT("set_AController_IsFollowingAPath_handler\0"));
    if(apiuapi_AController_IsFollowingAPath){
        apiuapi_AController_IsFollowingAPath(&uapi_AController_IsFollowingAPath);
    }

    auto const apiuapi_AController_IsInState = (uapi_AController_IsInStateFn)plugin->GetDllExport(TEXT("set_AController_IsInState_handler\0"));
    if(apiuapi_AController_IsInState){
        apiuapi_AController_IsInState(&uapi_AController_IsInState);
    }

    auto const apiuapi_AController_IsLocalController = (uapi_AController_IsLocalControllerFn)plugin->GetDllExport(TEXT("set_AController_IsLocalController_handler\0"));
    if(apiuapi_AController_IsLocalController){
        apiuapi_AController_IsLocalController(&uapi_AController_IsLocalController);
    }

    auto const apiuapi_AController_IsLocalPlayerController = (uapi_AController_IsLocalPlayerControllerFn)plugin->GetDllExport(TEXT("set_AController_IsLocalPlayerController_handler\0"));
    if(apiuapi_AController_IsLocalPlayerController){
        apiuapi_AController_IsLocalPlayerController(&uapi_AController_IsLocalPlayerController);
    }

    auto const apiuapi_AController_IsLookInputIgnored = (uapi_AController_IsLookInputIgnoredFn)plugin->GetDllExport(TEXT("set_AController_IsLookInputIgnored_handler\0"));
    if(apiuapi_AController_IsLookInputIgnored){
        apiuapi_AController_IsLookInputIgnored(&uapi_AController_IsLookInputIgnored);
    }

    auto const apiuapi_AController_IsMoveInputIgnored = (uapi_AController_IsMoveInputIgnoredFn)plugin->GetDllExport(TEXT("set_AController_IsMoveInputIgnored_handler\0"));
    if(apiuapi_AController_IsMoveInputIgnored){
        apiuapi_AController_IsMoveInputIgnored(&uapi_AController_IsMoveInputIgnored);
    }

    auto const apiuapi_AController_IsPlayerController = (uapi_AController_IsPlayerControllerFn)plugin->GetDllExport(TEXT("set_AController_IsPlayerController_handler\0"));
    if(apiuapi_AController_IsPlayerController){
        apiuapi_AController_IsPlayerController(&uapi_AController_IsPlayerController);
    }

    auto const apiuapi_AController_K2_DestroyActor = (uapi_AController_K2_DestroyActorFn)plugin->GetDllExport(TEXT("set_AController_K2_DestroyActor_handler\0"));
    if(apiuapi_AController_K2_DestroyActor){
        apiuapi_AController_K2_DestroyActor(&uapi_AController_K2_DestroyActor);
    }

    auto const apiuapi_AController_K2_GetPawn = (uapi_AController_K2_GetPawnFn)plugin->GetDllExport(TEXT("set_AController_K2_GetPawn_handler\0"));
    if(apiuapi_AController_K2_GetPawn){
        apiuapi_AController_K2_GetPawn(&uapi_AController_K2_GetPawn);
    }

    auto const apiuapi_AController_LineOfSightTo = (uapi_AController_LineOfSightToFn)plugin->GetDllExport(TEXT("set_AController_LineOfSightTo_handler\0"));
    if(apiuapi_AController_LineOfSightTo){
        apiuapi_AController_LineOfSightTo(&uapi_AController_LineOfSightTo);
    }

    auto const apiuapi_AController_OnRep_Pawn = (uapi_AController_OnRep_PawnFn)plugin->GetDllExport(TEXT("set_AController_OnRep_Pawn_handler\0"));
    if(apiuapi_AController_OnRep_Pawn){
        apiuapi_AController_OnRep_Pawn(&uapi_AController_OnRep_Pawn);
    }

    auto const apiuapi_AController_OnRep_PlayerState = (uapi_AController_OnRep_PlayerStateFn)plugin->GetDllExport(TEXT("set_AController_OnRep_PlayerState_handler\0"));
    if(apiuapi_AController_OnRep_PlayerState){
        apiuapi_AController_OnRep_PlayerState(&uapi_AController_OnRep_PlayerState);
    }

    auto const apiuapi_AController_PawnPendingDestroy = (uapi_AController_PawnPendingDestroyFn)plugin->GetDllExport(TEXT("set_AController_PawnPendingDestroy_handler\0"));
    if(apiuapi_AController_PawnPendingDestroy){
        apiuapi_AController_PawnPendingDestroy(&uapi_AController_PawnPendingDestroy);
    }

    auto const apiuapi_AController_Possess = (uapi_AController_PossessFn)plugin->GetDllExport(TEXT("set_AController_Possess_handler\0"));
    if(apiuapi_AController_Possess){
        apiuapi_AController_Possess(&uapi_AController_Possess);
    }

    auto const apiuapi_AController_PostInitializeComponents = (uapi_AController_PostInitializeComponentsFn)plugin->GetDllExport(TEXT("set_AController_PostInitializeComponents_handler\0"));
    if(apiuapi_AController_PostInitializeComponents){
        apiuapi_AController_PostInitializeComponents(&uapi_AController_PostInitializeComponents);
    }

    auto const apiuapi_AController_Reset = (uapi_AController_ResetFn)plugin->GetDllExport(TEXT("set_AController_Reset_handler\0"));
    if(apiuapi_AController_Reset){
        apiuapi_AController_Reset(&uapi_AController_Reset);
    }

    auto const apiuapi_AController_ResetIgnoreInputFlags = (uapi_AController_ResetIgnoreInputFlagsFn)plugin->GetDllExport(TEXT("set_AController_ResetIgnoreInputFlags_handler\0"));
    if(apiuapi_AController_ResetIgnoreInputFlags){
        apiuapi_AController_ResetIgnoreInputFlags(&uapi_AController_ResetIgnoreInputFlags);
    }

    auto const apiuapi_AController_ResetIgnoreLookInput = (uapi_AController_ResetIgnoreLookInputFn)plugin->GetDllExport(TEXT("set_AController_ResetIgnoreLookInput_handler\0"));
    if(apiuapi_AController_ResetIgnoreLookInput){
        apiuapi_AController_ResetIgnoreLookInput(&uapi_AController_ResetIgnoreLookInput);
    }

    auto const apiuapi_AController_ResetIgnoreMoveInput = (uapi_AController_ResetIgnoreMoveInputFn)plugin->GetDllExport(TEXT("set_AController_ResetIgnoreMoveInput_handler\0"));
    if(apiuapi_AController_ResetIgnoreMoveInput){
        apiuapi_AController_ResetIgnoreMoveInput(&uapi_AController_ResetIgnoreMoveInput);
    }

    auto const apiuapi_AController_SetIgnoreLookInput = (uapi_AController_SetIgnoreLookInputFn)plugin->GetDllExport(TEXT("set_AController_SetIgnoreLookInput_handler\0"));
    if(apiuapi_AController_SetIgnoreLookInput){
        apiuapi_AController_SetIgnoreLookInput(&uapi_AController_SetIgnoreLookInput);
    }

    auto const apiuapi_AController_SetIgnoreMoveInput = (uapi_AController_SetIgnoreMoveInputFn)plugin->GetDllExport(TEXT("set_AController_SetIgnoreMoveInput_handler\0"));
    if(apiuapi_AController_SetIgnoreMoveInput){
        apiuapi_AController_SetIgnoreMoveInput(&uapi_AController_SetIgnoreMoveInput);
    }

    auto const apiuapi_AController_SetPawn = (uapi_AController_SetPawnFn)plugin->GetDllExport(TEXT("set_AController_SetPawn_handler\0"));
    if(apiuapi_AController_SetPawn){
        apiuapi_AController_SetPawn(&uapi_AController_SetPawn);
    }

    auto const apiuapi_AController_SetPawnFromRep = (uapi_AController_SetPawnFromRepFn)plugin->GetDllExport(TEXT("set_AController_SetPawnFromRep_handler\0"));
    if(apiuapi_AController_SetPawnFromRep){
        apiuapi_AController_SetPawnFromRep(&uapi_AController_SetPawnFromRep);
    }

    auto const apiuapi_AController_ShouldParticipateInSeamlessTravel = (uapi_AController_ShouldParticipateInSeamlessTravelFn)plugin->GetDllExport(TEXT("set_AController_ShouldParticipateInSeamlessTravel_handler\0"));
    if(apiuapi_AController_ShouldParticipateInSeamlessTravel){
        apiuapi_AController_ShouldParticipateInSeamlessTravel(&uapi_AController_ShouldParticipateInSeamlessTravel);
    }

    auto const apiuapi_AController_ShouldPostponePathUpdates = (uapi_AController_ShouldPostponePathUpdatesFn)plugin->GetDllExport(TEXT("set_AController_ShouldPostponePathUpdates_handler\0"));
    if(apiuapi_AController_ShouldPostponePathUpdates){
        apiuapi_AController_ShouldPostponePathUpdates(&uapi_AController_ShouldPostponePathUpdates);
    }

    auto const apiuapi_AController_StopMovement = (uapi_AController_StopMovementFn)plugin->GetDllExport(TEXT("set_AController_StopMovement_handler\0"));
    if(apiuapi_AController_StopMovement){
        apiuapi_AController_StopMovement(&uapi_AController_StopMovement);
    }

    auto const apiuapi_AController_UnPossess = (uapi_AController_UnPossessFn)plugin->GetDllExport(TEXT("set_AController_UnPossess_handler\0"));
    if(apiuapi_AController_UnPossess){
        apiuapi_AController_UnPossess(&uapi_AController_UnPossess);
    }

    auto const apiuapi_APlayerController_AcknowledgePossession = (uapi_APlayerController_AcknowledgePossessionFn)plugin->GetDllExport(TEXT("set_APlayerController_AcknowledgePossession_handler\0"));
    if(apiuapi_APlayerController_AcknowledgePossession){
        apiuapi_APlayerController_AcknowledgePossession(&uapi_APlayerController_AcknowledgePossession);
    }

    auto const apiuapi_APlayerController_ActivateTouchInterface = (uapi_APlayerController_ActivateTouchInterfaceFn)plugin->GetDllExport(TEXT("set_APlayerController_ActivateTouchInterface_handler\0"));
    if(apiuapi_APlayerController_ActivateTouchInterface){
        apiuapi_APlayerController_ActivateTouchInterface(&uapi_APlayerController_ActivateTouchInterface);
    }

    auto const apiuapi_APlayerController_AddCheats = (uapi_APlayerController_AddCheatsFn)plugin->GetDllExport(TEXT("set_APlayerController_AddCheats_handler\0"));
    if(apiuapi_APlayerController_AddCheats){
        apiuapi_APlayerController_AddCheats(&uapi_APlayerController_AddCheats);
    }

    auto const apiuapi_APlayerController_AddPitchInput = (uapi_APlayerController_AddPitchInputFn)plugin->GetDllExport(TEXT("set_APlayerController_AddPitchInput_handler\0"));
    if(apiuapi_APlayerController_AddPitchInput){
        apiuapi_APlayerController_AddPitchInput(&uapi_APlayerController_AddPitchInput);
    }

    auto const apiuapi_APlayerController_AddRollInput = (uapi_APlayerController_AddRollInputFn)plugin->GetDllExport(TEXT("set_APlayerController_AddRollInput_handler\0"));
    if(apiuapi_APlayerController_AddRollInput){
        apiuapi_APlayerController_AddRollInput(&uapi_APlayerController_AddRollInput);
    }

    auto const apiuapi_APlayerController_AddYawInput = (uapi_APlayerController_AddYawInputFn)plugin->GetDllExport(TEXT("set_APlayerController_AddYawInput_handler\0"));
    if(apiuapi_APlayerController_AddYawInput){
        apiuapi_APlayerController_AddYawInput(&uapi_APlayerController_AddYawInput);
    }

    auto const apiuapi_APlayerController_AutoManageActiveCameraTarget = (uapi_APlayerController_AutoManageActiveCameraTargetFn)plugin->GetDllExport(TEXT("set_APlayerController_AutoManageActiveCameraTarget_handler\0"));
    if(apiuapi_APlayerController_AutoManageActiveCameraTarget){
        apiuapi_APlayerController_AutoManageActiveCameraTarget(&uapi_APlayerController_AutoManageActiveCameraTarget);
    }

    auto const apiuapi_APlayerController_BeginInactiveState = (uapi_APlayerController_BeginInactiveStateFn)plugin->GetDllExport(TEXT("set_APlayerController_BeginInactiveState_handler\0"));
    if(apiuapi_APlayerController_BeginInactiveState){
        apiuapi_APlayerController_BeginInactiveState(&uapi_APlayerController_BeginInactiveState);
    }

    auto const apiuapi_APlayerController_Camera = (uapi_APlayerController_CameraFn)plugin->GetDllExport(TEXT("set_APlayerController_Camera_handler\0"));
    if(apiuapi_APlayerController_Camera){
        apiuapi_APlayerController_Camera(&uapi_APlayerController_Camera);
    }

    auto const apiuapi_APlayerController_CanRestartPlayer = (uapi_APlayerController_CanRestartPlayerFn)plugin->GetDllExport(TEXT("set_APlayerController_CanRestartPlayer_handler\0"));
    if(apiuapi_APlayerController_CanRestartPlayer){
        apiuapi_APlayerController_CanRestartPlayer(&uapi_APlayerController_CanRestartPlayer);
    }

    auto const apiuapi_APlayerController_ChangeState = (uapi_APlayerController_ChangeStateFn)plugin->GetDllExport(TEXT("set_APlayerController_ChangeState_handler\0"));
    if(apiuapi_APlayerController_ChangeState){
        apiuapi_APlayerController_ChangeState(&uapi_APlayerController_ChangeState);
    }

    auto const apiuapi_APlayerController_CleanUpAudioComponents = (uapi_APlayerController_CleanUpAudioComponentsFn)plugin->GetDllExport(TEXT("set_APlayerController_CleanUpAudioComponents_handler\0"));
    if(apiuapi_APlayerController_CleanUpAudioComponents){
        apiuapi_APlayerController_CleanUpAudioComponents(&uapi_APlayerController_CleanUpAudioComponents);
    }

    auto const apiuapi_APlayerController_CleanupGameViewport = (uapi_APlayerController_CleanupGameViewportFn)plugin->GetDllExport(TEXT("set_APlayerController_CleanupGameViewport_handler\0"));
    if(apiuapi_APlayerController_CleanupGameViewport){
        apiuapi_APlayerController_CleanupGameViewport(&uapi_APlayerController_CleanupGameViewport);
    }

    auto const apiuapi_APlayerController_CleanupPlayerState = (uapi_APlayerController_CleanupPlayerStateFn)plugin->GetDllExport(TEXT("set_APlayerController_CleanupPlayerState_handler\0"));
    if(apiuapi_APlayerController_CleanupPlayerState){
        apiuapi_APlayerController_CleanupPlayerState(&uapi_APlayerController_CleanupPlayerState);
    }

    auto const apiuapi_APlayerController_ClearAudioListenerAttenuationOverride = (uapi_APlayerController_ClearAudioListenerAttenuationOverrideFn)plugin->GetDllExport(TEXT("set_APlayerController_ClearAudioListenerAttenuationOverride_handler\0"));
    if(apiuapi_APlayerController_ClearAudioListenerAttenuationOverride){
        apiuapi_APlayerController_ClearAudioListenerAttenuationOverride(&uapi_APlayerController_ClearAudioListenerAttenuationOverride);
    }

    auto const apiuapi_APlayerController_ClearAudioListenerOverride = (uapi_APlayerController_ClearAudioListenerOverrideFn)plugin->GetDllExport(TEXT("set_APlayerController_ClearAudioListenerOverride_handler\0"));
    if(apiuapi_APlayerController_ClearAudioListenerOverride){
        apiuapi_APlayerController_ClearAudioListenerOverride(&uapi_APlayerController_ClearAudioListenerOverride);
    }

    auto const apiuapi_APlayerController_ClientAddTextureStreamingLoc = (uapi_APlayerController_ClientAddTextureStreamingLocFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientAddTextureStreamingLoc_handler\0"));
    if(apiuapi_APlayerController_ClientAddTextureStreamingLoc){
        apiuapi_APlayerController_ClientAddTextureStreamingLoc(&uapi_APlayerController_ClientAddTextureStreamingLoc);
    }

    auto const apiuapi_APlayerController_ClientCancelPendingMapChange = (uapi_APlayerController_ClientCancelPendingMapChangeFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientCancelPendingMapChange_handler\0"));
    if(apiuapi_APlayerController_ClientCancelPendingMapChange){
        apiuapi_APlayerController_ClientCancelPendingMapChange(&uapi_APlayerController_ClientCancelPendingMapChange);
    }

    auto const apiuapi_APlayerController_ClientCapBandwidth = (uapi_APlayerController_ClientCapBandwidthFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientCapBandwidth_handler\0"));
    if(apiuapi_APlayerController_ClientCapBandwidth){
        apiuapi_APlayerController_ClientCapBandwidth(&uapi_APlayerController_ClientCapBandwidth);
    }

    auto const apiuapi_APlayerController_ClientClearCameraLensEffects = (uapi_APlayerController_ClientClearCameraLensEffectsFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientClearCameraLensEffects_handler\0"));
    if(apiuapi_APlayerController_ClientClearCameraLensEffects){
        apiuapi_APlayerController_ClientClearCameraLensEffects(&uapi_APlayerController_ClientClearCameraLensEffects);
    }

    auto const apiuapi_APlayerController_ClientCommitMapChange = (uapi_APlayerController_ClientCommitMapChangeFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientCommitMapChange_handler\0"));
    if(apiuapi_APlayerController_ClientCommitMapChange){
        apiuapi_APlayerController_ClientCommitMapChange(&uapi_APlayerController_ClientCommitMapChange);
    }

    auto const apiuapi_APlayerController_ClientEnableNetworkVoice = (uapi_APlayerController_ClientEnableNetworkVoiceFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientEnableNetworkVoice_handler\0"));
    if(apiuapi_APlayerController_ClientEnableNetworkVoice){
        apiuapi_APlayerController_ClientEnableNetworkVoice(&uapi_APlayerController_ClientEnableNetworkVoice);
    }

    auto const apiuapi_APlayerController_ClientEndOnlineSession = (uapi_APlayerController_ClientEndOnlineSessionFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientEndOnlineSession_handler\0"));
    if(apiuapi_APlayerController_ClientEndOnlineSession){
        apiuapi_APlayerController_ClientEndOnlineSession(&uapi_APlayerController_ClientEndOnlineSession);
    }

    auto const apiuapi_APlayerController_ClientFlushLevelStreaming = (uapi_APlayerController_ClientFlushLevelStreamingFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientFlushLevelStreaming_handler\0"));
    if(apiuapi_APlayerController_ClientFlushLevelStreaming){
        apiuapi_APlayerController_ClientFlushLevelStreaming(&uapi_APlayerController_ClientFlushLevelStreaming);
    }

    auto const apiuapi_APlayerController_ClientForceGarbageCollection = (uapi_APlayerController_ClientForceGarbageCollectionFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientForceGarbageCollection_handler\0"));
    if(apiuapi_APlayerController_ClientForceGarbageCollection){
        apiuapi_APlayerController_ClientForceGarbageCollection(&uapi_APlayerController_ClientForceGarbageCollection);
    }

    auto const apiuapi_APlayerController_ClientGameEnded = (uapi_APlayerController_ClientGameEndedFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientGameEnded_handler\0"));
    if(apiuapi_APlayerController_ClientGameEnded){
        apiuapi_APlayerController_ClientGameEnded(&uapi_APlayerController_ClientGameEnded);
    }

    auto const apiuapi_APlayerController_ClientGotoState = (uapi_APlayerController_ClientGotoStateFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientGotoState_handler\0"));
    if(apiuapi_APlayerController_ClientGotoState){
        apiuapi_APlayerController_ClientGotoState(&uapi_APlayerController_ClientGotoState);
    }

    auto const apiuapi_APlayerController_ClientIgnoreLookInput = (uapi_APlayerController_ClientIgnoreLookInputFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientIgnoreLookInput_handler\0"));
    if(apiuapi_APlayerController_ClientIgnoreLookInput){
        apiuapi_APlayerController_ClientIgnoreLookInput(&uapi_APlayerController_ClientIgnoreLookInput);
    }

    auto const apiuapi_APlayerController_ClientIgnoreMoveInput = (uapi_APlayerController_ClientIgnoreMoveInputFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientIgnoreMoveInput_handler\0"));
    if(apiuapi_APlayerController_ClientIgnoreMoveInput){
        apiuapi_APlayerController_ClientIgnoreMoveInput(&uapi_APlayerController_ClientIgnoreMoveInput);
    }

    auto const apiuapi_APlayerController_ClientPlaySound = (uapi_APlayerController_ClientPlaySoundFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientPlaySound_handler\0"));
    if(apiuapi_APlayerController_ClientPlaySound){
        apiuapi_APlayerController_ClientPlaySound(&uapi_APlayerController_ClientPlaySound);
    }

    auto const apiuapi_APlayerController_ClientPlaySoundAtLocation = (uapi_APlayerController_ClientPlaySoundAtLocationFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientPlaySoundAtLocation_handler\0"));
    if(apiuapi_APlayerController_ClientPlaySoundAtLocation){
        apiuapi_APlayerController_ClientPlaySoundAtLocation(&uapi_APlayerController_ClientPlaySoundAtLocation);
    }

    auto const apiuapi_APlayerController_ClientPrepareMapChange = (uapi_APlayerController_ClientPrepareMapChangeFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientPrepareMapChange_handler\0"));
    if(apiuapi_APlayerController_ClientPrepareMapChange){
        apiuapi_APlayerController_ClientPrepareMapChange(&uapi_APlayerController_ClientPrepareMapChange);
    }

    auto const apiuapi_APlayerController_ClientPrestreamTextures = (uapi_APlayerController_ClientPrestreamTexturesFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientPrestreamTextures_handler\0"));
    if(apiuapi_APlayerController_ClientPrestreamTextures){
        apiuapi_APlayerController_ClientPrestreamTextures(&uapi_APlayerController_ClientPrestreamTextures);
    }

    auto const apiuapi_APlayerController_ClientRecvServerAckFrame = (uapi_APlayerController_ClientRecvServerAckFrameFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientRecvServerAckFrame_handler\0"));
    if(apiuapi_APlayerController_ClientRecvServerAckFrame){
        apiuapi_APlayerController_ClientRecvServerAckFrame(&uapi_APlayerController_ClientRecvServerAckFrame);
    }

    auto const apiuapi_APlayerController_ClientRecvServerAckFrameDebug = (uapi_APlayerController_ClientRecvServerAckFrameDebugFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientRecvServerAckFrameDebug_handler\0"));
    if(apiuapi_APlayerController_ClientRecvServerAckFrameDebug){
        apiuapi_APlayerController_ClientRecvServerAckFrameDebug(&uapi_APlayerController_ClientRecvServerAckFrameDebug);
    }

    auto const apiuapi_APlayerController_ClientRepObjRef = (uapi_APlayerController_ClientRepObjRefFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientRepObjRef_handler\0"));
    if(apiuapi_APlayerController_ClientRepObjRef){
        apiuapi_APlayerController_ClientRepObjRef(&uapi_APlayerController_ClientRepObjRef);
    }

    auto const apiuapi_APlayerController_ClientReset = (uapi_APlayerController_ClientResetFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientReset_handler\0"));
    if(apiuapi_APlayerController_ClientReset){
        apiuapi_APlayerController_ClientReset(&uapi_APlayerController_ClientReset);
    }

    auto const apiuapi_APlayerController_ClientRestart = (uapi_APlayerController_ClientRestartFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientRestart_handler\0"));
    if(apiuapi_APlayerController_ClientRestart){
        apiuapi_APlayerController_ClientRestart(&uapi_APlayerController_ClientRestart);
    }

    auto const apiuapi_APlayerController_ClientRetryClientRestart = (uapi_APlayerController_ClientRetryClientRestartFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientRetryClientRestart_handler\0"));
    if(apiuapi_APlayerController_ClientRetryClientRestart){
        apiuapi_APlayerController_ClientRetryClientRestart(&uapi_APlayerController_ClientRetryClientRestart);
    }

    auto const apiuapi_APlayerController_ClientSetBlockOnAsyncLoading = (uapi_APlayerController_ClientSetBlockOnAsyncLoadingFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientSetBlockOnAsyncLoading_handler\0"));
    if(apiuapi_APlayerController_ClientSetBlockOnAsyncLoading){
        apiuapi_APlayerController_ClientSetBlockOnAsyncLoading(&uapi_APlayerController_ClientSetBlockOnAsyncLoading);
    }

    auto const apiuapi_APlayerController_ClientSetCameraFade = (uapi_APlayerController_ClientSetCameraFadeFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientSetCameraFade_handler\0"));
    if(apiuapi_APlayerController_ClientSetCameraFade){
        apiuapi_APlayerController_ClientSetCameraFade(&uapi_APlayerController_ClientSetCameraFade);
    }

    auto const apiuapi_APlayerController_ClientSetCameraMode = (uapi_APlayerController_ClientSetCameraModeFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientSetCameraMode_handler\0"));
    if(apiuapi_APlayerController_ClientSetCameraMode){
        apiuapi_APlayerController_ClientSetCameraMode(&uapi_APlayerController_ClientSetCameraMode);
    }

    auto const apiuapi_APlayerController_ClientSetCinematicMode = (uapi_APlayerController_ClientSetCinematicModeFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientSetCinematicMode_handler\0"));
    if(apiuapi_APlayerController_ClientSetCinematicMode){
        apiuapi_APlayerController_ClientSetCinematicMode(&uapi_APlayerController_ClientSetCinematicMode);
    }

    auto const apiuapi_APlayerController_ClientSetForceMipLevelsToBeResident = (uapi_APlayerController_ClientSetForceMipLevelsToBeResidentFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientSetForceMipLevelsToBeResident_handler\0"));
    if(apiuapi_APlayerController_ClientSetForceMipLevelsToBeResident){
        apiuapi_APlayerController_ClientSetForceMipLevelsToBeResident(&uapi_APlayerController_ClientSetForceMipLevelsToBeResident);
    }

    auto const apiuapi_APlayerController_ClientSetSpectatorWaiting = (uapi_APlayerController_ClientSetSpectatorWaitingFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientSetSpectatorWaiting_handler\0"));
    if(apiuapi_APlayerController_ClientSetSpectatorWaiting){
        apiuapi_APlayerController_ClientSetSpectatorWaiting(&uapi_APlayerController_ClientSetSpectatorWaiting);
    }

    auto const apiuapi_APlayerController_ClientStartOnlineSession = (uapi_APlayerController_ClientStartOnlineSessionFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientStartOnlineSession_handler\0"));
    if(apiuapi_APlayerController_ClientStartOnlineSession){
        apiuapi_APlayerController_ClientStartOnlineSession(&uapi_APlayerController_ClientStartOnlineSession);
    }

    auto const apiuapi_APlayerController_ClientStopCameraShakesFromSource = (uapi_APlayerController_ClientStopCameraShakesFromSourceFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientStopCameraShakesFromSource_handler\0"));
    if(apiuapi_APlayerController_ClientStopCameraShakesFromSource){
        apiuapi_APlayerController_ClientStopCameraShakesFromSource(&uapi_APlayerController_ClientStopCameraShakesFromSource);
    }

    auto const apiuapi_APlayerController_ClientStopForceFeedback = (uapi_APlayerController_ClientStopForceFeedbackFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientStopForceFeedback_handler\0"));
    if(apiuapi_APlayerController_ClientStopForceFeedback){
        apiuapi_APlayerController_ClientStopForceFeedback(&uapi_APlayerController_ClientStopForceFeedback);
    }

    auto const apiuapi_APlayerController_ClientUpdateLevelStreamingStatus = (uapi_APlayerController_ClientUpdateLevelStreamingStatusFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientUpdateLevelStreamingStatus_handler\0"));
    if(apiuapi_APlayerController_ClientUpdateLevelStreamingStatus){
        apiuapi_APlayerController_ClientUpdateLevelStreamingStatus(&uapi_APlayerController_ClientUpdateLevelStreamingStatus);
    }

    auto const apiuapi_APlayerController_ClientVoiceHandshakeComplete = (uapi_APlayerController_ClientVoiceHandshakeCompleteFn)plugin->GetDllExport(TEXT("set_APlayerController_ClientVoiceHandshakeComplete_handler\0"));
    if(apiuapi_APlayerController_ClientVoiceHandshakeComplete){
        apiuapi_APlayerController_ClientVoiceHandshakeComplete(&uapi_APlayerController_ClientVoiceHandshakeComplete);
    }

    auto const apiuapi_APlayerController_CreateTouchInterface = (uapi_APlayerController_CreateTouchInterfaceFn)plugin->GetDllExport(TEXT("set_APlayerController_CreateTouchInterface_handler\0"));
    if(apiuapi_APlayerController_CreateTouchInterface){
        apiuapi_APlayerController_CreateTouchInterface(&uapi_APlayerController_CreateTouchInterface);
    }

    auto const apiuapi_APlayerController_DefaultCanUnpause = (uapi_APlayerController_DefaultCanUnpauseFn)plugin->GetDllExport(TEXT("set_APlayerController_DefaultCanUnpause_handler\0"));
    if(apiuapi_APlayerController_DefaultCanUnpause){
        apiuapi_APlayerController_DefaultCanUnpause(&uapi_APlayerController_DefaultCanUnpause);
    }

    auto const apiuapi_APlayerController_DelayedPrepareMapChange = (uapi_APlayerController_DelayedPrepareMapChangeFn)plugin->GetDllExport(TEXT("set_APlayerController_DelayedPrepareMapChange_handler\0"));
    if(apiuapi_APlayerController_DelayedPrepareMapChange){
        apiuapi_APlayerController_DelayedPrepareMapChange(&uapi_APlayerController_DelayedPrepareMapChange);
    }

    auto const apiuapi_APlayerController_DestroyNetworkActorHandled = (uapi_APlayerController_DestroyNetworkActorHandledFn)plugin->GetDllExport(TEXT("set_APlayerController_DestroyNetworkActorHandled_handler\0"));
    if(apiuapi_APlayerController_DestroyNetworkActorHandled){
        apiuapi_APlayerController_DestroyNetworkActorHandled(&uapi_APlayerController_DestroyNetworkActorHandled);
    }

    auto const apiuapi_APlayerController_Destroyed = (uapi_APlayerController_DestroyedFn)plugin->GetDllExport(TEXT("set_APlayerController_Destroyed_handler\0"));
    if(apiuapi_APlayerController_Destroyed){
        apiuapi_APlayerController_Destroyed(&uapi_APlayerController_Destroyed);
    }

    auto const apiuapi_APlayerController_DisableInput = (uapi_APlayerController_DisableInputFn)plugin->GetDllExport(TEXT("set_APlayerController_DisableInput_handler\0"));
    if(apiuapi_APlayerController_DisableInput){
        apiuapi_APlayerController_DisableInput(&uapi_APlayerController_DisableInput);
    }

    auto const apiuapi_APlayerController_EnableCheats = (uapi_APlayerController_EnableCheatsFn)plugin->GetDllExport(TEXT("set_APlayerController_EnableCheats_handler\0"));
    if(apiuapi_APlayerController_EnableCheats){
        apiuapi_APlayerController_EnableCheats(&uapi_APlayerController_EnableCheats);
    }

    auto const apiuapi_APlayerController_EnableInput = (uapi_APlayerController_EnableInputFn)plugin->GetDllExport(TEXT("set_APlayerController_EnableInput_handler\0"));
    if(apiuapi_APlayerController_EnableInput){
        apiuapi_APlayerController_EnableInput(&uapi_APlayerController_EnableInput);
    }

    auto const apiuapi_APlayerController_EndInactiveState = (uapi_APlayerController_EndInactiveStateFn)plugin->GetDllExport(TEXT("set_APlayerController_EndInactiveState_handler\0"));
    if(apiuapi_APlayerController_EndInactiveState){
        apiuapi_APlayerController_EndInactiveState(&uapi_APlayerController_EndInactiveState);
    }

    auto const apiuapi_APlayerController_FOV = (uapi_APlayerController_FOVFn)plugin->GetDllExport(TEXT("set_APlayerController_FOV_handler\0"));
    if(apiuapi_APlayerController_FOV){
        apiuapi_APlayerController_FOV(&uapi_APlayerController_FOV);
    }

    auto const apiuapi_APlayerController_FailedToSpawnPawn = (uapi_APlayerController_FailedToSpawnPawnFn)plugin->GetDllExport(TEXT("set_APlayerController_FailedToSpawnPawn_handler\0"));
    if(apiuapi_APlayerController_FailedToSpawnPawn){
        apiuapi_APlayerController_FailedToSpawnPawn(&uapi_APlayerController_FailedToSpawnPawn);
    }

    auto const apiuapi_APlayerController_FlushPressedKeys = (uapi_APlayerController_FlushPressedKeysFn)plugin->GetDllExport(TEXT("set_APlayerController_FlushPressedKeys_handler\0"));
    if(apiuapi_APlayerController_FlushPressedKeys){
        apiuapi_APlayerController_FlushPressedKeys(&uapi_APlayerController_FlushPressedKeys);
    }

    auto const apiuapi_APlayerController_ForceSingleNetUpdateFor = (uapi_APlayerController_ForceSingleNetUpdateForFn)plugin->GetDllExport(TEXT("set_APlayerController_ForceSingleNetUpdateFor_handler\0"));
    if(apiuapi_APlayerController_ForceSingleNetUpdateFor){
        apiuapi_APlayerController_ForceSingleNetUpdateFor(&uapi_APlayerController_ForceSingleNetUpdateFor);
    }

    auto const apiuapi_APlayerController_GameHasEnded = (uapi_APlayerController_GameHasEndedFn)plugin->GetDllExport(TEXT("set_APlayerController_GameHasEnded_handler\0"));
    if(apiuapi_APlayerController_GameHasEnded){
        apiuapi_APlayerController_GameHasEnded(&uapi_APlayerController_GameHasEnded);
    }

    auto const apiuapi_APlayerController_GameplayUnmuteAllPlayers = (uapi_APlayerController_GameplayUnmuteAllPlayersFn)plugin->GetDllExport(TEXT("set_APlayerController_GameplayUnmuteAllPlayers_handler\0"));
    if(apiuapi_APlayerController_GameplayUnmuteAllPlayers){
        apiuapi_APlayerController_GameplayUnmuteAllPlayers(&uapi_APlayerController_GameplayUnmuteAllPlayers);
    }

    auto const apiuapi_APlayerController_GetFocalLocation = (uapi_APlayerController_GetFocalLocationFn)plugin->GetDllExport(TEXT("set_APlayerController_GetFocalLocation_handler\0"));
    if(apiuapi_APlayerController_GetFocalLocation){
        apiuapi_APlayerController_GetFocalLocation(&uapi_APlayerController_GetFocalLocation);
    }

    auto const apiuapi_APlayerController_GetHUD = (uapi_APlayerController_GetHUDFn)plugin->GetDllExport(TEXT("set_APlayerController_GetHUD_handler\0"));
    if(apiuapi_APlayerController_GetHUD){
        apiuapi_APlayerController_GetHUD(&uapi_APlayerController_GetHUD);
    }

    auto const apiuapi_APlayerController_GetInputMouseDelta = (uapi_APlayerController_GetInputMouseDeltaFn)plugin->GetDllExport(TEXT("set_APlayerController_GetInputMouseDelta_handler\0"));
    if(apiuapi_APlayerController_GetInputMouseDelta){
        apiuapi_APlayerController_GetInputMouseDelta(&uapi_APlayerController_GetInputMouseDelta);
    }

    auto const apiuapi_APlayerController_GetLocalPlayer = (uapi_APlayerController_GetLocalPlayerFn)plugin->GetDllExport(TEXT("set_APlayerController_GetLocalPlayer_handler\0"));
    if(apiuapi_APlayerController_GetLocalPlayer){
        apiuapi_APlayerController_GetLocalPlayer(&uapi_APlayerController_GetLocalPlayer);
    }

    auto const apiuapi_APlayerController_GetLocalToServerAsyncPhysicsTickOffset = (uapi_APlayerController_GetLocalToServerAsyncPhysicsTickOffsetFn)plugin->GetDllExport(TEXT("set_APlayerController_GetLocalToServerAsyncPhysicsTickOffset_handler\0"));
    if(apiuapi_APlayerController_GetLocalToServerAsyncPhysicsTickOffset){
        apiuapi_APlayerController_GetLocalToServerAsyncPhysicsTickOffset(&uapi_APlayerController_GetLocalToServerAsyncPhysicsTickOffset);
    }

    auto const apiuapi_APlayerController_GetMinRespawnDelay = (uapi_APlayerController_GetMinRespawnDelayFn)plugin->GetDllExport(TEXT("set_APlayerController_GetMinRespawnDelay_handler\0"));
    if(apiuapi_APlayerController_GetMinRespawnDelay){
        apiuapi_APlayerController_GetMinRespawnDelay(&uapi_APlayerController_GetMinRespawnDelay);
    }

    auto const apiuapi_APlayerController_GetMousePosition = (uapi_APlayerController_GetMousePositionFn)plugin->GetDllExport(TEXT("set_APlayerController_GetMousePosition_handler\0"));
    if(apiuapi_APlayerController_GetMousePosition){
        apiuapi_APlayerController_GetMousePosition(&uapi_APlayerController_GetMousePosition);
    }

    auto const apiuapi_APlayerController_GetNetConnection = (uapi_APlayerController_GetNetConnectionFn)plugin->GetDllExport(TEXT("set_APlayerController_GetNetConnection_handler\0"));
    if(apiuapi_APlayerController_GetNetConnection){
        apiuapi_APlayerController_GetNetConnection(&uapi_APlayerController_GetNetConnection);
    }

    auto const apiuapi_APlayerController_GetNetOwner = (uapi_APlayerController_GetNetOwnerFn)plugin->GetDllExport(TEXT("set_APlayerController_GetNetOwner_handler\0"));
    if(apiuapi_APlayerController_GetNetOwner){
        apiuapi_APlayerController_GetNetOwner(&uapi_APlayerController_GetNetOwner);
    }

    auto const apiuapi_APlayerController_GetNetOwningPlayer = (uapi_APlayerController_GetNetOwningPlayerFn)plugin->GetDllExport(TEXT("set_APlayerController_GetNetOwningPlayer_handler\0"));
    if(apiuapi_APlayerController_GetNetOwningPlayer){
        apiuapi_APlayerController_GetNetOwningPlayer(&uapi_APlayerController_GetNetOwningPlayer);
    }

    auto const apiuapi_APlayerController_GetNextViewablePlayer = (uapi_APlayerController_GetNextViewablePlayerFn)plugin->GetDllExport(TEXT("set_APlayerController_GetNextViewablePlayer_handler\0"));
    if(apiuapi_APlayerController_GetNextViewablePlayer){
        apiuapi_APlayerController_GetNextViewablePlayer(&uapi_APlayerController_GetNextViewablePlayer);
    }

    auto const apiuapi_APlayerController_GetPawnOrSpectator = (uapi_APlayerController_GetPawnOrSpectatorFn)plugin->GetDllExport(TEXT("set_APlayerController_GetPawnOrSpectator_handler\0"));
    if(apiuapi_APlayerController_GetPawnOrSpectator){
        apiuapi_APlayerController_GetPawnOrSpectator(&uapi_APlayerController_GetPawnOrSpectator);
    }

    auto const apiuapi_APlayerController_GetPlayerNetworkAddress = (uapi_APlayerController_GetPlayerNetworkAddressFn)plugin->GetDllExport(TEXT("set_APlayerController_GetPlayerNetworkAddress_handler\0"));
    if(apiuapi_APlayerController_GetPlayerNetworkAddress){
        apiuapi_APlayerController_GetPlayerNetworkAddress(&uapi_APlayerController_GetPlayerNetworkAddress);
    }

    auto const apiuapi_APlayerController_GetServerNetworkAddress = (uapi_APlayerController_GetServerNetworkAddressFn)plugin->GetDllExport(TEXT("set_APlayerController_GetServerNetworkAddress_handler\0"));
    if(apiuapi_APlayerController_GetServerNetworkAddress){
        apiuapi_APlayerController_GetServerNetworkAddress(&uapi_APlayerController_GetServerNetworkAddress);
    }

    auto const apiuapi_APlayerController_GetSpawnLocation = (uapi_APlayerController_GetSpawnLocationFn)plugin->GetDllExport(TEXT("set_APlayerController_GetSpawnLocation_handler\0"));
    if(apiuapi_APlayerController_GetSpawnLocation){
        apiuapi_APlayerController_GetSpawnLocation(&uapi_APlayerController_GetSpawnLocation);
    }

    auto const apiuapi_APlayerController_GetSplitscreenPlayerByIndex = (uapi_APlayerController_GetSplitscreenPlayerByIndexFn)plugin->GetDllExport(TEXT("set_APlayerController_GetSplitscreenPlayerByIndex_handler\0"));
    if(apiuapi_APlayerController_GetSplitscreenPlayerByIndex){
        apiuapi_APlayerController_GetSplitscreenPlayerByIndex(&uapi_APlayerController_GetSplitscreenPlayerByIndex);
    }

    auto const apiuapi_APlayerController_GetSplitscreenPlayerCount = (uapi_APlayerController_GetSplitscreenPlayerCountFn)plugin->GetDllExport(TEXT("set_APlayerController_GetSplitscreenPlayerCount_handler\0"));
    if(apiuapi_APlayerController_GetSplitscreenPlayerCount){
        apiuapi_APlayerController_GetSplitscreenPlayerCount(&uapi_APlayerController_GetSplitscreenPlayerCount);
    }

    auto const apiuapi_APlayerController_GetViewTarget = (uapi_APlayerController_GetViewTargetFn)plugin->GetDllExport(TEXT("set_APlayerController_GetViewTarget_handler\0"));
    if(apiuapi_APlayerController_GetViewTarget){
        apiuapi_APlayerController_GetViewTarget(&uapi_APlayerController_GetViewTarget);
    }

    auto const apiuapi_APlayerController_GetViewportSize = (uapi_APlayerController_GetViewportSizeFn)plugin->GetDllExport(TEXT("set_APlayerController_GetViewportSize_handler\0"));
    if(apiuapi_APlayerController_GetViewportSize){
        apiuapi_APlayerController_GetViewportSize(&uapi_APlayerController_GetViewportSize);
    }

    auto const apiuapi_APlayerController_HasClientLoadedCurrentWorld = (uapi_APlayerController_HasClientLoadedCurrentWorldFn)plugin->GetDllExport(TEXT("set_APlayerController_HasClientLoadedCurrentWorld_handler\0"));
    if(apiuapi_APlayerController_HasClientLoadedCurrentWorld){
        apiuapi_APlayerController_HasClientLoadedCurrentWorld(&uapi_APlayerController_HasClientLoadedCurrentWorld);
    }

    auto const apiuapi_APlayerController_IncludeInNetConditionGroup = (uapi_APlayerController_IncludeInNetConditionGroupFn)plugin->GetDllExport(TEXT("set_APlayerController_IncludeInNetConditionGroup_handler\0"));
    if(apiuapi_APlayerController_IncludeInNetConditionGroup){
        apiuapi_APlayerController_IncludeInNetConditionGroup(&uapi_APlayerController_IncludeInNetConditionGroup);
    }

    auto const apiuapi_APlayerController_InitInputSystem = (uapi_APlayerController_InitInputSystemFn)plugin->GetDllExport(TEXT("set_APlayerController_InitInputSystem_handler\0"));
    if(apiuapi_APlayerController_InitInputSystem){
        apiuapi_APlayerController_InitInputSystem(&uapi_APlayerController_InitInputSystem);
    }

    auto const apiuapi_APlayerController_InputEnabled = (uapi_APlayerController_InputEnabledFn)plugin->GetDllExport(TEXT("set_APlayerController_InputEnabled_handler\0"));
    if(apiuapi_APlayerController_InputEnabled){
        apiuapi_APlayerController_InputEnabled(&uapi_APlayerController_InputEnabled);
    }

    auto const apiuapi_APlayerController_IsFrozen = (uapi_APlayerController_IsFrozenFn)plugin->GetDllExport(TEXT("set_APlayerController_IsFrozen_handler\0"));
    if(apiuapi_APlayerController_IsFrozen){
        apiuapi_APlayerController_IsFrozen(&uapi_APlayerController_IsFrozen);
    }

    auto const apiuapi_APlayerController_IsInputComponentInStack = (uapi_APlayerController_IsInputComponentInStackFn)plugin->GetDllExport(TEXT("set_APlayerController_IsInputComponentInStack_handler\0"));
    if(apiuapi_APlayerController_IsInputComponentInStack){
        apiuapi_APlayerController_IsInputComponentInStack(&uapi_APlayerController_IsInputComponentInStack);
    }

    auto const apiuapi_APlayerController_IsLocalController = (uapi_APlayerController_IsLocalControllerFn)plugin->GetDllExport(TEXT("set_APlayerController_IsLocalController_handler\0"));
    if(apiuapi_APlayerController_IsLocalController){
        apiuapi_APlayerController_IsLocalController(&uapi_APlayerController_IsLocalController);
    }

    auto const apiuapi_APlayerController_IsMemberOfNetConditionGroup = (uapi_APlayerController_IsMemberOfNetConditionGroupFn)plugin->GetDllExport(TEXT("set_APlayerController_IsMemberOfNetConditionGroup_handler\0"));
    if(apiuapi_APlayerController_IsMemberOfNetConditionGroup){
        apiuapi_APlayerController_IsMemberOfNetConditionGroup(&uapi_APlayerController_IsMemberOfNetConditionGroup);
    }

    auto const apiuapi_APlayerController_IsPaused = (uapi_APlayerController_IsPausedFn)plugin->GetDllExport(TEXT("set_APlayerController_IsPaused_handler\0"));
    if(apiuapi_APlayerController_IsPaused){
        apiuapi_APlayerController_IsPaused(&uapi_APlayerController_IsPaused);
    }

    auto const apiuapi_APlayerController_IsPrimaryPlayer = (uapi_APlayerController_IsPrimaryPlayerFn)plugin->GetDllExport(TEXT("set_APlayerController_IsPrimaryPlayer_handler\0"));
    if(apiuapi_APlayerController_IsPrimaryPlayer){
        apiuapi_APlayerController_IsPrimaryPlayer(&uapi_APlayerController_IsPrimaryPlayer);
    }

    auto const apiuapi_APlayerController_IsSplitscreenPlayer = (uapi_APlayerController_IsSplitscreenPlayerFn)plugin->GetDllExport(TEXT("set_APlayerController_IsSplitscreenPlayer_handler\0"));
    if(apiuapi_APlayerController_IsSplitscreenPlayer){
        apiuapi_APlayerController_IsSplitscreenPlayer(&uapi_APlayerController_IsSplitscreenPlayer);
    }

    auto const apiuapi_APlayerController_IsStreamingSourceEnabled = (uapi_APlayerController_IsStreamingSourceEnabledFn)plugin->GetDllExport(TEXT("set_APlayerController_IsStreamingSourceEnabled_handler\0"));
    if(apiuapi_APlayerController_IsStreamingSourceEnabled){
        apiuapi_APlayerController_IsStreamingSourceEnabled(&uapi_APlayerController_IsStreamingSourceEnabled);
    }

    auto const apiuapi_APlayerController_K2_ClientPlayForceFeedback = (uapi_APlayerController_K2_ClientPlayForceFeedbackFn)plugin->GetDllExport(TEXT("set_APlayerController_K2_ClientPlayForceFeedback_handler\0"));
    if(apiuapi_APlayerController_K2_ClientPlayForceFeedback){
        apiuapi_APlayerController_K2_ClientPlayForceFeedback(&uapi_APlayerController_K2_ClientPlayForceFeedback);
    }

    auto const apiuapi_APlayerController_LevelStreamingStatusChanged = (uapi_APlayerController_LevelStreamingStatusChangedFn)plugin->GetDllExport(TEXT("set_APlayerController_LevelStreamingStatusChanged_handler\0"));
    if(apiuapi_APlayerController_LevelStreamingStatusChanged){
        apiuapi_APlayerController_LevelStreamingStatusChanged(&uapi_APlayerController_LevelStreamingStatusChanged);
    }

    auto const apiuapi_APlayerController_NetworkRemapPath = (uapi_APlayerController_NetworkRemapPathFn)plugin->GetDllExport(TEXT("set_APlayerController_NetworkRemapPath_handler\0"));
    if(apiuapi_APlayerController_NetworkRemapPath){
        apiuapi_APlayerController_NetworkRemapPath(&uapi_APlayerController_NetworkRemapPath);
    }

    auto const apiuapi_APlayerController_NotifyActorChannelFailure = (uapi_APlayerController_NotifyActorChannelFailureFn)plugin->GetDllExport(TEXT("set_APlayerController_NotifyActorChannelFailure_handler\0"));
    if(apiuapi_APlayerController_NotifyActorChannelFailure){
        apiuapi_APlayerController_NotifyActorChannelFailure(&uapi_APlayerController_NotifyActorChannelFailure);
    }

    auto const apiuapi_APlayerController_NotifyLoadedWorld = (uapi_APlayerController_NotifyLoadedWorldFn)plugin->GetDllExport(TEXT("set_APlayerController_NotifyLoadedWorld_handler\0"));
    if(apiuapi_APlayerController_NotifyLoadedWorld){
        apiuapi_APlayerController_NotifyLoadedWorld(&uapi_APlayerController_NotifyLoadedWorld);
    }

    auto const apiuapi_APlayerController_NotifyServerReceivedClientData = (uapi_APlayerController_NotifyServerReceivedClientDataFn)plugin->GetDllExport(TEXT("set_APlayerController_NotifyServerReceivedClientData_handler\0"));
    if(apiuapi_APlayerController_NotifyServerReceivedClientData){
        apiuapi_APlayerController_NotifyServerReceivedClientData(&uapi_APlayerController_NotifyServerReceivedClientData);
    }

    auto const apiuapi_APlayerController_OnAddedToPlayerControllerList = (uapi_APlayerController_OnAddedToPlayerControllerListFn)plugin->GetDllExport(TEXT("set_APlayerController_OnAddedToPlayerControllerList_handler\0"));
    if(apiuapi_APlayerController_OnAddedToPlayerControllerList){
        apiuapi_APlayerController_OnAddedToPlayerControllerList(&uapi_APlayerController_OnAddedToPlayerControllerList);
    }

    auto const apiuapi_APlayerController_OnNetCleanup = (uapi_APlayerController_OnNetCleanupFn)plugin->GetDllExport(TEXT("set_APlayerController_OnNetCleanup_handler\0"));
    if(apiuapi_APlayerController_OnNetCleanup){
        apiuapi_APlayerController_OnNetCleanup(&uapi_APlayerController_OnNetCleanup);
    }

    auto const apiuapi_APlayerController_OnRemovedFromPlayerControllerList = (uapi_APlayerController_OnRemovedFromPlayerControllerListFn)plugin->GetDllExport(TEXT("set_APlayerController_OnRemovedFromPlayerControllerList_handler\0"));
    if(apiuapi_APlayerController_OnRemovedFromPlayerControllerList){
        apiuapi_APlayerController_OnRemovedFromPlayerControllerList(&uapi_APlayerController_OnRemovedFromPlayerControllerList);
    }

    auto const apiuapi_APlayerController_OnServerStartedVisualLogger = (uapi_APlayerController_OnServerStartedVisualLoggerFn)plugin->GetDllExport(TEXT("set_APlayerController_OnServerStartedVisualLogger_handler\0"));
    if(apiuapi_APlayerController_OnServerStartedVisualLogger){
        apiuapi_APlayerController_OnServerStartedVisualLogger(&uapi_APlayerController_OnServerStartedVisualLogger);
    }

    auto const apiuapi_APlayerController_Pause = (uapi_APlayerController_PauseFn)plugin->GetDllExport(TEXT("set_APlayerController_Pause_handler\0"));
    if(apiuapi_APlayerController_Pause){
        apiuapi_APlayerController_Pause(&uapi_APlayerController_Pause);
    }

    auto const apiuapi_APlayerController_PawnLeavingGame = (uapi_APlayerController_PawnLeavingGameFn)plugin->GetDllExport(TEXT("set_APlayerController_PawnLeavingGame_handler\0"));
    if(apiuapi_APlayerController_PawnLeavingGame){
        apiuapi_APlayerController_PawnLeavingGame(&uapi_APlayerController_PawnLeavingGame);
    }

    auto const apiuapi_APlayerController_PlayerTick = (uapi_APlayerController_PlayerTickFn)plugin->GetDllExport(TEXT("set_APlayerController_PlayerTick_handler\0"));
    if(apiuapi_APlayerController_PlayerTick){
        apiuapi_APlayerController_PlayerTick(&uapi_APlayerController_PlayerTick);
    }

    auto const apiuapi_APlayerController_PopInputComponent = (uapi_APlayerController_PopInputComponentFn)plugin->GetDllExport(TEXT("set_APlayerController_PopInputComponent_handler\0"));
    if(apiuapi_APlayerController_PopInputComponent){
        apiuapi_APlayerController_PopInputComponent(&uapi_APlayerController_PopInputComponent);
    }

    auto const apiuapi_APlayerController_PostInitializeComponents = (uapi_APlayerController_PostInitializeComponentsFn)plugin->GetDllExport(TEXT("set_APlayerController_PostInitializeComponents_handler\0"));
    if(apiuapi_APlayerController_PostInitializeComponents){
        apiuapi_APlayerController_PostInitializeComponents(&uapi_APlayerController_PostInitializeComponents);
    }

    auto const apiuapi_APlayerController_PostLoad = (uapi_APlayerController_PostLoadFn)plugin->GetDllExport(TEXT("set_APlayerController_PostLoad_handler\0"));
    if(apiuapi_APlayerController_PostLoad){
        apiuapi_APlayerController_PostLoad(&uapi_APlayerController_PostLoad);
    }

    auto const apiuapi_APlayerController_PostProcessInput = (uapi_APlayerController_PostProcessInputFn)plugin->GetDllExport(TEXT("set_APlayerController_PostProcessInput_handler\0"));
    if(apiuapi_APlayerController_PostProcessInput){
        apiuapi_APlayerController_PostProcessInput(&uapi_APlayerController_PostProcessInput);
    }

    auto const apiuapi_APlayerController_PostSeamlessTravel = (uapi_APlayerController_PostSeamlessTravelFn)plugin->GetDllExport(TEXT("set_APlayerController_PostSeamlessTravel_handler\0"));
    if(apiuapi_APlayerController_PostSeamlessTravel){
        apiuapi_APlayerController_PostSeamlessTravel(&uapi_APlayerController_PostSeamlessTravel);
    }

    auto const apiuapi_APlayerController_PreProcessInput = (uapi_APlayerController_PreProcessInputFn)plugin->GetDllExport(TEXT("set_APlayerController_PreProcessInput_handler\0"));
    if(apiuapi_APlayerController_PreProcessInput){
        apiuapi_APlayerController_PreProcessInput(&uapi_APlayerController_PreProcessInput);
    }

    auto const apiuapi_APlayerController_PushInputComponent = (uapi_APlayerController_PushInputComponentFn)plugin->GetDllExport(TEXT("set_APlayerController_PushInputComponent_handler\0"));
    if(apiuapi_APlayerController_PushInputComponent){
        apiuapi_APlayerController_PushInputComponent(&uapi_APlayerController_PushInputComponent);
    }

    auto const apiuapi_APlayerController_ReceivedPlayer = (uapi_APlayerController_ReceivedPlayerFn)plugin->GetDllExport(TEXT("set_APlayerController_ReceivedPlayer_handler\0"));
    if(apiuapi_APlayerController_ReceivedPlayer){
        apiuapi_APlayerController_ReceivedPlayer(&uapi_APlayerController_ReceivedPlayer);
    }

    auto const apiuapi_APlayerController_RemoveFromNetConditionGroup = (uapi_APlayerController_RemoveFromNetConditionGroupFn)plugin->GetDllExport(TEXT("set_APlayerController_RemoveFromNetConditionGroup_handler\0"));
    if(apiuapi_APlayerController_RemoveFromNetConditionGroup){
        apiuapi_APlayerController_RemoveFromNetConditionGroup(&uapi_APlayerController_RemoveFromNetConditionGroup);
    }

    auto const apiuapi_APlayerController_Reset = (uapi_APlayerController_ResetFn)plugin->GetDllExport(TEXT("set_APlayerController_Reset_handler\0"));
    if(apiuapi_APlayerController_Reset){
        apiuapi_APlayerController_Reset(&uapi_APlayerController_Reset);
    }

    auto const apiuapi_APlayerController_ResetCameraMode = (uapi_APlayerController_ResetCameraModeFn)plugin->GetDllExport(TEXT("set_APlayerController_ResetCameraMode_handler\0"));
    if(apiuapi_APlayerController_ResetCameraMode){
        apiuapi_APlayerController_ResetCameraMode(&uapi_APlayerController_ResetCameraMode);
    }

    auto const apiuapi_APlayerController_ResetControllerLightColor = (uapi_APlayerController_ResetControllerLightColorFn)plugin->GetDllExport(TEXT("set_APlayerController_ResetControllerLightColor_handler\0"));
    if(apiuapi_APlayerController_ResetControllerLightColor){
        apiuapi_APlayerController_ResetControllerLightColor(&uapi_APlayerController_ResetControllerLightColor);
    }

    auto const apiuapi_APlayerController_ResetIgnoreInputFlags = (uapi_APlayerController_ResetIgnoreInputFlagsFn)plugin->GetDllExport(TEXT("set_APlayerController_ResetIgnoreInputFlags_handler\0"));
    if(apiuapi_APlayerController_ResetIgnoreInputFlags){
        apiuapi_APlayerController_ResetIgnoreInputFlags(&uapi_APlayerController_ResetIgnoreInputFlags);
    }

    auto const apiuapi_APlayerController_RestartLevel = (uapi_APlayerController_RestartLevelFn)plugin->GetDllExport(TEXT("set_APlayerController_RestartLevel_handler\0"));
    if(apiuapi_APlayerController_RestartLevel){
        apiuapi_APlayerController_RestartLevel(&uapi_APlayerController_RestartLevel);
    }

    auto const apiuapi_APlayerController_SafeRetryClientRestart = (uapi_APlayerController_SafeRetryClientRestartFn)plugin->GetDllExport(TEXT("set_APlayerController_SafeRetryClientRestart_handler\0"));
    if(apiuapi_APlayerController_SafeRetryClientRestart){
        apiuapi_APlayerController_SafeRetryClientRestart(&uapi_APlayerController_SafeRetryClientRestart);
    }

    auto const apiuapi_APlayerController_SafeServerCheckClientPossession = (uapi_APlayerController_SafeServerCheckClientPossessionFn)plugin->GetDllExport(TEXT("set_APlayerController_SafeServerCheckClientPossession_handler\0"));
    if(apiuapi_APlayerController_SafeServerCheckClientPossession){
        apiuapi_APlayerController_SafeServerCheckClientPossession(&uapi_APlayerController_SafeServerCheckClientPossession);
    }

    auto const apiuapi_APlayerController_SafeServerUpdateSpectatorState = (uapi_APlayerController_SafeServerUpdateSpectatorStateFn)plugin->GetDllExport(TEXT("set_APlayerController_SafeServerUpdateSpectatorState_handler\0"));
    if(apiuapi_APlayerController_SafeServerUpdateSpectatorState){
        apiuapi_APlayerController_SafeServerUpdateSpectatorState(&uapi_APlayerController_SafeServerUpdateSpectatorState);
    }

    auto const apiuapi_APlayerController_SeamlessTravelFrom = (uapi_APlayerController_SeamlessTravelFromFn)plugin->GetDllExport(TEXT("set_APlayerController_SeamlessTravelFrom_handler\0"));
    if(apiuapi_APlayerController_SeamlessTravelFrom){
        apiuapi_APlayerController_SeamlessTravelFrom(&uapi_APlayerController_SeamlessTravelFrom);
    }

    auto const apiuapi_APlayerController_SeamlessTravelTo = (uapi_APlayerController_SeamlessTravelToFn)plugin->GetDllExport(TEXT("set_APlayerController_SeamlessTravelTo_handler\0"));
    if(apiuapi_APlayerController_SeamlessTravelTo){
        apiuapi_APlayerController_SeamlessTravelTo(&uapi_APlayerController_SeamlessTravelTo);
    }

    auto const apiuapi_APlayerController_SendClientAdjustment = (uapi_APlayerController_SendClientAdjustmentFn)plugin->GetDllExport(TEXT("set_APlayerController_SendClientAdjustment_handler\0"));
    if(apiuapi_APlayerController_SendClientAdjustment){
        apiuapi_APlayerController_SendClientAdjustment(&uapi_APlayerController_SendClientAdjustment);
    }

    auto const apiuapi_APlayerController_ServerAcknowledgePossession = (uapi_APlayerController_ServerAcknowledgePossessionFn)plugin->GetDllExport(TEXT("set_APlayerController_ServerAcknowledgePossession_handler\0"));
    if(apiuapi_APlayerController_ServerAcknowledgePossession){
        apiuapi_APlayerController_ServerAcknowledgePossession(&uapi_APlayerController_ServerAcknowledgePossession);
    }

    auto const apiuapi_APlayerController_ServerCamera = (uapi_APlayerController_ServerCameraFn)plugin->GetDllExport(TEXT("set_APlayerController_ServerCamera_handler\0"));
    if(apiuapi_APlayerController_ServerCamera){
        apiuapi_APlayerController_ServerCamera(&uapi_APlayerController_ServerCamera);
    }

    auto const apiuapi_APlayerController_ServerCheckClientPossession = (uapi_APlayerController_ServerCheckClientPossessionFn)plugin->GetDllExport(TEXT("set_APlayerController_ServerCheckClientPossession_handler\0"));
    if(apiuapi_APlayerController_ServerCheckClientPossession){
        apiuapi_APlayerController_ServerCheckClientPossession(&uapi_APlayerController_ServerCheckClientPossession);
    }

    auto const apiuapi_APlayerController_ServerCheckClientPossessionReliable = (uapi_APlayerController_ServerCheckClientPossessionReliableFn)plugin->GetDllExport(TEXT("set_APlayerController_ServerCheckClientPossessionReliable_handler\0"));
    if(apiuapi_APlayerController_ServerCheckClientPossessionReliable){
        apiuapi_APlayerController_ServerCheckClientPossessionReliable(&uapi_APlayerController_ServerCheckClientPossessionReliable);
    }

    auto const apiuapi_APlayerController_ServerNotifyLoadedWorld = (uapi_APlayerController_ServerNotifyLoadedWorldFn)plugin->GetDllExport(TEXT("set_APlayerController_ServerNotifyLoadedWorld_handler\0"));
    if(apiuapi_APlayerController_ServerNotifyLoadedWorld){
        apiuapi_APlayerController_ServerNotifyLoadedWorld(&uapi_APlayerController_ServerNotifyLoadedWorld);
    }

    auto const apiuapi_APlayerController_ServerPause = (uapi_APlayerController_ServerPauseFn)plugin->GetDllExport(TEXT("set_APlayerController_ServerPause_handler\0"));
    if(apiuapi_APlayerController_ServerPause){
        apiuapi_APlayerController_ServerPause(&uapi_APlayerController_ServerPause);
    }

    auto const apiuapi_APlayerController_ServerRestartPlayer = (uapi_APlayerController_ServerRestartPlayerFn)plugin->GetDllExport(TEXT("set_APlayerController_ServerRestartPlayer_handler\0"));
    if(apiuapi_APlayerController_ServerRestartPlayer){
        apiuapi_APlayerController_ServerRestartPlayer(&uapi_APlayerController_ServerRestartPlayer);
    }

    auto const apiuapi_APlayerController_ServerSetSpectatorLocation = (uapi_APlayerController_ServerSetSpectatorLocationFn)plugin->GetDllExport(TEXT("set_APlayerController_ServerSetSpectatorLocation_handler\0"));
    if(apiuapi_APlayerController_ServerSetSpectatorLocation){
        apiuapi_APlayerController_ServerSetSpectatorLocation(&uapi_APlayerController_ServerSetSpectatorLocation);
    }

    auto const apiuapi_APlayerController_ServerSetSpectatorWaiting = (uapi_APlayerController_ServerSetSpectatorWaitingFn)plugin->GetDllExport(TEXT("set_APlayerController_ServerSetSpectatorWaiting_handler\0"));
    if(apiuapi_APlayerController_ServerSetSpectatorWaiting){
        apiuapi_APlayerController_ServerSetSpectatorWaiting(&uapi_APlayerController_ServerSetSpectatorWaiting);
    }

    auto const apiuapi_APlayerController_ServerShortTimeout = (uapi_APlayerController_ServerShortTimeoutFn)plugin->GetDllExport(TEXT("set_APlayerController_ServerShortTimeout_handler\0"));
    if(apiuapi_APlayerController_ServerShortTimeout){
        apiuapi_APlayerController_ServerShortTimeout(&uapi_APlayerController_ServerShortTimeout);
    }

    auto const apiuapi_APlayerController_ServerToggleAILogging = (uapi_APlayerController_ServerToggleAILoggingFn)plugin->GetDllExport(TEXT("set_APlayerController_ServerToggleAILogging_handler\0"));
    if(apiuapi_APlayerController_ServerToggleAILogging){
        apiuapi_APlayerController_ServerToggleAILogging(&uapi_APlayerController_ServerToggleAILogging);
    }

    auto const apiuapi_APlayerController_ServerVerifyViewTarget = (uapi_APlayerController_ServerVerifyViewTargetFn)plugin->GetDllExport(TEXT("set_APlayerController_ServerVerifyViewTarget_handler\0"));
    if(apiuapi_APlayerController_ServerVerifyViewTarget){
        apiuapi_APlayerController_ServerVerifyViewTarget(&uapi_APlayerController_ServerVerifyViewTarget);
    }

    auto const apiuapi_APlayerController_ServerViewNextPlayer = (uapi_APlayerController_ServerViewNextPlayerFn)plugin->GetDllExport(TEXT("set_APlayerController_ServerViewNextPlayer_handler\0"));
    if(apiuapi_APlayerController_ServerViewNextPlayer){
        apiuapi_APlayerController_ServerViewNextPlayer(&uapi_APlayerController_ServerViewNextPlayer);
    }

    auto const apiuapi_APlayerController_ServerViewPrevPlayer = (uapi_APlayerController_ServerViewPrevPlayerFn)plugin->GetDllExport(TEXT("set_APlayerController_ServerViewPrevPlayer_handler\0"));
    if(apiuapi_APlayerController_ServerViewPrevPlayer){
        apiuapi_APlayerController_ServerViewPrevPlayer(&uapi_APlayerController_ServerViewPrevPlayer);
    }

    auto const apiuapi_APlayerController_SetAsLocalPlayerController = (uapi_APlayerController_SetAsLocalPlayerControllerFn)plugin->GetDllExport(TEXT("set_APlayerController_SetAsLocalPlayerController_handler\0"));
    if(apiuapi_APlayerController_SetAsLocalPlayerController){
        apiuapi_APlayerController_SetAsLocalPlayerController(&uapi_APlayerController_SetAsLocalPlayerController);
    }

    auto const apiuapi_APlayerController_SetAudioListenerAttenuationOverride = (uapi_APlayerController_SetAudioListenerAttenuationOverrideFn)plugin->GetDllExport(TEXT("set_APlayerController_SetAudioListenerAttenuationOverride_handler\0"));
    if(apiuapi_APlayerController_SetAudioListenerAttenuationOverride){
        apiuapi_APlayerController_SetAudioListenerAttenuationOverride(&uapi_APlayerController_SetAudioListenerAttenuationOverride);
    }

    auto const apiuapi_APlayerController_SetAudioListenerOverride = (uapi_APlayerController_SetAudioListenerOverrideFn)plugin->GetDllExport(TEXT("set_APlayerController_SetAudioListenerOverride_handler\0"));
    if(apiuapi_APlayerController_SetAudioListenerOverride){
        apiuapi_APlayerController_SetAudioListenerOverride(&uapi_APlayerController_SetAudioListenerOverride);
    }

    auto const apiuapi_APlayerController_SetCameraMode = (uapi_APlayerController_SetCameraModeFn)plugin->GetDllExport(TEXT("set_APlayerController_SetCameraMode_handler\0"));
    if(apiuapi_APlayerController_SetCameraMode){
        apiuapi_APlayerController_SetCameraMode(&uapi_APlayerController_SetCameraMode);
    }

    auto const apiuapi_APlayerController_SetCinematicMode = (uapi_APlayerController_SetCinematicModeFn)plugin->GetDllExport(TEXT("set_APlayerController_SetCinematicMode_handler\0"));
    if(apiuapi_APlayerController_SetCinematicMode){
        apiuapi_APlayerController_SetCinematicMode(&uapi_APlayerController_SetCinematicMode);
    }

    auto const apiuapi_APlayerController_SetCinematicMode2 = (uapi_APlayerController_SetCinematicMode2Fn)plugin->GetDllExport(TEXT("set_APlayerController_SetCinematicMode2_handler\0"));
    if(apiuapi_APlayerController_SetCinematicMode2){
        apiuapi_APlayerController_SetCinematicMode2(&uapi_APlayerController_SetCinematicMode2);
    }

    auto const apiuapi_APlayerController_SetControllerLightColor = (uapi_APlayerController_SetControllerLightColorFn)plugin->GetDllExport(TEXT("set_APlayerController_SetControllerLightColor_handler\0"));
    if(apiuapi_APlayerController_SetControllerLightColor){
        apiuapi_APlayerController_SetControllerLightColor(&uapi_APlayerController_SetControllerLightColor);
    }

    auto const apiuapi_APlayerController_SetDisableHaptics = (uapi_APlayerController_SetDisableHapticsFn)plugin->GetDllExport(TEXT("set_APlayerController_SetDisableHaptics_handler\0"));
    if(apiuapi_APlayerController_SetDisableHaptics){
        apiuapi_APlayerController_SetDisableHaptics(&uapi_APlayerController_SetDisableHaptics);
    }

    auto const apiuapi_APlayerController_SetMotionControlsEnabled = (uapi_APlayerController_SetMotionControlsEnabledFn)plugin->GetDllExport(TEXT("set_APlayerController_SetMotionControlsEnabled_handler\0"));
    if(apiuapi_APlayerController_SetMotionControlsEnabled){
        apiuapi_APlayerController_SetMotionControlsEnabled(&uapi_APlayerController_SetMotionControlsEnabled);
    }

    auto const apiuapi_APlayerController_SetNetSpeed = (uapi_APlayerController_SetNetSpeedFn)plugin->GetDllExport(TEXT("set_APlayerController_SetNetSpeed_handler\0"));
    if(apiuapi_APlayerController_SetNetSpeed){
        apiuapi_APlayerController_SetNetSpeed(&uapi_APlayerController_SetNetSpeed);
    }

    auto const apiuapi_APlayerController_SetPawn = (uapi_APlayerController_SetPawnFn)plugin->GetDllExport(TEXT("set_APlayerController_SetPawn_handler\0"));
    if(apiuapi_APlayerController_SetPawn){
        apiuapi_APlayerController_SetPawn(&uapi_APlayerController_SetPawn);
    }

    auto const apiuapi_APlayerController_SetPlayer = (uapi_APlayerController_SetPlayerFn)plugin->GetDllExport(TEXT("set_APlayerController_SetPlayer_handler\0"));
    if(apiuapi_APlayerController_SetPlayer){
        apiuapi_APlayerController_SetPlayer(&uapi_APlayerController_SetPlayer);
    }

    auto const apiuapi_APlayerController_SetShowMouseCursor = (uapi_APlayerController_SetShowMouseCursorFn)plugin->GetDllExport(TEXT("set_APlayerController_SetShowMouseCursor_handler\0"));
    if(apiuapi_APlayerController_SetShowMouseCursor){
        apiuapi_APlayerController_SetShowMouseCursor(&uapi_APlayerController_SetShowMouseCursor);
    }

    auto const apiuapi_APlayerController_SetVirtualJoystickVisibility = (uapi_APlayerController_SetVirtualJoystickVisibilityFn)plugin->GetDllExport(TEXT("set_APlayerController_SetVirtualJoystickVisibility_handler\0"));
    if(apiuapi_APlayerController_SetVirtualJoystickVisibility){
        apiuapi_APlayerController_SetVirtualJoystickVisibility(&uapi_APlayerController_SetVirtualJoystickVisibility);
    }

    auto const apiuapi_APlayerController_ShouldFlushKeysWhenViewportFocusChanges = (uapi_APlayerController_ShouldFlushKeysWhenViewportFocusChangesFn)plugin->GetDllExport(TEXT("set_APlayerController_ShouldFlushKeysWhenViewportFocusChanges_handler\0"));
    if(apiuapi_APlayerController_ShouldFlushKeysWhenViewportFocusChanges){
        apiuapi_APlayerController_ShouldFlushKeysWhenViewportFocusChanges(&uapi_APlayerController_ShouldFlushKeysWhenViewportFocusChanges);
    }

    auto const apiuapi_APlayerController_ShouldParticipateInSeamlessTravel = (uapi_APlayerController_ShouldParticipateInSeamlessTravelFn)plugin->GetDllExport(TEXT("set_APlayerController_ShouldParticipateInSeamlessTravel_handler\0"));
    if(apiuapi_APlayerController_ShouldParticipateInSeamlessTravel){
        apiuapi_APlayerController_ShouldParticipateInSeamlessTravel(&uapi_APlayerController_ShouldParticipateInSeamlessTravel);
    }

    auto const apiuapi_APlayerController_ShouldPerformFullTickWhenPaused = (uapi_APlayerController_ShouldPerformFullTickWhenPausedFn)plugin->GetDllExport(TEXT("set_APlayerController_ShouldPerformFullTickWhenPaused_handler\0"));
    if(apiuapi_APlayerController_ShouldPerformFullTickWhenPaused){
        apiuapi_APlayerController_ShouldPerformFullTickWhenPaused(&uapi_APlayerController_ShouldPerformFullTickWhenPaused);
    }

    auto const apiuapi_APlayerController_ShouldShowMouseCursor = (uapi_APlayerController_ShouldShowMouseCursorFn)plugin->GetDllExport(TEXT("set_APlayerController_ShouldShowMouseCursor_handler\0"));
    if(apiuapi_APlayerController_ShouldShowMouseCursor){
        apiuapi_APlayerController_ShouldShowMouseCursor(&uapi_APlayerController_ShouldShowMouseCursor);
    }

    auto const apiuapi_APlayerController_SmoothTargetViewRotation = (uapi_APlayerController_SmoothTargetViewRotationFn)plugin->GetDllExport(TEXT("set_APlayerController_SmoothTargetViewRotation_handler\0"));
    if(apiuapi_APlayerController_SmoothTargetViewRotation){
        apiuapi_APlayerController_SmoothTargetViewRotation(&uapi_APlayerController_SmoothTargetViewRotation);
    }

    auto const apiuapi_APlayerController_SpawnDefaultHUD = (uapi_APlayerController_SpawnDefaultHUDFn)plugin->GetDllExport(TEXT("set_APlayerController_SpawnDefaultHUD_handler\0"));
    if(apiuapi_APlayerController_SpawnDefaultHUD){
        apiuapi_APlayerController_SpawnDefaultHUD(&uapi_APlayerController_SpawnDefaultHUD);
    }

    auto const apiuapi_APlayerController_SpawnPlayerCameraManager = (uapi_APlayerController_SpawnPlayerCameraManagerFn)plugin->GetDllExport(TEXT("set_APlayerController_SpawnPlayerCameraManager_handler\0"));
    if(apiuapi_APlayerController_SpawnPlayerCameraManager){
        apiuapi_APlayerController_SpawnPlayerCameraManager(&uapi_APlayerController_SpawnPlayerCameraManager);
    }

    auto const apiuapi_APlayerController_StartFire = (uapi_APlayerController_StartFireFn)plugin->GetDllExport(TEXT("set_APlayerController_StartFire_handler\0"));
    if(apiuapi_APlayerController_StartFire){
        apiuapi_APlayerController_StartFire(&uapi_APlayerController_StartFire);
    }

    auto const apiuapi_APlayerController_StartSpectatingOnly = (uapi_APlayerController_StartSpectatingOnlyFn)plugin->GetDllExport(TEXT("set_APlayerController_StartSpectatingOnly_handler\0"));
    if(apiuapi_APlayerController_StartSpectatingOnly){
        apiuapi_APlayerController_StartSpectatingOnly(&uapi_APlayerController_StartSpectatingOnly);
    }

    auto const apiuapi_APlayerController_StartTalking = (uapi_APlayerController_StartTalkingFn)plugin->GetDllExport(TEXT("set_APlayerController_StartTalking_handler\0"));
    if(apiuapi_APlayerController_StartTalking){
        apiuapi_APlayerController_StartTalking(&uapi_APlayerController_StartTalking);
    }

    auto const apiuapi_APlayerController_StopTalking = (uapi_APlayerController_StopTalkingFn)plugin->GetDllExport(TEXT("set_APlayerController_StopTalking_handler\0"));
    if(apiuapi_APlayerController_StopTalking){
        apiuapi_APlayerController_StopTalking(&uapi_APlayerController_StopTalking);
    }

    auto const apiuapi_APlayerController_StreamingSourceShouldActivate = (uapi_APlayerController_StreamingSourceShouldActivateFn)plugin->GetDllExport(TEXT("set_APlayerController_StreamingSourceShouldActivate_handler\0"));
    if(apiuapi_APlayerController_StreamingSourceShouldActivate){
        apiuapi_APlayerController_StreamingSourceShouldActivate(&uapi_APlayerController_StreamingSourceShouldActivate);
    }

    auto const apiuapi_APlayerController_StreamingSourceShouldBlockOnSlowStreaming = (uapi_APlayerController_StreamingSourceShouldBlockOnSlowStreamingFn)plugin->GetDllExport(TEXT("set_APlayerController_StreamingSourceShouldBlockOnSlowStreaming_handler\0"));
    if(apiuapi_APlayerController_StreamingSourceShouldBlockOnSlowStreaming){
        apiuapi_APlayerController_StreamingSourceShouldBlockOnSlowStreaming(&uapi_APlayerController_StreamingSourceShouldBlockOnSlowStreaming);
    }

    auto const apiuapi_APlayerController_ToggleSpeaking = (uapi_APlayerController_ToggleSpeakingFn)plugin->GetDllExport(TEXT("set_APlayerController_ToggleSpeaking_handler\0"));
    if(apiuapi_APlayerController_ToggleSpeaking){
        apiuapi_APlayerController_ToggleSpeaking(&uapi_APlayerController_ToggleSpeaking);
    }

    auto const apiuapi_APlayerController_UnFreeze = (uapi_APlayerController_UnFreezeFn)plugin->GetDllExport(TEXT("set_APlayerController_UnFreeze_handler\0"));
    if(apiuapi_APlayerController_UnFreeze){
        apiuapi_APlayerController_UnFreeze(&uapi_APlayerController_UnFreeze);
    }

    auto const apiuapi_APlayerController_UpdateCameraManager = (uapi_APlayerController_UpdateCameraManagerFn)plugin->GetDllExport(TEXT("set_APlayerController_UpdateCameraManager_handler\0"));
    if(apiuapi_APlayerController_UpdateCameraManager){
        apiuapi_APlayerController_UpdateCameraManager(&uapi_APlayerController_UpdateCameraManager);
    }

    auto const apiuapi_APlayerController_UpdatePing = (uapi_APlayerController_UpdatePingFn)plugin->GetDllExport(TEXT("set_APlayerController_UpdatePing_handler\0"));
    if(apiuapi_APlayerController_UpdatePing){
        apiuapi_APlayerController_UpdatePing(&uapi_APlayerController_UpdatePing);
    }

    auto const apiuapi_APlayerController_UpdateRotation = (uapi_APlayerController_UpdateRotationFn)plugin->GetDllExport(TEXT("set_APlayerController_UpdateRotation_handler\0"));
    if(apiuapi_APlayerController_UpdateRotation){
        apiuapi_APlayerController_UpdateRotation(&uapi_APlayerController_UpdateRotation);
    }

    auto const apiuapi_APlayerController_UseShortConnectTimeout = (uapi_APlayerController_UseShortConnectTimeoutFn)plugin->GetDllExport(TEXT("set_APlayerController_UseShortConnectTimeout_handler\0"));
    if(apiuapi_APlayerController_UseShortConnectTimeout){
        apiuapi_APlayerController_UseShortConnectTimeout(&uapi_APlayerController_UseShortConnectTimeout);
    }

    auto const apiuapi_APlayerController_ViewAPlayer = (uapi_APlayerController_ViewAPlayerFn)plugin->GetDllExport(TEXT("set_APlayerController_ViewAPlayer_handler\0"));
    if(apiuapi_APlayerController_ViewAPlayer){
        apiuapi_APlayerController_ViewAPlayer(&uapi_APlayerController_ViewAPlayer);
    }

    auto const apiuapi_FRandomStream_FRand = (uapi_FRandomStream_FRandFn)plugin->GetDllExport(TEXT("set_FRandomStream_FRand_handler\0"));
    if(apiuapi_FRandomStream_FRand){
        apiuapi_FRandomStream_FRand(&uapi_FRandomStream_FRand);
    }

    auto const apiuapi_FRandomStream_GenerateNewSeed = (uapi_FRandomStream_GenerateNewSeedFn)plugin->GetDllExport(TEXT("set_FRandomStream_GenerateNewSeed_handler\0"));
    if(apiuapi_FRandomStream_GenerateNewSeed){
        apiuapi_FRandomStream_GenerateNewSeed(&uapi_FRandomStream_GenerateNewSeed);
    }

    auto const apiuapi_FRandomStream_GetCurrentSeed = (uapi_FRandomStream_GetCurrentSeedFn)plugin->GetDllExport(TEXT("set_FRandomStream_GetCurrentSeed_handler\0"));
    if(apiuapi_FRandomStream_GetCurrentSeed){
        apiuapi_FRandomStream_GetCurrentSeed(&uapi_FRandomStream_GetCurrentSeed);
    }

    auto const apiuapi_FRandomStream_GetFraction = (uapi_FRandomStream_GetFractionFn)plugin->GetDllExport(TEXT("set_FRandomStream_GetFraction_handler\0"));
    if(apiuapi_FRandomStream_GetFraction){
        apiuapi_FRandomStream_GetFraction(&uapi_FRandomStream_GetFraction);
    }

    auto const apiuapi_FRandomStream_GetInitialSeed = (uapi_FRandomStream_GetInitialSeedFn)plugin->GetDllExport(TEXT("set_FRandomStream_GetInitialSeed_handler\0"));
    if(apiuapi_FRandomStream_GetInitialSeed){
        apiuapi_FRandomStream_GetInitialSeed(&uapi_FRandomStream_GetInitialSeed);
    }

    auto const apiuapi_FRandomStream_GetUnitVector = (uapi_FRandomStream_GetUnitVectorFn)plugin->GetDllExport(TEXT("set_FRandomStream_GetUnitVector_handler\0"));
    if(apiuapi_FRandomStream_GetUnitVector){
        apiuapi_FRandomStream_GetUnitVector(&uapi_FRandomStream_GetUnitVector);
    }

    auto const apiuapi_FRandomStream_GetUnsignedInt = (uapi_FRandomStream_GetUnsignedIntFn)plugin->GetDllExport(TEXT("set_FRandomStream_GetUnsignedInt_handler\0"));
    if(apiuapi_FRandomStream_GetUnsignedInt){
        apiuapi_FRandomStream_GetUnsignedInt(&uapi_FRandomStream_GetUnsignedInt);
    }

    auto const apiuapi_FRandomStream_Initialize = (uapi_FRandomStream_InitializeFn)plugin->GetDllExport(TEXT("set_FRandomStream_Initialize_handler\0"));
    if(apiuapi_FRandomStream_Initialize){
        apiuapi_FRandomStream_Initialize(&uapi_FRandomStream_Initialize);
    }

    auto const apiuapi_FRandomStream_RandHelper = (uapi_FRandomStream_RandHelperFn)plugin->GetDllExport(TEXT("set_FRandomStream_RandHelper_handler\0"));
    if(apiuapi_FRandomStream_RandHelper){
        apiuapi_FRandomStream_RandHelper(&uapi_FRandomStream_RandHelper);
    }

    auto const apiuapi_FRandomStream_RandRange = (uapi_FRandomStream_RandRangeFn)plugin->GetDllExport(TEXT("set_FRandomStream_RandRange_handler\0"));
    if(apiuapi_FRandomStream_RandRange){
        apiuapi_FRandomStream_RandRange(&uapi_FRandomStream_RandRange);
    }

    auto const apiuapi_FRandomStream_Reset = (uapi_FRandomStream_ResetFn)plugin->GetDllExport(TEXT("set_FRandomStream_Reset_handler\0"));
    if(apiuapi_FRandomStream_Reset){
        apiuapi_FRandomStream_Reset(&uapi_FRandomStream_Reset);
    }

    auto const apiuapi_FRandomStream_ToString = (uapi_FRandomStream_ToStringFn)plugin->GetDllExport(TEXT("set_FRandomStream_ToString_handler\0"));
    if(apiuapi_FRandomStream_ToString){
        apiuapi_FRandomStream_ToString(&uapi_FRandomStream_ToString);
    }

    auto const apiuapi_FRandomStream_VRand = (uapi_FRandomStream_VRandFn)plugin->GetDllExport(TEXT("set_FRandomStream_VRand_handler\0"));
    if(apiuapi_FRandomStream_VRand){
        apiuapi_FRandomStream_VRand(&uapi_FRandomStream_VRand);
    }

    auto const apiuapi_UGameplayStatics_ActivateReverbEffect = (uapi_UGameplayStatics_ActivateReverbEffectFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_ActivateReverbEffect_handler\0"));
    if(apiuapi_UGameplayStatics_ActivateReverbEffect){
        apiuapi_UGameplayStatics_ActivateReverbEffect(&uapi_UGameplayStatics_ActivateReverbEffect);
    }

    auto const apiuapi_UGameplayStatics_AreSubtitlesEnabled = (uapi_UGameplayStatics_AreSubtitlesEnabledFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_AreSubtitlesEnabled_handler\0"));
    if(apiuapi_UGameplayStatics_AreSubtitlesEnabled){
        apiuapi_UGameplayStatics_AreSubtitlesEnabled(&uapi_UGameplayStatics_AreSubtitlesEnabled);
    }

    auto const apiuapi_UGameplayStatics_CancelAsyncLoading = (uapi_UGameplayStatics_CancelAsyncLoadingFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_CancelAsyncLoading_handler\0"));
    if(apiuapi_UGameplayStatics_CancelAsyncLoading){
        apiuapi_UGameplayStatics_CancelAsyncLoading(&uapi_UGameplayStatics_CancelAsyncLoading);
    }

    auto const apiuapi_UGameplayStatics_ClearSoundMixClassOverride = (uapi_UGameplayStatics_ClearSoundMixClassOverrideFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_ClearSoundMixClassOverride_handler\0"));
    if(apiuapi_UGameplayStatics_ClearSoundMixClassOverride){
        apiuapi_UGameplayStatics_ClearSoundMixClassOverride(&uapi_UGameplayStatics_ClearSoundMixClassOverride);
    }

    auto const apiuapi_UGameplayStatics_ClearSoundMixModifiers = (uapi_UGameplayStatics_ClearSoundMixModifiersFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_ClearSoundMixModifiers_handler\0"));
    if(apiuapi_UGameplayStatics_ClearSoundMixModifiers){
        apiuapi_UGameplayStatics_ClearSoundMixModifiers(&uapi_UGameplayStatics_ClearSoundMixModifiers);
    }

    auto const apiuapi_UGameplayStatics_CreatePlayer = (uapi_UGameplayStatics_CreatePlayerFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_CreatePlayer_handler\0"));
    if(apiuapi_UGameplayStatics_CreatePlayer){
        apiuapi_UGameplayStatics_CreatePlayer(&uapi_UGameplayStatics_CreatePlayer);
    }

    auto const apiuapi_UGameplayStatics_CreateSound2D = (uapi_UGameplayStatics_CreateSound2DFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_CreateSound2D_handler\0"));
    if(apiuapi_UGameplayStatics_CreateSound2D){
        apiuapi_UGameplayStatics_CreateSound2D(&uapi_UGameplayStatics_CreateSound2D);
    }

    auto const apiuapi_UGameplayStatics_DeactivateReverbEffect = (uapi_UGameplayStatics_DeactivateReverbEffectFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_DeactivateReverbEffect_handler\0"));
    if(apiuapi_UGameplayStatics_DeactivateReverbEffect){
        apiuapi_UGameplayStatics_DeactivateReverbEffect(&uapi_UGameplayStatics_DeactivateReverbEffect);
    }

    auto const apiuapi_UGameplayStatics_EnableLiveStreaming = (uapi_UGameplayStatics_EnableLiveStreamingFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_EnableLiveStreaming_handler\0"));
    if(apiuapi_UGameplayStatics_EnableLiveStreaming){
        apiuapi_UGameplayStatics_EnableLiveStreaming(&uapi_UGameplayStatics_EnableLiveStreaming);
    }

    auto const apiuapi_UGameplayStatics_FlushLevelStreaming = (uapi_UGameplayStatics_FlushLevelStreamingFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_FlushLevelStreaming_handler\0"));
    if(apiuapi_UGameplayStatics_FlushLevelStreaming){
        apiuapi_UGameplayStatics_FlushLevelStreaming(&uapi_UGameplayStatics_FlushLevelStreaming);
    }

    auto const apiuapi_UGameplayStatics_GetAccurateRealTime = (uapi_UGameplayStatics_GetAccurateRealTimeFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetAccurateRealTime_handler\0"));
    if(apiuapi_UGameplayStatics_GetAccurateRealTime){
        apiuapi_UGameplayStatics_GetAccurateRealTime(&uapi_UGameplayStatics_GetAccurateRealTime);
    }

    auto const apiuapi_UGameplayStatics_GetActiveSpatialPluginName = (uapi_UGameplayStatics_GetActiveSpatialPluginNameFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetActiveSpatialPluginName_handler\0"));
    if(apiuapi_UGameplayStatics_GetActiveSpatialPluginName){
        apiuapi_UGameplayStatics_GetActiveSpatialPluginName(&uapi_UGameplayStatics_GetActiveSpatialPluginName);
    }

    auto const apiuapi_UGameplayStatics_GetAudioTimeSeconds = (uapi_UGameplayStatics_GetAudioTimeSecondsFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetAudioTimeSeconds_handler\0"));
    if(apiuapi_UGameplayStatics_GetAudioTimeSeconds){
        apiuapi_UGameplayStatics_GetAudioTimeSeconds(&uapi_UGameplayStatics_GetAudioTimeSeconds);
    }

    auto const apiuapi_UGameplayStatics_GetCurrentLevelName = (uapi_UGameplayStatics_GetCurrentLevelNameFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetCurrentLevelName_handler\0"));
    if(apiuapi_UGameplayStatics_GetCurrentLevelName){
        apiuapi_UGameplayStatics_GetCurrentLevelName(&uapi_UGameplayStatics_GetCurrentLevelName);
    }

    auto const apiuapi_UGameplayStatics_GetCurrentReverbEffect = (uapi_UGameplayStatics_GetCurrentReverbEffectFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetCurrentReverbEffect_handler\0"));
    if(apiuapi_UGameplayStatics_GetCurrentReverbEffect){
        apiuapi_UGameplayStatics_GetCurrentReverbEffect(&uapi_UGameplayStatics_GetCurrentReverbEffect);
    }

    auto const apiuapi_UGameplayStatics_GetEnableWorldRendering = (uapi_UGameplayStatics_GetEnableWorldRenderingFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetEnableWorldRendering_handler\0"));
    if(apiuapi_UGameplayStatics_GetEnableWorldRendering){
        apiuapi_UGameplayStatics_GetEnableWorldRendering(&uapi_UGameplayStatics_GetEnableWorldRendering);
    }

    auto const apiuapi_UGameplayStatics_GetGameInstance = (uapi_UGameplayStatics_GetGameInstanceFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetGameInstance_handler\0"));
    if(apiuapi_UGameplayStatics_GetGameInstance){
        apiuapi_UGameplayStatics_GetGameInstance(&uapi_UGameplayStatics_GetGameInstance);
    }

    auto const apiuapi_UGameplayStatics_GetGameMode = (uapi_UGameplayStatics_GetGameModeFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetGameMode_handler\0"));
    if(apiuapi_UGameplayStatics_GetGameMode){
        apiuapi_UGameplayStatics_GetGameMode(&uapi_UGameplayStatics_GetGameMode);
    }

    auto const apiuapi_UGameplayStatics_GetGameState = (uapi_UGameplayStatics_GetGameStateFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetGameState_handler\0"));
    if(apiuapi_UGameplayStatics_GetGameState){
        apiuapi_UGameplayStatics_GetGameState(&uapi_UGameplayStatics_GetGameState);
    }

    auto const apiuapi_UGameplayStatics_GetGlobalTimeDilation = (uapi_UGameplayStatics_GetGlobalTimeDilationFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetGlobalTimeDilation_handler\0"));
    if(apiuapi_UGameplayStatics_GetGlobalTimeDilation){
        apiuapi_UGameplayStatics_GetGlobalTimeDilation(&uapi_UGameplayStatics_GetGlobalTimeDilation);
    }

    auto const apiuapi_UGameplayStatics_GetMaxAudioChannelCount = (uapi_UGameplayStatics_GetMaxAudioChannelCountFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetMaxAudioChannelCount_handler\0"));
    if(apiuapi_UGameplayStatics_GetMaxAudioChannelCount){
        apiuapi_UGameplayStatics_GetMaxAudioChannelCount(&uapi_UGameplayStatics_GetMaxAudioChannelCount);
    }

    auto const apiuapi_UGameplayStatics_GetNumLocalPlayerControllers = (uapi_UGameplayStatics_GetNumLocalPlayerControllersFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetNumLocalPlayerControllers_handler\0"));
    if(apiuapi_UGameplayStatics_GetNumLocalPlayerControllers){
        apiuapi_UGameplayStatics_GetNumLocalPlayerControllers(&uapi_UGameplayStatics_GetNumLocalPlayerControllers);
    }

    auto const apiuapi_UGameplayStatics_GetNumPlayerControllers = (uapi_UGameplayStatics_GetNumPlayerControllersFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetNumPlayerControllers_handler\0"));
    if(apiuapi_UGameplayStatics_GetNumPlayerControllers){
        apiuapi_UGameplayStatics_GetNumPlayerControllers(&uapi_UGameplayStatics_GetNumPlayerControllers);
    }

    auto const apiuapi_UGameplayStatics_GetNumPlayerStates = (uapi_UGameplayStatics_GetNumPlayerStatesFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetNumPlayerStates_handler\0"));
    if(apiuapi_UGameplayStatics_GetNumPlayerStates){
        apiuapi_UGameplayStatics_GetNumPlayerStates(&uapi_UGameplayStatics_GetNumPlayerStates);
    }

    auto const apiuapi_UGameplayStatics_GetObjectClass = (uapi_UGameplayStatics_GetObjectClassFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetObjectClass_handler\0"));
    if(apiuapi_UGameplayStatics_GetObjectClass){
        apiuapi_UGameplayStatics_GetObjectClass(&uapi_UGameplayStatics_GetObjectClass);
    }

    auto const apiuapi_UGameplayStatics_GetPlatformName = (uapi_UGameplayStatics_GetPlatformNameFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetPlatformName_handler\0"));
    if(apiuapi_UGameplayStatics_GetPlatformName){
        apiuapi_UGameplayStatics_GetPlatformName(&uapi_UGameplayStatics_GetPlatformName);
    }

    auto const apiuapi_UGameplayStatics_GetPlayerCameraManager = (uapi_UGameplayStatics_GetPlayerCameraManagerFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetPlayerCameraManager_handler\0"));
    if(apiuapi_UGameplayStatics_GetPlayerCameraManager){
        apiuapi_UGameplayStatics_GetPlayerCameraManager(&uapi_UGameplayStatics_GetPlayerCameraManager);
    }

    auto const apiuapi_UGameplayStatics_GetPlayerCharacter = (uapi_UGameplayStatics_GetPlayerCharacterFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetPlayerCharacter_handler\0"));
    if(apiuapi_UGameplayStatics_GetPlayerCharacter){
        apiuapi_UGameplayStatics_GetPlayerCharacter(&uapi_UGameplayStatics_GetPlayerCharacter);
    }

    auto const apiuapi_UGameplayStatics_GetPlayerController = (uapi_UGameplayStatics_GetPlayerControllerFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetPlayerController_handler\0"));
    if(apiuapi_UGameplayStatics_GetPlayerController){
        apiuapi_UGameplayStatics_GetPlayerController(&uapi_UGameplayStatics_GetPlayerController);
    }

    auto const apiuapi_UGameplayStatics_GetPlayerControllerFromID = (uapi_UGameplayStatics_GetPlayerControllerFromIDFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetPlayerControllerFromID_handler\0"));
    if(apiuapi_UGameplayStatics_GetPlayerControllerFromID){
        apiuapi_UGameplayStatics_GetPlayerControllerFromID(&uapi_UGameplayStatics_GetPlayerControllerFromID);
    }

    auto const apiuapi_UGameplayStatics_GetPlayerControllerID = (uapi_UGameplayStatics_GetPlayerControllerIDFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetPlayerControllerID_handler\0"));
    if(apiuapi_UGameplayStatics_GetPlayerControllerID){
        apiuapi_UGameplayStatics_GetPlayerControllerID(&uapi_UGameplayStatics_GetPlayerControllerID);
    }

    auto const apiuapi_UGameplayStatics_GetPlayerPawn = (uapi_UGameplayStatics_GetPlayerPawnFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetPlayerPawn_handler\0"));
    if(apiuapi_UGameplayStatics_GetPlayerPawn){
        apiuapi_UGameplayStatics_GetPlayerPawn(&uapi_UGameplayStatics_GetPlayerPawn);
    }

    auto const apiuapi_UGameplayStatics_GetPlayerState = (uapi_UGameplayStatics_GetPlayerStateFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetPlayerState_handler\0"));
    if(apiuapi_UGameplayStatics_GetPlayerState){
        apiuapi_UGameplayStatics_GetPlayerState(&uapi_UGameplayStatics_GetPlayerState);
    }

    auto const apiuapi_UGameplayStatics_GetRealTimeSeconds = (uapi_UGameplayStatics_GetRealTimeSecondsFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetRealTimeSeconds_handler\0"));
    if(apiuapi_UGameplayStatics_GetRealTimeSeconds){
        apiuapi_UGameplayStatics_GetRealTimeSeconds(&uapi_UGameplayStatics_GetRealTimeSeconds);
    }

    auto const apiuapi_UGameplayStatics_GetStreamingLevel = (uapi_UGameplayStatics_GetStreamingLevelFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetStreamingLevel_handler\0"));
    if(apiuapi_UGameplayStatics_GetStreamingLevel){
        apiuapi_UGameplayStatics_GetStreamingLevel(&uapi_UGameplayStatics_GetStreamingLevel);
    }

    auto const apiuapi_UGameplayStatics_GetTimeSeconds = (uapi_UGameplayStatics_GetTimeSecondsFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetTimeSeconds_handler\0"));
    if(apiuapi_UGameplayStatics_GetTimeSeconds){
        apiuapi_UGameplayStatics_GetTimeSeconds(&uapi_UGameplayStatics_GetTimeSeconds);
    }

    auto const apiuapi_UGameplayStatics_GetUnpausedTimeSeconds = (uapi_UGameplayStatics_GetUnpausedTimeSecondsFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetUnpausedTimeSeconds_handler\0"));
    if(apiuapi_UGameplayStatics_GetUnpausedTimeSeconds){
        apiuapi_UGameplayStatics_GetUnpausedTimeSeconds(&uapi_UGameplayStatics_GetUnpausedTimeSeconds);
    }

    auto const apiuapi_UGameplayStatics_GetWorldDeltaSeconds = (uapi_UGameplayStatics_GetWorldDeltaSecondsFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GetWorldDeltaSeconds_handler\0"));
    if(apiuapi_UGameplayStatics_GetWorldDeltaSeconds){
        apiuapi_UGameplayStatics_GetWorldDeltaSeconds(&uapi_UGameplayStatics_GetWorldDeltaSeconds);
    }

    auto const apiuapi_UGameplayStatics_GrassOverlappingSphereCount = (uapi_UGameplayStatics_GrassOverlappingSphereCountFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_GrassOverlappingSphereCount_handler\0"));
    if(apiuapi_UGameplayStatics_GrassOverlappingSphereCount){
        apiuapi_UGameplayStatics_GrassOverlappingSphereCount(&uapi_UGameplayStatics_GrassOverlappingSphereCount);
    }

    auto const apiuapi_UGameplayStatics_IsGamePaused = (uapi_UGameplayStatics_IsGamePausedFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_IsGamePaused_handler\0"));
    if(apiuapi_UGameplayStatics_IsGamePaused){
        apiuapi_UGameplayStatics_IsGamePaused(&uapi_UGameplayStatics_IsGamePaused);
    }

    auto const apiuapi_UGameplayStatics_IsSplitscreenForceDisabled = (uapi_UGameplayStatics_IsSplitscreenForceDisabledFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_IsSplitscreenForceDisabled_handler\0"));
    if(apiuapi_UGameplayStatics_IsSplitscreenForceDisabled){
        apiuapi_UGameplayStatics_IsSplitscreenForceDisabled(&uapi_UGameplayStatics_IsSplitscreenForceDisabled);
    }

    auto const apiuapi_UGameplayStatics_OpenLevel = (uapi_UGameplayStatics_OpenLevelFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_OpenLevel_handler\0"));
    if(apiuapi_UGameplayStatics_OpenLevel){
        apiuapi_UGameplayStatics_OpenLevel(&uapi_UGameplayStatics_OpenLevel);
    }

    auto const apiuapi_UGameplayStatics_PlaySound2D = (uapi_UGameplayStatics_PlaySound2DFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_PlaySound2D_handler\0"));
    if(apiuapi_UGameplayStatics_PlaySound2D){
        apiuapi_UGameplayStatics_PlaySound2D(&uapi_UGameplayStatics_PlaySound2D);
    }

    auto const apiuapi_UGameplayStatics_PlaySoundAtLocation = (uapi_UGameplayStatics_PlaySoundAtLocationFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_PlaySoundAtLocation_handler\0"));
    if(apiuapi_UGameplayStatics_PlaySoundAtLocation){
        apiuapi_UGameplayStatics_PlaySoundAtLocation(&uapi_UGameplayStatics_PlaySoundAtLocation);
    }

    auto const apiuapi_UGameplayStatics_PlaySoundAtLocation2 = (uapi_UGameplayStatics_PlaySoundAtLocation2Fn)plugin->GetDllExport(TEXT("set_UGameplayStatics_PlaySoundAtLocation2_handler\0"));
    if(apiuapi_UGameplayStatics_PlaySoundAtLocation2){
        apiuapi_UGameplayStatics_PlaySoundAtLocation2(&uapi_UGameplayStatics_PlaySoundAtLocation2);
    }

    auto const apiuapi_UGameplayStatics_PopSoundMixModifier = (uapi_UGameplayStatics_PopSoundMixModifierFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_PopSoundMixModifier_handler\0"));
    if(apiuapi_UGameplayStatics_PopSoundMixModifier){
        apiuapi_UGameplayStatics_PopSoundMixModifier(&uapi_UGameplayStatics_PopSoundMixModifier);
    }

    auto const apiuapi_UGameplayStatics_PrimeAllSoundsInSoundClass = (uapi_UGameplayStatics_PrimeAllSoundsInSoundClassFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_PrimeAllSoundsInSoundClass_handler\0"));
    if(apiuapi_UGameplayStatics_PrimeAllSoundsInSoundClass){
        apiuapi_UGameplayStatics_PrimeAllSoundsInSoundClass(&uapi_UGameplayStatics_PrimeAllSoundsInSoundClass);
    }

    auto const apiuapi_UGameplayStatics_PrimeSound = (uapi_UGameplayStatics_PrimeSoundFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_PrimeSound_handler\0"));
    if(apiuapi_UGameplayStatics_PrimeSound){
        apiuapi_UGameplayStatics_PrimeSound(&uapi_UGameplayStatics_PrimeSound);
    }

    auto const apiuapi_UGameplayStatics_PushSoundMixModifier = (uapi_UGameplayStatics_PushSoundMixModifierFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_PushSoundMixModifier_handler\0"));
    if(apiuapi_UGameplayStatics_PushSoundMixModifier){
        apiuapi_UGameplayStatics_PushSoundMixModifier(&uapi_UGameplayStatics_PushSoundMixModifier);
    }

    auto const apiuapi_UGameplayStatics_RebaseLocalOriginOntoZero = (uapi_UGameplayStatics_RebaseLocalOriginOntoZeroFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_RebaseLocalOriginOntoZero_handler\0"));
    if(apiuapi_UGameplayStatics_RebaseLocalOriginOntoZero){
        apiuapi_UGameplayStatics_RebaseLocalOriginOntoZero(&uapi_UGameplayStatics_RebaseLocalOriginOntoZero);
    }

    auto const apiuapi_UGameplayStatics_RebaseZeroOriginOntoLocal = (uapi_UGameplayStatics_RebaseZeroOriginOntoLocalFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_RebaseZeroOriginOntoLocal_handler\0"));
    if(apiuapi_UGameplayStatics_RebaseZeroOriginOntoLocal){
        apiuapi_UGameplayStatics_RebaseZeroOriginOntoLocal(&uapi_UGameplayStatics_RebaseZeroOriginOntoLocal);
    }

    auto const apiuapi_UGameplayStatics_RemovePlayer = (uapi_UGameplayStatics_RemovePlayerFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_RemovePlayer_handler\0"));
    if(apiuapi_UGameplayStatics_RemovePlayer){
        apiuapi_UGameplayStatics_RemovePlayer(&uapi_UGameplayStatics_RemovePlayer);
    }

    auto const apiuapi_UGameplayStatics_SetActiveSpatialPluginByName = (uapi_UGameplayStatics_SetActiveSpatialPluginByNameFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_SetActiveSpatialPluginByName_handler\0"));
    if(apiuapi_UGameplayStatics_SetActiveSpatialPluginByName){
        apiuapi_UGameplayStatics_SetActiveSpatialPluginByName(&uapi_UGameplayStatics_SetActiveSpatialPluginByName);
    }

    auto const apiuapi_UGameplayStatics_SetBaseSoundMix = (uapi_UGameplayStatics_SetBaseSoundMixFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_SetBaseSoundMix_handler\0"));
    if(apiuapi_UGameplayStatics_SetBaseSoundMix){
        apiuapi_UGameplayStatics_SetBaseSoundMix(&uapi_UGameplayStatics_SetBaseSoundMix);
    }

    auto const apiuapi_UGameplayStatics_SetEnableWorldRendering = (uapi_UGameplayStatics_SetEnableWorldRenderingFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_SetEnableWorldRendering_handler\0"));
    if(apiuapi_UGameplayStatics_SetEnableWorldRendering){
        apiuapi_UGameplayStatics_SetEnableWorldRendering(&uapi_UGameplayStatics_SetEnableWorldRendering);
    }

    auto const apiuapi_UGameplayStatics_SetForceDisableSplitscreen = (uapi_UGameplayStatics_SetForceDisableSplitscreenFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_SetForceDisableSplitscreen_handler\0"));
    if(apiuapi_UGameplayStatics_SetForceDisableSplitscreen){
        apiuapi_UGameplayStatics_SetForceDisableSplitscreen(&uapi_UGameplayStatics_SetForceDisableSplitscreen);
    }

    auto const apiuapi_UGameplayStatics_SetGamePaused = (uapi_UGameplayStatics_SetGamePausedFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_SetGamePaused_handler\0"));
    if(apiuapi_UGameplayStatics_SetGamePaused){
        apiuapi_UGameplayStatics_SetGamePaused(&uapi_UGameplayStatics_SetGamePaused);
    }

    auto const apiuapi_UGameplayStatics_SetGlobalListenerFocusParameters = (uapi_UGameplayStatics_SetGlobalListenerFocusParametersFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_SetGlobalListenerFocusParameters_handler\0"));
    if(apiuapi_UGameplayStatics_SetGlobalListenerFocusParameters){
        apiuapi_UGameplayStatics_SetGlobalListenerFocusParameters(&uapi_UGameplayStatics_SetGlobalListenerFocusParameters);
    }

    auto const apiuapi_UGameplayStatics_SetGlobalPitchModulation = (uapi_UGameplayStatics_SetGlobalPitchModulationFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_SetGlobalPitchModulation_handler\0"));
    if(apiuapi_UGameplayStatics_SetGlobalPitchModulation){
        apiuapi_UGameplayStatics_SetGlobalPitchModulation(&uapi_UGameplayStatics_SetGlobalPitchModulation);
    }

    auto const apiuapi_UGameplayStatics_SetGlobalTimeDilation = (uapi_UGameplayStatics_SetGlobalTimeDilationFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_SetGlobalTimeDilation_handler\0"));
    if(apiuapi_UGameplayStatics_SetGlobalTimeDilation){
        apiuapi_UGameplayStatics_SetGlobalTimeDilation(&uapi_UGameplayStatics_SetGlobalTimeDilation);
    }

    auto const apiuapi_UGameplayStatics_SetMaxAudioChannelsScaled = (uapi_UGameplayStatics_SetMaxAudioChannelsScaledFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_SetMaxAudioChannelsScaled_handler\0"));
    if(apiuapi_UGameplayStatics_SetMaxAudioChannelsScaled){
        apiuapi_UGameplayStatics_SetMaxAudioChannelsScaled(&uapi_UGameplayStatics_SetMaxAudioChannelsScaled);
    }

    auto const apiuapi_UGameplayStatics_SetPlayerControllerID = (uapi_UGameplayStatics_SetPlayerControllerIDFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_SetPlayerControllerID_handler\0"));
    if(apiuapi_UGameplayStatics_SetPlayerControllerID){
        apiuapi_UGameplayStatics_SetPlayerControllerID(&uapi_UGameplayStatics_SetPlayerControllerID);
    }

    auto const apiuapi_UGameplayStatics_SetSoundClassDistanceScale = (uapi_UGameplayStatics_SetSoundClassDistanceScaleFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_SetSoundClassDistanceScale_handler\0"));
    if(apiuapi_UGameplayStatics_SetSoundClassDistanceScale){
        apiuapi_UGameplayStatics_SetSoundClassDistanceScale(&uapi_UGameplayStatics_SetSoundClassDistanceScale);
    }

    auto const apiuapi_UGameplayStatics_SetSoundMixClassOverride = (uapi_UGameplayStatics_SetSoundMixClassOverrideFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_SetSoundMixClassOverride_handler\0"));
    if(apiuapi_UGameplayStatics_SetSoundMixClassOverride){
        apiuapi_UGameplayStatics_SetSoundMixClassOverride(&uapi_UGameplayStatics_SetSoundMixClassOverride);
    }

    auto const apiuapi_UGameplayStatics_SetSubtitlesEnabled = (uapi_UGameplayStatics_SetSubtitlesEnabledFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_SetSubtitlesEnabled_handler\0"));
    if(apiuapi_UGameplayStatics_SetSubtitlesEnabled){
        apiuapi_UGameplayStatics_SetSubtitlesEnabled(&uapi_UGameplayStatics_SetSubtitlesEnabled);
    }

    auto const apiuapi_UGameplayStatics_SpawnDecalAtLocation = (uapi_UGameplayStatics_SpawnDecalAtLocationFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_SpawnDecalAtLocation_handler\0"));
    if(apiuapi_UGameplayStatics_SpawnDecalAtLocation){
        apiuapi_UGameplayStatics_SpawnDecalAtLocation(&uapi_UGameplayStatics_SpawnDecalAtLocation);
    }

    auto const apiuapi_UGameplayStatics_SpawnForceFeedbackAtLocation = (uapi_UGameplayStatics_SpawnForceFeedbackAtLocationFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_SpawnForceFeedbackAtLocation_handler\0"));
    if(apiuapi_UGameplayStatics_SpawnForceFeedbackAtLocation){
        apiuapi_UGameplayStatics_SpawnForceFeedbackAtLocation(&uapi_UGameplayStatics_SpawnForceFeedbackAtLocation);
    }

    auto const apiuapi_UGameplayStatics_SpawnSound2D = (uapi_UGameplayStatics_SpawnSound2DFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_SpawnSound2D_handler\0"));
    if(apiuapi_UGameplayStatics_SpawnSound2D){
        apiuapi_UGameplayStatics_SpawnSound2D(&uapi_UGameplayStatics_SpawnSound2D);
    }

    auto const apiuapi_UGameplayStatics_SpawnSoundAtLocation = (uapi_UGameplayStatics_SpawnSoundAtLocationFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_SpawnSoundAtLocation_handler\0"));
    if(apiuapi_UGameplayStatics_SpawnSoundAtLocation){
        apiuapi_UGameplayStatics_SpawnSoundAtLocation(&uapi_UGameplayStatics_SpawnSoundAtLocation);
    }

    auto const apiuapi_UGameplayStatics_UnRetainAllSoundsInSoundClass = (uapi_UGameplayStatics_UnRetainAllSoundsInSoundClassFn)plugin->GetDllExport(TEXT("set_UGameplayStatics_UnRetainAllSoundsInSoundClass_handler\0"));
    if(apiuapi_UGameplayStatics_UnRetainAllSoundsInSoundClass){
        apiuapi_UGameplayStatics_UnRetainAllSoundsInSoundClass(&uapi_UGameplayStatics_UnRetainAllSoundsInSoundClass);
    }

    auto const apiuapi_ACharacter_BeginPlay = (uapi_ACharacter_BeginPlayFn)plugin->GetDllExport(TEXT("set_ACharacter_BeginPlay_handler\0"));
    if(apiuapi_ACharacter_BeginPlay){
        apiuapi_ACharacter_BeginPlay(&uapi_ACharacter_BeginPlay);
    }

    auto const apiuapi_ACharacter_CacheInitialMeshOffset = (uapi_ACharacter_CacheInitialMeshOffsetFn)plugin->GetDllExport(TEXT("set_ACharacter_CacheInitialMeshOffset_handler\0"));
    if(apiuapi_ACharacter_CacheInitialMeshOffset){
        apiuapi_ACharacter_CacheInitialMeshOffset(&uapi_ACharacter_CacheInitialMeshOffset);
    }

    auto const apiuapi_ACharacter_CanCrouch = (uapi_ACharacter_CanCrouchFn)plugin->GetDllExport(TEXT("set_ACharacter_CanCrouch_handler\0"));
    if(apiuapi_ACharacter_CanCrouch){
        apiuapi_ACharacter_CanCrouch(&uapi_ACharacter_CanCrouch);
    }

    auto const apiuapi_ACharacter_CanJump = (uapi_ACharacter_CanJumpFn)plugin->GetDllExport(TEXT("set_ACharacter_CanJump_handler\0"));
    if(apiuapi_ACharacter_CanJump){
        apiuapi_ACharacter_CanJump(&uapi_ACharacter_CanJump);
    }

    auto const apiuapi_ACharacter_CheckJumpInput = (uapi_ACharacter_CheckJumpInputFn)plugin->GetDllExport(TEXT("set_ACharacter_CheckJumpInput_handler\0"));
    if(apiuapi_ACharacter_CheckJumpInput){
        apiuapi_ACharacter_CheckJumpInput(&uapi_ACharacter_CheckJumpInput);
    }

    auto const apiuapi_ACharacter_ClearCrossLevelReferences = (uapi_ACharacter_ClearCrossLevelReferencesFn)plugin->GetDllExport(TEXT("set_ACharacter_ClearCrossLevelReferences_handler\0"));
    if(apiuapi_ACharacter_ClearCrossLevelReferences){
        apiuapi_ACharacter_ClearCrossLevelReferences(&uapi_ACharacter_ClearCrossLevelReferences);
    }

    auto const apiuapi_ACharacter_ClearJumpInput = (uapi_ACharacter_ClearJumpInputFn)plugin->GetDllExport(TEXT("set_ACharacter_ClearJumpInput_handler\0"));
    if(apiuapi_ACharacter_ClearJumpInput){
        apiuapi_ACharacter_ClearJumpInput(&uapi_ACharacter_ClearJumpInput);
    }

    auto const apiuapi_ACharacter_ClientAckGoodMove = (uapi_ACharacter_ClientAckGoodMoveFn)plugin->GetDllExport(TEXT("set_ACharacter_ClientAckGoodMove_handler\0"));
    if(apiuapi_ACharacter_ClientAckGoodMove){
        apiuapi_ACharacter_ClientAckGoodMove(&uapi_ACharacter_ClientAckGoodMove);
    }

    auto const apiuapi_ACharacter_ClientAckGoodMove_Implementation = (uapi_ACharacter_ClientAckGoodMove_ImplementationFn)plugin->GetDllExport(TEXT("set_ACharacter_ClientAckGoodMove_Implementation_handler\0"));
    if(apiuapi_ACharacter_ClientAckGoodMove_Implementation){
        apiuapi_ACharacter_ClientAckGoodMove_Implementation(&uapi_ACharacter_ClientAckGoodMove_Implementation);
    }

    auto const apiuapi_ACharacter_ClientAdjustPosition = (uapi_ACharacter_ClientAdjustPositionFn)plugin->GetDllExport(TEXT("set_ACharacter_ClientAdjustPosition_handler\0"));
    if(apiuapi_ACharacter_ClientAdjustPosition){
        apiuapi_ACharacter_ClientAdjustPosition(&uapi_ACharacter_ClientAdjustPosition);
    }

    auto const apiuapi_ACharacter_ClientAdjustPosition_Implementation = (uapi_ACharacter_ClientAdjustPosition_ImplementationFn)plugin->GetDllExport(TEXT("set_ACharacter_ClientAdjustPosition_Implementation_handler\0"));
    if(apiuapi_ACharacter_ClientAdjustPosition_Implementation){
        apiuapi_ACharacter_ClientAdjustPosition_Implementation(&uapi_ACharacter_ClientAdjustPosition_Implementation);
    }

    auto const apiuapi_ACharacter_ClientCheatFly = (uapi_ACharacter_ClientCheatFlyFn)plugin->GetDllExport(TEXT("set_ACharacter_ClientCheatFly_handler\0"));
    if(apiuapi_ACharacter_ClientCheatFly){
        apiuapi_ACharacter_ClientCheatFly(&uapi_ACharacter_ClientCheatFly);
    }

    auto const apiuapi_ACharacter_ClientCheatFly_Implementation = (uapi_ACharacter_ClientCheatFly_ImplementationFn)plugin->GetDllExport(TEXT("set_ACharacter_ClientCheatFly_Implementation_handler\0"));
    if(apiuapi_ACharacter_ClientCheatFly_Implementation){
        apiuapi_ACharacter_ClientCheatFly_Implementation(&uapi_ACharacter_ClientCheatFly_Implementation);
    }

    auto const apiuapi_ACharacter_ClientCheatGhost = (uapi_ACharacter_ClientCheatGhostFn)plugin->GetDllExport(TEXT("set_ACharacter_ClientCheatGhost_handler\0"));
    if(apiuapi_ACharacter_ClientCheatGhost){
        apiuapi_ACharacter_ClientCheatGhost(&uapi_ACharacter_ClientCheatGhost);
    }

    auto const apiuapi_ACharacter_ClientCheatGhost_Implementation = (uapi_ACharacter_ClientCheatGhost_ImplementationFn)plugin->GetDllExport(TEXT("set_ACharacter_ClientCheatGhost_Implementation_handler\0"));
    if(apiuapi_ACharacter_ClientCheatGhost_Implementation){
        apiuapi_ACharacter_ClientCheatGhost_Implementation(&uapi_ACharacter_ClientCheatGhost_Implementation);
    }

    auto const apiuapi_ACharacter_ClientCheatWalk = (uapi_ACharacter_ClientCheatWalkFn)plugin->GetDllExport(TEXT("set_ACharacter_ClientCheatWalk_handler\0"));
    if(apiuapi_ACharacter_ClientCheatWalk){
        apiuapi_ACharacter_ClientCheatWalk(&uapi_ACharacter_ClientCheatWalk);
    }

    auto const apiuapi_ACharacter_ClientCheatWalk_Implementation = (uapi_ACharacter_ClientCheatWalk_ImplementationFn)plugin->GetDllExport(TEXT("set_ACharacter_ClientCheatWalk_Implementation_handler\0"));
    if(apiuapi_ACharacter_ClientCheatWalk_Implementation){
        apiuapi_ACharacter_ClientCheatWalk_Implementation(&uapi_ACharacter_ClientCheatWalk_Implementation);
    }

    auto const apiuapi_ACharacter_ClientVeryShortAdjustPosition = (uapi_ACharacter_ClientVeryShortAdjustPositionFn)plugin->GetDllExport(TEXT("set_ACharacter_ClientVeryShortAdjustPosition_handler\0"));
    if(apiuapi_ACharacter_ClientVeryShortAdjustPosition){
        apiuapi_ACharacter_ClientVeryShortAdjustPosition(&uapi_ACharacter_ClientVeryShortAdjustPosition);
    }

    auto const apiuapi_ACharacter_ClientVeryShortAdjustPosition_Implementation = (uapi_ACharacter_ClientVeryShortAdjustPosition_ImplementationFn)plugin->GetDllExport(TEXT("set_ACharacter_ClientVeryShortAdjustPosition_Implementation_handler\0"));
    if(apiuapi_ACharacter_ClientVeryShortAdjustPosition_Implementation){
        apiuapi_ACharacter_ClientVeryShortAdjustPosition_Implementation(&uapi_ACharacter_ClientVeryShortAdjustPosition_Implementation);
    }

    auto const apiuapi_ACharacter_Crouch = (uapi_ACharacter_CrouchFn)plugin->GetDllExport(TEXT("set_ACharacter_Crouch_handler\0"));
    if(apiuapi_ACharacter_Crouch){
        apiuapi_ACharacter_Crouch(&uapi_ACharacter_Crouch);
    }

    auto const apiuapi_ACharacter_Falling = (uapi_ACharacter_FallingFn)plugin->GetDllExport(TEXT("set_ACharacter_Falling_handler\0"));
    if(apiuapi_ACharacter_Falling){
        apiuapi_ACharacter_Falling(&uapi_ACharacter_Falling);
    }

    auto const apiuapi_ACharacter_GetAnimRootMotionTranslationScale = (uapi_ACharacter_GetAnimRootMotionTranslationScaleFn)plugin->GetDllExport(TEXT("set_ACharacter_GetAnimRootMotionTranslationScale_handler\0"));
    if(apiuapi_ACharacter_GetAnimRootMotionTranslationScale){
        apiuapi_ACharacter_GetAnimRootMotionTranslationScale(&uapi_ACharacter_GetAnimRootMotionTranslationScale);
    }

    auto const apiuapi_ACharacter_GetArrowComponent = (uapi_ACharacter_GetArrowComponentFn)plugin->GetDllExport(TEXT("set_ACharacter_GetArrowComponent_handler\0"));
    if(apiuapi_ACharacter_GetArrowComponent){
        apiuapi_ACharacter_GetArrowComponent(&uapi_ACharacter_GetArrowComponent);
    }

    auto const apiuapi_ACharacter_GetBaseRotationOffset = (uapi_ACharacter_GetBaseRotationOffsetFn)plugin->GetDllExport(TEXT("set_ACharacter_GetBaseRotationOffset_handler\0"));
    if(apiuapi_ACharacter_GetBaseRotationOffset){
        apiuapi_ACharacter_GetBaseRotationOffset(&uapi_ACharacter_GetBaseRotationOffset);
    }

    auto const apiuapi_ACharacter_GetBaseRotationOffsetRotator = (uapi_ACharacter_GetBaseRotationOffsetRotatorFn)plugin->GetDllExport(TEXT("set_ACharacter_GetBaseRotationOffsetRotator_handler\0"));
    if(apiuapi_ACharacter_GetBaseRotationOffsetRotator){
        apiuapi_ACharacter_GetBaseRotationOffsetRotator(&uapi_ACharacter_GetBaseRotationOffsetRotator);
    }

    auto const apiuapi_ACharacter_GetBaseTranslationOffset = (uapi_ACharacter_GetBaseTranslationOffsetFn)plugin->GetDllExport(TEXT("set_ACharacter_GetBaseTranslationOffset_handler\0"));
    if(apiuapi_ACharacter_GetBaseTranslationOffset){
        apiuapi_ACharacter_GetBaseTranslationOffset(&uapi_ACharacter_GetBaseTranslationOffset);
    }

    auto const apiuapi_ACharacter_GetCapsuleComponent = (uapi_ACharacter_GetCapsuleComponentFn)plugin->GetDllExport(TEXT("set_ACharacter_GetCapsuleComponent_handler\0"));
    if(apiuapi_ACharacter_GetCapsuleComponent){
        apiuapi_ACharacter_GetCapsuleComponent(&uapi_ACharacter_GetCapsuleComponent);
    }

    auto const apiuapi_ACharacter_GetCharacterMovement = (uapi_ACharacter_GetCharacterMovementFn)plugin->GetDllExport(TEXT("set_ACharacter_GetCharacterMovement_handler\0"));
    if(apiuapi_ACharacter_GetCharacterMovement){
        apiuapi_ACharacter_GetCharacterMovement(&uapi_ACharacter_GetCharacterMovement);
    }

    auto const apiuapi_ACharacter_GetCurrentMontage = (uapi_ACharacter_GetCurrentMontageFn)plugin->GetDllExport(TEXT("set_ACharacter_GetCurrentMontage_handler\0"));
    if(apiuapi_ACharacter_GetCurrentMontage){
        apiuapi_ACharacter_GetCurrentMontage(&uapi_ACharacter_GetCurrentMontage);
    }

    auto const apiuapi_ACharacter_GetDefaultHalfHeight = (uapi_ACharacter_GetDefaultHalfHeightFn)plugin->GetDllExport(TEXT("set_ACharacter_GetDefaultHalfHeight_handler\0"));
    if(apiuapi_ACharacter_GetDefaultHalfHeight){
        apiuapi_ACharacter_GetDefaultHalfHeight(&uapi_ACharacter_GetDefaultHalfHeight);
    }

    auto const apiuapi_ACharacter_GetJumpMaxHoldTime = (uapi_ACharacter_GetJumpMaxHoldTimeFn)plugin->GetDllExport(TEXT("set_ACharacter_GetJumpMaxHoldTime_handler\0"));
    if(apiuapi_ACharacter_GetJumpMaxHoldTime){
        apiuapi_ACharacter_GetJumpMaxHoldTime(&uapi_ACharacter_GetJumpMaxHoldTime);
    }

    auto const apiuapi_ACharacter_GetMesh = (uapi_ACharacter_GetMeshFn)plugin->GetDllExport(TEXT("set_ACharacter_GetMesh_handler\0"));
    if(apiuapi_ACharacter_GetMesh){
        apiuapi_ACharacter_GetMesh(&uapi_ACharacter_GetMesh);
    }

    auto const apiuapi_ACharacter_GetMovementBase = (uapi_ACharacter_GetMovementBaseFn)plugin->GetDllExport(TEXT("set_ACharacter_GetMovementBase_handler\0"));
    if(apiuapi_ACharacter_GetMovementBase){
        apiuapi_ACharacter_GetMovementBase(&uapi_ACharacter_GetMovementBase);
    }

    auto const apiuapi_ACharacter_GetMovementComponent = (uapi_ACharacter_GetMovementComponentFn)plugin->GetDllExport(TEXT("set_ACharacter_GetMovementComponent_handler\0"));
    if(apiuapi_ACharacter_GetMovementComponent){
        apiuapi_ACharacter_GetMovementComponent(&uapi_ACharacter_GetMovementComponent);
    }

    auto const apiuapi_ACharacter_GetNavAgentLocation = (uapi_ACharacter_GetNavAgentLocationFn)plugin->GetDllExport(TEXT("set_ACharacter_GetNavAgentLocation_handler\0"));
    if(apiuapi_ACharacter_GetNavAgentLocation){
        apiuapi_ACharacter_GetNavAgentLocation(&uapi_ACharacter_GetNavAgentLocation);
    }

    auto const apiuapi_ACharacter_GetReplicatedMovementMode = (uapi_ACharacter_GetReplicatedMovementModeFn)plugin->GetDllExport(TEXT("set_ACharacter_GetReplicatedMovementMode_handler\0"));
    if(apiuapi_ACharacter_GetReplicatedMovementMode){
        apiuapi_ACharacter_GetReplicatedMovementMode(&uapi_ACharacter_GetReplicatedMovementMode);
    }

    auto const apiuapi_ACharacter_GetReplicatedServerLastTransformUpdateTimeStamp = (uapi_ACharacter_GetReplicatedServerLastTransformUpdateTimeStampFn)plugin->GetDllExport(TEXT("set_ACharacter_GetReplicatedServerLastTransformUpdateTimeStamp_handler\0"));
    if(apiuapi_ACharacter_GetReplicatedServerLastTransformUpdateTimeStamp){
        apiuapi_ACharacter_GetReplicatedServerLastTransformUpdateTimeStamp(&uapi_ACharacter_GetReplicatedServerLastTransformUpdateTimeStamp);
    }

    auto const apiuapi_ACharacter_GetRootMotionAnimMontageInstance = (uapi_ACharacter_GetRootMotionAnimMontageInstanceFn)plugin->GetDllExport(TEXT("set_ACharacter_GetRootMotionAnimMontageInstance_handler\0"));
    if(apiuapi_ACharacter_GetRootMotionAnimMontageInstance){
        apiuapi_ACharacter_GetRootMotionAnimMontageInstance(&uapi_ACharacter_GetRootMotionAnimMontageInstance);
    }

    auto const apiuapi_ACharacter_GetSimpleCollisionCylinder = (uapi_ACharacter_GetSimpleCollisionCylinderFn)plugin->GetDllExport(TEXT("set_ACharacter_GetSimpleCollisionCylinder_handler\0"));
    if(apiuapi_ACharacter_GetSimpleCollisionCylinder){
        apiuapi_ACharacter_GetSimpleCollisionCylinder(&uapi_ACharacter_GetSimpleCollisionCylinder);
    }

    auto const apiuapi_ACharacter_HasAnyRootMotion = (uapi_ACharacter_HasAnyRootMotionFn)plugin->GetDllExport(TEXT("set_ACharacter_HasAnyRootMotion_handler\0"));
    if(apiuapi_ACharacter_HasAnyRootMotion){
        apiuapi_ACharacter_HasAnyRootMotion(&uapi_ACharacter_HasAnyRootMotion);
    }

    auto const apiuapi_ACharacter_IsJumpProvidingForce = (uapi_ACharacter_IsJumpProvidingForceFn)plugin->GetDllExport(TEXT("set_ACharacter_IsJumpProvidingForce_handler\0"));
    if(apiuapi_ACharacter_IsJumpProvidingForce){
        apiuapi_ACharacter_IsJumpProvidingForce(&uapi_ACharacter_IsJumpProvidingForce);
    }

    auto const apiuapi_ACharacter_IsPlayingNetworkedRootMotionMontage = (uapi_ACharacter_IsPlayingNetworkedRootMotionMontageFn)plugin->GetDllExport(TEXT("set_ACharacter_IsPlayingNetworkedRootMotionMontage_handler\0"));
    if(apiuapi_ACharacter_IsPlayingNetworkedRootMotionMontage){
        apiuapi_ACharacter_IsPlayingNetworkedRootMotionMontage(&uapi_ACharacter_IsPlayingNetworkedRootMotionMontage);
    }

    auto const apiuapi_ACharacter_IsPlayingRootMotion = (uapi_ACharacter_IsPlayingRootMotionFn)plugin->GetDllExport(TEXT("set_ACharacter_IsPlayingRootMotion_handler\0"));
    if(apiuapi_ACharacter_IsPlayingRootMotion){
        apiuapi_ACharacter_IsPlayingRootMotion(&uapi_ACharacter_IsPlayingRootMotion);
    }

    auto const apiuapi_ACharacter_Jump = (uapi_ACharacter_JumpFn)plugin->GetDllExport(TEXT("set_ACharacter_Jump_handler\0"));
    if(apiuapi_ACharacter_Jump){
        apiuapi_ACharacter_Jump(&uapi_ACharacter_Jump);
    }

    auto const apiuapi_ACharacter_K2_OnEndCrouch = (uapi_ACharacter_K2_OnEndCrouchFn)plugin->GetDllExport(TEXT("set_ACharacter_K2_OnEndCrouch_handler\0"));
    if(apiuapi_ACharacter_K2_OnEndCrouch){
        apiuapi_ACharacter_K2_OnEndCrouch(&uapi_ACharacter_K2_OnEndCrouch);
    }

    auto const apiuapi_ACharacter_K2_OnStartCrouch = (uapi_ACharacter_K2_OnStartCrouchFn)plugin->GetDllExport(TEXT("set_ACharacter_K2_OnStartCrouch_handler\0"));
    if(apiuapi_ACharacter_K2_OnStartCrouch){
        apiuapi_ACharacter_K2_OnStartCrouch(&uapi_ACharacter_K2_OnStartCrouch);
    }

    auto const apiuapi_ACharacter_K2_UpdateCustomMovement = (uapi_ACharacter_K2_UpdateCustomMovementFn)plugin->GetDllExport(TEXT("set_ACharacter_K2_UpdateCustomMovement_handler\0"));
    if(apiuapi_ACharacter_K2_UpdateCustomMovement){
        apiuapi_ACharacter_K2_UpdateCustomMovement(&uapi_ACharacter_K2_UpdateCustomMovement);
    }

    auto const apiuapi_ACharacter_LaunchCharacter = (uapi_ACharacter_LaunchCharacterFn)plugin->GetDllExport(TEXT("set_ACharacter_LaunchCharacter_handler\0"));
    if(apiuapi_ACharacter_LaunchCharacter){
        apiuapi_ACharacter_LaunchCharacter(&uapi_ACharacter_LaunchCharacter);
    }

    auto const apiuapi_ACharacter_NotifyActorBeginOverlap = (uapi_ACharacter_NotifyActorBeginOverlapFn)plugin->GetDllExport(TEXT("set_ACharacter_NotifyActorBeginOverlap_handler\0"));
    if(apiuapi_ACharacter_NotifyActorBeginOverlap){
        apiuapi_ACharacter_NotifyActorBeginOverlap(&uapi_ACharacter_NotifyActorBeginOverlap);
    }

    auto const apiuapi_ACharacter_NotifyActorEndOverlap = (uapi_ACharacter_NotifyActorEndOverlapFn)plugin->GetDllExport(TEXT("set_ACharacter_NotifyActorEndOverlap_handler\0"));
    if(apiuapi_ACharacter_NotifyActorEndOverlap){
        apiuapi_ACharacter_NotifyActorEndOverlap(&uapi_ACharacter_NotifyActorEndOverlap);
    }

    auto const apiuapi_ACharacter_NotifyJumpApex = (uapi_ACharacter_NotifyJumpApexFn)plugin->GetDllExport(TEXT("set_ACharacter_NotifyJumpApex_handler\0"));
    if(apiuapi_ACharacter_NotifyJumpApex){
        apiuapi_ACharacter_NotifyJumpApex(&uapi_ACharacter_NotifyJumpApex);
    }

    auto const apiuapi_ACharacter_OnEndCrouch = (uapi_ACharacter_OnEndCrouchFn)plugin->GetDllExport(TEXT("set_ACharacter_OnEndCrouch_handler\0"));
    if(apiuapi_ACharacter_OnEndCrouch){
        apiuapi_ACharacter_OnEndCrouch(&uapi_ACharacter_OnEndCrouch);
    }

    auto const apiuapi_ACharacter_OnJumped = (uapi_ACharacter_OnJumpedFn)plugin->GetDllExport(TEXT("set_ACharacter_OnJumped_handler\0"));
    if(apiuapi_ACharacter_OnJumped){
        apiuapi_ACharacter_OnJumped(&uapi_ACharacter_OnJumped);
    }

    auto const apiuapi_ACharacter_OnJumped_Implementation = (uapi_ACharacter_OnJumped_ImplementationFn)plugin->GetDllExport(TEXT("set_ACharacter_OnJumped_Implementation_handler\0"));
    if(apiuapi_ACharacter_OnJumped_Implementation){
        apiuapi_ACharacter_OnJumped_Implementation(&uapi_ACharacter_OnJumped_Implementation);
    }

    auto const apiuapi_ACharacter_OnLaunched = (uapi_ACharacter_OnLaunchedFn)plugin->GetDllExport(TEXT("set_ACharacter_OnLaunched_handler\0"));
    if(apiuapi_ACharacter_OnLaunched){
        apiuapi_ACharacter_OnLaunched(&uapi_ACharacter_OnLaunched);
    }

    auto const apiuapi_ACharacter_OnRep_IsCrouched = (uapi_ACharacter_OnRep_IsCrouchedFn)plugin->GetDllExport(TEXT("set_ACharacter_OnRep_IsCrouched_handler\0"));
    if(apiuapi_ACharacter_OnRep_IsCrouched){
        apiuapi_ACharacter_OnRep_IsCrouched(&uapi_ACharacter_OnRep_IsCrouched);
    }

    auto const apiuapi_ACharacter_OnRep_ReplayLastTransformUpdateTimeStamp = (uapi_ACharacter_OnRep_ReplayLastTransformUpdateTimeStampFn)plugin->GetDllExport(TEXT("set_ACharacter_OnRep_ReplayLastTransformUpdateTimeStamp_handler\0"));
    if(apiuapi_ACharacter_OnRep_ReplayLastTransformUpdateTimeStamp){
        apiuapi_ACharacter_OnRep_ReplayLastTransformUpdateTimeStamp(&uapi_ACharacter_OnRep_ReplayLastTransformUpdateTimeStamp);
    }

    auto const apiuapi_ACharacter_OnRep_ReplicatedBasedMovement = (uapi_ACharacter_OnRep_ReplicatedBasedMovementFn)plugin->GetDllExport(TEXT("set_ACharacter_OnRep_ReplicatedBasedMovement_handler\0"));
    if(apiuapi_ACharacter_OnRep_ReplicatedBasedMovement){
        apiuapi_ACharacter_OnRep_ReplicatedBasedMovement(&uapi_ACharacter_OnRep_ReplicatedBasedMovement);
    }

    auto const apiuapi_ACharacter_OnRep_ReplicatedMovement = (uapi_ACharacter_OnRep_ReplicatedMovementFn)plugin->GetDllExport(TEXT("set_ACharacter_OnRep_ReplicatedMovement_handler\0"));
    if(apiuapi_ACharacter_OnRep_ReplicatedMovement){
        apiuapi_ACharacter_OnRep_ReplicatedMovement(&uapi_ACharacter_OnRep_ReplicatedMovement);
    }

    auto const apiuapi_ACharacter_OnRep_RootMotion = (uapi_ACharacter_OnRep_RootMotionFn)plugin->GetDllExport(TEXT("set_ACharacter_OnRep_RootMotion_handler\0"));
    if(apiuapi_ACharacter_OnRep_RootMotion){
        apiuapi_ACharacter_OnRep_RootMotion(&uapi_ACharacter_OnRep_RootMotion);
    }

    auto const apiuapi_ACharacter_OnStartCrouch = (uapi_ACharacter_OnStartCrouchFn)plugin->GetDllExport(TEXT("set_ACharacter_OnStartCrouch_handler\0"));
    if(apiuapi_ACharacter_OnStartCrouch){
        apiuapi_ACharacter_OnStartCrouch(&uapi_ACharacter_OnStartCrouch);
    }

    auto const apiuapi_ACharacter_PawnClientRestart = (uapi_ACharacter_PawnClientRestartFn)plugin->GetDllExport(TEXT("set_ACharacter_PawnClientRestart_handler\0"));
    if(apiuapi_ACharacter_PawnClientRestart){
        apiuapi_ACharacter_PawnClientRestart(&uapi_ACharacter_PawnClientRestart);
    }

    auto const apiuapi_ACharacter_PlayAnimMontage = (uapi_ACharacter_PlayAnimMontageFn)plugin->GetDllExport(TEXT("set_ACharacter_PlayAnimMontage_handler\0"));
    if(apiuapi_ACharacter_PlayAnimMontage){
        apiuapi_ACharacter_PlayAnimMontage(&uapi_ACharacter_PlayAnimMontage);
    }

    auto const apiuapi_ACharacter_PossessedBy = (uapi_ACharacter_PossessedByFn)plugin->GetDllExport(TEXT("set_ACharacter_PossessedBy_handler\0"));
    if(apiuapi_ACharacter_PossessedBy){
        apiuapi_ACharacter_PossessedBy(&uapi_ACharacter_PossessedBy);
    }

    auto const apiuapi_ACharacter_PostInitializeComponents = (uapi_ACharacter_PostInitializeComponentsFn)plugin->GetDllExport(TEXT("set_ACharacter_PostInitializeComponents_handler\0"));
    if(apiuapi_ACharacter_PostInitializeComponents){
        apiuapi_ACharacter_PostInitializeComponents(&uapi_ACharacter_PostInitializeComponents);
    }

    auto const apiuapi_ACharacter_PostLoad = (uapi_ACharacter_PostLoadFn)plugin->GetDllExport(TEXT("set_ACharacter_PostLoad_handler\0"));
    if(apiuapi_ACharacter_PostLoad){
        apiuapi_ACharacter_PostLoad(&uapi_ACharacter_PostLoad);
    }

    auto const apiuapi_ACharacter_PostNetReceive = (uapi_ACharacter_PostNetReceiveFn)plugin->GetDllExport(TEXT("set_ACharacter_PostNetReceive_handler\0"));
    if(apiuapi_ACharacter_PostNetReceive){
        apiuapi_ACharacter_PostNetReceive(&uapi_ACharacter_PostNetReceive);
    }

    auto const apiuapi_ACharacter_PostNetReceiveLocationAndRotation = (uapi_ACharacter_PostNetReceiveLocationAndRotationFn)plugin->GetDllExport(TEXT("set_ACharacter_PostNetReceiveLocationAndRotation_handler\0"));
    if(apiuapi_ACharacter_PostNetReceiveLocationAndRotation){
        apiuapi_ACharacter_PostNetReceiveLocationAndRotation(&uapi_ACharacter_PostNetReceiveLocationAndRotation);
    }

    auto const apiuapi_ACharacter_PreNetReceive = (uapi_ACharacter_PreNetReceiveFn)plugin->GetDllExport(TEXT("set_ACharacter_PreNetReceive_handler\0"));
    if(apiuapi_ACharacter_PreNetReceive){
        apiuapi_ACharacter_PreNetReceive(&uapi_ACharacter_PreNetReceive);
    }

    auto const apiuapi_ACharacter_RecalculateBaseEyeHeight = (uapi_ACharacter_RecalculateBaseEyeHeightFn)plugin->GetDllExport(TEXT("set_ACharacter_RecalculateBaseEyeHeight_handler\0"));
    if(apiuapi_ACharacter_RecalculateBaseEyeHeight){
        apiuapi_ACharacter_RecalculateBaseEyeHeight(&uapi_ACharacter_RecalculateBaseEyeHeight);
    }

    auto const apiuapi_ACharacter_RecalculateCrouchedEyeHeight = (uapi_ACharacter_RecalculateCrouchedEyeHeightFn)plugin->GetDllExport(TEXT("set_ACharacter_RecalculateCrouchedEyeHeight_handler\0"));
    if(apiuapi_ACharacter_RecalculateCrouchedEyeHeight){
        apiuapi_ACharacter_RecalculateCrouchedEyeHeight(&uapi_ACharacter_RecalculateCrouchedEyeHeight);
    }

    auto const apiuapi_ACharacter_ResetJumpState = (uapi_ACharacter_ResetJumpStateFn)plugin->GetDllExport(TEXT("set_ACharacter_ResetJumpState_handler\0"));
    if(apiuapi_ACharacter_ResetJumpState){
        apiuapi_ACharacter_ResetJumpState(&uapi_ACharacter_ResetJumpState);
    }

    auto const apiuapi_ACharacter_Restart = (uapi_ACharacter_RestartFn)plugin->GetDllExport(TEXT("set_ACharacter_Restart_handler\0"));
    if(apiuapi_ACharacter_Restart){
        apiuapi_ACharacter_Restart(&uapi_ACharacter_Restart);
    }

    auto const apiuapi_ACharacter_SetAnimRootMotionTranslationScale = (uapi_ACharacter_SetAnimRootMotionTranslationScaleFn)plugin->GetDllExport(TEXT("set_ACharacter_SetAnimRootMotionTranslationScale_handler\0"));
    if(apiuapi_ACharacter_SetAnimRootMotionTranslationScale){
        apiuapi_ACharacter_SetAnimRootMotionTranslationScale(&uapi_ACharacter_SetAnimRootMotionTranslationScale);
    }

    auto const apiuapi_ACharacter_SetBase = (uapi_ACharacter_SetBaseFn)plugin->GetDllExport(TEXT("set_ACharacter_SetBase_handler\0"));
    if(apiuapi_ACharacter_SetBase){
        apiuapi_ACharacter_SetBase(&uapi_ACharacter_SetBase);
    }

    auto const apiuapi_ACharacter_SetReplicateMovement = (uapi_ACharacter_SetReplicateMovementFn)plugin->GetDllExport(TEXT("set_ACharacter_SetReplicateMovement_handler\0"));
    if(apiuapi_ACharacter_SetReplicateMovement){
        apiuapi_ACharacter_SetReplicateMovement(&uapi_ACharacter_SetReplicateMovement);
    }

    auto const apiuapi_ACharacter_SetupPlayerInputComponent = (uapi_ACharacter_SetupPlayerInputComponentFn)plugin->GetDllExport(TEXT("set_ACharacter_SetupPlayerInputComponent_handler\0"));
    if(apiuapi_ACharacter_SetupPlayerInputComponent){
        apiuapi_ACharacter_SetupPlayerInputComponent(&uapi_ACharacter_SetupPlayerInputComponent);
    }

    auto const apiuapi_ACharacter_SimulatedRootMotionPositionFixup = (uapi_ACharacter_SimulatedRootMotionPositionFixupFn)plugin->GetDllExport(TEXT("set_ACharacter_SimulatedRootMotionPositionFixup_handler\0"));
    if(apiuapi_ACharacter_SimulatedRootMotionPositionFixup){
        apiuapi_ACharacter_SimulatedRootMotionPositionFixup(&uapi_ACharacter_SimulatedRootMotionPositionFixup);
    }

    auto const apiuapi_ACharacter_StopAnimMontage = (uapi_ACharacter_StopAnimMontageFn)plugin->GetDllExport(TEXT("set_ACharacter_StopAnimMontage_handler\0"));
    if(apiuapi_ACharacter_StopAnimMontage){
        apiuapi_ACharacter_StopAnimMontage(&uapi_ACharacter_StopAnimMontage);
    }

    auto const apiuapi_ACharacter_StopJumping = (uapi_ACharacter_StopJumpingFn)plugin->GetDllExport(TEXT("set_ACharacter_StopJumping_handler\0"));
    if(apiuapi_ACharacter_StopJumping){
        apiuapi_ACharacter_StopJumping(&uapi_ACharacter_StopJumping);
    }

    auto const apiuapi_ACharacter_TornOff = (uapi_ACharacter_TornOffFn)plugin->GetDllExport(TEXT("set_ACharacter_TornOff_handler\0"));
    if(apiuapi_ACharacter_TornOff){
        apiuapi_ACharacter_TornOff(&uapi_ACharacter_TornOff);
    }

    auto const apiuapi_ACharacter_TurnOff = (uapi_ACharacter_TurnOffFn)plugin->GetDllExport(TEXT("set_ACharacter_TurnOff_handler\0"));
    if(apiuapi_ACharacter_TurnOff){
        apiuapi_ACharacter_TurnOff(&uapi_ACharacter_TurnOff);
    }

    auto const apiuapi_ACharacter_UnCrouch = (uapi_ACharacter_UnCrouchFn)plugin->GetDllExport(TEXT("set_ACharacter_UnCrouch_handler\0"));
    if(apiuapi_ACharacter_UnCrouch){
        apiuapi_ACharacter_UnCrouch(&uapi_ACharacter_UnCrouch);
    }

    auto const apiuapi_ACharacter_UnPossessed = (uapi_ACharacter_UnPossessedFn)plugin->GetDllExport(TEXT("set_ACharacter_UnPossessed_handler\0"));
    if(apiuapi_ACharacter_UnPossessed){
        apiuapi_ACharacter_UnPossessed(&uapi_ACharacter_UnPossessed);
    }

    auto const apiuapi_ACharacter_UpdateNavigationRelevance = (uapi_ACharacter_UpdateNavigationRelevanceFn)plugin->GetDllExport(TEXT("set_ACharacter_UpdateNavigationRelevance_handler\0"));
    if(apiuapi_ACharacter_UpdateNavigationRelevance){
        apiuapi_ACharacter_UpdateNavigationRelevance(&uapi_ACharacter_UpdateNavigationRelevance);
    }

    auto const apiuapi_AGameModeBase_AllowCheats = (uapi_AGameModeBase_AllowCheatsFn)plugin->GetDllExport(TEXT("set_AGameModeBase_AllowCheats_handler\0"));
    if(apiuapi_AGameModeBase_AllowCheats){
        apiuapi_AGameModeBase_AllowCheats(&uapi_AGameModeBase_AllowCheats);
    }

    auto const apiuapi_AGameModeBase_AllowPausing = (uapi_AGameModeBase_AllowPausingFn)plugin->GetDllExport(TEXT("set_AGameModeBase_AllowPausing_handler\0"));
    if(apiuapi_AGameModeBase_AllowPausing){
        apiuapi_AGameModeBase_AllowPausing(&uapi_AGameModeBase_AllowPausing);
    }

    auto const apiuapi_AGameModeBase_CanSpectate = (uapi_AGameModeBase_CanSpectateFn)plugin->GetDllExport(TEXT("set_AGameModeBase_CanSpectate_handler\0"));
    if(apiuapi_AGameModeBase_CanSpectate){
        apiuapi_AGameModeBase_CanSpectate(&uapi_AGameModeBase_CanSpectate);
    }

    auto const apiuapi_AGameModeBase_ChoosePlayerStart = (uapi_AGameModeBase_ChoosePlayerStartFn)plugin->GetDllExport(TEXT("set_AGameModeBase_ChoosePlayerStart_handler\0"));
    if(apiuapi_AGameModeBase_ChoosePlayerStart){
        apiuapi_AGameModeBase_ChoosePlayerStart(&uapi_AGameModeBase_ChoosePlayerStart);
    }

    auto const apiuapi_AGameModeBase_ClearPause = (uapi_AGameModeBase_ClearPauseFn)plugin->GetDllExport(TEXT("set_AGameModeBase_ClearPause_handler\0"));
    if(apiuapi_AGameModeBase_ClearPause){
        apiuapi_AGameModeBase_ClearPause(&uapi_AGameModeBase_ClearPause);
    }

    auto const apiuapi_AGameModeBase_DispatchPostLogin = (uapi_AGameModeBase_DispatchPostLoginFn)plugin->GetDllExport(TEXT("set_AGameModeBase_DispatchPostLogin_handler\0"));
    if(apiuapi_AGameModeBase_DispatchPostLogin){
        apiuapi_AGameModeBase_DispatchPostLogin(&uapi_AGameModeBase_DispatchPostLogin);
    }

    auto const apiuapi_AGameModeBase_ForceClearUnpauseDelegates = (uapi_AGameModeBase_ForceClearUnpauseDelegatesFn)plugin->GetDllExport(TEXT("set_AGameModeBase_ForceClearUnpauseDelegates_handler\0"));
    if(apiuapi_AGameModeBase_ForceClearUnpauseDelegates){
        apiuapi_AGameModeBase_ForceClearUnpauseDelegates(&uapi_AGameModeBase_ForceClearUnpauseDelegates);
    }

    auto const apiuapi_AGameModeBase_GetNumPlayers = (uapi_AGameModeBase_GetNumPlayersFn)plugin->GetDllExport(TEXT("set_AGameModeBase_GetNumPlayers_handler\0"));
    if(apiuapi_AGameModeBase_GetNumPlayers){
        apiuapi_AGameModeBase_GetNumPlayers(&uapi_AGameModeBase_GetNumPlayers);
    }

    auto const apiuapi_AGameModeBase_GetNumSpectators = (uapi_AGameModeBase_GetNumSpectatorsFn)plugin->GetDllExport(TEXT("set_AGameModeBase_GetNumSpectators_handler\0"));
    if(apiuapi_AGameModeBase_GetNumSpectators){
        apiuapi_AGameModeBase_GetNumSpectators(&uapi_AGameModeBase_GetNumSpectators);
    }

    auto const apiuapi_AGameModeBase_HandleStartingNewPlayer = (uapi_AGameModeBase_HandleStartingNewPlayerFn)plugin->GetDllExport(TEXT("set_AGameModeBase_HandleStartingNewPlayer_handler\0"));
    if(apiuapi_AGameModeBase_HandleStartingNewPlayer){
        apiuapi_AGameModeBase_HandleStartingNewPlayer(&uapi_AGameModeBase_HandleStartingNewPlayer);
    }

    auto const apiuapi_AGameModeBase_HasMatchEnded = (uapi_AGameModeBase_HasMatchEndedFn)plugin->GetDllExport(TEXT("set_AGameModeBase_HasMatchEnded_handler\0"));
    if(apiuapi_AGameModeBase_HasMatchEnded){
        apiuapi_AGameModeBase_HasMatchEnded(&uapi_AGameModeBase_HasMatchEnded);
    }

    auto const apiuapi_AGameModeBase_HasMatchStarted = (uapi_AGameModeBase_HasMatchStartedFn)plugin->GetDllExport(TEXT("set_AGameModeBase_HasMatchStarted_handler\0"));
    if(apiuapi_AGameModeBase_HasMatchStarted){
        apiuapi_AGameModeBase_HasMatchStarted(&uapi_AGameModeBase_HasMatchStarted);
    }

    auto const apiuapi_AGameModeBase_InitGameState = (uapi_AGameModeBase_InitGameStateFn)plugin->GetDllExport(TEXT("set_AGameModeBase_InitGameState_handler\0"));
    if(apiuapi_AGameModeBase_InitGameState){
        apiuapi_AGameModeBase_InitGameState(&uapi_AGameModeBase_InitGameState);
    }

    auto const apiuapi_AGameModeBase_InitStartSpot = (uapi_AGameModeBase_InitStartSpotFn)plugin->GetDllExport(TEXT("set_AGameModeBase_InitStartSpot_handler\0"));
    if(apiuapi_AGameModeBase_InitStartSpot){
        apiuapi_AGameModeBase_InitStartSpot(&uapi_AGameModeBase_InitStartSpot);
    }

    auto const apiuapi_AGameModeBase_IsHandlingReplays = (uapi_AGameModeBase_IsHandlingReplaysFn)plugin->GetDllExport(TEXT("set_AGameModeBase_IsHandlingReplays_handler\0"));
    if(apiuapi_AGameModeBase_IsHandlingReplays){
        apiuapi_AGameModeBase_IsHandlingReplays(&uapi_AGameModeBase_IsHandlingReplays);
    }

    auto const apiuapi_AGameModeBase_IsPaused = (uapi_AGameModeBase_IsPausedFn)plugin->GetDllExport(TEXT("set_AGameModeBase_IsPaused_handler\0"));
    if(apiuapi_AGameModeBase_IsPaused){
        apiuapi_AGameModeBase_IsPaused(&uapi_AGameModeBase_IsPaused);
    }

    auto const apiuapi_AGameModeBase_K2_OnLogout = (uapi_AGameModeBase_K2_OnLogoutFn)plugin->GetDllExport(TEXT("set_AGameModeBase_K2_OnLogout_handler\0"));
    if(apiuapi_AGameModeBase_K2_OnLogout){
        apiuapi_AGameModeBase_K2_OnLogout(&uapi_AGameModeBase_K2_OnLogout);
    }

    auto const apiuapi_AGameModeBase_K2_OnRestartPlayer = (uapi_AGameModeBase_K2_OnRestartPlayerFn)plugin->GetDllExport(TEXT("set_AGameModeBase_K2_OnRestartPlayer_handler\0"));
    if(apiuapi_AGameModeBase_K2_OnRestartPlayer){
        apiuapi_AGameModeBase_K2_OnRestartPlayer(&uapi_AGameModeBase_K2_OnRestartPlayer);
    }

    auto const apiuapi_AGameModeBase_K2_PostLogin = (uapi_AGameModeBase_K2_PostLoginFn)plugin->GetDllExport(TEXT("set_AGameModeBase_K2_PostLogin_handler\0"));
    if(apiuapi_AGameModeBase_K2_PostLogin){
        apiuapi_AGameModeBase_K2_PostLogin(&uapi_AGameModeBase_K2_PostLogin);
    }

    auto const apiuapi_AGameModeBase_Logout = (uapi_AGameModeBase_LogoutFn)plugin->GetDllExport(TEXT("set_AGameModeBase_Logout_handler\0"));
    if(apiuapi_AGameModeBase_Logout){
        apiuapi_AGameModeBase_Logout(&uapi_AGameModeBase_Logout);
    }

    auto const apiuapi_AGameModeBase_MustSpectate = (uapi_AGameModeBase_MustSpectateFn)plugin->GetDllExport(TEXT("set_AGameModeBase_MustSpectate_handler\0"));
    if(apiuapi_AGameModeBase_MustSpectate){
        apiuapi_AGameModeBase_MustSpectate(&uapi_AGameModeBase_MustSpectate);
    }

    auto const apiuapi_AGameModeBase_PlayerCanRestart = (uapi_AGameModeBase_PlayerCanRestartFn)plugin->GetDllExport(TEXT("set_AGameModeBase_PlayerCanRestart_handler\0"));
    if(apiuapi_AGameModeBase_PlayerCanRestart){
        apiuapi_AGameModeBase_PlayerCanRestart(&uapi_AGameModeBase_PlayerCanRestart);
    }

    auto const apiuapi_AGameModeBase_PostLogin = (uapi_AGameModeBase_PostLoginFn)plugin->GetDllExport(TEXT("set_AGameModeBase_PostLogin_handler\0"));
    if(apiuapi_AGameModeBase_PostLogin){
        apiuapi_AGameModeBase_PostLogin(&uapi_AGameModeBase_PostLogin);
    }

    auto const apiuapi_AGameModeBase_PostSeamlessTravel = (uapi_AGameModeBase_PostSeamlessTravelFn)plugin->GetDllExport(TEXT("set_AGameModeBase_PostSeamlessTravel_handler\0"));
    if(apiuapi_AGameModeBase_PostSeamlessTravel){
        apiuapi_AGameModeBase_PostSeamlessTravel(&uapi_AGameModeBase_PostSeamlessTravel);
    }

    auto const apiuapi_AGameModeBase_PreInitializeComponents = (uapi_AGameModeBase_PreInitializeComponentsFn)plugin->GetDllExport(TEXT("set_AGameModeBase_PreInitializeComponents_handler\0"));
    if(apiuapi_AGameModeBase_PreInitializeComponents){
        apiuapi_AGameModeBase_PreInitializeComponents(&uapi_AGameModeBase_PreInitializeComponents);
    }

    auto const apiuapi_AGameModeBase_Reset = (uapi_AGameModeBase_ResetFn)plugin->GetDllExport(TEXT("set_AGameModeBase_Reset_handler\0"));
    if(apiuapi_AGameModeBase_Reset){
        apiuapi_AGameModeBase_Reset(&uapi_AGameModeBase_Reset);
    }

    auto const apiuapi_AGameModeBase_ResetLevel = (uapi_AGameModeBase_ResetLevelFn)plugin->GetDllExport(TEXT("set_AGameModeBase_ResetLevel_handler\0"));
    if(apiuapi_AGameModeBase_ResetLevel){
        apiuapi_AGameModeBase_ResetLevel(&uapi_AGameModeBase_ResetLevel);
    }

    auto const apiuapi_AGameModeBase_RestartPlayer = (uapi_AGameModeBase_RestartPlayerFn)plugin->GetDllExport(TEXT("set_AGameModeBase_RestartPlayer_handler\0"));
    if(apiuapi_AGameModeBase_RestartPlayer){
        apiuapi_AGameModeBase_RestartPlayer(&uapi_AGameModeBase_RestartPlayer);
    }

    auto const apiuapi_AGameModeBase_RestartPlayerAtPlayerStart = (uapi_AGameModeBase_RestartPlayerAtPlayerStartFn)plugin->GetDllExport(TEXT("set_AGameModeBase_RestartPlayerAtPlayerStart_handler\0"));
    if(apiuapi_AGameModeBase_RestartPlayerAtPlayerStart){
        apiuapi_AGameModeBase_RestartPlayerAtPlayerStart(&uapi_AGameModeBase_RestartPlayerAtPlayerStart);
    }

    auto const apiuapi_AGameModeBase_ReturnToMainMenuHost = (uapi_AGameModeBase_ReturnToMainMenuHostFn)plugin->GetDllExport(TEXT("set_AGameModeBase_ReturnToMainMenuHost_handler\0"));
    if(apiuapi_AGameModeBase_ReturnToMainMenuHost){
        apiuapi_AGameModeBase_ReturnToMainMenuHost(&uapi_AGameModeBase_ReturnToMainMenuHost);
    }

    auto const apiuapi_AGameModeBase_SetPlayerDefaults = (uapi_AGameModeBase_SetPlayerDefaultsFn)plugin->GetDllExport(TEXT("set_AGameModeBase_SetPlayerDefaults_handler\0"));
    if(apiuapi_AGameModeBase_SetPlayerDefaults){
        apiuapi_AGameModeBase_SetPlayerDefaults(&uapi_AGameModeBase_SetPlayerDefaults);
    }

    auto const apiuapi_AGameModeBase_ShouldReset = (uapi_AGameModeBase_ShouldResetFn)plugin->GetDllExport(TEXT("set_AGameModeBase_ShouldReset_handler\0"));
    if(apiuapi_AGameModeBase_ShouldReset){
        apiuapi_AGameModeBase_ShouldReset(&uapi_AGameModeBase_ShouldReset);
    }

    auto const apiuapi_AGameModeBase_SpawnDefaultPawnFor = (uapi_AGameModeBase_SpawnDefaultPawnForFn)plugin->GetDllExport(TEXT("set_AGameModeBase_SpawnDefaultPawnFor_handler\0"));
    if(apiuapi_AGameModeBase_SpawnDefaultPawnFor){
        apiuapi_AGameModeBase_SpawnDefaultPawnFor(&uapi_AGameModeBase_SpawnDefaultPawnFor);
    }

    auto const apiuapi_AGameModeBase_StartPlay = (uapi_AGameModeBase_StartPlayFn)plugin->GetDllExport(TEXT("set_AGameModeBase_StartPlay_handler\0"));
    if(apiuapi_AGameModeBase_StartPlay){
        apiuapi_AGameModeBase_StartPlay(&uapi_AGameModeBase_StartPlay);
    }

    auto const apiuapi_AGameModeBase_StartToLeaveMap = (uapi_AGameModeBase_StartToLeaveMapFn)plugin->GetDllExport(TEXT("set_AGameModeBase_StartToLeaveMap_handler\0"));
    if(apiuapi_AGameModeBase_StartToLeaveMap){
        apiuapi_AGameModeBase_StartToLeaveMap(&uapi_AGameModeBase_StartToLeaveMap);
    }

    auto const apiuapi_AGameModeBase_SwapPlayerControllers = (uapi_AGameModeBase_SwapPlayerControllersFn)plugin->GetDllExport(TEXT("set_AGameModeBase_SwapPlayerControllers_handler\0"));
    if(apiuapi_AGameModeBase_SwapPlayerControllers){
        apiuapi_AGameModeBase_SwapPlayerControllers(&uapi_AGameModeBase_SwapPlayerControllers);
    }

    auto const apiuapi_USceneComponent_BeginDestroy = (uapi_USceneComponent_BeginDestroyFn)plugin->GetDllExport(TEXT("set_USceneComponent_BeginDestroy_handler\0"));
    if(apiuapi_USceneComponent_BeginDestroy){
        apiuapi_USceneComponent_BeginDestroy(&uapi_USceneComponent_BeginDestroy);
    }

    auto const apiuapi_USceneComponent_CalcBoundingCylinder = (uapi_USceneComponent_CalcBoundingCylinderFn)plugin->GetDllExport(TEXT("set_USceneComponent_CalcBoundingCylinder_handler\0"));
    if(apiuapi_USceneComponent_CalcBoundingCylinder){
        apiuapi_USceneComponent_CalcBoundingCylinder(&uapi_USceneComponent_CalcBoundingCylinder);
    }

    auto const apiuapi_USceneComponent_CanAttachAsChild = (uapi_USceneComponent_CanAttachAsChildFn)plugin->GetDllExport(TEXT("set_USceneComponent_CanAttachAsChild_handler\0"));
    if(apiuapi_USceneComponent_CanAttachAsChild){
        apiuapi_USceneComponent_CanAttachAsChild(&uapi_USceneComponent_CanAttachAsChild);
    }

    auto const apiuapi_USceneComponent_CanEditChange = (uapi_USceneComponent_CanEditChangeFn)plugin->GetDllExport(TEXT("set_USceneComponent_CanEditChange_handler\0"));
    if(apiuapi_USceneComponent_CanEditChange){
        apiuapi_USceneComponent_CanEditChange(&uapi_USceneComponent_CanEditChange);
    }

    auto const apiuapi_USceneComponent_CanEverRender = (uapi_USceneComponent_CanEverRenderFn)plugin->GetDllExport(TEXT("set_USceneComponent_CanEverRender_handler\0"));
    if(apiuapi_USceneComponent_CanEverRender){
        apiuapi_USceneComponent_CanEverRender(&uapi_USceneComponent_CanEverRender);
    }

    auto const apiuapi_USceneComponent_CanHaveStaticMobility = (uapi_USceneComponent_CanHaveStaticMobilityFn)plugin->GetDllExport(TEXT("set_USceneComponent_CanHaveStaticMobility_handler\0"));
    if(apiuapi_USceneComponent_CanHaveStaticMobility){
        apiuapi_USceneComponent_CanHaveStaticMobility(&uapi_USceneComponent_CanHaveStaticMobility);
    }

    auto const apiuapi_USceneComponent_ClearSkipUpdateOverlaps = (uapi_USceneComponent_ClearSkipUpdateOverlapsFn)plugin->GetDllExport(TEXT("set_USceneComponent_ClearSkipUpdateOverlaps_handler\0"));
    if(apiuapi_USceneComponent_ClearSkipUpdateOverlaps){
        apiuapi_USceneComponent_ClearSkipUpdateOverlaps(&uapi_USceneComponent_ClearSkipUpdateOverlaps);
    }

    auto const apiuapi_USceneComponent_ConditionalUpdateComponentToWorld = (uapi_USceneComponent_ConditionalUpdateComponentToWorldFn)plugin->GetDllExport(TEXT("set_USceneComponent_ConditionalUpdateComponentToWorld_handler\0"));
    if(apiuapi_USceneComponent_ConditionalUpdateComponentToWorld){
        apiuapi_USceneComponent_ConditionalUpdateComponentToWorld(&uapi_USceneComponent_ConditionalUpdateComponentToWorld);
    }

    auto const apiuapi_USceneComponent_DestroyComponent = (uapi_USceneComponent_DestroyComponentFn)plugin->GetDllExport(TEXT("set_USceneComponent_DestroyComponent_handler\0"));
    if(apiuapi_USceneComponent_DestroyComponent){
        apiuapi_USceneComponent_DestroyComponent(&uapi_USceneComponent_DestroyComponent);
    }

    auto const apiuapi_USceneComponent_DoesSocketExist = (uapi_USceneComponent_DoesSocketExistFn)plugin->GetDllExport(TEXT("set_USceneComponent_DoesSocketExist_handler\0"));
    if(apiuapi_USceneComponent_DoesSocketExist){
        apiuapi_USceneComponent_DoesSocketExist(&uapi_USceneComponent_DoesSocketExist);
    }

    auto const apiuapi_USceneComponent_GetAbsoluteLocationPropertyName = (uapi_USceneComponent_GetAbsoluteLocationPropertyNameFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetAbsoluteLocationPropertyName_handler\0"));
    if(apiuapi_USceneComponent_GetAbsoluteLocationPropertyName){
        apiuapi_USceneComponent_GetAbsoluteLocationPropertyName(&uapi_USceneComponent_GetAbsoluteLocationPropertyName);
    }

    auto const apiuapi_USceneComponent_GetAbsoluteRotationPropertyName = (uapi_USceneComponent_GetAbsoluteRotationPropertyNameFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetAbsoluteRotationPropertyName_handler\0"));
    if(apiuapi_USceneComponent_GetAbsoluteRotationPropertyName){
        apiuapi_USceneComponent_GetAbsoluteRotationPropertyName(&uapi_USceneComponent_GetAbsoluteRotationPropertyName);
    }

    auto const apiuapi_USceneComponent_GetAbsoluteScalePropertyName = (uapi_USceneComponent_GetAbsoluteScalePropertyNameFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetAbsoluteScalePropertyName_handler\0"));
    if(apiuapi_USceneComponent_GetAbsoluteScalePropertyName){
        apiuapi_USceneComponent_GetAbsoluteScalePropertyName(&uapi_USceneComponent_GetAbsoluteScalePropertyName);
    }

    auto const apiuapi_USceneComponent_GetActorPositionForRenderer = (uapi_USceneComponent_GetActorPositionForRendererFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetActorPositionForRenderer_handler\0"));
    if(apiuapi_USceneComponent_GetActorPositionForRenderer){
        apiuapi_USceneComponent_GetActorPositionForRenderer(&uapi_USceneComponent_GetActorPositionForRenderer);
    }

    auto const apiuapi_USceneComponent_GetAttachParent = (uapi_USceneComponent_GetAttachParentFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetAttachParent_handler\0"));
    if(apiuapi_USceneComponent_GetAttachParent){
        apiuapi_USceneComponent_GetAttachParent(&uapi_USceneComponent_GetAttachParent);
    }

    auto const apiuapi_USceneComponent_GetAttachParentActor = (uapi_USceneComponent_GetAttachParentActorFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetAttachParentActor_handler\0"));
    if(apiuapi_USceneComponent_GetAttachParentActor){
        apiuapi_USceneComponent_GetAttachParentActor(&uapi_USceneComponent_GetAttachParentActor);
    }

    auto const apiuapi_USceneComponent_GetAttachSocketName = (uapi_USceneComponent_GetAttachSocketNameFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetAttachSocketName_handler\0"));
    if(apiuapi_USceneComponent_GetAttachSocketName){
        apiuapi_USceneComponent_GetAttachSocketName(&uapi_USceneComponent_GetAttachSocketName);
    }

    auto const apiuapi_USceneComponent_GetAttachmentRoot = (uapi_USceneComponent_GetAttachmentRootFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetAttachmentRoot_handler\0"));
    if(apiuapi_USceneComponent_GetAttachmentRoot){
        apiuapi_USceneComponent_GetAttachmentRoot(&uapi_USceneComponent_GetAttachmentRoot);
    }

    auto const apiuapi_USceneComponent_GetAttachmentRootActor = (uapi_USceneComponent_GetAttachmentRootActorFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetAttachmentRootActor_handler\0"));
    if(apiuapi_USceneComponent_GetAttachmentRootActor){
        apiuapi_USceneComponent_GetAttachmentRootActor(&uapi_USceneComponent_GetAttachmentRootActor);
    }

    auto const apiuapi_USceneComponent_GetChildComponent = (uapi_USceneComponent_GetChildComponentFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetChildComponent_handler\0"));
    if(apiuapi_USceneComponent_GetChildComponent){
        apiuapi_USceneComponent_GetChildComponent(&uapi_USceneComponent_GetChildComponent);
    }

    auto const apiuapi_USceneComponent_GetCollisionObjectType = (uapi_USceneComponent_GetCollisionObjectTypeFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetCollisionObjectType_handler\0"));
    if(apiuapi_USceneComponent_GetCollisionObjectType){
        apiuapi_USceneComponent_GetCollisionObjectType(&uapi_USceneComponent_GetCollisionObjectType);
    }

    auto const apiuapi_USceneComponent_GetComponentLocation = (uapi_USceneComponent_GetComponentLocationFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetComponentLocation_handler\0"));
    if(apiuapi_USceneComponent_GetComponentLocation){
        apiuapi_USceneComponent_GetComponentLocation(&uapi_USceneComponent_GetComponentLocation);
    }

    auto const apiuapi_USceneComponent_GetComponentQuat = (uapi_USceneComponent_GetComponentQuatFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetComponentQuat_handler\0"));
    if(apiuapi_USceneComponent_GetComponentQuat){
        apiuapi_USceneComponent_GetComponentQuat(&uapi_USceneComponent_GetComponentQuat);
    }

    auto const apiuapi_USceneComponent_GetComponentRotation = (uapi_USceneComponent_GetComponentRotationFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetComponentRotation_handler\0"));
    if(apiuapi_USceneComponent_GetComponentRotation){
        apiuapi_USceneComponent_GetComponentRotation(&uapi_USceneComponent_GetComponentRotation);
    }

    auto const apiuapi_USceneComponent_GetComponentScale = (uapi_USceneComponent_GetComponentScaleFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetComponentScale_handler\0"));
    if(apiuapi_USceneComponent_GetComponentScale){
        apiuapi_USceneComponent_GetComponentScale(&uapi_USceneComponent_GetComponentScale);
    }

    auto const apiuapi_USceneComponent_GetComponentToWorld = (uapi_USceneComponent_GetComponentToWorldFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetComponentToWorld_handler\0"));
    if(apiuapi_USceneComponent_GetComponentToWorld){
        apiuapi_USceneComponent_GetComponentToWorld(&uapi_USceneComponent_GetComponentToWorld);
    }

    auto const apiuapi_USceneComponent_GetComponentTransform = (uapi_USceneComponent_GetComponentTransformFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetComponentTransform_handler\0"));
    if(apiuapi_USceneComponent_GetComponentTransform){
        apiuapi_USceneComponent_GetComponentTransform(&uapi_USceneComponent_GetComponentTransform);
    }

    auto const apiuapi_USceneComponent_GetComponentVelocity = (uapi_USceneComponent_GetComponentVelocityFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetComponentVelocity_handler\0"));
    if(apiuapi_USceneComponent_GetComponentVelocity){
        apiuapi_USceneComponent_GetComponentVelocity(&uapi_USceneComponent_GetComponentVelocity);
    }

    auto const apiuapi_USceneComponent_GetCurrentScopedMovement = (uapi_USceneComponent_GetCurrentScopedMovementFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetCurrentScopedMovement_handler\0"));
    if(apiuapi_USceneComponent_GetCurrentScopedMovement){
        apiuapi_USceneComponent_GetCurrentScopedMovement(&uapi_USceneComponent_GetCurrentScopedMovement);
    }

    auto const apiuapi_USceneComponent_GetDefaultSceneRootVariableName = (uapi_USceneComponent_GetDefaultSceneRootVariableNameFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetDefaultSceneRootVariableName_handler\0"));
    if(apiuapi_USceneComponent_GetDefaultSceneRootVariableName){
        apiuapi_USceneComponent_GetDefaultSceneRootVariableName(&uapi_USceneComponent_GetDefaultSceneRootVariableName);
    }

    auto const apiuapi_USceneComponent_GetForwardVector = (uapi_USceneComponent_GetForwardVectorFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetForwardVector_handler\0"));
    if(apiuapi_USceneComponent_GetForwardVector){
        apiuapi_USceneComponent_GetForwardVector(&uapi_USceneComponent_GetForwardVector);
    }

    auto const apiuapi_USceneComponent_GetNumChildrenComponents = (uapi_USceneComponent_GetNumChildrenComponentsFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetNumChildrenComponents_handler\0"));
    if(apiuapi_USceneComponent_GetNumChildrenComponents){
        apiuapi_USceneComponent_GetNumChildrenComponents(&uapi_USceneComponent_GetNumChildrenComponents);
    }

    auto const apiuapi_USceneComponent_GetNumUncachedStaticLightingInteractions = (uapi_USceneComponent_GetNumUncachedStaticLightingInteractionsFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetNumUncachedStaticLightingInteractions_handler\0"));
    if(apiuapi_USceneComponent_GetNumUncachedStaticLightingInteractions){
        apiuapi_USceneComponent_GetNumUncachedStaticLightingInteractions(&uapi_USceneComponent_GetNumUncachedStaticLightingInteractions);
    }

    auto const apiuapi_USceneComponent_GetPhysicsVolume = (uapi_USceneComponent_GetPhysicsVolumeFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetPhysicsVolume_handler\0"));
    if(apiuapi_USceneComponent_GetPhysicsVolume){
        apiuapi_USceneComponent_GetPhysicsVolume(&uapi_USceneComponent_GetPhysicsVolume);
    }

    auto const apiuapi_USceneComponent_GetRelativeLocation = (uapi_USceneComponent_GetRelativeLocationFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetRelativeLocation_handler\0"));
    if(apiuapi_USceneComponent_GetRelativeLocation){
        apiuapi_USceneComponent_GetRelativeLocation(&uapi_USceneComponent_GetRelativeLocation);
    }

    auto const apiuapi_USceneComponent_GetRelativeLocationPropertyName = (uapi_USceneComponent_GetRelativeLocationPropertyNameFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetRelativeLocationPropertyName_handler\0"));
    if(apiuapi_USceneComponent_GetRelativeLocationPropertyName){
        apiuapi_USceneComponent_GetRelativeLocationPropertyName(&uapi_USceneComponent_GetRelativeLocationPropertyName);
    }

    auto const apiuapi_USceneComponent_GetRelativeLocation_DirectMutable = (uapi_USceneComponent_GetRelativeLocation_DirectMutableFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetRelativeLocation_DirectMutable_handler\0"));
    if(apiuapi_USceneComponent_GetRelativeLocation_DirectMutable){
        apiuapi_USceneComponent_GetRelativeLocation_DirectMutable(&uapi_USceneComponent_GetRelativeLocation_DirectMutable);
    }

    auto const apiuapi_USceneComponent_GetRelativeRotation = (uapi_USceneComponent_GetRelativeRotationFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetRelativeRotation_handler\0"));
    if(apiuapi_USceneComponent_GetRelativeRotation){
        apiuapi_USceneComponent_GetRelativeRotation(&uapi_USceneComponent_GetRelativeRotation);
    }

    auto const apiuapi_USceneComponent_GetRelativeRotationPropertyName = (uapi_USceneComponent_GetRelativeRotationPropertyNameFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetRelativeRotationPropertyName_handler\0"));
    if(apiuapi_USceneComponent_GetRelativeRotationPropertyName){
        apiuapi_USceneComponent_GetRelativeRotationPropertyName(&uapi_USceneComponent_GetRelativeRotationPropertyName);
    }

    auto const apiuapi_USceneComponent_GetRelativeRotation_DirectMutable = (uapi_USceneComponent_GetRelativeRotation_DirectMutableFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetRelativeRotation_DirectMutable_handler\0"));
    if(apiuapi_USceneComponent_GetRelativeRotation_DirectMutable){
        apiuapi_USceneComponent_GetRelativeRotation_DirectMutable(&uapi_USceneComponent_GetRelativeRotation_DirectMutable);
    }

    auto const apiuapi_USceneComponent_GetRelativeScale3D = (uapi_USceneComponent_GetRelativeScale3DFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetRelativeScale3D_handler\0"));
    if(apiuapi_USceneComponent_GetRelativeScale3D){
        apiuapi_USceneComponent_GetRelativeScale3D(&uapi_USceneComponent_GetRelativeScale3D);
    }

    auto const apiuapi_USceneComponent_GetRelativeScale3DPropertyName = (uapi_USceneComponent_GetRelativeScale3DPropertyNameFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetRelativeScale3DPropertyName_handler\0"));
    if(apiuapi_USceneComponent_GetRelativeScale3DPropertyName){
        apiuapi_USceneComponent_GetRelativeScale3DPropertyName(&uapi_USceneComponent_GetRelativeScale3DPropertyName);
    }

    auto const apiuapi_USceneComponent_GetRelativeScale3D_DirectMutable = (uapi_USceneComponent_GetRelativeScale3D_DirectMutableFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetRelativeScale3D_DirectMutable_handler\0"));
    if(apiuapi_USceneComponent_GetRelativeScale3D_DirectMutable){
        apiuapi_USceneComponent_GetRelativeScale3D_DirectMutable(&uapi_USceneComponent_GetRelativeScale3D_DirectMutable);
    }

    auto const apiuapi_USceneComponent_GetRelativeTransform = (uapi_USceneComponent_GetRelativeTransformFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetRelativeTransform_handler\0"));
    if(apiuapi_USceneComponent_GetRelativeTransform){
        apiuapi_USceneComponent_GetRelativeTransform(&uapi_USceneComponent_GetRelativeTransform);
    }

    auto const apiuapi_USceneComponent_GetRightVector = (uapi_USceneComponent_GetRightVectorFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetRightVector_handler\0"));
    if(apiuapi_USceneComponent_GetRightVector){
        apiuapi_USceneComponent_GetRightVector(&uapi_USceneComponent_GetRightVector);
    }

    auto const apiuapi_USceneComponent_GetShouldUpdatePhysicsVolume = (uapi_USceneComponent_GetShouldUpdatePhysicsVolumeFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetShouldUpdatePhysicsVolume_handler\0"));
    if(apiuapi_USceneComponent_GetShouldUpdatePhysicsVolume){
        apiuapi_USceneComponent_GetShouldUpdatePhysicsVolume(&uapi_USceneComponent_GetShouldUpdatePhysicsVolume);
    }

    auto const apiuapi_USceneComponent_GetSocketLocation = (uapi_USceneComponent_GetSocketLocationFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetSocketLocation_handler\0"));
    if(apiuapi_USceneComponent_GetSocketLocation){
        apiuapi_USceneComponent_GetSocketLocation(&uapi_USceneComponent_GetSocketLocation);
    }

    auto const apiuapi_USceneComponent_GetSocketQuaternion = (uapi_USceneComponent_GetSocketQuaternionFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetSocketQuaternion_handler\0"));
    if(apiuapi_USceneComponent_GetSocketQuaternion){
        apiuapi_USceneComponent_GetSocketQuaternion(&uapi_USceneComponent_GetSocketQuaternion);
    }

    auto const apiuapi_USceneComponent_GetSocketRotation = (uapi_USceneComponent_GetSocketRotationFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetSocketRotation_handler\0"));
    if(apiuapi_USceneComponent_GetSocketRotation){
        apiuapi_USceneComponent_GetSocketRotation(&uapi_USceneComponent_GetSocketRotation);
    }

    auto const apiuapi_USceneComponent_GetUpVector = (uapi_USceneComponent_GetUpVectorFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetUpVector_handler\0"));
    if(apiuapi_USceneComponent_GetUpVector){
        apiuapi_USceneComponent_GetUpVector(&uapi_USceneComponent_GetUpVector);
    }

    auto const apiuapi_USceneComponent_GetVisibleFlag = (uapi_USceneComponent_GetVisibleFlagFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetVisibleFlag_handler\0"));
    if(apiuapi_USceneComponent_GetVisibleFlag){
        apiuapi_USceneComponent_GetVisibleFlag(&uapi_USceneComponent_GetVisibleFlag);
    }

    auto const apiuapi_USceneComponent_GetVisiblePropertyName = (uapi_USceneComponent_GetVisiblePropertyNameFn)plugin->GetDllExport(TEXT("set_USceneComponent_GetVisiblePropertyName_handler\0"));
    if(apiuapi_USceneComponent_GetVisiblePropertyName){
        apiuapi_USceneComponent_GetVisiblePropertyName(&uapi_USceneComponent_GetVisiblePropertyName);
    }

    auto const apiuapi_USceneComponent_HasAnySockets = (uapi_USceneComponent_HasAnySocketsFn)plugin->GetDllExport(TEXT("set_USceneComponent_HasAnySockets_handler\0"));
    if(apiuapi_USceneComponent_HasAnySockets){
        apiuapi_USceneComponent_HasAnySockets(&uapi_USceneComponent_HasAnySockets);
    }

    auto const apiuapi_USceneComponent_IsAnySimulatingPhysics = (uapi_USceneComponent_IsAnySimulatingPhysicsFn)plugin->GetDllExport(TEXT("set_USceneComponent_IsAnySimulatingPhysics_handler\0"));
    if(apiuapi_USceneComponent_IsAnySimulatingPhysics){
        apiuapi_USceneComponent_IsAnySimulatingPhysics(&uapi_USceneComponent_IsAnySimulatingPhysics);
    }

    auto const apiuapi_USceneComponent_IsAttachedTo = (uapi_USceneComponent_IsAttachedToFn)plugin->GetDllExport(TEXT("set_USceneComponent_IsAttachedTo_handler\0"));
    if(apiuapi_USceneComponent_IsAttachedTo){
        apiuapi_USceneComponent_IsAttachedTo(&uapi_USceneComponent_IsAttachedTo);
    }

    auto const apiuapi_USceneComponent_IsCollisionEnabled = (uapi_USceneComponent_IsCollisionEnabledFn)plugin->GetDllExport(TEXT("set_USceneComponent_IsCollisionEnabled_handler\0"));
    if(apiuapi_USceneComponent_IsCollisionEnabled){
        apiuapi_USceneComponent_IsCollisionEnabled(&uapi_USceneComponent_IsCollisionEnabled);
    }

    auto const apiuapi_USceneComponent_IsDeferringMovementUpdates = (uapi_USceneComponent_IsDeferringMovementUpdatesFn)plugin->GetDllExport(TEXT("set_USceneComponent_IsDeferringMovementUpdates_handler\0"));
    if(apiuapi_USceneComponent_IsDeferringMovementUpdates){
        apiuapi_USceneComponent_IsDeferringMovementUpdates(&uapi_USceneComponent_IsDeferringMovementUpdates);
    }

    auto const apiuapi_USceneComponent_IsPhysicsCollisionEnabled = (uapi_USceneComponent_IsPhysicsCollisionEnabledFn)plugin->GetDllExport(TEXT("set_USceneComponent_IsPhysicsCollisionEnabled_handler\0"));
    if(apiuapi_USceneComponent_IsPhysicsCollisionEnabled){
        apiuapi_USceneComponent_IsPhysicsCollisionEnabled(&uapi_USceneComponent_IsPhysicsCollisionEnabled);
    }

    auto const apiuapi_USceneComponent_IsPostLoadThreadSafe = (uapi_USceneComponent_IsPostLoadThreadSafeFn)plugin->GetDllExport(TEXT("set_USceneComponent_IsPostLoadThreadSafe_handler\0"));
    if(apiuapi_USceneComponent_IsPostLoadThreadSafe){
        apiuapi_USceneComponent_IsPostLoadThreadSafe(&uapi_USceneComponent_IsPostLoadThreadSafe);
    }

    auto const apiuapi_USceneComponent_IsPrecomputedLightingValid = (uapi_USceneComponent_IsPrecomputedLightingValidFn)plugin->GetDllExport(TEXT("set_USceneComponent_IsPrecomputedLightingValid_handler\0"));
    if(apiuapi_USceneComponent_IsPrecomputedLightingValid){
        apiuapi_USceneComponent_IsPrecomputedLightingValid(&uapi_USceneComponent_IsPrecomputedLightingValid);
    }

    auto const apiuapi_USceneComponent_IsQueryCollisionEnabled = (uapi_USceneComponent_IsQueryCollisionEnabledFn)plugin->GetDllExport(TEXT("set_USceneComponent_IsQueryCollisionEnabled_handler\0"));
    if(apiuapi_USceneComponent_IsQueryCollisionEnabled){
        apiuapi_USceneComponent_IsQueryCollisionEnabled(&uapi_USceneComponent_IsQueryCollisionEnabled);
    }

    auto const apiuapi_USceneComponent_IsSimulatingPhysics = (uapi_USceneComponent_IsSimulatingPhysicsFn)plugin->GetDllExport(TEXT("set_USceneComponent_IsSimulatingPhysics_handler\0"));
    if(apiuapi_USceneComponent_IsSimulatingPhysics){
        apiuapi_USceneComponent_IsSimulatingPhysics(&uapi_USceneComponent_IsSimulatingPhysics);
    }

    auto const apiuapi_USceneComponent_IsUsingAbsoluteLocation = (uapi_USceneComponent_IsUsingAbsoluteLocationFn)plugin->GetDllExport(TEXT("set_USceneComponent_IsUsingAbsoluteLocation_handler\0"));
    if(apiuapi_USceneComponent_IsUsingAbsoluteLocation){
        apiuapi_USceneComponent_IsUsingAbsoluteLocation(&uapi_USceneComponent_IsUsingAbsoluteLocation);
    }

    auto const apiuapi_USceneComponent_IsUsingAbsoluteRotation = (uapi_USceneComponent_IsUsingAbsoluteRotationFn)plugin->GetDllExport(TEXT("set_USceneComponent_IsUsingAbsoluteRotation_handler\0"));
    if(apiuapi_USceneComponent_IsUsingAbsoluteRotation){
        apiuapi_USceneComponent_IsUsingAbsoluteRotation(&uapi_USceneComponent_IsUsingAbsoluteRotation);
    }

    auto const apiuapi_USceneComponent_IsUsingAbsoluteScale = (uapi_USceneComponent_IsUsingAbsoluteScaleFn)plugin->GetDllExport(TEXT("set_USceneComponent_IsUsingAbsoluteScale_handler\0"));
    if(apiuapi_USceneComponent_IsUsingAbsoluteScale){
        apiuapi_USceneComponent_IsUsingAbsoluteScale(&uapi_USceneComponent_IsUsingAbsoluteScale);
    }

    auto const apiuapi_USceneComponent_IsVisible = (uapi_USceneComponent_IsVisibleFn)plugin->GetDllExport(TEXT("set_USceneComponent_IsVisible_handler\0"));
    if(apiuapi_USceneComponent_IsVisible){
        apiuapi_USceneComponent_IsVisible(&uapi_USceneComponent_IsVisible);
    }

    auto const apiuapi_USceneComponent_IsVisibleInEditor = (uapi_USceneComponent_IsVisibleInEditorFn)plugin->GetDllExport(TEXT("set_USceneComponent_IsVisibleInEditor_handler\0"));
    if(apiuapi_USceneComponent_IsVisibleInEditor){
        apiuapi_USceneComponent_IsVisibleInEditor(&uapi_USceneComponent_IsVisibleInEditor);
    }

    auto const apiuapi_USceneComponent_IsWorldGeometry = (uapi_USceneComponent_IsWorldGeometryFn)plugin->GetDllExport(TEXT("set_USceneComponent_IsWorldGeometry_handler\0"));
    if(apiuapi_USceneComponent_IsWorldGeometry){
        apiuapi_USceneComponent_IsWorldGeometry(&uapi_USceneComponent_IsWorldGeometry);
    }

    auto const apiuapi_USceneComponent_K2_GetComponentLocation = (uapi_USceneComponent_K2_GetComponentLocationFn)plugin->GetDllExport(TEXT("set_USceneComponent_K2_GetComponentLocation_handler\0"));
    if(apiuapi_USceneComponent_K2_GetComponentLocation){
        apiuapi_USceneComponent_K2_GetComponentLocation(&uapi_USceneComponent_K2_GetComponentLocation);
    }

    auto const apiuapi_USceneComponent_K2_GetComponentRotation = (uapi_USceneComponent_K2_GetComponentRotationFn)plugin->GetDllExport(TEXT("set_USceneComponent_K2_GetComponentRotation_handler\0"));
    if(apiuapi_USceneComponent_K2_GetComponentRotation){
        apiuapi_USceneComponent_K2_GetComponentRotation(&uapi_USceneComponent_K2_GetComponentRotation);
    }

    auto const apiuapi_USceneComponent_K2_GetComponentScale = (uapi_USceneComponent_K2_GetComponentScaleFn)plugin->GetDllExport(TEXT("set_USceneComponent_K2_GetComponentScale_handler\0"));
    if(apiuapi_USceneComponent_K2_GetComponentScale){
        apiuapi_USceneComponent_K2_GetComponentScale(&uapi_USceneComponent_K2_GetComponentScale);
    }

    auto const apiuapi_USceneComponent_K2_GetComponentToWorld = (uapi_USceneComponent_K2_GetComponentToWorldFn)plugin->GetDllExport(TEXT("set_USceneComponent_K2_GetComponentToWorld_handler\0"));
    if(apiuapi_USceneComponent_K2_GetComponentToWorld){
        apiuapi_USceneComponent_K2_GetComponentToWorld(&uapi_USceneComponent_K2_GetComponentToWorld);
    }

    auto const apiuapi_USceneComponent_NeedsLoadForTargetPlatform = (uapi_USceneComponent_NeedsLoadForTargetPlatformFn)plugin->GetDllExport(TEXT("set_USceneComponent_NeedsLoadForTargetPlatform_handler\0"));
    if(apiuapi_USceneComponent_NeedsLoadForTargetPlatform){
        apiuapi_USceneComponent_NeedsLoadForTargetPlatform(&uapi_USceneComponent_NeedsLoadForTargetPlatform);
    }

    auto const apiuapi_USceneComponent_OnAttachmentChanged = (uapi_USceneComponent_OnAttachmentChangedFn)plugin->GetDllExport(TEXT("set_USceneComponent_OnAttachmentChanged_handler\0"));
    if(apiuapi_USceneComponent_OnAttachmentChanged){
        apiuapi_USceneComponent_OnAttachmentChanged(&uapi_USceneComponent_OnAttachmentChanged);
    }

    auto const apiuapi_USceneComponent_OnComponentDestroyed = (uapi_USceneComponent_OnComponentDestroyedFn)plugin->GetDllExport(TEXT("set_USceneComponent_OnComponentDestroyed_handler\0"));
    if(apiuapi_USceneComponent_OnComponentDestroyed){
        apiuapi_USceneComponent_OnComponentDestroyed(&uapi_USceneComponent_OnComponentDestroyed);
    }

    auto const apiuapi_USceneComponent_OnRegister = (uapi_USceneComponent_OnRegisterFn)plugin->GetDllExport(TEXT("set_USceneComponent_OnRegister_handler\0"));
    if(apiuapi_USceneComponent_OnRegister){
        apiuapi_USceneComponent_OnRegister(&uapi_USceneComponent_OnRegister);
    }

    auto const apiuapi_USceneComponent_OnUnregister = (uapi_USceneComponent_OnUnregisterFn)plugin->GetDllExport(TEXT("set_USceneComponent_OnUnregister_handler\0"));
    if(apiuapi_USceneComponent_OnUnregister){
        apiuapi_USceneComponent_OnUnregister(&uapi_USceneComponent_OnUnregister);
    }

    auto const apiuapi_USceneComponent_PostEditComponentMove = (uapi_USceneComponent_PostEditComponentMoveFn)plugin->GetDllExport(TEXT("set_USceneComponent_PostEditComponentMove_handler\0"));
    if(apiuapi_USceneComponent_PostEditComponentMove){
        apiuapi_USceneComponent_PostEditComponentMove(&uapi_USceneComponent_PostEditComponentMove);
    }

    auto const apiuapi_USceneComponent_PostInterpChange = (uapi_USceneComponent_PostInterpChangeFn)plugin->GetDllExport(TEXT("set_USceneComponent_PostInterpChange_handler\0"));
    if(apiuapi_USceneComponent_PostInterpChange){
        apiuapi_USceneComponent_PostInterpChange(&uapi_USceneComponent_PostInterpChange);
    }

    auto const apiuapi_USceneComponent_PostLoad = (uapi_USceneComponent_PostLoadFn)plugin->GetDllExport(TEXT("set_USceneComponent_PostLoad_handler\0"));
    if(apiuapi_USceneComponent_PostLoad){
        apiuapi_USceneComponent_PostLoad(&uapi_USceneComponent_PostLoad);
    }

    auto const apiuapi_USceneComponent_PostNetReceive = (uapi_USceneComponent_PostNetReceiveFn)plugin->GetDllExport(TEXT("set_USceneComponent_PostNetReceive_handler\0"));
    if(apiuapi_USceneComponent_PostNetReceive){
        apiuapi_USceneComponent_PostNetReceive(&uapi_USceneComponent_PostNetReceive);
    }

    auto const apiuapi_USceneComponent_PostRepNotifies = (uapi_USceneComponent_PostRepNotifiesFn)plugin->GetDllExport(TEXT("set_USceneComponent_PostRepNotifies_handler\0"));
    if(apiuapi_USceneComponent_PostRepNotifies){
        apiuapi_USceneComponent_PostRepNotifies(&uapi_USceneComponent_PostRepNotifies);
    }

    auto const apiuapi_USceneComponent_PreNetReceive = (uapi_USceneComponent_PreNetReceiveFn)plugin->GetDllExport(TEXT("set_USceneComponent_PreNetReceive_handler\0"));
    if(apiuapi_USceneComponent_PreNetReceive){
        apiuapi_USceneComponent_PreNetReceive(&uapi_USceneComponent_PreNetReceive);
    }

    auto const apiuapi_USceneComponent_PropagateLightingScenarioChange = (uapi_USceneComponent_PropagateLightingScenarioChangeFn)plugin->GetDllExport(TEXT("set_USceneComponent_PropagateLightingScenarioChange_handler\0"));
    if(apiuapi_USceneComponent_PropagateLightingScenarioChange){
        apiuapi_USceneComponent_PropagateLightingScenarioChange(&uapi_USceneComponent_PropagateLightingScenarioChange);
    }

    auto const apiuapi_USceneComponent_ResetRelativeTransform = (uapi_USceneComponent_ResetRelativeTransformFn)plugin->GetDllExport(TEXT("set_USceneComponent_ResetRelativeTransform_handler\0"));
    if(apiuapi_USceneComponent_ResetRelativeTransform){
        apiuapi_USceneComponent_ResetRelativeTransform(&uapi_USceneComponent_ResetRelativeTransform);
    }

    auto const apiuapi_USceneComponent_SetAbsolute = (uapi_USceneComponent_SetAbsoluteFn)plugin->GetDllExport(TEXT("set_USceneComponent_SetAbsolute_handler\0"));
    if(apiuapi_USceneComponent_SetAbsolute){
        apiuapi_USceneComponent_SetAbsolute(&uapi_USceneComponent_SetAbsolute);
    }

    auto const apiuapi_USceneComponent_SetHiddenInGame = (uapi_USceneComponent_SetHiddenInGameFn)plugin->GetDllExport(TEXT("set_USceneComponent_SetHiddenInGame_handler\0"));
    if(apiuapi_USceneComponent_SetHiddenInGame){
        apiuapi_USceneComponent_SetHiddenInGame(&uapi_USceneComponent_SetHiddenInGame);
    }

    auto const apiuapi_USceneComponent_SetPhysicsVolume = (uapi_USceneComponent_SetPhysicsVolumeFn)plugin->GetDllExport(TEXT("set_USceneComponent_SetPhysicsVolume_handler\0"));
    if(apiuapi_USceneComponent_SetPhysicsVolume){
        apiuapi_USceneComponent_SetPhysicsVolume(&uapi_USceneComponent_SetPhysicsVolume);
    }

    auto const apiuapi_USceneComponent_SetRelativeLocation_Direct = (uapi_USceneComponent_SetRelativeLocation_DirectFn)plugin->GetDllExport(TEXT("set_USceneComponent_SetRelativeLocation_Direct_handler\0"));
    if(apiuapi_USceneComponent_SetRelativeLocation_Direct){
        apiuapi_USceneComponent_SetRelativeLocation_Direct(&uapi_USceneComponent_SetRelativeLocation_Direct);
    }

    auto const apiuapi_USceneComponent_SetRelativeRotation_Direct = (uapi_USceneComponent_SetRelativeRotation_DirectFn)plugin->GetDllExport(TEXT("set_USceneComponent_SetRelativeRotation_Direct_handler\0"));
    if(apiuapi_USceneComponent_SetRelativeRotation_Direct){
        apiuapi_USceneComponent_SetRelativeRotation_Direct(&uapi_USceneComponent_SetRelativeRotation_Direct);
    }

    auto const apiuapi_USceneComponent_SetRelativeScale3D = (uapi_USceneComponent_SetRelativeScale3DFn)plugin->GetDllExport(TEXT("set_USceneComponent_SetRelativeScale3D_handler\0"));
    if(apiuapi_USceneComponent_SetRelativeScale3D){
        apiuapi_USceneComponent_SetRelativeScale3D(&uapi_USceneComponent_SetRelativeScale3D);
    }

    auto const apiuapi_USceneComponent_SetRelativeScale3D_Direct = (uapi_USceneComponent_SetRelativeScale3D_DirectFn)plugin->GetDllExport(TEXT("set_USceneComponent_SetRelativeScale3D_Direct_handler\0"));
    if(apiuapi_USceneComponent_SetRelativeScale3D_Direct){
        apiuapi_USceneComponent_SetRelativeScale3D_Direct(&uapi_USceneComponent_SetRelativeScale3D_Direct);
    }

    auto const apiuapi_USceneComponent_SetShouldUpdatePhysicsVolume = (uapi_USceneComponent_SetShouldUpdatePhysicsVolumeFn)plugin->GetDllExport(TEXT("set_USceneComponent_SetShouldUpdatePhysicsVolume_handler\0"));
    if(apiuapi_USceneComponent_SetShouldUpdatePhysicsVolume){
        apiuapi_USceneComponent_SetShouldUpdatePhysicsVolume(&uapi_USceneComponent_SetShouldUpdatePhysicsVolume);
    }

    auto const apiuapi_USceneComponent_SetUsingAbsoluteLocation = (uapi_USceneComponent_SetUsingAbsoluteLocationFn)plugin->GetDllExport(TEXT("set_USceneComponent_SetUsingAbsoluteLocation_handler\0"));
    if(apiuapi_USceneComponent_SetUsingAbsoluteLocation){
        apiuapi_USceneComponent_SetUsingAbsoluteLocation(&uapi_USceneComponent_SetUsingAbsoluteLocation);
    }

    auto const apiuapi_USceneComponent_SetUsingAbsoluteRotation = (uapi_USceneComponent_SetUsingAbsoluteRotationFn)plugin->GetDllExport(TEXT("set_USceneComponent_SetUsingAbsoluteRotation_handler\0"));
    if(apiuapi_USceneComponent_SetUsingAbsoluteRotation){
        apiuapi_USceneComponent_SetUsingAbsoluteRotation(&uapi_USceneComponent_SetUsingAbsoluteRotation);
    }

    auto const apiuapi_USceneComponent_SetUsingAbsoluteScale = (uapi_USceneComponent_SetUsingAbsoluteScaleFn)plugin->GetDllExport(TEXT("set_USceneComponent_SetUsingAbsoluteScale_handler\0"));
    if(apiuapi_USceneComponent_SetUsingAbsoluteScale){
        apiuapi_USceneComponent_SetUsingAbsoluteScale(&uapi_USceneComponent_SetUsingAbsoluteScale);
    }

    auto const apiuapi_USceneComponent_SetVisibility = (uapi_USceneComponent_SetVisibilityFn)plugin->GetDllExport(TEXT("set_USceneComponent_SetVisibility_handler\0"));
    if(apiuapi_USceneComponent_SetVisibility){
        apiuapi_USceneComponent_SetVisibility(&uapi_USceneComponent_SetVisibility);
    }

    auto const apiuapi_USceneComponent_SetVisibleFlag = (uapi_USceneComponent_SetVisibleFlagFn)plugin->GetDllExport(TEXT("set_USceneComponent_SetVisibleFlag_handler\0"));
    if(apiuapi_USceneComponent_SetVisibleFlag){
        apiuapi_USceneComponent_SetVisibleFlag(&uapi_USceneComponent_SetVisibleFlag);
    }

    auto const apiuapi_USceneComponent_SetWorldScale3D = (uapi_USceneComponent_SetWorldScale3DFn)plugin->GetDllExport(TEXT("set_USceneComponent_SetWorldScale3D_handler\0"));
    if(apiuapi_USceneComponent_SetWorldScale3D){
        apiuapi_USceneComponent_SetWorldScale3D(&uapi_USceneComponent_SetWorldScale3D);
    }

    auto const apiuapi_USceneComponent_SetupAttachment = (uapi_USceneComponent_SetupAttachmentFn)plugin->GetDllExport(TEXT("set_USceneComponent_SetupAttachment_handler\0"));
    if(apiuapi_USceneComponent_SetupAttachment){
        apiuapi_USceneComponent_SetupAttachment(&uapi_USceneComponent_SetupAttachment);
    }

    auto const apiuapi_USceneComponent_ShouldCollideWhenPlacing = (uapi_USceneComponent_ShouldCollideWhenPlacingFn)plugin->GetDllExport(TEXT("set_USceneComponent_ShouldCollideWhenPlacing_handler\0"));
    if(apiuapi_USceneComponent_ShouldCollideWhenPlacing){
        apiuapi_USceneComponent_ShouldCollideWhenPlacing(&uapi_USceneComponent_ShouldCollideWhenPlacing);
    }

    auto const apiuapi_USceneComponent_ShouldComponentAddToScene = (uapi_USceneComponent_ShouldComponentAddToSceneFn)plugin->GetDllExport(TEXT("set_USceneComponent_ShouldComponentAddToScene_handler\0"));
    if(apiuapi_USceneComponent_ShouldComponentAddToScene){
        apiuapi_USceneComponent_ShouldComponentAddToScene(&uapi_USceneComponent_ShouldComponentAddToScene);
    }

    auto const apiuapi_USceneComponent_ShouldCreateRenderState = (uapi_USceneComponent_ShouldCreateRenderStateFn)plugin->GetDllExport(TEXT("set_USceneComponent_ShouldCreateRenderState_handler\0"));
    if(apiuapi_USceneComponent_ShouldCreateRenderState){
        apiuapi_USceneComponent_ShouldCreateRenderState(&uapi_USceneComponent_ShouldCreateRenderState);
    }

    auto const apiuapi_USceneComponent_ShouldRender = (uapi_USceneComponent_ShouldRenderFn)plugin->GetDllExport(TEXT("set_USceneComponent_ShouldRender_handler\0"));
    if(apiuapi_USceneComponent_ShouldRender){
        apiuapi_USceneComponent_ShouldRender(&uapi_USceneComponent_ShouldRender);
    }

    auto const apiuapi_USceneComponent_ShouldSkipUpdateOverlaps = (uapi_USceneComponent_ShouldSkipUpdateOverlapsFn)plugin->GetDllExport(TEXT("set_USceneComponent_ShouldSkipUpdateOverlaps_handler\0"));
    if(apiuapi_USceneComponent_ShouldSkipUpdateOverlaps){
        apiuapi_USceneComponent_ShouldSkipUpdateOverlaps(&uapi_USceneComponent_ShouldSkipUpdateOverlaps);
    }

    auto const apiuapi_USceneComponent_ToggleVisibility = (uapi_USceneComponent_ToggleVisibilityFn)plugin->GetDllExport(TEXT("set_USceneComponent_ToggleVisibility_handler\0"));
    if(apiuapi_USceneComponent_ToggleVisibility){
        apiuapi_USceneComponent_ToggleVisibility(&uapi_USceneComponent_ToggleVisibility);
    }

    auto const apiuapi_USceneComponent_UpdateBounds = (uapi_USceneComponent_UpdateBoundsFn)plugin->GetDllExport(TEXT("set_USceneComponent_UpdateBounds_handler\0"));
    if(apiuapi_USceneComponent_UpdateBounds){
        apiuapi_USceneComponent_UpdateBounds(&uapi_USceneComponent_UpdateBounds);
    }

    auto const apiuapi_USceneComponent_UpdateOverlaps = (uapi_USceneComponent_UpdateOverlapsFn)plugin->GetDllExport(TEXT("set_USceneComponent_UpdateOverlaps_handler\0"));
    if(apiuapi_USceneComponent_UpdateOverlaps){
        apiuapi_USceneComponent_UpdateOverlaps(&uapi_USceneComponent_UpdateOverlaps);
    }

    auto const apiuapi_USceneComponent_UpdatePhysicsVolume = (uapi_USceneComponent_UpdatePhysicsVolumeFn)plugin->GetDllExport(TEXT("set_USceneComponent_UpdatePhysicsVolume_handler\0"));
    if(apiuapi_USceneComponent_UpdatePhysicsVolume){
        apiuapi_USceneComponent_UpdatePhysicsVolume(&uapi_USceneComponent_UpdatePhysicsVolume);
    }

    auto const apiuapi_UActorComponent_Activate = (uapi_UActorComponent_ActivateFn)plugin->GetDllExport(TEXT("set_UActorComponent_Activate_handler\0"));
    if(apiuapi_UActorComponent_Activate){
        apiuapi_UActorComponent_Activate(&uapi_UActorComponent_Activate);
    }

    auto const apiuapi_UActorComponent_AddAssetUserData = (uapi_UActorComponent_AddAssetUserDataFn)plugin->GetDllExport(TEXT("set_UActorComponent_AddAssetUserData_handler\0"));
    if(apiuapi_UActorComponent_AddAssetUserData){
        apiuapi_UActorComponent_AddAssetUserData(&uapi_UActorComponent_AddAssetUserData);
    }

    auto const apiuapi_UActorComponent_AddTickPrerequisiteActor = (uapi_UActorComponent_AddTickPrerequisiteActorFn)plugin->GetDllExport(TEXT("set_UActorComponent_AddTickPrerequisiteActor_handler\0"));
    if(apiuapi_UActorComponent_AddTickPrerequisiteActor){
        apiuapi_UActorComponent_AddTickPrerequisiteActor(&uapi_UActorComponent_AddTickPrerequisiteActor);
    }

    auto const apiuapi_UActorComponent_AddTickPrerequisiteComponent = (uapi_UActorComponent_AddTickPrerequisiteComponentFn)plugin->GetDllExport(TEXT("set_UActorComponent_AddTickPrerequisiteComponent_handler\0"));
    if(apiuapi_UActorComponent_AddTickPrerequisiteComponent){
        apiuapi_UActorComponent_AddTickPrerequisiteComponent(&uapi_UActorComponent_AddTickPrerequisiteComponent);
    }

    auto const apiuapi_UActorComponent_AdditionalStatObject = (uapi_UActorComponent_AdditionalStatObjectFn)plugin->GetDllExport(TEXT("set_UActorComponent_AdditionalStatObject_handler\0"));
    if(apiuapi_UActorComponent_AdditionalStatObject){
        apiuapi_UActorComponent_AdditionalStatObject(&uapi_UActorComponent_AdditionalStatObject);
    }

    auto const apiuapi_UActorComponent_AllowReregistration = (uapi_UActorComponent_AllowReregistrationFn)plugin->GetDllExport(TEXT("set_UActorComponent_AllowReregistration_handler\0"));
    if(apiuapi_UActorComponent_AllowReregistration){
        apiuapi_UActorComponent_AllowReregistration(&uapi_UActorComponent_AllowReregistration);
    }

    auto const apiuapi_UActorComponent_AsyncPhysicsTickComponent = (uapi_UActorComponent_AsyncPhysicsTickComponentFn)plugin->GetDllExport(TEXT("set_UActorComponent_AsyncPhysicsTickComponent_handler\0"));
    if(apiuapi_UActorComponent_AsyncPhysicsTickComponent){
        apiuapi_UActorComponent_AsyncPhysicsTickComponent(&uapi_UActorComponent_AsyncPhysicsTickComponent);
    }

    auto const apiuapi_UActorComponent_BeginDestroy = (uapi_UActorComponent_BeginDestroyFn)plugin->GetDllExport(TEXT("set_UActorComponent_BeginDestroy_handler\0"));
    if(apiuapi_UActorComponent_BeginDestroy){
        apiuapi_UActorComponent_BeginDestroy(&uapi_UActorComponent_BeginDestroy);
    }

    auto const apiuapi_UActorComponent_BeginPlay = (uapi_UActorComponent_BeginPlayFn)plugin->GetDllExport(TEXT("set_UActorComponent_BeginPlay_handler\0"));
    if(apiuapi_UActorComponent_BeginPlay){
        apiuapi_UActorComponent_BeginPlay(&uapi_UActorComponent_BeginPlay);
    }

    auto const apiuapi_UActorComponent_CallRemoteFunction = (uapi_UActorComponent_CallRemoteFunctionFn)plugin->GetDllExport(TEXT("set_UActorComponent_CallRemoteFunction_handler\0"));
    if(apiuapi_UActorComponent_CallRemoteFunction){
        apiuapi_UActorComponent_CallRemoteFunction(&uapi_UActorComponent_CallRemoteFunction);
    }

    auto const apiuapi_UActorComponent_CanEditChange = (uapi_UActorComponent_CanEditChangeFn)plugin->GetDllExport(TEXT("set_UActorComponent_CanEditChange_handler\0"));
    if(apiuapi_UActorComponent_CanEditChange){
        apiuapi_UActorComponent_CanEditChange(&uapi_UActorComponent_CanEditChange);
    }

    auto const apiuapi_UActorComponent_CanEverAffectNavigation = (uapi_UActorComponent_CanEverAffectNavigationFn)plugin->GetDllExport(TEXT("set_UActorComponent_CanEverAffectNavigation_handler\0"));
    if(apiuapi_UActorComponent_CanEverAffectNavigation){
        apiuapi_UActorComponent_CanEverAffectNavigation(&uapi_UActorComponent_CanEverAffectNavigation);
    }

    auto const apiuapi_UActorComponent_CheckForErrors = (uapi_UActorComponent_CheckForErrorsFn)plugin->GetDllExport(TEXT("set_UActorComponent_CheckForErrors_handler\0"));
    if(apiuapi_UActorComponent_CheckForErrors){
        apiuapi_UActorComponent_CheckForErrors(&uapi_UActorComponent_CheckForErrors);
    }

    auto const apiuapi_UActorComponent_ClearNeedEndOfFrameUpdate = (uapi_UActorComponent_ClearNeedEndOfFrameUpdateFn)plugin->GetDllExport(TEXT("set_UActorComponent_ClearNeedEndOfFrameUpdate_handler\0"));
    if(apiuapi_UActorComponent_ClearNeedEndOfFrameUpdate){
        apiuapi_UActorComponent_ClearNeedEndOfFrameUpdate(&uapi_UActorComponent_ClearNeedEndOfFrameUpdate);
    }

    auto const apiuapi_UActorComponent_ClearUCSModifiedProperties = (uapi_UActorComponent_ClearUCSModifiedPropertiesFn)plugin->GetDllExport(TEXT("set_UActorComponent_ClearUCSModifiedProperties_handler\0"));
    if(apiuapi_UActorComponent_ClearUCSModifiedProperties){
        apiuapi_UActorComponent_ClearUCSModifiedProperties(&uapi_UActorComponent_ClearUCSModifiedProperties);
    }

    auto const apiuapi_UActorComponent_ComponentHasTag = (uapi_UActorComponent_ComponentHasTagFn)plugin->GetDllExport(TEXT("set_UActorComponent_ComponentHasTag_handler\0"));
    if(apiuapi_UActorComponent_ComponentHasTag){
        apiuapi_UActorComponent_ComponentHasTag(&uapi_UActorComponent_ComponentHasTag);
    }

    auto const apiuapi_UActorComponent_ComponentIsInLevel = (uapi_UActorComponent_ComponentIsInLevelFn)plugin->GetDllExport(TEXT("set_UActorComponent_ComponentIsInLevel_handler\0"));
    if(apiuapi_UActorComponent_ComponentIsInLevel){
        apiuapi_UActorComponent_ComponentIsInLevel(&uapi_UActorComponent_ComponentIsInLevel);
    }

    auto const apiuapi_UActorComponent_ComponentIsInPersistentLevel = (uapi_UActorComponent_ComponentIsInPersistentLevelFn)plugin->GetDllExport(TEXT("set_UActorComponent_ComponentIsInPersistentLevel_handler\0"));
    if(apiuapi_UActorComponent_ComponentIsInPersistentLevel){
        apiuapi_UActorComponent_ComponentIsInPersistentLevel(&uapi_UActorComponent_ComponentIsInPersistentLevel);
    }

    auto const apiuapi_UActorComponent_CreatePhysicsState = (uapi_UActorComponent_CreatePhysicsStateFn)plugin->GetDllExport(TEXT("set_UActorComponent_CreatePhysicsState_handler\0"));
    if(apiuapi_UActorComponent_CreatePhysicsState){
        apiuapi_UActorComponent_CreatePhysicsState(&uapi_UActorComponent_CreatePhysicsState);
    }

    auto const apiuapi_UActorComponent_Deactivate = (uapi_UActorComponent_DeactivateFn)plugin->GetDllExport(TEXT("set_UActorComponent_Deactivate_handler\0"));
    if(apiuapi_UActorComponent_Deactivate){
        apiuapi_UActorComponent_Deactivate(&uapi_UActorComponent_Deactivate);
    }

    auto const apiuapi_UActorComponent_DestroyComponent = (uapi_UActorComponent_DestroyComponentFn)plugin->GetDllExport(TEXT("set_UActorComponent_DestroyComponent_handler\0"));
    if(apiuapi_UActorComponent_DestroyComponent){
        apiuapi_UActorComponent_DestroyComponent(&uapi_UActorComponent_DestroyComponent);
    }

    auto const apiuapi_UActorComponent_DestroyPhysicsState = (uapi_UActorComponent_DestroyPhysicsStateFn)plugin->GetDllExport(TEXT("set_UActorComponent_DestroyPhysicsState_handler\0"));
    if(apiuapi_UActorComponent_DestroyPhysicsState){
        apiuapi_UActorComponent_DestroyPhysicsState(&uapi_UActorComponent_DestroyPhysicsState);
    }

    auto const apiuapi_UActorComponent_DetermineUCSModifiedProperties = (uapi_UActorComponent_DetermineUCSModifiedPropertiesFn)plugin->GetDllExport(TEXT("set_UActorComponent_DetermineUCSModifiedProperties_handler\0"));
    if(apiuapi_UActorComponent_DetermineUCSModifiedProperties){
        apiuapi_UActorComponent_DetermineUCSModifiedProperties(&uapi_UActorComponent_DetermineUCSModifiedProperties);
    }

    auto const apiuapi_UActorComponent_DoDeferredRenderUpdates_Concurrent = (uapi_UActorComponent_DoDeferredRenderUpdates_ConcurrentFn)plugin->GetDllExport(TEXT("set_UActorComponent_DoDeferredRenderUpdates_Concurrent_handler\0"));
    if(apiuapi_UActorComponent_DoDeferredRenderUpdates_Concurrent){
        apiuapi_UActorComponent_DoDeferredRenderUpdates_Concurrent(&uapi_UActorComponent_DoDeferredRenderUpdates_Concurrent);
    }

    auto const apiuapi_UActorComponent_GetComponentClassCanReplicate = (uapi_UActorComponent_GetComponentClassCanReplicateFn)plugin->GetDllExport(TEXT("set_UActorComponent_GetComponentClassCanReplicate_handler\0"));
    if(apiuapi_UActorComponent_GetComponentClassCanReplicate){
        apiuapi_UActorComponent_GetComponentClassCanReplicate(&uapi_UActorComponent_GetComponentClassCanReplicate);
    }

    auto const apiuapi_UActorComponent_GetComponentLevel = (uapi_UActorComponent_GetComponentLevelFn)plugin->GetDllExport(TEXT("set_UActorComponent_GetComponentLevel_handler\0"));
    if(apiuapi_UActorComponent_GetComponentLevel){
        apiuapi_UActorComponent_GetComponentLevel(&uapi_UActorComponent_GetComponentLevel);
    }

    auto const apiuapi_UActorComponent_GetComponentTickInterval = (uapi_UActorComponent_GetComponentTickIntervalFn)plugin->GetDllExport(TEXT("set_UActorComponent_GetComponentTickInterval_handler\0"));
    if(apiuapi_UActorComponent_GetComponentTickInterval){
        apiuapi_UActorComponent_GetComponentTickInterval(&uapi_UActorComponent_GetComponentTickInterval);
    }

    auto const apiuapi_UActorComponent_GetFunctionCallspace = (uapi_UActorComponent_GetFunctionCallspaceFn)plugin->GetDllExport(TEXT("set_UActorComponent_GetFunctionCallspace_handler\0"));
    if(apiuapi_UActorComponent_GetFunctionCallspace){
        apiuapi_UActorComponent_GetFunctionCallspace(&uapi_UActorComponent_GetFunctionCallspace);
    }

    auto const apiuapi_UActorComponent_GetIsReplicated = (uapi_UActorComponent_GetIsReplicatedFn)plugin->GetDllExport(TEXT("set_UActorComponent_GetIsReplicated_handler\0"));
    if(apiuapi_UActorComponent_GetIsReplicated){
        apiuapi_UActorComponent_GetIsReplicated(&uapi_UActorComponent_GetIsReplicated);
    }

    auto const apiuapi_UActorComponent_GetMarkedForEndOfFrameUpdateState = (uapi_UActorComponent_GetMarkedForEndOfFrameUpdateStateFn)plugin->GetDllExport(TEXT("set_UActorComponent_GetMarkedForEndOfFrameUpdateState_handler\0"));
    if(apiuapi_UActorComponent_GetMarkedForEndOfFrameUpdateState){
        apiuapi_UActorComponent_GetMarkedForEndOfFrameUpdateState(&uapi_UActorComponent_GetMarkedForEndOfFrameUpdateState);
    }

    auto const apiuapi_UActorComponent_GetMarkedForPreEndOfFrameSync = (uapi_UActorComponent_GetMarkedForPreEndOfFrameSyncFn)plugin->GetDllExport(TEXT("set_UActorComponent_GetMarkedForPreEndOfFrameSync_handler\0"));
    if(apiuapi_UActorComponent_GetMarkedForPreEndOfFrameSync){
        apiuapi_UActorComponent_GetMarkedForPreEndOfFrameSync(&uapi_UActorComponent_GetMarkedForPreEndOfFrameSync);
    }

    auto const apiuapi_UActorComponent_GetOwner = (uapi_UActorComponent_GetOwnerFn)plugin->GetDllExport(TEXT("set_UActorComponent_GetOwner_handler\0"));
    if(apiuapi_UActorComponent_GetOwner){
        apiuapi_UActorComponent_GetOwner(&uapi_UActorComponent_GetOwner);
    }

    auto const apiuapi_UActorComponent_GetReadableName = (uapi_UActorComponent_GetReadableNameFn)plugin->GetDllExport(TEXT("set_UActorComponent_GetReadableName_handler\0"));
    if(apiuapi_UActorComponent_GetReadableName){
        apiuapi_UActorComponent_GetReadableName(&uapi_UActorComponent_GetReadableName);
    }

    auto const apiuapi_UActorComponent_GetScene = (uapi_UActorComponent_GetSceneFn)plugin->GetDllExport(TEXT("set_UActorComponent_GetScene_handler\0"));
    if(apiuapi_UActorComponent_GetScene){
        apiuapi_UActorComponent_GetScene(&uapi_UActorComponent_GetScene);
    }

    auto const apiuapi_UActorComponent_GetUCSSerializationIndex = (uapi_UActorComponent_GetUCSSerializationIndexFn)plugin->GetDllExport(TEXT("set_UActorComponent_GetUCSSerializationIndex_handler\0"));
    if(apiuapi_UActorComponent_GetUCSSerializationIndex){
        apiuapi_UActorComponent_GetUCSSerializationIndex(&uapi_UActorComponent_GetUCSSerializationIndex);
    }

    auto const apiuapi_UActorComponent_GetWorld = (uapi_UActorComponent_GetWorldFn)plugin->GetDllExport(TEXT("set_UActorComponent_GetWorld_handler\0"));
    if(apiuapi_UActorComponent_GetWorld){
        apiuapi_UActorComponent_GetWorld(&uapi_UActorComponent_GetWorld);
    }

    auto const apiuapi_UActorComponent_HasBeenCreated = (uapi_UActorComponent_HasBeenCreatedFn)plugin->GetDllExport(TEXT("set_UActorComponent_HasBeenCreated_handler\0"));
    if(apiuapi_UActorComponent_HasBeenCreated){
        apiuapi_UActorComponent_HasBeenCreated(&uapi_UActorComponent_HasBeenCreated);
    }

    auto const apiuapi_UActorComponent_HasBeenInitialized = (uapi_UActorComponent_HasBeenInitializedFn)plugin->GetDllExport(TEXT("set_UActorComponent_HasBeenInitialized_handler\0"));
    if(apiuapi_UActorComponent_HasBeenInitialized){
        apiuapi_UActorComponent_HasBeenInitialized(&uapi_UActorComponent_HasBeenInitialized);
    }

    auto const apiuapi_UActorComponent_HasBegunPlay = (uapi_UActorComponent_HasBegunPlayFn)plugin->GetDllExport(TEXT("set_UActorComponent_HasBegunPlay_handler\0"));
    if(apiuapi_UActorComponent_HasBegunPlay){
        apiuapi_UActorComponent_HasBegunPlay(&uapi_UActorComponent_HasBegunPlay);
    }

    auto const apiuapi_UActorComponent_InitializeComponent = (uapi_UActorComponent_InitializeComponentFn)plugin->GetDllExport(TEXT("set_UActorComponent_InitializeComponent_handler\0"));
    if(apiuapi_UActorComponent_InitializeComponent){
        apiuapi_UActorComponent_InitializeComponent(&uapi_UActorComponent_InitializeComponent);
    }

    auto const apiuapi_UActorComponent_InvalidateLightingCache = (uapi_UActorComponent_InvalidateLightingCacheFn)plugin->GetDllExport(TEXT("set_UActorComponent_InvalidateLightingCache_handler\0"));
    if(apiuapi_UActorComponent_InvalidateLightingCache){
        apiuapi_UActorComponent_InvalidateLightingCache(&uapi_UActorComponent_InvalidateLightingCache);
    }

    auto const apiuapi_UActorComponent_InvalidateLightingCacheDetailed = (uapi_UActorComponent_InvalidateLightingCacheDetailedFn)plugin->GetDllExport(TEXT("set_UActorComponent_InvalidateLightingCacheDetailed_handler\0"));
    if(apiuapi_UActorComponent_InvalidateLightingCacheDetailed){
        apiuapi_UActorComponent_InvalidateLightingCacheDetailed(&uapi_UActorComponent_InvalidateLightingCacheDetailed);
    }

    auto const apiuapi_UActorComponent_IsActive = (uapi_UActorComponent_IsActiveFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsActive_handler\0"));
    if(apiuapi_UActorComponent_IsActive){
        apiuapi_UActorComponent_IsActive(&uapi_UActorComponent_IsActive);
    }

    auto const apiuapi_UActorComponent_IsBeingDestroyed = (uapi_UActorComponent_IsBeingDestroyedFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsBeingDestroyed_handler\0"));
    if(apiuapi_UActorComponent_IsBeingDestroyed){
        apiuapi_UActorComponent_IsBeingDestroyed(&uapi_UActorComponent_IsBeingDestroyed);
    }

    auto const apiuapi_UActorComponent_IsComponentTickEnabled = (uapi_UActorComponent_IsComponentTickEnabledFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsComponentTickEnabled_handler\0"));
    if(apiuapi_UActorComponent_IsComponentTickEnabled){
        apiuapi_UActorComponent_IsComponentTickEnabled(&uapi_UActorComponent_IsComponentTickEnabled);
    }

    auto const apiuapi_UActorComponent_IsCreatedByConstructionScript = (uapi_UActorComponent_IsCreatedByConstructionScriptFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsCreatedByConstructionScript_handler\0"));
    if(apiuapi_UActorComponent_IsCreatedByConstructionScript){
        apiuapi_UActorComponent_IsCreatedByConstructionScript(&uapi_UActorComponent_IsCreatedByConstructionScript);
    }

    auto const apiuapi_UActorComponent_IsEditableWhenInherited = (uapi_UActorComponent_IsEditableWhenInheritedFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsEditableWhenInherited_handler\0"));
    if(apiuapi_UActorComponent_IsEditableWhenInherited){
        apiuapi_UActorComponent_IsEditableWhenInherited(&uapi_UActorComponent_IsEditableWhenInherited);
    }

    auto const apiuapi_UActorComponent_IsEditorOnly = (uapi_UActorComponent_IsEditorOnlyFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsEditorOnly_handler\0"));
    if(apiuapi_UActorComponent_IsEditorOnly){
        apiuapi_UActorComponent_IsEditorOnly(&uapi_UActorComponent_IsEditorOnly);
    }

    auto const apiuapi_UActorComponent_IsHLODRelevant = (uapi_UActorComponent_IsHLODRelevantFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsHLODRelevant_handler\0"));
    if(apiuapi_UActorComponent_IsHLODRelevant){
        apiuapi_UActorComponent_IsHLODRelevant(&uapi_UActorComponent_IsHLODRelevant);
    }

    auto const apiuapi_UActorComponent_IsNameStableForNetworking = (uapi_UActorComponent_IsNameStableForNetworkingFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsNameStableForNetworking_handler\0"));
    if(apiuapi_UActorComponent_IsNameStableForNetworking){
        apiuapi_UActorComponent_IsNameStableForNetworking(&uapi_UActorComponent_IsNameStableForNetworking);
    }

    auto const apiuapi_UActorComponent_IsNavigationRelevant = (uapi_UActorComponent_IsNavigationRelevantFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsNavigationRelevant_handler\0"));
    if(apiuapi_UActorComponent_IsNavigationRelevant){
        apiuapi_UActorComponent_IsNavigationRelevant(&uapi_UActorComponent_IsNavigationRelevant);
    }

    auto const apiuapi_UActorComponent_IsNetSimulating = (uapi_UActorComponent_IsNetSimulatingFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsNetSimulating_handler\0"));
    if(apiuapi_UActorComponent_IsNetSimulating){
        apiuapi_UActorComponent_IsNetSimulating(&uapi_UActorComponent_IsNetSimulating);
    }

    auto const apiuapi_UActorComponent_IsNetStartupComponent = (uapi_UActorComponent_IsNetStartupComponentFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsNetStartupComponent_handler\0"));
    if(apiuapi_UActorComponent_IsNetStartupComponent){
        apiuapi_UActorComponent_IsNetStartupComponent(&uapi_UActorComponent_IsNetStartupComponent);
    }

    auto const apiuapi_UActorComponent_IsOwnerRunningUserConstructionScript = (uapi_UActorComponent_IsOwnerRunningUserConstructionScriptFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsOwnerRunningUserConstructionScript_handler\0"));
    if(apiuapi_UActorComponent_IsOwnerRunningUserConstructionScript){
        apiuapi_UActorComponent_IsOwnerRunningUserConstructionScript(&uapi_UActorComponent_IsOwnerRunningUserConstructionScript);
    }

    auto const apiuapi_UActorComponent_IsOwnerSelected = (uapi_UActorComponent_IsOwnerSelectedFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsOwnerSelected_handler\0"));
    if(apiuapi_UActorComponent_IsOwnerSelected){
        apiuapi_UActorComponent_IsOwnerSelected(&uapi_UActorComponent_IsOwnerSelected);
    }

    auto const apiuapi_UActorComponent_IsPhysicsStateCreated = (uapi_UActorComponent_IsPhysicsStateCreatedFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsPhysicsStateCreated_handler\0"));
    if(apiuapi_UActorComponent_IsPhysicsStateCreated){
        apiuapi_UActorComponent_IsPhysicsStateCreated(&uapi_UActorComponent_IsPhysicsStateCreated);
    }

    auto const apiuapi_UActorComponent_IsReadyForOwnerToAutoDestroy = (uapi_UActorComponent_IsReadyForOwnerToAutoDestroyFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsReadyForOwnerToAutoDestroy_handler\0"));
    if(apiuapi_UActorComponent_IsReadyForOwnerToAutoDestroy){
        apiuapi_UActorComponent_IsReadyForOwnerToAutoDestroy(&uapi_UActorComponent_IsReadyForOwnerToAutoDestroy);
    }

    auto const apiuapi_UActorComponent_IsReadyForReplication = (uapi_UActorComponent_IsReadyForReplicationFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsReadyForReplication_handler\0"));
    if(apiuapi_UActorComponent_IsReadyForReplication){
        apiuapi_UActorComponent_IsReadyForReplication(&uapi_UActorComponent_IsReadyForReplication);
    }

    auto const apiuapi_UActorComponent_IsRegistered = (uapi_UActorComponent_IsRegisteredFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsRegistered_handler\0"));
    if(apiuapi_UActorComponent_IsRegistered){
        apiuapi_UActorComponent_IsRegistered(&uapi_UActorComponent_IsRegistered);
    }

    auto const apiuapi_UActorComponent_IsRenderInstancesDirty = (uapi_UActorComponent_IsRenderInstancesDirtyFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsRenderInstancesDirty_handler\0"));
    if(apiuapi_UActorComponent_IsRenderInstancesDirty){
        apiuapi_UActorComponent_IsRenderInstancesDirty(&uapi_UActorComponent_IsRenderInstancesDirty);
    }

    auto const apiuapi_UActorComponent_IsRenderStateCreated = (uapi_UActorComponent_IsRenderStateCreatedFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsRenderStateCreated_handler\0"));
    if(apiuapi_UActorComponent_IsRenderStateCreated){
        apiuapi_UActorComponent_IsRenderStateCreated(&uapi_UActorComponent_IsRenderStateCreated);
    }

    auto const apiuapi_UActorComponent_IsRenderStateDirty = (uapi_UActorComponent_IsRenderStateDirtyFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsRenderStateDirty_handler\0"));
    if(apiuapi_UActorComponent_IsRenderStateDirty){
        apiuapi_UActorComponent_IsRenderStateDirty(&uapi_UActorComponent_IsRenderStateDirty);
    }

    auto const apiuapi_UActorComponent_IsRenderTransformDirty = (uapi_UActorComponent_IsRenderTransformDirtyFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsRenderTransformDirty_handler\0"));
    if(apiuapi_UActorComponent_IsRenderTransformDirty){
        apiuapi_UActorComponent_IsRenderTransformDirty(&uapi_UActorComponent_IsRenderTransformDirty);
    }

    auto const apiuapi_UActorComponent_IsReplicatedSubObjectRegistered = (uapi_UActorComponent_IsReplicatedSubObjectRegisteredFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsReplicatedSubObjectRegistered_handler\0"));
    if(apiuapi_UActorComponent_IsReplicatedSubObjectRegistered){
        apiuapi_UActorComponent_IsReplicatedSubObjectRegistered(&uapi_UActorComponent_IsReplicatedSubObjectRegistered);
    }

    auto const apiuapi_UActorComponent_IsSelectedInEditor = (uapi_UActorComponent_IsSelectedInEditorFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsSelectedInEditor_handler\0"));
    if(apiuapi_UActorComponent_IsSelectedInEditor){
        apiuapi_UActorComponent_IsSelectedInEditor(&uapi_UActorComponent_IsSelectedInEditor);
    }

    auto const apiuapi_UActorComponent_IsSupportedForNetworking = (uapi_UActorComponent_IsSupportedForNetworkingFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsSupportedForNetworking_handler\0"));
    if(apiuapi_UActorComponent_IsSupportedForNetworking){
        apiuapi_UActorComponent_IsSupportedForNetworking(&uapi_UActorComponent_IsSupportedForNetworking);
    }

    auto const apiuapi_UActorComponent_IsUsingRegisteredSubObjectList = (uapi_UActorComponent_IsUsingRegisteredSubObjectListFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsUsingRegisteredSubObjectList_handler\0"));
    if(apiuapi_UActorComponent_IsUsingRegisteredSubObjectList){
        apiuapi_UActorComponent_IsUsingRegisteredSubObjectList(&uapi_UActorComponent_IsUsingRegisteredSubObjectList);
    }

    auto const apiuapi_UActorComponent_IsVisualizationComponent = (uapi_UActorComponent_IsVisualizationComponentFn)plugin->GetDllExport(TEXT("set_UActorComponent_IsVisualizationComponent_handler\0"));
    if(apiuapi_UActorComponent_IsVisualizationComponent){
        apiuapi_UActorComponent_IsVisualizationComponent(&uapi_UActorComponent_IsVisualizationComponent);
    }

    auto const apiuapi_UActorComponent_K2_DestroyComponent = (uapi_UActorComponent_K2_DestroyComponentFn)plugin->GetDllExport(TEXT("set_UActorComponent_K2_DestroyComponent_handler\0"));
    if(apiuapi_UActorComponent_K2_DestroyComponent){
        apiuapi_UActorComponent_K2_DestroyComponent(&uapi_UActorComponent_K2_DestroyComponent);
    }

    auto const apiuapi_UActorComponent_MarkAsEditorOnlySubobject = (uapi_UActorComponent_MarkAsEditorOnlySubobjectFn)plugin->GetDllExport(TEXT("set_UActorComponent_MarkAsEditorOnlySubobject_handler\0"));
    if(apiuapi_UActorComponent_MarkAsEditorOnlySubobject){
        apiuapi_UActorComponent_MarkAsEditorOnlySubobject(&uapi_UActorComponent_MarkAsEditorOnlySubobject);
    }

    auto const apiuapi_UActorComponent_MarkForNeededEndOfFrameRecreate = (uapi_UActorComponent_MarkForNeededEndOfFrameRecreateFn)plugin->GetDllExport(TEXT("set_UActorComponent_MarkForNeededEndOfFrameRecreate_handler\0"));
    if(apiuapi_UActorComponent_MarkForNeededEndOfFrameRecreate){
        apiuapi_UActorComponent_MarkForNeededEndOfFrameRecreate(&uapi_UActorComponent_MarkForNeededEndOfFrameRecreate);
    }

    auto const apiuapi_UActorComponent_MarkForNeededEndOfFrameUpdate = (uapi_UActorComponent_MarkForNeededEndOfFrameUpdateFn)plugin->GetDllExport(TEXT("set_UActorComponent_MarkForNeededEndOfFrameUpdate_handler\0"));
    if(apiuapi_UActorComponent_MarkForNeededEndOfFrameUpdate){
        apiuapi_UActorComponent_MarkForNeededEndOfFrameUpdate(&uapi_UActorComponent_MarkForNeededEndOfFrameUpdate);
    }

    auto const apiuapi_UActorComponent_MarkRenderDynamicDataDirty = (uapi_UActorComponent_MarkRenderDynamicDataDirtyFn)plugin->GetDllExport(TEXT("set_UActorComponent_MarkRenderDynamicDataDirty_handler\0"));
    if(apiuapi_UActorComponent_MarkRenderDynamicDataDirty){
        apiuapi_UActorComponent_MarkRenderDynamicDataDirty(&uapi_UActorComponent_MarkRenderDynamicDataDirty);
    }

    auto const apiuapi_UActorComponent_MarkRenderInstancesDirty = (uapi_UActorComponent_MarkRenderInstancesDirtyFn)plugin->GetDllExport(TEXT("set_UActorComponent_MarkRenderInstancesDirty_handler\0"));
    if(apiuapi_UActorComponent_MarkRenderInstancesDirty){
        apiuapi_UActorComponent_MarkRenderInstancesDirty(&uapi_UActorComponent_MarkRenderInstancesDirty);
    }

    auto const apiuapi_UActorComponent_MarkRenderStateDirty = (uapi_UActorComponent_MarkRenderStateDirtyFn)plugin->GetDllExport(TEXT("set_UActorComponent_MarkRenderStateDirty_handler\0"));
    if(apiuapi_UActorComponent_MarkRenderStateDirty){
        apiuapi_UActorComponent_MarkRenderStateDirty(&uapi_UActorComponent_MarkRenderStateDirty);
    }

    auto const apiuapi_UActorComponent_MarkRenderTransformDirty = (uapi_UActorComponent_MarkRenderTransformDirtyFn)plugin->GetDllExport(TEXT("set_UActorComponent_MarkRenderTransformDirty_handler\0"));
    if(apiuapi_UActorComponent_MarkRenderTransformDirty){
        apiuapi_UActorComponent_MarkRenderTransformDirty(&uapi_UActorComponent_MarkRenderTransformDirty);
    }

    auto const apiuapi_UActorComponent_Modify = (uapi_UActorComponent_ModifyFn)plugin->GetDllExport(TEXT("set_UActorComponent_Modify_handler\0"));
    if(apiuapi_UActorComponent_Modify){
        apiuapi_UActorComponent_Modify(&uapi_UActorComponent_Modify);
    }

    auto const apiuapi_UActorComponent_NeedsLoadForClient = (uapi_UActorComponent_NeedsLoadForClientFn)plugin->GetDllExport(TEXT("set_UActorComponent_NeedsLoadForClient_handler\0"));
    if(apiuapi_UActorComponent_NeedsLoadForClient){
        apiuapi_UActorComponent_NeedsLoadForClient(&uapi_UActorComponent_NeedsLoadForClient);
    }

    auto const apiuapi_UActorComponent_NeedsLoadForEditorGame = (uapi_UActorComponent_NeedsLoadForEditorGameFn)plugin->GetDllExport(TEXT("set_UActorComponent_NeedsLoadForEditorGame_handler\0"));
    if(apiuapi_UActorComponent_NeedsLoadForEditorGame){
        apiuapi_UActorComponent_NeedsLoadForEditorGame(&uapi_UActorComponent_NeedsLoadForEditorGame);
    }

    auto const apiuapi_UActorComponent_NeedsLoadForServer = (uapi_UActorComponent_NeedsLoadForServerFn)plugin->GetDllExport(TEXT("set_UActorComponent_NeedsLoadForServer_handler\0"));
    if(apiuapi_UActorComponent_NeedsLoadForServer){
        apiuapi_UActorComponent_NeedsLoadForServer(&uapi_UActorComponent_NeedsLoadForServer);
    }

    auto const apiuapi_UActorComponent_OnActorEnableCollisionChanged = (uapi_UActorComponent_OnActorEnableCollisionChangedFn)plugin->GetDllExport(TEXT("set_UActorComponent_OnActorEnableCollisionChanged_handler\0"));
    if(apiuapi_UActorComponent_OnActorEnableCollisionChanged){
        apiuapi_UActorComponent_OnActorEnableCollisionChanged(&uapi_UActorComponent_OnActorEnableCollisionChanged);
    }

    auto const apiuapi_UActorComponent_OnComponentCreated = (uapi_UActorComponent_OnComponentCreatedFn)plugin->GetDllExport(TEXT("set_UActorComponent_OnComponentCreated_handler\0"));
    if(apiuapi_UActorComponent_OnComponentCreated){
        apiuapi_UActorComponent_OnComponentCreated(&uapi_UActorComponent_OnComponentCreated);
    }

    auto const apiuapi_UActorComponent_OnComponentDestroyed = (uapi_UActorComponent_OnComponentDestroyedFn)plugin->GetDllExport(TEXT("set_UActorComponent_OnComponentDestroyed_handler\0"));
    if(apiuapi_UActorComponent_OnComponentDestroyed){
        apiuapi_UActorComponent_OnComponentDestroyed(&uapi_UActorComponent_OnComponentDestroyed);
    }

    auto const apiuapi_UActorComponent_OnCreatedFromReplication = (uapi_UActorComponent_OnCreatedFromReplicationFn)plugin->GetDllExport(TEXT("set_UActorComponent_OnCreatedFromReplication_handler\0"));
    if(apiuapi_UActorComponent_OnCreatedFromReplication){
        apiuapi_UActorComponent_OnCreatedFromReplication(&uapi_UActorComponent_OnCreatedFromReplication);
    }

    auto const apiuapi_UActorComponent_OnDestroyedFromReplication = (uapi_UActorComponent_OnDestroyedFromReplicationFn)plugin->GetDllExport(TEXT("set_UActorComponent_OnDestroyedFromReplication_handler\0"));
    if(apiuapi_UActorComponent_OnDestroyedFromReplication){
        apiuapi_UActorComponent_OnDestroyedFromReplication(&uapi_UActorComponent_OnDestroyedFromReplication);
    }

    auto const apiuapi_UActorComponent_OnEndOfFrameUpdateDuringTick = (uapi_UActorComponent_OnEndOfFrameUpdateDuringTickFn)plugin->GetDllExport(TEXT("set_UActorComponent_OnEndOfFrameUpdateDuringTick_handler\0"));
    if(apiuapi_UActorComponent_OnEndOfFrameUpdateDuringTick){
        apiuapi_UActorComponent_OnEndOfFrameUpdateDuringTick(&uapi_UActorComponent_OnEndOfFrameUpdateDuringTick);
    }

    auto const apiuapi_UActorComponent_OnPreEndOfFrameSync = (uapi_UActorComponent_OnPreEndOfFrameSyncFn)plugin->GetDllExport(TEXT("set_UActorComponent_OnPreEndOfFrameSync_handler\0"));
    if(apiuapi_UActorComponent_OnPreEndOfFrameSync){
        apiuapi_UActorComponent_OnPreEndOfFrameSync(&uapi_UActorComponent_OnPreEndOfFrameSync);
    }

    auto const apiuapi_UActorComponent_OnRep_IsActive = (uapi_UActorComponent_OnRep_IsActiveFn)plugin->GetDllExport(TEXT("set_UActorComponent_OnRep_IsActive_handler\0"));
    if(apiuapi_UActorComponent_OnRep_IsActive){
        apiuapi_UActorComponent_OnRep_IsActive(&uapi_UActorComponent_OnRep_IsActive);
    }

    auto const apiuapi_UActorComponent_PostApplyToComponent = (uapi_UActorComponent_PostApplyToComponentFn)plugin->GetDllExport(TEXT("set_UActorComponent_PostApplyToComponent_handler\0"));
    if(apiuapi_UActorComponent_PostApplyToComponent){
        apiuapi_UActorComponent_PostApplyToComponent(&uapi_UActorComponent_PostApplyToComponent);
    }

    auto const apiuapi_UActorComponent_PostEditUndo = (uapi_UActorComponent_PostEditUndoFn)plugin->GetDllExport(TEXT("set_UActorComponent_PostEditUndo_handler\0"));
    if(apiuapi_UActorComponent_PostEditUndo){
        apiuapi_UActorComponent_PostEditUndo(&uapi_UActorComponent_PostEditUndo);
    }

    auto const apiuapi_UActorComponent_PostInitProperties = (uapi_UActorComponent_PostInitPropertiesFn)plugin->GetDllExport(TEXT("set_UActorComponent_PostInitProperties_handler\0"));
    if(apiuapi_UActorComponent_PostInitProperties){
        apiuapi_UActorComponent_PostInitProperties(&uapi_UActorComponent_PostInitProperties);
    }

    auto const apiuapi_UActorComponent_PostLoad = (uapi_UActorComponent_PostLoadFn)plugin->GetDllExport(TEXT("set_UActorComponent_PostLoad_handler\0"));
    if(apiuapi_UActorComponent_PostLoad){
        apiuapi_UActorComponent_PostLoad(&uapi_UActorComponent_PostLoad);
    }

    auto const apiuapi_UActorComponent_PostRename = (uapi_UActorComponent_PostRenameFn)plugin->GetDllExport(TEXT("set_UActorComponent_PostRename_handler\0"));
    if(apiuapi_UActorComponent_PostRename){
        apiuapi_UActorComponent_PostRename(&uapi_UActorComponent_PostRename);
    }

    auto const apiuapi_UActorComponent_PreEditChange = (uapi_UActorComponent_PreEditChangeFn)plugin->GetDllExport(TEXT("set_UActorComponent_PreEditChange_handler\0"));
    if(apiuapi_UActorComponent_PreEditChange){
        apiuapi_UActorComponent_PreEditChange(&uapi_UActorComponent_PreEditChange);
    }

    auto const apiuapi_UActorComponent_PreEditUndo = (uapi_UActorComponent_PreEditUndoFn)plugin->GetDllExport(TEXT("set_UActorComponent_PreEditUndo_handler\0"));
    if(apiuapi_UActorComponent_PreEditUndo){
        apiuapi_UActorComponent_PreEditUndo(&uapi_UActorComponent_PreEditUndo);
    }

    auto const apiuapi_UActorComponent_ReadyForReplication = (uapi_UActorComponent_ReadyForReplicationFn)plugin->GetDllExport(TEXT("set_UActorComponent_ReadyForReplication_handler\0"));
    if(apiuapi_UActorComponent_ReadyForReplication){
        apiuapi_UActorComponent_ReadyForReplication(&uapi_UActorComponent_ReadyForReplication);
    }

    auto const apiuapi_UActorComponent_ReceiveAsyncPhysicsTick = (uapi_UActorComponent_ReceiveAsyncPhysicsTickFn)plugin->GetDllExport(TEXT("set_UActorComponent_ReceiveAsyncPhysicsTick_handler\0"));
    if(apiuapi_UActorComponent_ReceiveAsyncPhysicsTick){
        apiuapi_UActorComponent_ReceiveAsyncPhysicsTick(&uapi_UActorComponent_ReceiveAsyncPhysicsTick);
    }

    auto const apiuapi_UActorComponent_ReceiveBeginPlay = (uapi_UActorComponent_ReceiveBeginPlayFn)plugin->GetDllExport(TEXT("set_UActorComponent_ReceiveBeginPlay_handler\0"));
    if(apiuapi_UActorComponent_ReceiveBeginPlay){
        apiuapi_UActorComponent_ReceiveBeginPlay(&uapi_UActorComponent_ReceiveBeginPlay);
    }

    auto const apiuapi_UActorComponent_ReceiveTick = (uapi_UActorComponent_ReceiveTickFn)plugin->GetDllExport(TEXT("set_UActorComponent_ReceiveTick_handler\0"));
    if(apiuapi_UActorComponent_ReceiveTick){
        apiuapi_UActorComponent_ReceiveTick(&uapi_UActorComponent_ReceiveTick);
    }

    auto const apiuapi_UActorComponent_RecreatePhysicsState = (uapi_UActorComponent_RecreatePhysicsStateFn)plugin->GetDllExport(TEXT("set_UActorComponent_RecreatePhysicsState_handler\0"));
    if(apiuapi_UActorComponent_RecreatePhysicsState){
        apiuapi_UActorComponent_RecreatePhysicsState(&uapi_UActorComponent_RecreatePhysicsState);
    }

    auto const apiuapi_UActorComponent_RecreateRenderState_Concurrent = (uapi_UActorComponent_RecreateRenderState_ConcurrentFn)plugin->GetDllExport(TEXT("set_UActorComponent_RecreateRenderState_Concurrent_handler\0"));
    if(apiuapi_UActorComponent_RecreateRenderState_Concurrent){
        apiuapi_UActorComponent_RecreateRenderState_Concurrent(&uapi_UActorComponent_RecreateRenderState_Concurrent);
    }

    auto const apiuapi_UActorComponent_RegisterAllComponentTickFunctions = (uapi_UActorComponent_RegisterAllComponentTickFunctionsFn)plugin->GetDllExport(TEXT("set_UActorComponent_RegisterAllComponentTickFunctions_handler\0"));
    if(apiuapi_UActorComponent_RegisterAllComponentTickFunctions){
        apiuapi_UActorComponent_RegisterAllComponentTickFunctions(&uapi_UActorComponent_RegisterAllComponentTickFunctions);
    }

    auto const apiuapi_UActorComponent_RegisterComponent = (uapi_UActorComponent_RegisterComponentFn)plugin->GetDllExport(TEXT("set_UActorComponent_RegisterComponent_handler\0"));
    if(apiuapi_UActorComponent_RegisterComponent){
        apiuapi_UActorComponent_RegisterComponent(&uapi_UActorComponent_RegisterComponent);
    }

    auto const apiuapi_UActorComponent_RegisterComponentWithWorld = (uapi_UActorComponent_RegisterComponentWithWorldFn)plugin->GetDllExport(TEXT("set_UActorComponent_RegisterComponentWithWorld_handler\0"));
    if(apiuapi_UActorComponent_RegisterComponentWithWorld){
        apiuapi_UActorComponent_RegisterComponentWithWorld(&uapi_UActorComponent_RegisterComponentWithWorld);
    }

    auto const apiuapi_UActorComponent_RemoveReplicatedSubObject = (uapi_UActorComponent_RemoveReplicatedSubObjectFn)plugin->GetDllExport(TEXT("set_UActorComponent_RemoveReplicatedSubObject_handler\0"));
    if(apiuapi_UActorComponent_RemoveReplicatedSubObject){
        apiuapi_UActorComponent_RemoveReplicatedSubObject(&uapi_UActorComponent_RemoveReplicatedSubObject);
    }

    auto const apiuapi_UActorComponent_RemoveTickPrerequisiteActor = (uapi_UActorComponent_RemoveTickPrerequisiteActorFn)plugin->GetDllExport(TEXT("set_UActorComponent_RemoveTickPrerequisiteActor_handler\0"));
    if(apiuapi_UActorComponent_RemoveTickPrerequisiteActor){
        apiuapi_UActorComponent_RemoveTickPrerequisiteActor(&uapi_UActorComponent_RemoveTickPrerequisiteActor);
    }

    auto const apiuapi_UActorComponent_RemoveTickPrerequisiteComponent = (uapi_UActorComponent_RemoveTickPrerequisiteComponentFn)plugin->GetDllExport(TEXT("set_UActorComponent_RemoveTickPrerequisiteComponent_handler\0"));
    if(apiuapi_UActorComponent_RemoveTickPrerequisiteComponent){
        apiuapi_UActorComponent_RemoveTickPrerequisiteComponent(&uapi_UActorComponent_RemoveTickPrerequisiteComponent);
    }

    auto const apiuapi_UActorComponent_ReplicateSubobjects = (uapi_UActorComponent_ReplicateSubobjectsFn)plugin->GetDllExport(TEXT("set_UActorComponent_ReplicateSubobjects_handler\0"));
    if(apiuapi_UActorComponent_ReplicateSubobjects){
        apiuapi_UActorComponent_ReplicateSubobjects(&uapi_UActorComponent_ReplicateSubobjects);
    }

    auto const apiuapi_UActorComponent_RequiresGameThreadEndOfFrameRecreate = (uapi_UActorComponent_RequiresGameThreadEndOfFrameRecreateFn)plugin->GetDllExport(TEXT("set_UActorComponent_RequiresGameThreadEndOfFrameRecreate_handler\0"));
    if(apiuapi_UActorComponent_RequiresGameThreadEndOfFrameRecreate){
        apiuapi_UActorComponent_RequiresGameThreadEndOfFrameRecreate(&uapi_UActorComponent_RequiresGameThreadEndOfFrameRecreate);
    }

    auto const apiuapi_UActorComponent_RequiresGameThreadEndOfFrameUpdates = (uapi_UActorComponent_RequiresGameThreadEndOfFrameUpdatesFn)plugin->GetDllExport(TEXT("set_UActorComponent_RequiresGameThreadEndOfFrameUpdates_handler\0"));
    if(apiuapi_UActorComponent_RequiresGameThreadEndOfFrameUpdates){
        apiuapi_UActorComponent_RequiresGameThreadEndOfFrameUpdates(&uapi_UActorComponent_RequiresGameThreadEndOfFrameUpdates);
    }

    auto const apiuapi_UActorComponent_RequiresPreEndOfFrameSync = (uapi_UActorComponent_RequiresPreEndOfFrameSyncFn)plugin->GetDllExport(TEXT("set_UActorComponent_RequiresPreEndOfFrameSync_handler\0"));
    if(apiuapi_UActorComponent_RequiresPreEndOfFrameSync){
        apiuapi_UActorComponent_RequiresPreEndOfFrameSync(&uapi_UActorComponent_RequiresPreEndOfFrameSync);
    }

    auto const apiuapi_UActorComponent_ReregisterComponent = (uapi_UActorComponent_ReregisterComponentFn)plugin->GetDllExport(TEXT("set_UActorComponent_ReregisterComponent_handler\0"));
    if(apiuapi_UActorComponent_ReregisterComponent){
        apiuapi_UActorComponent_ReregisterComponent(&uapi_UActorComponent_ReregisterComponent);
    }

    auto const apiuapi_UActorComponent_SetActive = (uapi_UActorComponent_SetActiveFn)plugin->GetDllExport(TEXT("set_UActorComponent_SetActive_handler\0"));
    if(apiuapi_UActorComponent_SetActive){
        apiuapi_UActorComponent_SetActive(&uapi_UActorComponent_SetActive);
    }

    auto const apiuapi_UActorComponent_SetActiveFlag = (uapi_UActorComponent_SetActiveFlagFn)plugin->GetDllExport(TEXT("set_UActorComponent_SetActiveFlag_handler\0"));
    if(apiuapi_UActorComponent_SetActiveFlag){
        apiuapi_UActorComponent_SetActiveFlag(&uapi_UActorComponent_SetActiveFlag);
    }

    auto const apiuapi_UActorComponent_SetAutoActivate = (uapi_UActorComponent_SetAutoActivateFn)plugin->GetDllExport(TEXT("set_UActorComponent_SetAutoActivate_handler\0"));
    if(apiuapi_UActorComponent_SetAutoActivate){
        apiuapi_UActorComponent_SetAutoActivate(&uapi_UActorComponent_SetAutoActivate);
    }

    auto const apiuapi_UActorComponent_SetCanEverAffectNavigation = (uapi_UActorComponent_SetCanEverAffectNavigationFn)plugin->GetDllExport(TEXT("set_UActorComponent_SetCanEverAffectNavigation_handler\0"));
    if(apiuapi_UActorComponent_SetCanEverAffectNavigation){
        apiuapi_UActorComponent_SetCanEverAffectNavigation(&uapi_UActorComponent_SetCanEverAffectNavigation);
    }

    auto const apiuapi_UActorComponent_SetComponentTickEnabled = (uapi_UActorComponent_SetComponentTickEnabledFn)plugin->GetDllExport(TEXT("set_UActorComponent_SetComponentTickEnabled_handler\0"));
    if(apiuapi_UActorComponent_SetComponentTickEnabled){
        apiuapi_UActorComponent_SetComponentTickEnabled(&uapi_UActorComponent_SetComponentTickEnabled);
    }

    auto const apiuapi_UActorComponent_SetComponentTickEnabledAsync = (uapi_UActorComponent_SetComponentTickEnabledAsyncFn)plugin->GetDllExport(TEXT("set_UActorComponent_SetComponentTickEnabledAsync_handler\0"));
    if(apiuapi_UActorComponent_SetComponentTickEnabledAsync){
        apiuapi_UActorComponent_SetComponentTickEnabledAsync(&uapi_UActorComponent_SetComponentTickEnabledAsync);
    }

    auto const apiuapi_UActorComponent_SetComponentTickInterval = (uapi_UActorComponent_SetComponentTickIntervalFn)plugin->GetDllExport(TEXT("set_UActorComponent_SetComponentTickInterval_handler\0"));
    if(apiuapi_UActorComponent_SetComponentTickInterval){
        apiuapi_UActorComponent_SetComponentTickInterval(&uapi_UActorComponent_SetComponentTickInterval);
    }

    auto const apiuapi_UActorComponent_SetComponentTickIntervalAndCooldown = (uapi_UActorComponent_SetComponentTickIntervalAndCooldownFn)plugin->GetDllExport(TEXT("set_UActorComponent_SetComponentTickIntervalAndCooldown_handler\0"));
    if(apiuapi_UActorComponent_SetComponentTickIntervalAndCooldown){
        apiuapi_UActorComponent_SetComponentTickIntervalAndCooldown(&uapi_UActorComponent_SetComponentTickIntervalAndCooldown);
    }

    auto const apiuapi_UActorComponent_SetIsNetStartupComponent = (uapi_UActorComponent_SetIsNetStartupComponentFn)plugin->GetDllExport(TEXT("set_UActorComponent_SetIsNetStartupComponent_handler\0"));
    if(apiuapi_UActorComponent_SetIsNetStartupComponent){
        apiuapi_UActorComponent_SetIsNetStartupComponent(&uapi_UActorComponent_SetIsNetStartupComponent);
    }

    auto const apiuapi_UActorComponent_SetIsReplicated = (uapi_UActorComponent_SetIsReplicatedFn)plugin->GetDllExport(TEXT("set_UActorComponent_SetIsReplicated_handler\0"));
    if(apiuapi_UActorComponent_SetIsReplicated){
        apiuapi_UActorComponent_SetIsReplicated(&uapi_UActorComponent_SetIsReplicated);
    }

    auto const apiuapi_UActorComponent_SetIsVisualizationComponent = (uapi_UActorComponent_SetIsVisualizationComponentFn)plugin->GetDllExport(TEXT("set_UActorComponent_SetIsVisualizationComponent_handler\0"));
    if(apiuapi_UActorComponent_SetIsVisualizationComponent){
        apiuapi_UActorComponent_SetIsVisualizationComponent(&uapi_UActorComponent_SetIsVisualizationComponent);
    }

    auto const apiuapi_UActorComponent_SetNetAddressable = (uapi_UActorComponent_SetNetAddressableFn)plugin->GetDllExport(TEXT("set_UActorComponent_SetNetAddressable_handler\0"));
    if(apiuapi_UActorComponent_SetNetAddressable){
        apiuapi_UActorComponent_SetNetAddressable(&uapi_UActorComponent_SetNetAddressable);
    }

    auto const apiuapi_UActorComponent_SetPackageExternal = (uapi_UActorComponent_SetPackageExternalFn)plugin->GetDllExport(TEXT("set_UActorComponent_SetPackageExternal_handler\0"));
    if(apiuapi_UActorComponent_SetPackageExternal){
        apiuapi_UActorComponent_SetPackageExternal(&uapi_UActorComponent_SetPackageExternal);
    }

    auto const apiuapi_UActorComponent_SetTickableWhenPaused = (uapi_UActorComponent_SetTickableWhenPausedFn)plugin->GetDllExport(TEXT("set_UActorComponent_SetTickableWhenPaused_handler\0"));
    if(apiuapi_UActorComponent_SetTickableWhenPaused){
        apiuapi_UActorComponent_SetTickableWhenPaused(&uapi_UActorComponent_SetTickableWhenPaused);
    }

    auto const apiuapi_UActorComponent_SetupActorComponentTickFunction = (uapi_UActorComponent_SetupActorComponentTickFunctionFn)plugin->GetDllExport(TEXT("set_UActorComponent_SetupActorComponentTickFunction_handler\0"));
    if(apiuapi_UActorComponent_SetupActorComponentTickFunction){
        apiuapi_UActorComponent_SetupActorComponentTickFunction(&uapi_UActorComponent_SetupActorComponentTickFunction);
    }

    auto const apiuapi_UActorComponent_ToggleActive = (uapi_UActorComponent_ToggleActiveFn)plugin->GetDllExport(TEXT("set_UActorComponent_ToggleActive_handler\0"));
    if(apiuapi_UActorComponent_ToggleActive){
        apiuapi_UActorComponent_ToggleActive(&uapi_UActorComponent_ToggleActive);
    }

    auto const apiuapi_UActorComponent_UninitializeComponent = (uapi_UActorComponent_UninitializeComponentFn)plugin->GetDllExport(TEXT("set_UActorComponent_UninitializeComponent_handler\0"));
    if(apiuapi_UActorComponent_UninitializeComponent){
        apiuapi_UActorComponent_UninitializeComponent(&uapi_UActorComponent_UninitializeComponent);
    }

    auto const apiuapi_UActorComponent_UnregisterComponent = (uapi_UActorComponent_UnregisterComponentFn)plugin->GetDllExport(TEXT("set_UActorComponent_UnregisterComponent_handler\0"));
    if(apiuapi_UActorComponent_UnregisterComponent){
        apiuapi_UActorComponent_UnregisterComponent(&uapi_UActorComponent_UnregisterComponent);
    }

    auto const apiuapi_UWorld_AddController = (uapi_UWorld_AddControllerFn)plugin->GetDllExport(TEXT("set_UWorld_AddController_handler\0"));
    if(apiuapi_UWorld_AddController){
        apiuapi_UWorld_AddController(&uapi_UWorld_AddController);
    }

    auto const apiuapi_UWorld_AddLevel = (uapi_UWorld_AddLevelFn)plugin->GetDllExport(TEXT("set_UWorld_AddLevel_handler\0"));
    if(apiuapi_UWorld_AddLevel){
        apiuapi_UWorld_AddLevel(&uapi_UWorld_AddLevel);
    }

    auto const apiuapi_UWorld_AddNetworkActor = (uapi_UWorld_AddNetworkActorFn)plugin->GetDllExport(TEXT("set_UWorld_AddNetworkActor_handler\0"));
    if(apiuapi_UWorld_AddNetworkActor){
        apiuapi_UWorld_AddNetworkActor(&uapi_UWorld_AddNetworkActor);
    }

    auto const apiuapi_UWorld_AddParameterCollectionInstance = (uapi_UWorld_AddParameterCollectionInstanceFn)plugin->GetDllExport(TEXT("set_UWorld_AddParameterCollectionInstance_handler\0"));
    if(apiuapi_UWorld_AddParameterCollectionInstance){
        apiuapi_UWorld_AddParameterCollectionInstance(&uapi_UWorld_AddParameterCollectionInstance);
    }

    auto const apiuapi_UWorld_AddPhysicsVolume = (uapi_UWorld_AddPhysicsVolumeFn)plugin->GetDllExport(TEXT("set_UWorld_AddPhysicsVolume_handler\0"));
    if(apiuapi_UWorld_AddPhysicsVolume){
        apiuapi_UWorld_AddPhysicsVolume(&uapi_UWorld_AddPhysicsVolume);
    }

    auto const apiuapi_UWorld_AddPostProcessingSettings = (uapi_UWorld_AddPostProcessingSettingsFn)plugin->GetDllExport(TEXT("set_UWorld_AddPostProcessingSettings_handler\0"));
    if(apiuapi_UWorld_AddPostProcessingSettings){
        apiuapi_UWorld_AddPostProcessingSettings(&uapi_UWorld_AddPostProcessingSettings);
    }

    auto const apiuapi_UWorld_AddStreamingLevel = (uapi_UWorld_AddStreamingLevelFn)plugin->GetDllExport(TEXT("set_UWorld_AddStreamingLevel_handler\0"));
    if(apiuapi_UWorld_AddStreamingLevel){
        apiuapi_UWorld_AddStreamingLevel(&uapi_UWorld_AddStreamingLevel);
    }

    auto const apiuapi_UWorld_AddUniqueStreamingLevel = (uapi_UWorld_AddUniqueStreamingLevelFn)plugin->GetDllExport(TEXT("set_UWorld_AddUniqueStreamingLevel_handler\0"));
    if(apiuapi_UWorld_AddUniqueStreamingLevel){
        apiuapi_UWorld_AddUniqueStreamingLevel(&uapi_UWorld_AddUniqueStreamingLevel);
    }

    auto const apiuapi_UWorld_AllowAudioPlayback = (uapi_UWorld_AllowAudioPlaybackFn)plugin->GetDllExport(TEXT("set_UWorld_AllowAudioPlayback_handler\0"));
    if(apiuapi_UWorld_AllowAudioPlayback){
        apiuapi_UWorld_AllowAudioPlayback(&uapi_UWorld_AllowAudioPlayback);
    }

    auto const apiuapi_UWorld_AllowLevelLoadRequests = (uapi_UWorld_AllowLevelLoadRequestsFn)plugin->GetDllExport(TEXT("set_UWorld_AllowLevelLoadRequests_handler\0"));
    if(apiuapi_UWorld_AllowLevelLoadRequests){
        apiuapi_UWorld_AllowLevelLoadRequests(&uapi_UWorld_AllowLevelLoadRequests);
    }

    auto const apiuapi_UWorld_AreActorsInitialized = (uapi_UWorld_AreActorsInitializedFn)plugin->GetDllExport(TEXT("set_UWorld_AreActorsInitialized_handler\0"));
    if(apiuapi_UWorld_AreActorsInitialized){
        apiuapi_UWorld_AreActorsInitialized(&uapi_UWorld_AreActorsInitialized);
    }

    auto const apiuapi_UWorld_AreAlwaysLoadedLevelsLoaded = (uapi_UWorld_AreAlwaysLoadedLevelsLoadedFn)plugin->GetDllExport(TEXT("set_UWorld_AreAlwaysLoadedLevelsLoaded_handler\0"));
    if(apiuapi_UWorld_AreAlwaysLoadedLevelsLoaded){
        apiuapi_UWorld_AreAlwaysLoadedLevelsLoaded(&uapi_UWorld_AreAlwaysLoadedLevelsLoaded);
    }

    auto const apiuapi_UWorld_AsyncLoadAlwaysLoadedLevelsForSeamlessTravel = (uapi_UWorld_AsyncLoadAlwaysLoadedLevelsForSeamlessTravelFn)plugin->GetDllExport(TEXT("set_UWorld_AsyncLoadAlwaysLoadedLevelsForSeamlessTravel_handler\0"));
    if(apiuapi_UWorld_AsyncLoadAlwaysLoadedLevelsForSeamlessTravel){
        apiuapi_UWorld_AsyncLoadAlwaysLoadedLevelsForSeamlessTravel(&uapi_UWorld_AsyncLoadAlwaysLoadedLevelsForSeamlessTravel);
    }

    auto const apiuapi_UWorld_BeginDestroy = (uapi_UWorld_BeginDestroyFn)plugin->GetDllExport(TEXT("set_UWorld_BeginDestroy_handler\0"));
    if(apiuapi_UWorld_BeginDestroy){
        apiuapi_UWorld_BeginDestroy(&uapi_UWorld_BeginDestroy);
    }

    auto const apiuapi_UWorld_BeginPlay = (uapi_UWorld_BeginPlayFn)plugin->GetDllExport(TEXT("set_UWorld_BeginPlay_handler\0"));
    if(apiuapi_UWorld_BeginPlay){
        apiuapi_UWorld_BeginPlay(&uapi_UWorld_BeginPlay);
    }

    auto const apiuapi_UWorld_BeginTearingDown = (uapi_UWorld_BeginTearingDownFn)plugin->GetDllExport(TEXT("set_UWorld_BeginTearingDown_handler\0"));
    if(apiuapi_UWorld_BeginTearingDown){
        apiuapi_UWorld_BeginTearingDown(&uapi_UWorld_BeginTearingDown);
    }

    auto const apiuapi_UWorld_BlockTillLevelStreamingCompleted = (uapi_UWorld_BlockTillLevelStreamingCompletedFn)plugin->GetDllExport(TEXT("set_UWorld_BlockTillLevelStreamingCompleted_handler\0"));
    if(apiuapi_UWorld_BlockTillLevelStreamingCompleted){
        apiuapi_UWorld_BlockTillLevelStreamingCompleted(&uapi_UWorld_BlockTillLevelStreamingCompleted);
    }

    auto const apiuapi_UWorld_BroadcastLevelsChanged = (uapi_UWorld_BroadcastLevelsChangedFn)plugin->GetDllExport(TEXT("set_UWorld_BroadcastLevelsChanged_handler\0"));
    if(apiuapi_UWorld_BroadcastLevelsChanged){
        apiuapi_UWorld_BroadcastLevelsChanged(&uapi_UWorld_BroadcastLevelsChanged);
    }

    auto const apiuapi_UWorld_BuildPIEPackagePrefix = (uapi_UWorld_BuildPIEPackagePrefixFn)plugin->GetDllExport(TEXT("set_UWorld_BuildPIEPackagePrefix_handler\0"));
    if(apiuapi_UWorld_BuildPIEPackagePrefix){
        apiuapi_UWorld_BuildPIEPackagePrefix(&uapi_UWorld_BuildPIEPackagePrefix);
    }

    auto const apiuapi_UWorld_CancelPendingMapChange = (uapi_UWorld_CancelPendingMapChangeFn)plugin->GetDllExport(TEXT("set_UWorld_CancelPendingMapChange_handler\0"));
    if(apiuapi_UWorld_CancelPendingMapChange){
        apiuapi_UWorld_CancelPendingMapChange(&uapi_UWorld_CancelPendingMapChange);
    }

    auto const apiuapi_UWorld_CleanupActors = (uapi_UWorld_CleanupActorsFn)plugin->GetDllExport(TEXT("set_UWorld_CleanupActors_handler\0"));
    if(apiuapi_UWorld_CleanupActors){
        apiuapi_UWorld_CleanupActors(&uapi_UWorld_CleanupActors);
    }

    auto const apiuapi_UWorld_CleanupWorld = (uapi_UWorld_CleanupWorldFn)plugin->GetDllExport(TEXT("set_UWorld_CleanupWorld_handler\0"));
    if(apiuapi_UWorld_CleanupWorld){
        apiuapi_UWorld_CleanupWorld(&uapi_UWorld_CleanupWorld);
    }

    auto const apiuapi_UWorld_ClearActorComponentEndOfFrameUpdate = (uapi_UWorld_ClearActorComponentEndOfFrameUpdateFn)plugin->GetDllExport(TEXT("set_UWorld_ClearActorComponentEndOfFrameUpdate_handler\0"));
    if(apiuapi_UWorld_ClearActorComponentEndOfFrameUpdate){
        apiuapi_UWorld_ClearActorComponentEndOfFrameUpdate(&uapi_UWorld_ClearActorComponentEndOfFrameUpdate);
    }

    auto const apiuapi_UWorld_ClearDemoNetDriver = (uapi_UWorld_ClearDemoNetDriverFn)plugin->GetDllExport(TEXT("set_UWorld_ClearDemoNetDriver_handler\0"));
    if(apiuapi_UWorld_ClearDemoNetDriver){
        apiuapi_UWorld_ClearDemoNetDriver(&uapi_UWorld_ClearDemoNetDriver);
    }

    auto const apiuapi_UWorld_ClearNetDriver = (uapi_UWorld_ClearNetDriverFn)plugin->GetDllExport(TEXT("set_UWorld_ClearNetDriver_handler\0"));
    if(apiuapi_UWorld_ClearNetDriver){
        apiuapi_UWorld_ClearNetDriver(&uapi_UWorld_ClearNetDriver);
    }

    auto const apiuapi_UWorld_ClearStreamingLevels = (uapi_UWorld_ClearStreamingLevelsFn)plugin->GetDllExport(TEXT("set_UWorld_ClearStreamingLevels_handler\0"));
    if(apiuapi_UWorld_ClearStreamingLevels){
        apiuapi_UWorld_ClearStreamingLevels(&uapi_UWorld_ClearStreamingLevels);
    }

    auto const apiuapi_UWorld_ClearWorldComponents = (uapi_UWorld_ClearWorldComponentsFn)plugin->GetDllExport(TEXT("set_UWorld_ClearWorldComponents_handler\0"));
    if(apiuapi_UWorld_ClearWorldComponents){
        apiuapi_UWorld_ClearWorldComponents(&uapi_UWorld_ClearWorldComponents);
    }

    auto const apiuapi_UWorld_CommitMapChange = (uapi_UWorld_CommitMapChangeFn)plugin->GetDllExport(TEXT("set_UWorld_CommitMapChange_handler\0"));
    if(apiuapi_UWorld_CommitMapChange){
        apiuapi_UWorld_CommitMapChange(&uapi_UWorld_CommitMapChange);
    }

    auto const apiuapi_UWorld_CommitModelSurfaces = (uapi_UWorld_CommitModelSurfacesFn)plugin->GetDllExport(TEXT("set_UWorld_CommitModelSurfaces_handler\0"));
    if(apiuapi_UWorld_CommitModelSurfaces){
        apiuapi_UWorld_CommitModelSurfaces(&uapi_UWorld_CommitModelSurfaces);
    }

    auto const apiuapi_UWorld_ConditionallyBuildStreamingData = (uapi_UWorld_ConditionallyBuildStreamingDataFn)plugin->GetDllExport(TEXT("set_UWorld_ConditionallyBuildStreamingData_handler\0"));
    if(apiuapi_UWorld_ConditionallyBuildStreamingData){
        apiuapi_UWorld_ConditionallyBuildStreamingData(&uapi_UWorld_ConditionallyBuildStreamingData);
    }

    auto const apiuapi_UWorld_ContainsActor = (uapi_UWorld_ContainsActorFn)plugin->GetDllExport(TEXT("set_UWorld_ContainsActor_handler\0"));
    if(apiuapi_UWorld_ContainsActor){
        apiuapi_UWorld_ContainsActor(&uapi_UWorld_ContainsActor);
    }

    auto const apiuapi_UWorld_ContainsLevel = (uapi_UWorld_ContainsLevelFn)plugin->GetDllExport(TEXT("set_UWorld_ContainsLevel_handler\0"));
    if(apiuapi_UWorld_ContainsLevel){
        apiuapi_UWorld_ContainsLevel(&uapi_UWorld_ContainsLevel);
    }

    auto const apiuapi_UWorld_CopyGameState = (uapi_UWorld_CopyGameStateFn)plugin->GetDllExport(TEXT("set_UWorld_CopyGameState_handler\0"));
    if(apiuapi_UWorld_CopyGameState){
        apiuapi_UWorld_CopyGameState(&uapi_UWorld_CopyGameState);
    }

    auto const apiuapi_UWorld_CreateAISystem = (uapi_UWorld_CreateAISystemFn)plugin->GetDllExport(TEXT("set_UWorld_CreateAISystem_handler\0"));
    if(apiuapi_UWorld_CreateAISystem){
        apiuapi_UWorld_CreateAISystem(&uapi_UWorld_CreateAISystem);
    }

    auto const apiuapi_UWorld_CreateFXSystem = (uapi_UWorld_CreateFXSystemFn)plugin->GetDllExport(TEXT("set_UWorld_CreateFXSystem_handler\0"));
    if(apiuapi_UWorld_CreateFXSystem){
        apiuapi_UWorld_CreateFXSystem(&uapi_UWorld_CreateFXSystem);
    }

    auto const apiuapi_UWorld_CreatePhysicsScene = (uapi_UWorld_CreatePhysicsSceneFn)plugin->GetDllExport(TEXT("set_UWorld_CreatePhysicsScene_handler\0"));
    if(apiuapi_UWorld_CreatePhysicsScene){
        apiuapi_UWorld_CreatePhysicsScene(&uapi_UWorld_CreatePhysicsScene);
    }

    auto const apiuapi_UWorld_DeSelectLevel = (uapi_UWorld_DeSelectLevelFn)plugin->GetDllExport(TEXT("set_UWorld_DeSelectLevel_handler\0"));
    if(apiuapi_UWorld_DeSelectLevel){
        apiuapi_UWorld_DeSelectLevel(&uapi_UWorld_DeSelectLevel);
    }

    auto const apiuapi_UWorld_DelayStreamingVolumeUpdates = (uapi_UWorld_DelayStreamingVolumeUpdatesFn)plugin->GetDllExport(TEXT("set_UWorld_DelayStreamingVolumeUpdates_handler\0"));
    if(apiuapi_UWorld_DelayStreamingVolumeUpdates){
        apiuapi_UWorld_DelayStreamingVolumeUpdates(&uapi_UWorld_DelayStreamingVolumeUpdates);
    }

    auto const apiuapi_UWorld_DestroyActor = (uapi_UWorld_DestroyActorFn)plugin->GetDllExport(TEXT("set_UWorld_DestroyActor_handler\0"));
    if(apiuapi_UWorld_DestroyActor){
        apiuapi_UWorld_DestroyActor(&uapi_UWorld_DestroyActor);
    }

    auto const apiuapi_UWorld_DestroyDemoNetDriver = (uapi_UWorld_DestroyDemoNetDriverFn)plugin->GetDllExport(TEXT("set_UWorld_DestroyDemoNetDriver_handler\0"));
    if(apiuapi_UWorld_DestroyDemoNetDriver){
        apiuapi_UWorld_DestroyDemoNetDriver(&uapi_UWorld_DestroyDemoNetDriver);
    }

    auto const apiuapi_UWorld_DestroySwappedPC = (uapi_UWorld_DestroySwappedPCFn)plugin->GetDllExport(TEXT("set_UWorld_DestroySwappedPC_handler\0"));
    if(apiuapi_UWorld_DestroySwappedPC){
        apiuapi_UWorld_DestroySwappedPC(&uapi_UWorld_DestroySwappedPC);
    }

    auto const apiuapi_UWorld_DestroyWorld = (uapi_UWorld_DestroyWorldFn)plugin->GetDllExport(TEXT("set_UWorld_DestroyWorld_handler\0"));
    if(apiuapi_UWorld_DestroyWorld){
        apiuapi_UWorld_DestroyWorld(&uapi_UWorld_DestroyWorld);
    }

    auto const apiuapi_UWorld_DuplicateRequestedLevels = (uapi_UWorld_DuplicateRequestedLevelsFn)plugin->GetDllExport(TEXT("set_UWorld_DuplicateRequestedLevels_handler\0"));
    if(apiuapi_UWorld_DuplicateRequestedLevels){
        apiuapi_UWorld_DuplicateRequestedLevels(&uapi_UWorld_DuplicateRequestedLevels);
    }

    auto const apiuapi_UWorld_EditorDestroyActor = (uapi_UWorld_EditorDestroyActorFn)plugin->GetDllExport(TEXT("set_UWorld_EditorDestroyActor_handler\0"));
    if(apiuapi_UWorld_EditorDestroyActor){
        apiuapi_UWorld_EditorDestroyActor(&uapi_UWorld_EditorDestroyActor);
    }

    auto const apiuapi_UWorld_EnsureCollisionTreeIsBuilt = (uapi_UWorld_EnsureCollisionTreeIsBuiltFn)plugin->GetDllExport(TEXT("set_UWorld_EnsureCollisionTreeIsBuilt_handler\0"));
    if(apiuapi_UWorld_EnsureCollisionTreeIsBuilt){
        apiuapi_UWorld_EnsureCollisionTreeIsBuilt(&uapi_UWorld_EnsureCollisionTreeIsBuilt);
    }

    auto const apiuapi_UWorld_FindWorldInPackage = (uapi_UWorld_FindWorldInPackageFn)plugin->GetDllExport(TEXT("set_UWorld_FindWorldInPackage_handler\0"));
    if(apiuapi_UWorld_FindWorldInPackage){
        apiuapi_UWorld_FindWorldInPackage(&uapi_UWorld_FindWorldInPackage);
    }

    auto const apiuapi_UWorld_FinishDestroy = (uapi_UWorld_FinishDestroyFn)plugin->GetDllExport(TEXT("set_UWorld_FinishDestroy_handler\0"));
    if(apiuapi_UWorld_FinishDestroy){
        apiuapi_UWorld_FinishDestroy(&uapi_UWorld_FinishDestroy);
    }

    auto const apiuapi_UWorld_FinishPhysicsSim = (uapi_UWorld_FinishPhysicsSimFn)plugin->GetDllExport(TEXT("set_UWorld_FinishPhysicsSim_handler\0"));
    if(apiuapi_UWorld_FinishPhysicsSim){
        apiuapi_UWorld_FinishPhysicsSim(&uapi_UWorld_FinishPhysicsSim);
    }

    auto const apiuapi_UWorld_FlushDeferredParameterCollectionInstanceUpdates = (uapi_UWorld_FlushDeferredParameterCollectionInstanceUpdatesFn)plugin->GetDllExport(TEXT("set_UWorld_FlushDeferredParameterCollectionInstanceUpdates_handler\0"));
    if(apiuapi_UWorld_FlushDeferredParameterCollectionInstanceUpdates){
        apiuapi_UWorld_FlushDeferredParameterCollectionInstanceUpdates(&uapi_UWorld_FlushDeferredParameterCollectionInstanceUpdates);
    }

    auto const apiuapi_UWorld_GetAISystem = (uapi_UWorld_GetAISystemFn)plugin->GetDllExport(TEXT("set_UWorld_GetAISystem_handler\0"));
    if(apiuapi_UWorld_GetAISystem){
        apiuapi_UWorld_GetAISystem(&uapi_UWorld_GetAISystem);
    }

    auto const apiuapi_UWorld_GetActiveLevelCollection = (uapi_UWorld_GetActiveLevelCollectionFn)plugin->GetDllExport(TEXT("set_UWorld_GetActiveLevelCollection_handler\0"));
    if(apiuapi_UWorld_GetActiveLevelCollection){
        apiuapi_UWorld_GetActiveLevelCollection(&uapi_UWorld_GetActiveLevelCollection);
    }

    auto const apiuapi_UWorld_GetActiveLevelCollectionIndex = (uapi_UWorld_GetActiveLevelCollectionIndexFn)plugin->GetDllExport(TEXT("set_UWorld_GetActiveLevelCollectionIndex_handler\0"));
    if(apiuapi_UWorld_GetActiveLevelCollectionIndex){
        apiuapi_UWorld_GetActiveLevelCollectionIndex(&uapi_UWorld_GetActiveLevelCollectionIndex);
    }

    auto const apiuapi_UWorld_GetActiveLightingScenario = (uapi_UWorld_GetActiveLightingScenarioFn)plugin->GetDllExport(TEXT("set_UWorld_GetActiveLightingScenario_handler\0"));
    if(apiuapi_UWorld_GetActiveLightingScenario){
        apiuapi_UWorld_GetActiveLightingScenario(&uapi_UWorld_GetActiveLightingScenario);
    }

    auto const apiuapi_UWorld_GetActorCount = (uapi_UWorld_GetActorCountFn)plugin->GetDllExport(TEXT("set_UWorld_GetActorCount_handler\0"));
    if(apiuapi_UWorld_GetActorCount){
        apiuapi_UWorld_GetActorCount(&uapi_UWorld_GetActorCount);
    }

    auto const apiuapi_UWorld_GetAddressURL = (uapi_UWorld_GetAddressURLFn)plugin->GetDllExport(TEXT("set_UWorld_GetAddressURL_handler\0"));
    if(apiuapi_UWorld_GetAddressURL){
        apiuapi_UWorld_GetAddressURL(&uapi_UWorld_GetAddressURL);
    }

    auto const apiuapi_UWorld_GetAllowDeferredPhysicsStateCreation = (uapi_UWorld_GetAllowDeferredPhysicsStateCreationFn)plugin->GetDllExport(TEXT("set_UWorld_GetAllowDeferredPhysicsStateCreation_handler\0"));
    if(apiuapi_UWorld_GetAllowDeferredPhysicsStateCreation){
        apiuapi_UWorld_GetAllowDeferredPhysicsStateCreation(&uapi_UWorld_GetAllowDeferredPhysicsStateCreation);
    }

    auto const apiuapi_UWorld_GetAudioDeviceRaw = (uapi_UWorld_GetAudioDeviceRawFn)plugin->GetDllExport(TEXT("set_UWorld_GetAudioDeviceRaw_handler\0"));
    if(apiuapi_UWorld_GetAudioDeviceRaw){
        apiuapi_UWorld_GetAudioDeviceRaw(&uapi_UWorld_GetAudioDeviceRaw);
    }

    auto const apiuapi_UWorld_GetAudioTimeSeconds = (uapi_UWorld_GetAudioTimeSecondsFn)plugin->GetDllExport(TEXT("set_UWorld_GetAudioTimeSeconds_handler\0"));
    if(apiuapi_UWorld_GetAudioTimeSeconds){
        apiuapi_UWorld_GetAudioTimeSeconds(&uapi_UWorld_GetAudioTimeSeconds);
    }

    auto const apiuapi_UWorld_GetAvoidanceManager = (uapi_UWorld_GetAvoidanceManagerFn)plugin->GetDllExport(TEXT("set_UWorld_GetAvoidanceManager_handler\0"));
    if(apiuapi_UWorld_GetAvoidanceManager){
        apiuapi_UWorld_GetAvoidanceManager(&uapi_UWorld_GetAvoidanceManager);
    }

    auto const apiuapi_UWorld_GetBlockTillLevelStreamingCompletedEpoch = (uapi_UWorld_GetBlockTillLevelStreamingCompletedEpochFn)plugin->GetDllExport(TEXT("set_UWorld_GetBlockTillLevelStreamingCompletedEpoch_handler\0"));
    if(apiuapi_UWorld_GetBlockTillLevelStreamingCompletedEpoch){
        apiuapi_UWorld_GetBlockTillLevelStreamingCompletedEpoch(&uapi_UWorld_GetBlockTillLevelStreamingCompletedEpoch);
    }

    auto const apiuapi_UWorld_GetCanvasForDrawMaterialToRenderTarget = (uapi_UWorld_GetCanvasForDrawMaterialToRenderTargetFn)plugin->GetDllExport(TEXT("set_UWorld_GetCanvasForDrawMaterialToRenderTarget_handler\0"));
    if(apiuapi_UWorld_GetCanvasForDrawMaterialToRenderTarget){
        apiuapi_UWorld_GetCanvasForDrawMaterialToRenderTarget(&uapi_UWorld_GetCanvasForDrawMaterialToRenderTarget);
    }

    auto const apiuapi_UWorld_GetCanvasForRenderingToTarget = (uapi_UWorld_GetCanvasForRenderingToTargetFn)plugin->GetDllExport(TEXT("set_UWorld_GetCanvasForRenderingToTarget_handler\0"));
    if(apiuapi_UWorld_GetCanvasForRenderingToTarget){
        apiuapi_UWorld_GetCanvasForRenderingToTarget(&uapi_UWorld_GetCanvasForRenderingToTarget);
    }

    auto const apiuapi_UWorld_GetCurrentLevel = (uapi_UWorld_GetCurrentLevelFn)plugin->GetDllExport(TEXT("set_UWorld_GetCurrentLevel_handler\0"));
    if(apiuapi_UWorld_GetCurrentLevel){
        apiuapi_UWorld_GetCurrentLevel(&uapi_UWorld_GetCurrentLevel);
    }

    auto const apiuapi_UWorld_GetCurrentLevelPendingInvisibility = (uapi_UWorld_GetCurrentLevelPendingInvisibilityFn)plugin->GetDllExport(TEXT("set_UWorld_GetCurrentLevelPendingInvisibility_handler\0"));
    if(apiuapi_UWorld_GetCurrentLevelPendingInvisibility){
        apiuapi_UWorld_GetCurrentLevelPendingInvisibility(&uapi_UWorld_GetCurrentLevelPendingInvisibility);
    }

    auto const apiuapi_UWorld_GetCurrentLevelPendingVisibility = (uapi_UWorld_GetCurrentLevelPendingVisibilityFn)plugin->GetDllExport(TEXT("set_UWorld_GetCurrentLevelPendingVisibility_handler\0"));
    if(apiuapi_UWorld_GetCurrentLevelPendingVisibility){
        apiuapi_UWorld_GetCurrentLevelPendingVisibility(&uapi_UWorld_GetCurrentLevelPendingVisibility);
    }

    auto const apiuapi_UWorld_GetDebugDisplayName = (uapi_UWorld_GetDebugDisplayNameFn)plugin->GetDllExport(TEXT("set_UWorld_GetDebugDisplayName_handler\0"));
    if(apiuapi_UWorld_GetDebugDisplayName){
        apiuapi_UWorld_GetDebugDisplayName(&uapi_UWorld_GetDebugDisplayName);
    }

    auto const apiuapi_UWorld_GetDefaultBrush = (uapi_UWorld_GetDefaultBrushFn)plugin->GetDllExport(TEXT("set_UWorld_GetDefaultBrush_handler\0"));
    if(apiuapi_UWorld_GetDefaultBrush){
        apiuapi_UWorld_GetDefaultBrush(&uapi_UWorld_GetDefaultBrush);
    }

    auto const apiuapi_UWorld_GetDefaultGravityZ = (uapi_UWorld_GetDefaultGravityZFn)plugin->GetDllExport(TEXT("set_UWorld_GetDefaultGravityZ_handler\0"));
    if(apiuapi_UWorld_GetDefaultGravityZ){
        apiuapi_UWorld_GetDefaultGravityZ(&uapi_UWorld_GetDefaultGravityZ);
    }

    auto const apiuapi_UWorld_GetDefaultPhysicsVolume = (uapi_UWorld_GetDefaultPhysicsVolumeFn)plugin->GetDllExport(TEXT("set_UWorld_GetDefaultPhysicsVolume_handler\0"));
    if(apiuapi_UWorld_GetDefaultPhysicsVolume){
        apiuapi_UWorld_GetDefaultPhysicsVolume(&uapi_UWorld_GetDefaultPhysicsVolume);
    }

    auto const apiuapi_UWorld_GetDeltaSeconds = (uapi_UWorld_GetDeltaSecondsFn)plugin->GetDllExport(TEXT("set_UWorld_GetDeltaSeconds_handler\0"));
    if(apiuapi_UWorld_GetDeltaSeconds){
        apiuapi_UWorld_GetDeltaSeconds(&uapi_UWorld_GetDeltaSeconds);
    }

    auto const apiuapi_UWorld_GetDemoNetDriver = (uapi_UWorld_GetDemoNetDriverFn)plugin->GetDllExport(TEXT("set_UWorld_GetDemoNetDriver_handler\0"));
    if(apiuapi_UWorld_GetDemoNetDriver){
        apiuapi_UWorld_GetDemoNetDriver(&uapi_UWorld_GetDemoNetDriver);
    }

    auto const apiuapi_UWorld_GetDetailMode = (uapi_UWorld_GetDetailModeFn)plugin->GetDllExport(TEXT("set_UWorld_GetDetailMode_handler\0"));
    if(apiuapi_UWorld_GetDetailMode){
        apiuapi_UWorld_GetDetailMode(&uapi_UWorld_GetDetailMode);
    }

    auto const apiuapi_UWorld_GetDuplicatedWorldForPIE = (uapi_UWorld_GetDuplicatedWorldForPIEFn)plugin->GetDllExport(TEXT("set_UWorld_GetDuplicatedWorldForPIE_handler\0"));
    if(apiuapi_UWorld_GetDuplicatedWorldForPIE){
        apiuapi_UWorld_GetDuplicatedWorldForPIE(&uapi_UWorld_GetDuplicatedWorldForPIE);
    }

    auto const apiuapi_UWorld_GetFirstLocalPlayerFromController = (uapi_UWorld_GetFirstLocalPlayerFromControllerFn)plugin->GetDllExport(TEXT("set_UWorld_GetFirstLocalPlayerFromController_handler\0"));
    if(apiuapi_UWorld_GetFirstLocalPlayerFromController){
        apiuapi_UWorld_GetFirstLocalPlayerFromController(&uapi_UWorld_GetFirstLocalPlayerFromController);
    }

    auto const apiuapi_UWorld_GetFirstPlayerController = (uapi_UWorld_GetFirstPlayerControllerFn)plugin->GetDllExport(TEXT("set_UWorld_GetFirstPlayerController_handler\0"));
    if(apiuapi_UWorld_GetFirstPlayerController){
        apiuapi_UWorld_GetFirstPlayerController(&uapi_UWorld_GetFirstPlayerController);
    }

    auto const apiuapi_UWorld_GetGameInstance = (uapi_UWorld_GetGameInstanceFn)plugin->GetDllExport(TEXT("set_UWorld_GetGameInstance_handler\0"));
    if(apiuapi_UWorld_GetGameInstance){
        apiuapi_UWorld_GetGameInstance(&uapi_UWorld_GetGameInstance);
    }

    auto const apiuapi_UWorld_GetGameState = (uapi_UWorld_GetGameStateFn)plugin->GetDllExport(TEXT("set_UWorld_GetGameState_handler\0"));
    if(apiuapi_UWorld_GetGameState){
        apiuapi_UWorld_GetGameState(&uapi_UWorld_GetGameState);
    }

    auto const apiuapi_UWorld_GetGameViewport = (uapi_UWorld_GetGameViewportFn)plugin->GetDllExport(TEXT("set_UWorld_GetGameViewport_handler\0"));
    if(apiuapi_UWorld_GetGameViewport){
        apiuapi_UWorld_GetGameViewport(&uapi_UWorld_GetGameViewport);
    }

    auto const apiuapi_UWorld_GetGravityZ = (uapi_UWorld_GetGravityZFn)plugin->GetDllExport(TEXT("set_UWorld_GetGravityZ_handler\0"));
    if(apiuapi_UWorld_GetGravityZ){
        apiuapi_UWorld_GetGravityZ(&uapi_UWorld_GetGravityZ);
    }

    auto const apiuapi_UWorld_GetIsInBlockTillLevelStreamingCompleted = (uapi_UWorld_GetIsInBlockTillLevelStreamingCompletedFn)plugin->GetDllExport(TEXT("set_UWorld_GetIsInBlockTillLevelStreamingCompleted_handler\0"));
    if(apiuapi_UWorld_GetIsInBlockTillLevelStreamingCompleted){
        apiuapi_UWorld_GetIsInBlockTillLevelStreamingCompleted(&uapi_UWorld_GetIsInBlockTillLevelStreamingCompleted);
    }

    auto const apiuapi_UWorld_GetLevel = (uapi_UWorld_GetLevelFn)plugin->GetDllExport(TEXT("set_UWorld_GetLevel_handler\0"));
    if(apiuapi_UWorld_GetLevel){
        apiuapi_UWorld_GetLevel(&uapi_UWorld_GetLevel);
    }

    auto const apiuapi_UWorld_GetLevelScriptActor = (uapi_UWorld_GetLevelScriptActorFn)plugin->GetDllExport(TEXT("set_UWorld_GetLevelScriptActor_handler\0"));
    if(apiuapi_UWorld_GetLevelScriptActor){
        apiuapi_UWorld_GetLevelScriptActor(&uapi_UWorld_GetLevelScriptActor);
    }

    auto const apiuapi_UWorld_GetLevelStreamingForPackageName = (uapi_UWorld_GetLevelStreamingForPackageNameFn)plugin->GetDllExport(TEXT("set_UWorld_GetLevelStreamingForPackageName_handler\0"));
    if(apiuapi_UWorld_GetLevelStreamingForPackageName){
        apiuapi_UWorld_GetLevelStreamingForPackageName(&uapi_UWorld_GetLevelStreamingForPackageName);
    }

    auto const apiuapi_UWorld_GetLocalURL = (uapi_UWorld_GetLocalURLFn)plugin->GetDllExport(TEXT("set_UWorld_GetLocalURL_handler\0"));
    if(apiuapi_UWorld_GetLocalURL){
        apiuapi_UWorld_GetLocalURL(&uapi_UWorld_GetLocalURL);
    }

    auto const apiuapi_UWorld_GetMapName = (uapi_UWorld_GetMapNameFn)plugin->GetDllExport(TEXT("set_UWorld_GetMapName_handler\0"));
    if(apiuapi_UWorld_GetMapName){
        apiuapi_UWorld_GetMapName(&uapi_UWorld_GetMapName);
    }

    auto const apiuapi_UWorld_GetNetDriver = (uapi_UWorld_GetNetDriverFn)plugin->GetDllExport(TEXT("set_UWorld_GetNetDriver_handler\0"));
    if(apiuapi_UWorld_GetNetDriver){
        apiuapi_UWorld_GetNetDriver(&uapi_UWorld_GetNetDriver);
    }

    auto const apiuapi_UWorld_GetNonDefaultPhysicsVolumeCount = (uapi_UWorld_GetNonDefaultPhysicsVolumeCountFn)plugin->GetDllExport(TEXT("set_UWorld_GetNonDefaultPhysicsVolumeCount_handler\0"));
    if(apiuapi_UWorld_GetNonDefaultPhysicsVolumeCount){
        apiuapi_UWorld_GetNonDefaultPhysicsVolumeCount(&uapi_UWorld_GetNonDefaultPhysicsVolumeCount);
    }

    auto const apiuapi_UWorld_GetNumControllers = (uapi_UWorld_GetNumControllersFn)plugin->GetDllExport(TEXT("set_UWorld_GetNumControllers_handler\0"));
    if(apiuapi_UWorld_GetNumControllers){
        apiuapi_UWorld_GetNumControllers(&uapi_UWorld_GetNumControllers);
    }

    auto const apiuapi_UWorld_GetNumLevels = (uapi_UWorld_GetNumLevelsFn)plugin->GetDllExport(TEXT("set_UWorld_GetNumLevels_handler\0"));
    if(apiuapi_UWorld_GetNumLevels){
        apiuapi_UWorld_GetNumLevels(&uapi_UWorld_GetNumLevels);
    }

    auto const apiuapi_UWorld_GetNumPlayerControllers = (uapi_UWorld_GetNumPlayerControllersFn)plugin->GetDllExport(TEXT("set_UWorld_GetNumPlayerControllers_handler\0"));
    if(apiuapi_UWorld_GetNumPlayerControllers){
        apiuapi_UWorld_GetNumPlayerControllers(&uapi_UWorld_GetNumPlayerControllers);
    }

    auto const apiuapi_UWorld_GetNumSelectedLevels = (uapi_UWorld_GetNumSelectedLevelsFn)plugin->GetDllExport(TEXT("set_UWorld_GetNumSelectedLevels_handler\0"));
    if(apiuapi_UWorld_GetNumSelectedLevels){
        apiuapi_UWorld_GetNumSelectedLevels(&uapi_UWorld_GetNumSelectedLevels);
    }

    auto const apiuapi_UWorld_GetParameterCollectionInstance = (uapi_UWorld_GetParameterCollectionInstanceFn)plugin->GetDllExport(TEXT("set_UWorld_GetParameterCollectionInstance_handler\0"));
    if(apiuapi_UWorld_GetParameterCollectionInstance){
        apiuapi_UWorld_GetParameterCollectionInstance(&uapi_UWorld_GetParameterCollectionInstance);
    }

    auto const apiuapi_UWorld_GetPhysicsScene = (uapi_UWorld_GetPhysicsSceneFn)plugin->GetDllExport(TEXT("set_UWorld_GetPhysicsScene_handler\0"));
    if(apiuapi_UWorld_GetPhysicsScene){
        apiuapi_UWorld_GetPhysicsScene(&uapi_UWorld_GetPhysicsScene);
    }

    auto const apiuapi_UWorld_GetProgressDenominator = (uapi_UWorld_GetProgressDenominatorFn)plugin->GetDllExport(TEXT("set_UWorld_GetProgressDenominator_handler\0"));
    if(apiuapi_UWorld_GetProgressDenominator){
        apiuapi_UWorld_GetProgressDenominator(&uapi_UWorld_GetProgressDenominator);
    }

    auto const apiuapi_UWorld_GetRealTimeSeconds = (uapi_UWorld_GetRealTimeSecondsFn)plugin->GetDllExport(TEXT("set_UWorld_GetRealTimeSeconds_handler\0"));
    if(apiuapi_UWorld_GetRealTimeSeconds){
        apiuapi_UWorld_GetRealTimeSeconds(&uapi_UWorld_GetRealTimeSeconds);
    }

    auto const apiuapi_UWorld_GetSelectedLevel = (uapi_UWorld_GetSelectedLevelFn)plugin->GetDllExport(TEXT("set_UWorld_GetSelectedLevel_handler\0"));
    if(apiuapi_UWorld_GetSelectedLevel){
        apiuapi_UWorld_GetSelectedLevel(&uapi_UWorld_GetSelectedLevel);
    }

    auto const apiuapi_UWorld_GetServerStreamingLevelsVisibility = (uapi_UWorld_GetServerStreamingLevelsVisibilityFn)plugin->GetDllExport(TEXT("set_UWorld_GetServerStreamingLevelsVisibility_handler\0"));
    if(apiuapi_UWorld_GetServerStreamingLevelsVisibility){
        apiuapi_UWorld_GetServerStreamingLevelsVisibility(&uapi_UWorld_GetServerStreamingLevelsVisibility);
    }

    auto const apiuapi_UWorld_GetShouldForceUnloadStreamingLevels = (uapi_UWorld_GetShouldForceUnloadStreamingLevelsFn)plugin->GetDllExport(TEXT("set_UWorld_GetShouldForceUnloadStreamingLevels_handler\0"));
    if(apiuapi_UWorld_GetShouldForceUnloadStreamingLevels){
        apiuapi_UWorld_GetShouldForceUnloadStreamingLevels(&uapi_UWorld_GetShouldForceUnloadStreamingLevels);
    }

    auto const apiuapi_UWorld_GetShouldForceVisibleStreamingLevels = (uapi_UWorld_GetShouldForceVisibleStreamingLevelsFn)plugin->GetDllExport(TEXT("set_UWorld_GetShouldForceVisibleStreamingLevels_handler\0"));
    if(apiuapi_UWorld_GetShouldForceVisibleStreamingLevels){
        apiuapi_UWorld_GetShouldForceVisibleStreamingLevels(&uapi_UWorld_GetShouldForceVisibleStreamingLevels);
    }

    auto const apiuapi_UWorld_GetTimeSeconds = (uapi_UWorld_GetTimeSecondsFn)plugin->GetDllExport(TEXT("set_UWorld_GetTimeSeconds_handler\0"));
    if(apiuapi_UWorld_GetTimeSeconds){
        apiuapi_UWorld_GetTimeSeconds(&uapi_UWorld_GetTimeSeconds);
    }

    auto const apiuapi_UWorld_GetUnpausedTimeSeconds = (uapi_UWorld_GetUnpausedTimeSecondsFn)plugin->GetDllExport(TEXT("set_UWorld_GetUnpausedTimeSeconds_handler\0"));
    if(apiuapi_UWorld_GetUnpausedTimeSeconds){
        apiuapi_UWorld_GetUnpausedTimeSeconds(&uapi_UWorld_GetUnpausedTimeSeconds);
    }

    auto const apiuapi_UWorld_GetWorld = (uapi_UWorld_GetWorldFn)plugin->GetDllExport(TEXT("set_UWorld_GetWorld_handler\0"));
    if(apiuapi_UWorld_GetWorld){
        apiuapi_UWorld_GetWorld(&uapi_UWorld_GetWorld);
    }

    auto const apiuapi_UWorld_GetWorldPartition = (uapi_UWorld_GetWorldPartitionFn)plugin->GetDllExport(TEXT("set_UWorld_GetWorldPartition_handler\0"));
    if(apiuapi_UWorld_GetWorldPartition){
        apiuapi_UWorld_GetWorldPartition(&uapi_UWorld_GetWorldPartition);
    }

    auto const apiuapi_UWorld_GetWorldSettings = (uapi_UWorld_GetWorldSettingsFn)plugin->GetDllExport(TEXT("set_UWorld_GetWorldSettings_handler\0"));
    if(apiuapi_UWorld_GetWorldSettings){
        apiuapi_UWorld_GetWorldSettings(&uapi_UWorld_GetWorldSettings);
    }

    auto const apiuapi_UWorld_HandleTimelineScrubbed = (uapi_UWorld_HandleTimelineScrubbedFn)plugin->GetDllExport(TEXT("set_UWorld_HandleTimelineScrubbed_handler\0"));
    if(apiuapi_UWorld_HandleTimelineScrubbed){
        apiuapi_UWorld_HandleTimelineScrubbed(&uapi_UWorld_HandleTimelineScrubbed);
    }

    auto const apiuapi_UWorld_HasBegunPlay = (uapi_UWorld_HasBegunPlayFn)plugin->GetDllExport(TEXT("set_UWorld_HasBegunPlay_handler\0"));
    if(apiuapi_UWorld_HasBegunPlay){
        apiuapi_UWorld_HasBegunPlay(&uapi_UWorld_HasBegunPlay);
    }

    auto const apiuapi_UWorld_HasDefaultPhysicsVolume = (uapi_UWorld_HasDefaultPhysicsVolumeFn)plugin->GetDllExport(TEXT("set_UWorld_HasDefaultPhysicsVolume_handler\0"));
    if(apiuapi_UWorld_HasDefaultPhysicsVolume){
        apiuapi_UWorld_HasDefaultPhysicsVolume(&uapi_UWorld_HasDefaultPhysicsVolume);
    }

    auto const apiuapi_UWorld_HasEndOfFrameUpdates = (uapi_UWorld_HasEndOfFrameUpdatesFn)plugin->GetDllExport(TEXT("set_UWorld_HasEndOfFrameUpdates_handler\0"));
    if(apiuapi_UWorld_HasEndOfFrameUpdates){
        apiuapi_UWorld_HasEndOfFrameUpdates(&uapi_UWorld_HasEndOfFrameUpdates);
    }

    auto const apiuapi_UWorld_HasEverBeenInitialized = (uapi_UWorld_HasEverBeenInitializedFn)plugin->GetDllExport(TEXT("set_UWorld_HasEverBeenInitialized_handler\0"));
    if(apiuapi_UWorld_HasEverBeenInitialized){
        apiuapi_UWorld_HasEverBeenInitialized(&uapi_UWorld_HasEverBeenInitialized);
    }

    auto const apiuapi_UWorld_HasMarkedObjectsPendingKill = (uapi_UWorld_HasMarkedObjectsPendingKillFn)plugin->GetDllExport(TEXT("set_UWorld_HasMarkedObjectsPendingKill_handler\0"));
    if(apiuapi_UWorld_HasMarkedObjectsPendingKill){
        apiuapi_UWorld_HasMarkedObjectsPendingKill(&uapi_UWorld_HasMarkedObjectsPendingKill);
    }

    auto const apiuapi_UWorld_HasStreamingLevelsToConsider = (uapi_UWorld_HasStreamingLevelsToConsiderFn)plugin->GetDllExport(TEXT("set_UWorld_HasStreamingLevelsToConsider_handler\0"));
    if(apiuapi_UWorld_HasStreamingLevelsToConsider){
        apiuapi_UWorld_HasStreamingLevelsToConsider(&uapi_UWorld_HasStreamingLevelsToConsider);
    }

    auto const apiuapi_UWorld_InitializeSubsystems = (uapi_UWorld_InitializeSubsystemsFn)plugin->GetDllExport(TEXT("set_UWorld_InitializeSubsystems_handler\0"));
    if(apiuapi_UWorld_InitializeSubsystems){
        apiuapi_UWorld_InitializeSubsystems(&uapi_UWorld_InitializeSubsystems);
    }

    auto const apiuapi_UWorld_InsertPostProcessVolume = (uapi_UWorld_InsertPostProcessVolumeFn)plugin->GetDllExport(TEXT("set_UWorld_InsertPostProcessVolume_handler\0"));
    if(apiuapi_UWorld_InsertPostProcessVolume){
        apiuapi_UWorld_InsertPostProcessVolume(&uapi_UWorld_InsertPostProcessVolume);
    }

    auto const apiuapi_UWorld_InvalidateAllSkyCaptures = (uapi_UWorld_InvalidateAllSkyCapturesFn)plugin->GetDllExport(TEXT("set_UWorld_InvalidateAllSkyCaptures_handler\0"));
    if(apiuapi_UWorld_InvalidateAllSkyCaptures){
        apiuapi_UWorld_InvalidateAllSkyCaptures(&uapi_UWorld_InvalidateAllSkyCaptures);
    }

    auto const apiuapi_UWorld_InvalidateModelGeometry = (uapi_UWorld_InvalidateModelGeometryFn)plugin->GetDllExport(TEXT("set_UWorld_InvalidateModelGeometry_handler\0"));
    if(apiuapi_UWorld_InvalidateModelGeometry){
        apiuapi_UWorld_InvalidateModelGeometry(&uapi_UWorld_InvalidateModelGeometry);
    }

    auto const apiuapi_UWorld_InvalidateModelSurface = (uapi_UWorld_InvalidateModelSurfaceFn)plugin->GetDllExport(TEXT("set_UWorld_InvalidateModelSurface_handler\0"));
    if(apiuapi_UWorld_InvalidateModelSurface){
        apiuapi_UWorld_InvalidateModelSurface(&uapi_UWorld_InvalidateModelSurface);
    }

    auto const apiuapi_UWorld_IsCameraMoveable = (uapi_UWorld_IsCameraMoveableFn)plugin->GetDllExport(TEXT("set_UWorld_IsCameraMoveable_handler\0"));
    if(apiuapi_UWorld_IsCameraMoveable){
        apiuapi_UWorld_IsCameraMoveable(&uapi_UWorld_IsCameraMoveable);
    }

    auto const apiuapi_UWorld_IsEditorWorld = (uapi_UWorld_IsEditorWorldFn)plugin->GetDllExport(TEXT("set_UWorld_IsEditorWorld_handler\0"));
    if(apiuapi_UWorld_IsEditorWorld){
        apiuapi_UWorld_IsEditorWorld(&uapi_UWorld_IsEditorWorld);
    }

    auto const apiuapi_UWorld_IsGameWorld = (uapi_UWorld_IsGameWorldFn)plugin->GetDllExport(TEXT("set_UWorld_IsGameWorld_handler\0"));
    if(apiuapi_UWorld_IsGameWorld){
        apiuapi_UWorld_IsGameWorld(&uapi_UWorld_IsGameWorld);
    }

    auto const apiuapi_UWorld_IsInSeamlessTravel = (uapi_UWorld_IsInSeamlessTravelFn)plugin->GetDllExport(TEXT("set_UWorld_IsInSeamlessTravel_handler\0"));
    if(apiuapi_UWorld_IsInSeamlessTravel){
        apiuapi_UWorld_IsInSeamlessTravel(&uapi_UWorld_IsInSeamlessTravel);
    }

    auto const apiuapi_UWorld_IsInitialized = (uapi_UWorld_IsInitializedFn)plugin->GetDllExport(TEXT("set_UWorld_IsInitialized_handler\0"));
    if(apiuapi_UWorld_IsInitialized){
        apiuapi_UWorld_IsInitialized(&uapi_UWorld_IsInitialized);
    }

    auto const apiuapi_UWorld_IsInstanced = (uapi_UWorld_IsInstancedFn)plugin->GetDllExport(TEXT("set_UWorld_IsInstanced_handler\0"));
    if(apiuapi_UWorld_IsInstanced){
        apiuapi_UWorld_IsInstanced(&uapi_UWorld_IsInstanced);
    }

    auto const apiuapi_UWorld_IsLevelSelected = (uapi_UWorld_IsLevelSelectedFn)plugin->GetDllExport(TEXT("set_UWorld_IsLevelSelected_handler\0"));
    if(apiuapi_UWorld_IsLevelSelected){
        apiuapi_UWorld_IsLevelSelected(&uapi_UWorld_IsLevelSelected);
    }

    auto const apiuapi_UWorld_IsMapChangeReady = (uapi_UWorld_IsMapChangeReadyFn)plugin->GetDllExport(TEXT("set_UWorld_IsMapChangeReady_handler\0"));
    if(apiuapi_UWorld_IsMapChangeReady){
        apiuapi_UWorld_IsMapChangeReady(&uapi_UWorld_IsMapChangeReady);
    }

    auto const apiuapi_UWorld_IsMovieSceneSequenceTickHandlerBound = (uapi_UWorld_IsMovieSceneSequenceTickHandlerBoundFn)plugin->GetDllExport(TEXT("set_UWorld_IsMovieSceneSequenceTickHandlerBound_handler\0"));
    if(apiuapi_UWorld_IsMovieSceneSequenceTickHandlerBound){
        apiuapi_UWorld_IsMovieSceneSequenceTickHandlerBound(&uapi_UWorld_IsMovieSceneSequenceTickHandlerBound);
    }

    auto const apiuapi_UWorld_IsNameStableForNetworking = (uapi_UWorld_IsNameStableForNetworkingFn)plugin->GetDllExport(TEXT("set_UWorld_IsNameStableForNetworking_handler\0"));
    if(apiuapi_UWorld_IsNameStableForNetworking){
        apiuapi_UWorld_IsNameStableForNetworking(&uapi_UWorld_IsNameStableForNetworking);
    }

    auto const apiuapi_UWorld_IsNavigationRebuilt = (uapi_UWorld_IsNavigationRebuiltFn)plugin->GetDllExport(TEXT("set_UWorld_IsNavigationRebuilt_handler\0"));
    if(apiuapi_UWorld_IsNavigationRebuilt){
        apiuapi_UWorld_IsNavigationRebuilt(&uapi_UWorld_IsNavigationRebuilt);
    }

    auto const apiuapi_UWorld_IsPartitionedWorld = (uapi_UWorld_IsPartitionedWorldFn)plugin->GetDllExport(TEXT("set_UWorld_IsPartitionedWorld_handler\0"));
    if(apiuapi_UWorld_IsPartitionedWorld){
        apiuapi_UWorld_IsPartitionedWorld(&uapi_UWorld_IsPartitionedWorld);
    }

    auto const apiuapi_UWorld_IsPartitionedWorld2 = (uapi_UWorld_IsPartitionedWorld2Fn)plugin->GetDllExport(TEXT("set_UWorld_IsPartitionedWorld2_handler\0"));
    if(apiuapi_UWorld_IsPartitionedWorld2){
        apiuapi_UWorld_IsPartitionedWorld2(&uapi_UWorld_IsPartitionedWorld2);
    }

    auto const apiuapi_UWorld_IsPaused = (uapi_UWorld_IsPausedFn)plugin->GetDllExport(TEXT("set_UWorld_IsPaused_handler\0"));
    if(apiuapi_UWorld_IsPaused){
        apiuapi_UWorld_IsPaused(&uapi_UWorld_IsPaused);
    }

    auto const apiuapi_UWorld_IsPlayInEditor = (uapi_UWorld_IsPlayInEditorFn)plugin->GetDllExport(TEXT("set_UWorld_IsPlayInEditor_handler\0"));
    if(apiuapi_UWorld_IsPlayInEditor){
        apiuapi_UWorld_IsPlayInEditor(&uapi_UWorld_IsPlayInEditor);
    }

    auto const apiuapi_UWorld_IsPlayInMobilePreview = (uapi_UWorld_IsPlayInMobilePreviewFn)plugin->GetDllExport(TEXT("set_UWorld_IsPlayInMobilePreview_handler\0"));
    if(apiuapi_UWorld_IsPlayInMobilePreview){
        apiuapi_UWorld_IsPlayInMobilePreview(&uapi_UWorld_IsPlayInMobilePreview);
    }

    auto const apiuapi_UWorld_IsPlayInPreview = (uapi_UWorld_IsPlayInPreviewFn)plugin->GetDllExport(TEXT("set_UWorld_IsPlayInPreview_handler\0"));
    if(apiuapi_UWorld_IsPlayInPreview){
        apiuapi_UWorld_IsPlayInPreview(&uapi_UWorld_IsPlayInPreview);
    }

    auto const apiuapi_UWorld_IsPlayInVulkanPreview = (uapi_UWorld_IsPlayInVulkanPreviewFn)plugin->GetDllExport(TEXT("set_UWorld_IsPlayInVulkanPreview_handler\0"));
    if(apiuapi_UWorld_IsPlayInVulkanPreview){
        apiuapi_UWorld_IsPlayInVulkanPreview(&uapi_UWorld_IsPlayInVulkanPreview);
    }

    auto const apiuapi_UWorld_IsPlayingClientReplay = (uapi_UWorld_IsPlayingClientReplayFn)plugin->GetDllExport(TEXT("set_UWorld_IsPlayingClientReplay_handler\0"));
    if(apiuapi_UWorld_IsPlayingClientReplay){
        apiuapi_UWorld_IsPlayingClientReplay(&uapi_UWorld_IsPlayingClientReplay);
    }

    auto const apiuapi_UWorld_IsPlayingReplay = (uapi_UWorld_IsPlayingReplayFn)plugin->GetDllExport(TEXT("set_UWorld_IsPlayingReplay_handler\0"));
    if(apiuapi_UWorld_IsPlayingReplay){
        apiuapi_UWorld_IsPlayingReplay(&uapi_UWorld_IsPlayingReplay);
    }

    auto const apiuapi_UWorld_IsPreparingMapChange = (uapi_UWorld_IsPreparingMapChangeFn)plugin->GetDllExport(TEXT("set_UWorld_IsPreparingMapChange_handler\0"));
    if(apiuapi_UWorld_IsPreparingMapChange){
        apiuapi_UWorld_IsPreparingMapChange(&uapi_UWorld_IsPreparingMapChange);
    }

    auto const apiuapi_UWorld_IsPreviewWorld = (uapi_UWorld_IsPreviewWorldFn)plugin->GetDllExport(TEXT("set_UWorld_IsPreviewWorld_handler\0"));
    if(apiuapi_UWorld_IsPreviewWorld){
        apiuapi_UWorld_IsPreviewWorld(&uapi_UWorld_IsPreviewWorld);
    }

    auto const apiuapi_UWorld_IsReadyForFinishDestroy = (uapi_UWorld_IsReadyForFinishDestroyFn)plugin->GetDllExport(TEXT("set_UWorld_IsReadyForFinishDestroy_handler\0"));
    if(apiuapi_UWorld_IsReadyForFinishDestroy){
        apiuapi_UWorld_IsReadyForFinishDestroy(&uapi_UWorld_IsReadyForFinishDestroy);
    }

    auto const apiuapi_UWorld_IsRecordingClientReplay = (uapi_UWorld_IsRecordingClientReplayFn)plugin->GetDllExport(TEXT("set_UWorld_IsRecordingClientReplay_handler\0"));
    if(apiuapi_UWorld_IsRecordingClientReplay){
        apiuapi_UWorld_IsRecordingClientReplay(&uapi_UWorld_IsRecordingClientReplay);
    }

    auto const apiuapi_UWorld_IsRecordingReplay = (uapi_UWorld_IsRecordingReplayFn)plugin->GetDllExport(TEXT("set_UWorld_IsRecordingReplay_handler\0"));
    if(apiuapi_UWorld_IsRecordingReplay){
        apiuapi_UWorld_IsRecordingReplay(&uapi_UWorld_IsRecordingReplay);
    }

    auto const apiuapi_UWorld_IsRefreshingStreamingLevels = (uapi_UWorld_IsRefreshingStreamingLevelsFn)plugin->GetDllExport(TEXT("set_UWorld_IsRefreshingStreamingLevels_handler\0"));
    if(apiuapi_UWorld_IsRefreshingStreamingLevels){
        apiuapi_UWorld_IsRefreshingStreamingLevels(&uapi_UWorld_IsRefreshingStreamingLevels);
    }

    auto const apiuapi_UWorld_IsStreamingLevelBeingConsidered = (uapi_UWorld_IsStreamingLevelBeingConsideredFn)plugin->GetDllExport(TEXT("set_UWorld_IsStreamingLevelBeingConsidered_handler\0"));
    if(apiuapi_UWorld_IsStreamingLevelBeingConsidered){
        apiuapi_UWorld_IsStreamingLevelBeingConsidered(&uapi_UWorld_IsStreamingLevelBeingConsidered);
    }

    auto const apiuapi_UWorld_IsVisibilityRequestPending = (uapi_UWorld_IsVisibilityRequestPendingFn)plugin->GetDllExport(TEXT("set_UWorld_IsVisibilityRequestPending_handler\0"));
    if(apiuapi_UWorld_IsVisibilityRequestPending){
        apiuapi_UWorld_IsVisibilityRequestPending(&uapi_UWorld_IsVisibilityRequestPending);
    }

    auto const apiuapi_UWorld_IsWorldOrExternalActorPackage = (uapi_UWorld_IsWorldOrExternalActorPackageFn)plugin->GetDllExport(TEXT("set_UWorld_IsWorldOrExternalActorPackage_handler\0"));
    if(apiuapi_UWorld_IsWorldOrExternalActorPackage){
        apiuapi_UWorld_IsWorldOrExternalActorPackage(&uapi_UWorld_IsWorldOrExternalActorPackage);
    }

    auto const apiuapi_UWorld_IssueEditorLoadWarnings = (uapi_UWorld_IssueEditorLoadWarningsFn)plugin->GetDllExport(TEXT("set_UWorld_IssueEditorLoadWarnings_handler\0"));
    if(apiuapi_UWorld_IssueEditorLoadWarnings){
        apiuapi_UWorld_IssueEditorLoadWarnings(&uapi_UWorld_IssueEditorLoadWarnings);
    }

    auto const apiuapi_UWorld_K2_GetWorldSettings = (uapi_UWorld_K2_GetWorldSettingsFn)plugin->GetDllExport(TEXT("set_UWorld_K2_GetWorldSettings_handler\0"));
    if(apiuapi_UWorld_K2_GetWorldSettings){
        apiuapi_UWorld_K2_GetWorldSettings(&uapi_UWorld_K2_GetWorldSettings);
    }

    auto const apiuapi_UWorld_MarkActorComponentForNeededEndOfFrameUpdate = (uapi_UWorld_MarkActorComponentForNeededEndOfFrameUpdateFn)plugin->GetDllExport(TEXT("set_UWorld_MarkActorComponentForNeededEndOfFrameUpdate_handler\0"));
    if(apiuapi_UWorld_MarkActorComponentForNeededEndOfFrameUpdate){
        apiuapi_UWorld_MarkActorComponentForNeededEndOfFrameUpdate(&uapi_UWorld_MarkActorComponentForNeededEndOfFrameUpdate);
    }

    auto const apiuapi_UWorld_MarkObjectsPendingKill = (uapi_UWorld_MarkObjectsPendingKillFn)plugin->GetDllExport(TEXT("set_UWorld_MarkObjectsPendingKill_handler\0"));
    if(apiuapi_UWorld_MarkObjectsPendingKill){
        apiuapi_UWorld_MarkObjectsPendingKill(&uapi_UWorld_MarkObjectsPendingKill);
    }

    auto const apiuapi_UWorld_ModifyLevel = (uapi_UWorld_ModifyLevelFn)plugin->GetDllExport(TEXT("set_UWorld_ModifyLevel_handler\0"));
    if(apiuapi_UWorld_ModifyLevel){
        apiuapi_UWorld_ModifyLevel(&uapi_UWorld_ModifyLevel);
    }

    auto const apiuapi_UWorld_NotifyAcceptedConnection = (uapi_UWorld_NotifyAcceptedConnectionFn)plugin->GetDllExport(TEXT("set_UWorld_NotifyAcceptedConnection_handler\0"));
    if(apiuapi_UWorld_NotifyAcceptedConnection){
        apiuapi_UWorld_NotifyAcceptedConnection(&uapi_UWorld_NotifyAcceptedConnection);
    }

    auto const apiuapi_UWorld_NotifyAcceptingChannel = (uapi_UWorld_NotifyAcceptingChannelFn)plugin->GetDllExport(TEXT("set_UWorld_NotifyAcceptingChannel_handler\0"));
    if(apiuapi_UWorld_NotifyAcceptingChannel){
        apiuapi_UWorld_NotifyAcceptingChannel(&uapi_UWorld_NotifyAcceptingChannel);
    }

    auto const apiuapi_UWorld_NotifyOfBlueprintDebuggingAssociation = (uapi_UWorld_NotifyOfBlueprintDebuggingAssociationFn)plugin->GetDllExport(TEXT("set_UWorld_NotifyOfBlueprintDebuggingAssociation_handler\0"));
    if(apiuapi_UWorld_NotifyOfBlueprintDebuggingAssociation){
        apiuapi_UWorld_NotifyOfBlueprintDebuggingAssociation(&uapi_UWorld_NotifyOfBlueprintDebuggingAssociation);
    }

    auto const apiuapi_UWorld_PopulateStreamingLevelsToConsider = (uapi_UWorld_PopulateStreamingLevelsToConsiderFn)plugin->GetDllExport(TEXT("set_UWorld_PopulateStreamingLevelsToConsider_handler\0"));
    if(apiuapi_UWorld_PopulateStreamingLevelsToConsider){
        apiuapi_UWorld_PopulateStreamingLevelsToConsider(&uapi_UWorld_PopulateStreamingLevelsToConsider);
    }

    auto const apiuapi_UWorld_PostDuplicate = (uapi_UWorld_PostDuplicateFn)plugin->GetDllExport(TEXT("set_UWorld_PostDuplicate_handler\0"));
    if(apiuapi_UWorld_PostDuplicate){
        apiuapi_UWorld_PostDuplicate(&uapi_UWorld_PostDuplicate);
    }

    auto const apiuapi_UWorld_PostInitializeSubsystems = (uapi_UWorld_PostInitializeSubsystemsFn)plugin->GetDllExport(TEXT("set_UWorld_PostInitializeSubsystems_handler\0"));
    if(apiuapi_UWorld_PostInitializeSubsystems){
        apiuapi_UWorld_PostInitializeSubsystems(&uapi_UWorld_PostInitializeSubsystems);
    }

    auto const apiuapi_UWorld_PostLoad = (uapi_UWorld_PostLoadFn)plugin->GetDllExport(TEXT("set_UWorld_PostLoad_handler\0"));
    if(apiuapi_UWorld_PostLoad){
        apiuapi_UWorld_PostLoad(&uapi_UWorld_PostLoad);
    }

    auto const apiuapi_UWorld_PropagateLightingScenarioChange = (uapi_UWorld_PropagateLightingScenarioChangeFn)plugin->GetDllExport(TEXT("set_UWorld_PropagateLightingScenarioChange_handler\0"));
    if(apiuapi_UWorld_PropagateLightingScenarioChange){
        apiuapi_UWorld_PropagateLightingScenarioChange(&uapi_UWorld_PropagateLightingScenarioChange);
    }

    auto const apiuapi_UWorld_RefreshStreamingLevels = (uapi_UWorld_RefreshStreamingLevelsFn)plugin->GetDllExport(TEXT("set_UWorld_RefreshStreamingLevels_handler\0"));
    if(apiuapi_UWorld_RefreshStreamingLevels){
        apiuapi_UWorld_RefreshStreamingLevels(&uapi_UWorld_RefreshStreamingLevels);
    }

    auto const apiuapi_UWorld_RegisterAutoActivateCamera = (uapi_UWorld_RegisterAutoActivateCameraFn)plugin->GetDllExport(TEXT("set_UWorld_RegisterAutoActivateCamera_handler\0"));
    if(apiuapi_UWorld_RegisterAutoActivateCamera){
        apiuapi_UWorld_RegisterAutoActivateCamera(&uapi_UWorld_RegisterAutoActivateCamera);
    }

    auto const apiuapi_UWorld_ReleasePhysicsScene = (uapi_UWorld_ReleasePhysicsSceneFn)plugin->GetDllExport(TEXT("set_UWorld_ReleasePhysicsScene_handler\0"));
    if(apiuapi_UWorld_ReleasePhysicsScene){
        apiuapi_UWorld_ReleasePhysicsScene(&uapi_UWorld_ReleasePhysicsScene);
    }

    auto const apiuapi_UWorld_RemoveActor = (uapi_UWorld_RemoveActorFn)plugin->GetDllExport(TEXT("set_UWorld_RemoveActor_handler\0"));
    if(apiuapi_UWorld_RemoveActor){
        apiuapi_UWorld_RemoveActor(&uapi_UWorld_RemoveActor);
    }

    auto const apiuapi_UWorld_RemoveController = (uapi_UWorld_RemoveControllerFn)plugin->GetDllExport(TEXT("set_UWorld_RemoveController_handler\0"));
    if(apiuapi_UWorld_RemoveController){
        apiuapi_UWorld_RemoveController(&uapi_UWorld_RemoveController);
    }

    auto const apiuapi_UWorld_RemoveLevel = (uapi_UWorld_RemoveLevelFn)plugin->GetDllExport(TEXT("set_UWorld_RemoveLevel_handler\0"));
    if(apiuapi_UWorld_RemoveLevel){
        apiuapi_UWorld_RemoveLevel(&uapi_UWorld_RemoveLevel);
    }

    auto const apiuapi_UWorld_RemoveNetworkActor = (uapi_UWorld_RemoveNetworkActorFn)plugin->GetDllExport(TEXT("set_UWorld_RemoveNetworkActor_handler\0"));
    if(apiuapi_UWorld_RemoveNetworkActor){
        apiuapi_UWorld_RemoveNetworkActor(&uapi_UWorld_RemoveNetworkActor);
    }

    auto const apiuapi_UWorld_RemovePhysicsVolume = (uapi_UWorld_RemovePhysicsVolumeFn)plugin->GetDllExport(TEXT("set_UWorld_RemovePhysicsVolume_handler\0"));
    if(apiuapi_UWorld_RemovePhysicsVolume){
        apiuapi_UWorld_RemovePhysicsVolume(&uapi_UWorld_RemovePhysicsVolume);
    }

    auto const apiuapi_UWorld_RemovePostProcessVolume = (uapi_UWorld_RemovePostProcessVolumeFn)plugin->GetDllExport(TEXT("set_UWorld_RemovePostProcessVolume_handler\0"));
    if(apiuapi_UWorld_RemovePostProcessVolume){
        apiuapi_UWorld_RemovePostProcessVolume(&uapi_UWorld_RemovePostProcessVolume);
    }

    auto const apiuapi_UWorld_RemoveStreamingLevel = (uapi_UWorld_RemoveStreamingLevelFn)plugin->GetDllExport(TEXT("set_UWorld_RemoveStreamingLevel_handler\0"));
    if(apiuapi_UWorld_RemoveStreamingLevel){
        apiuapi_UWorld_RemoveStreamingLevel(&uapi_UWorld_RemoveStreamingLevel);
    }

    auto const apiuapi_UWorld_RemoveStreamingLevelAt = (uapi_UWorld_RemoveStreamingLevelAtFn)plugin->GetDllExport(TEXT("set_UWorld_RemoveStreamingLevelAt_handler\0"));
    if(apiuapi_UWorld_RemoveStreamingLevelAt){
        apiuapi_UWorld_RemoveStreamingLevelAt(&uapi_UWorld_RemoveStreamingLevelAt);
    }

    auto const apiuapi_UWorld_RenameToPIEWorld = (uapi_UWorld_RenameToPIEWorldFn)plugin->GetDllExport(TEXT("set_UWorld_RenameToPIEWorld_handler\0"));
    if(apiuapi_UWorld_RenameToPIEWorld){
        apiuapi_UWorld_RenameToPIEWorld(&uapi_UWorld_RenameToPIEWorld);
    }

    auto const apiuapi_UWorld_RequiresHitProxies = (uapi_UWorld_RequiresHitProxiesFn)plugin->GetDllExport(TEXT("set_UWorld_RequiresHitProxies_handler\0"));
    if(apiuapi_UWorld_RequiresHitProxies){
        apiuapi_UWorld_RequiresHitProxies(&uapi_UWorld_RequiresHitProxies);
    }

    auto const apiuapi_UWorld_SelectLevel = (uapi_UWorld_SelectLevelFn)plugin->GetDllExport(TEXT("set_UWorld_SelectLevel_handler\0"));
    if(apiuapi_UWorld_SelectLevel){
        apiuapi_UWorld_SelectLevel(&uapi_UWorld_SelectLevel);
    }

    auto const apiuapi_UWorld_SendAllEndOfFrameUpdates = (uapi_UWorld_SendAllEndOfFrameUpdatesFn)plugin->GetDllExport(TEXT("set_UWorld_SendAllEndOfFrameUpdates_handler\0"));
    if(apiuapi_UWorld_SendAllEndOfFrameUpdates){
        apiuapi_UWorld_SendAllEndOfFrameUpdates(&uapi_UWorld_SendAllEndOfFrameUpdates);
    }

    auto const apiuapi_UWorld_SetActiveLevelCollection = (uapi_UWorld_SetActiveLevelCollectionFn)plugin->GetDllExport(TEXT("set_UWorld_SetActiveLevelCollection_handler\0"));
    if(apiuapi_UWorld_SetActiveLevelCollection){
        apiuapi_UWorld_SetActiveLevelCollection(&uapi_UWorld_SetActiveLevelCollection);
    }

    auto const apiuapi_UWorld_SetAllowDeferredPhysicsStateCreation = (uapi_UWorld_SetAllowDeferredPhysicsStateCreationFn)plugin->GetDllExport(TEXT("set_UWorld_SetAllowDeferredPhysicsStateCreation_handler\0"));
    if(apiuapi_UWorld_SetAllowDeferredPhysicsStateCreation){
        apiuapi_UWorld_SetAllowDeferredPhysicsStateCreation(&uapi_UWorld_SetAllowDeferredPhysicsStateCreation);
    }

    auto const apiuapi_UWorld_SetCurrentLevel = (uapi_UWorld_SetCurrentLevelFn)plugin->GetDllExport(TEXT("set_UWorld_SetCurrentLevel_handler\0"));
    if(apiuapi_UWorld_SetCurrentLevel){
        apiuapi_UWorld_SetCurrentLevel(&uapi_UWorld_SetCurrentLevel);
    }

    auto const apiuapi_UWorld_SetDemoNetDriver = (uapi_UWorld_SetDemoNetDriverFn)plugin->GetDllExport(TEXT("set_UWorld_SetDemoNetDriver_handler\0"));
    if(apiuapi_UWorld_SetDemoNetDriver){
        apiuapi_UWorld_SetDemoNetDriver(&uapi_UWorld_SetDemoNetDriver);
    }

    auto const apiuapi_UWorld_SetGameInstance = (uapi_UWorld_SetGameInstanceFn)plugin->GetDllExport(TEXT("set_UWorld_SetGameInstance_handler\0"));
    if(apiuapi_UWorld_SetGameInstance){
        apiuapi_UWorld_SetGameInstance(&uapi_UWorld_SetGameInstance);
    }

    auto const apiuapi_UWorld_SetGameState = (uapi_UWorld_SetGameStateFn)plugin->GetDllExport(TEXT("set_UWorld_SetGameState_handler\0"));
    if(apiuapi_UWorld_SetGameState){
        apiuapi_UWorld_SetGameState(&uapi_UWorld_SetGameState);
    }

    auto const apiuapi_UWorld_SetMapNeedsLightingFullyRebuilt = (uapi_UWorld_SetMapNeedsLightingFullyRebuiltFn)plugin->GetDllExport(TEXT("set_UWorld_SetMapNeedsLightingFullyRebuilt_handler\0"));
    if(apiuapi_UWorld_SetMapNeedsLightingFullyRebuilt){
        apiuapi_UWorld_SetMapNeedsLightingFullyRebuilt(&uapi_UWorld_SetMapNeedsLightingFullyRebuilt);
    }

    auto const apiuapi_UWorld_SetMaterialParameterCollectionInstanceNeedsUpdate = (uapi_UWorld_SetMaterialParameterCollectionInstanceNeedsUpdateFn)plugin->GetDllExport(TEXT("set_UWorld_SetMaterialParameterCollectionInstanceNeedsUpdate_handler\0"));
    if(apiuapi_UWorld_SetMaterialParameterCollectionInstanceNeedsUpdate){
        apiuapi_UWorld_SetMaterialParameterCollectionInstanceNeedsUpdate(&uapi_UWorld_SetMaterialParameterCollectionInstanceNeedsUpdate);
    }

    auto const apiuapi_UWorld_SetNavigationSystem = (uapi_UWorld_SetNavigationSystemFn)plugin->GetDllExport(TEXT("set_UWorld_SetNavigationSystem_handler\0"));
    if(apiuapi_UWorld_SetNavigationSystem){
        apiuapi_UWorld_SetNavigationSystem(&uapi_UWorld_SetNavigationSystem);
    }

    auto const apiuapi_UWorld_SetNetDriver = (uapi_UWorld_SetNetDriverFn)plugin->GetDllExport(TEXT("set_UWorld_SetNetDriver_handler\0"));
    if(apiuapi_UWorld_SetNetDriver){
        apiuapi_UWorld_SetNetDriver(&uapi_UWorld_SetNetDriver);
    }

    auto const apiuapi_UWorld_SetPhysicsScene = (uapi_UWorld_SetPhysicsSceneFn)plugin->GetDllExport(TEXT("set_UWorld_SetPhysicsScene_handler\0"));
    if(apiuapi_UWorld_SetPhysicsScene){
        apiuapi_UWorld_SetPhysicsScene(&uapi_UWorld_SetPhysicsScene);
    }

    auto const apiuapi_UWorld_SetSeamlessTravelMidpointPause = (uapi_UWorld_SetSeamlessTravelMidpointPauseFn)plugin->GetDllExport(TEXT("set_UWorld_SetSeamlessTravelMidpointPause_handler\0"));
    if(apiuapi_UWorld_SetSeamlessTravelMidpointPause){
        apiuapi_UWorld_SetSeamlessTravelMidpointPause(&uapi_UWorld_SetSeamlessTravelMidpointPause);
    }

    auto const apiuapi_UWorld_SetShouldForceUnloadStreamingLevels = (uapi_UWorld_SetShouldForceUnloadStreamingLevelsFn)plugin->GetDllExport(TEXT("set_UWorld_SetShouldForceUnloadStreamingLevels_handler\0"));
    if(apiuapi_UWorld_SetShouldForceUnloadStreamingLevels){
        apiuapi_UWorld_SetShouldForceUnloadStreamingLevels(&uapi_UWorld_SetShouldForceUnloadStreamingLevels);
    }

    auto const apiuapi_UWorld_SetShouldForceVisibleStreamingLevels = (uapi_UWorld_SetShouldForceVisibleStreamingLevelsFn)plugin->GetDllExport(TEXT("set_UWorld_SetShouldForceVisibleStreamingLevels_handler\0"));
    if(apiuapi_UWorld_SetShouldForceVisibleStreamingLevels){
        apiuapi_UWorld_SetShouldForceVisibleStreamingLevels(&uapi_UWorld_SetShouldForceVisibleStreamingLevels);
    }

    auto const apiuapi_UWorld_SetShouldTick = (uapi_UWorld_SetShouldTickFn)plugin->GetDllExport(TEXT("set_UWorld_SetShouldTick_handler\0"));
    if(apiuapi_UWorld_SetShouldTick){
        apiuapi_UWorld_SetShouldTick(&uapi_UWorld_SetShouldTick);
    }

    auto const apiuapi_UWorld_SetWorldDataLayers = (uapi_UWorld_SetWorldDataLayersFn)plugin->GetDllExport(TEXT("set_UWorld_SetWorldDataLayers_handler\0"));
    if(apiuapi_UWorld_SetWorldDataLayers){
        apiuapi_UWorld_SetWorldDataLayers(&uapi_UWorld_SetWorldDataLayers);
    }

    auto const apiuapi_UWorld_SetupParameterCollectionInstances = (uapi_UWorld_SetupParameterCollectionInstancesFn)plugin->GetDllExport(TEXT("set_UWorld_SetupParameterCollectionInstances_handler\0"));
    if(apiuapi_UWorld_SetupParameterCollectionInstances){
        apiuapi_UWorld_SetupParameterCollectionInstances(&uapi_UWorld_SetupParameterCollectionInstances);
    }

    auto const apiuapi_UWorld_SetupPhysicsTickFunctions = (uapi_UWorld_SetupPhysicsTickFunctionsFn)plugin->GetDllExport(TEXT("set_UWorld_SetupPhysicsTickFunctions_handler\0"));
    if(apiuapi_UWorld_SetupPhysicsTickFunctions){
        apiuapi_UWorld_SetupPhysicsTickFunctions(&uapi_UWorld_SetupPhysicsTickFunctions);
    }

    auto const apiuapi_UWorld_ShouldTick = (uapi_UWorld_ShouldTickFn)plugin->GetDllExport(TEXT("set_UWorld_ShouldTick_handler\0"));
    if(apiuapi_UWorld_ShouldTick){
        apiuapi_UWorld_ShouldTick(&uapi_UWorld_ShouldTick);
    }

    auto const apiuapi_UWorld_ShrinkLevel = (uapi_UWorld_ShrinkLevelFn)plugin->GetDllExport(TEXT("set_UWorld_ShrinkLevel_handler\0"));
    if(apiuapi_UWorld_ShrinkLevel){
        apiuapi_UWorld_ShrinkLevel(&uapi_UWorld_ShrinkLevel);
    }

    auto const apiuapi_UWorld_SpawnBrush = (uapi_UWorld_SpawnBrushFn)plugin->GetDllExport(TEXT("set_UWorld_SpawnBrush_handler\0"));
    if(apiuapi_UWorld_SpawnBrush){
        apiuapi_UWorld_SpawnBrush(&uapi_UWorld_SpawnBrush);
    }

    auto const apiuapi_UWorld_StartPhysicsSim = (uapi_UWorld_StartPhysicsSimFn)plugin->GetDllExport(TEXT("set_UWorld_StartPhysicsSim_handler\0"));
    if(apiuapi_UWorld_StartPhysicsSim){
        apiuapi_UWorld_StartPhysicsSim(&uapi_UWorld_StartPhysicsSim);
    }

    auto const apiuapi_UWorld_SupportsMakingInvisibleTransactionRequests = (uapi_UWorld_SupportsMakingInvisibleTransactionRequestsFn)plugin->GetDllExport(TEXT("set_UWorld_SupportsMakingInvisibleTransactionRequests_handler\0"));
    if(apiuapi_UWorld_SupportsMakingInvisibleTransactionRequests){
        apiuapi_UWorld_SupportsMakingInvisibleTransactionRequests(&uapi_UWorld_SupportsMakingInvisibleTransactionRequests);
    }

    auto const apiuapi_UWorld_SupportsMakingVisibleTransactionRequests = (uapi_UWorld_SupportsMakingVisibleTransactionRequestsFn)plugin->GetDllExport(TEXT("set_UWorld_SupportsMakingVisibleTransactionRequests_handler\0"));
    if(apiuapi_UWorld_SupportsMakingVisibleTransactionRequests){
        apiuapi_UWorld_SupportsMakingVisibleTransactionRequests(&uapi_UWorld_SupportsMakingVisibleTransactionRequests);
    }

    auto const apiuapi_UWorld_TickNetClient = (uapi_UWorld_TickNetClientFn)plugin->GetDllExport(TEXT("set_UWorld_TickNetClient_handler\0"));
    if(apiuapi_UWorld_TickNetClient){
        apiuapi_UWorld_TickNetClient(&uapi_UWorld_TickNetClient);
    }

    auto const apiuapi_UWorld_TimeSince = (uapi_UWorld_TimeSinceFn)plugin->GetDllExport(TEXT("set_UWorld_TimeSince_handler\0"));
    if(apiuapi_UWorld_TimeSince){
        apiuapi_UWorld_TimeSince(&uapi_UWorld_TimeSince);
    }

    auto const apiuapi_UWorld_TransferBlueprintDebugReferences = (uapi_UWorld_TransferBlueprintDebugReferencesFn)plugin->GetDllExport(TEXT("set_UWorld_TransferBlueprintDebugReferences_handler\0"));
    if(apiuapi_UWorld_TransferBlueprintDebugReferences){
        apiuapi_UWorld_TransferBlueprintDebugReferences(&uapi_UWorld_TransferBlueprintDebugReferences);
    }

    auto const apiuapi_UWorld_TriggerStreamingDataRebuild = (uapi_UWorld_TriggerStreamingDataRebuildFn)plugin->GetDllExport(TEXT("set_UWorld_TriggerStreamingDataRebuild_handler\0"));
    if(apiuapi_UWorld_TriggerStreamingDataRebuild){
        apiuapi_UWorld_TriggerStreamingDataRebuild(&uapi_UWorld_TriggerStreamingDataRebuild);
    }

    auto const apiuapi_UWorld_UpdateActorComponentEndOfFrameUpdateState = (uapi_UWorld_UpdateActorComponentEndOfFrameUpdateStateFn)plugin->GetDllExport(TEXT("set_UWorld_UpdateActorComponentEndOfFrameUpdateState_handler\0"));
    if(apiuapi_UWorld_UpdateActorComponentEndOfFrameUpdateState){
        apiuapi_UWorld_UpdateActorComponentEndOfFrameUpdateState(&uapi_UWorld_UpdateActorComponentEndOfFrameUpdateState);
    }

    auto const apiuapi_UWorld_UpdateAllSkyCaptures = (uapi_UWorld_UpdateAllSkyCapturesFn)plugin->GetDllExport(TEXT("set_UWorld_UpdateAllSkyCaptures_handler\0"));
    if(apiuapi_UWorld_UpdateAllSkyCaptures){
        apiuapi_UWorld_UpdateAllSkyCaptures(&uapi_UWorld_UpdateAllSkyCaptures);
    }

    auto const apiuapi_UWorld_UpdateConstraintActors = (uapi_UWorld_UpdateConstraintActorsFn)plugin->GetDllExport(TEXT("set_UWorld_UpdateConstraintActors_handler\0"));
    if(apiuapi_UWorld_UpdateConstraintActors){
        apiuapi_UWorld_UpdateConstraintActors(&uapi_UWorld_UpdateConstraintActors);
    }

    auto const apiuapi_UWorld_UpdateCullDistanceVolumes = (uapi_UWorld_UpdateCullDistanceVolumesFn)plugin->GetDllExport(TEXT("set_UWorld_UpdateCullDistanceVolumes_handler\0"));
    if(apiuapi_UWorld_UpdateCullDistanceVolumes){
        apiuapi_UWorld_UpdateCullDistanceVolumes(&uapi_UWorld_UpdateCullDistanceVolumes);
    }

    auto const apiuapi_UWorld_UpdateLevelStreaming = (uapi_UWorld_UpdateLevelStreamingFn)plugin->GetDllExport(TEXT("set_UWorld_UpdateLevelStreaming_handler\0"));
    if(apiuapi_UWorld_UpdateLevelStreaming){
        apiuapi_UWorld_UpdateLevelStreaming(&uapi_UWorld_UpdateLevelStreaming);
    }

    auto const apiuapi_UWorld_UpdateParameterCollectionInstances = (uapi_UWorld_UpdateParameterCollectionInstancesFn)plugin->GetDllExport(TEXT("set_UWorld_UpdateParameterCollectionInstances_handler\0"));
    if(apiuapi_UWorld_UpdateParameterCollectionInstances){
        apiuapi_UWorld_UpdateParameterCollectionInstances(&uapi_UWorld_UpdateParameterCollectionInstances);
    }

    auto const apiuapi_UWorld_UpdateStreamingLevelPriority = (uapi_UWorld_UpdateStreamingLevelPriorityFn)plugin->GetDllExport(TEXT("set_UWorld_UpdateStreamingLevelPriority_handler\0"));
    if(apiuapi_UWorld_UpdateStreamingLevelPriority){
        apiuapi_UWorld_UpdateStreamingLevelPriority(&uapi_UWorld_UpdateStreamingLevelPriority);
    }

    auto const apiuapi_UWorld_UpdateStreamingLevelShouldBeConsidered = (uapi_UWorld_UpdateStreamingLevelShouldBeConsideredFn)plugin->GetDllExport(TEXT("set_UWorld_UpdateStreamingLevelShouldBeConsidered_handler\0"));
    if(apiuapi_UWorld_UpdateStreamingLevelShouldBeConsidered){
        apiuapi_UWorld_UpdateStreamingLevelShouldBeConsidered(&uapi_UWorld_UpdateStreamingLevelShouldBeConsidered);
    }

    auto const apiuapi_UWorld_UpdateWorldComponents = (uapi_UWorld_UpdateWorldComponentsFn)plugin->GetDllExport(TEXT("set_UWorld_UpdateWorldComponents_handler\0"));
    if(apiuapi_UWorld_UpdateWorldComponents){
        apiuapi_UWorld_UpdateWorldComponents(&uapi_UWorld_UpdateWorldComponents);
    }

    auto const apiuapi_UWorld_UsesGameHiddenFlags = (uapi_UWorld_UsesGameHiddenFlagsFn)plugin->GetDllExport(TEXT("set_UWorld_UsesGameHiddenFlags_handler\0"));
    if(apiuapi_UWorld_UsesGameHiddenFlags){
        apiuapi_UWorld_UsesGameHiddenFlags(&uapi_UWorld_UsesGameHiddenFlags);
    }

    auto const apiuapi_UWorld_WelcomePlayer = (uapi_UWorld_WelcomePlayerFn)plugin->GetDllExport(TEXT("set_UWorld_WelcomePlayer_handler\0"));
    if(apiuapi_UWorld_WelcomePlayer){
        apiuapi_UWorld_WelcomePlayer(&uapi_UWorld_WelcomePlayer);
    }

    auto const apiuapi_UPrimitiveComponent_AddAngularImpulseInDegrees = (uapi_UPrimitiveComponent_AddAngularImpulseInDegreesFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_AddAngularImpulseInDegrees_handler\0"));
    if(apiuapi_UPrimitiveComponent_AddAngularImpulseInDegrees){
        apiuapi_UPrimitiveComponent_AddAngularImpulseInDegrees(&uapi_UPrimitiveComponent_AddAngularImpulseInDegrees);
    }

    auto const apiuapi_UPrimitiveComponent_AddAngularImpulseInRadians = (uapi_UPrimitiveComponent_AddAngularImpulseInRadiansFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_AddAngularImpulseInRadians_handler\0"));
    if(apiuapi_UPrimitiveComponent_AddAngularImpulseInRadians){
        apiuapi_UPrimitiveComponent_AddAngularImpulseInRadians(&uapi_UPrimitiveComponent_AddAngularImpulseInRadians);
    }

    auto const apiuapi_UPrimitiveComponent_AddForce = (uapi_UPrimitiveComponent_AddForceFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_AddForce_handler\0"));
    if(apiuapi_UPrimitiveComponent_AddForce){
        apiuapi_UPrimitiveComponent_AddForce(&uapi_UPrimitiveComponent_AddForce);
    }

    auto const apiuapi_UPrimitiveComponent_AddForceAtLocation = (uapi_UPrimitiveComponent_AddForceAtLocationFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_AddForceAtLocation_handler\0"));
    if(apiuapi_UPrimitiveComponent_AddForceAtLocation){
        apiuapi_UPrimitiveComponent_AddForceAtLocation(&uapi_UPrimitiveComponent_AddForceAtLocation);
    }

    auto const apiuapi_UPrimitiveComponent_AddForceAtLocationLocal = (uapi_UPrimitiveComponent_AddForceAtLocationLocalFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_AddForceAtLocationLocal_handler\0"));
    if(apiuapi_UPrimitiveComponent_AddForceAtLocationLocal){
        apiuapi_UPrimitiveComponent_AddForceAtLocationLocal(&uapi_UPrimitiveComponent_AddForceAtLocationLocal);
    }

    auto const apiuapi_UPrimitiveComponent_AddImpulse = (uapi_UPrimitiveComponent_AddImpulseFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_AddImpulse_handler\0"));
    if(apiuapi_UPrimitiveComponent_AddImpulse){
        apiuapi_UPrimitiveComponent_AddImpulse(&uapi_UPrimitiveComponent_AddImpulse);
    }

    auto const apiuapi_UPrimitiveComponent_AddImpulseAtLocation = (uapi_UPrimitiveComponent_AddImpulseAtLocationFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_AddImpulseAtLocation_handler\0"));
    if(apiuapi_UPrimitiveComponent_AddImpulseAtLocation){
        apiuapi_UPrimitiveComponent_AddImpulseAtLocation(&uapi_UPrimitiveComponent_AddImpulseAtLocation);
    }

    auto const apiuapi_UPrimitiveComponent_AddTorqueInDegrees = (uapi_UPrimitiveComponent_AddTorqueInDegreesFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_AddTorqueInDegrees_handler\0"));
    if(apiuapi_UPrimitiveComponent_AddTorqueInDegrees){
        apiuapi_UPrimitiveComponent_AddTorqueInDegrees(&uapi_UPrimitiveComponent_AddTorqueInDegrees);
    }

    auto const apiuapi_UPrimitiveComponent_AddTorqueInRadians = (uapi_UPrimitiveComponent_AddTorqueInRadiansFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_AddTorqueInRadians_handler\0"));
    if(apiuapi_UPrimitiveComponent_AddTorqueInRadians){
        apiuapi_UPrimitiveComponent_AddTorqueInRadians(&uapi_UPrimitiveComponent_AddTorqueInRadians);
    }

    auto const apiuapi_UPrimitiveComponent_AddVelocityChangeImpulseAtLocation = (uapi_UPrimitiveComponent_AddVelocityChangeImpulseAtLocationFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_AddVelocityChangeImpulseAtLocation_handler\0"));
    if(apiuapi_UPrimitiveComponent_AddVelocityChangeImpulseAtLocation){
        apiuapi_UPrimitiveComponent_AddVelocityChangeImpulseAtLocation(&uapi_UPrimitiveComponent_AddVelocityChangeImpulseAtLocation);
    }

    auto const apiuapi_UPrimitiveComponent_BeginDestroy = (uapi_UPrimitiveComponent_BeginDestroyFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_BeginDestroy_handler\0"));
    if(apiuapi_UPrimitiveComponent_BeginDestroy){
        apiuapi_UPrimitiveComponent_BeginDestroy(&uapi_UPrimitiveComponent_BeginDestroy);
    }

    auto const apiuapi_UPrimitiveComponent_BeginPlay = (uapi_UPrimitiveComponent_BeginPlayFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_BeginPlay_handler\0"));
    if(apiuapi_UPrimitiveComponent_BeginPlay){
        apiuapi_UPrimitiveComponent_BeginPlay(&uapi_UPrimitiveComponent_BeginPlay);
    }

    auto const apiuapi_UPrimitiveComponent_CalculateMass = (uapi_UPrimitiveComponent_CalculateMassFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_CalculateMass_handler\0"));
    if(apiuapi_UPrimitiveComponent_CalculateMass){
        apiuapi_UPrimitiveComponent_CalculateMass(&uapi_UPrimitiveComponent_CalculateMass);
    }

    auto const apiuapi_UPrimitiveComponent_CanCharacterStepUp = (uapi_UPrimitiveComponent_CanCharacterStepUpFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_CanCharacterStepUp_handler\0"));
    if(apiuapi_UPrimitiveComponent_CanCharacterStepUp){
        apiuapi_UPrimitiveComponent_CanCharacterStepUp(&uapi_UPrimitiveComponent_CanCharacterStepUp);
    }

    auto const apiuapi_UPrimitiveComponent_CanEditChange = (uapi_UPrimitiveComponent_CanEditChangeFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_CanEditChange_handler\0"));
    if(apiuapi_UPrimitiveComponent_CanEditChange){
        apiuapi_UPrimitiveComponent_CanEditChange(&uapi_UPrimitiveComponent_CanEditChange);
    }

    auto const apiuapi_UPrimitiveComponent_CanEditSimulatePhysics = (uapi_UPrimitiveComponent_CanEditSimulatePhysicsFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_CanEditSimulatePhysics_handler\0"));
    if(apiuapi_UPrimitiveComponent_CanEditSimulatePhysics){
        apiuapi_UPrimitiveComponent_CanEditSimulatePhysics(&uapi_UPrimitiveComponent_CanEditSimulatePhysics);
    }

    auto const apiuapi_UPrimitiveComponent_CanSkipGetTextureStreamingRenderAssetInfo = (uapi_UPrimitiveComponent_CanSkipGetTextureStreamingRenderAssetInfoFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_CanSkipGetTextureStreamingRenderAssetInfo_handler\0"));
    if(apiuapi_UPrimitiveComponent_CanSkipGetTextureStreamingRenderAssetInfo){
        apiuapi_UPrimitiveComponent_CanSkipGetTextureStreamingRenderAssetInfo(&uapi_UPrimitiveComponent_CanSkipGetTextureStreamingRenderAssetInfo);
    }

    auto const apiuapi_UPrimitiveComponent_CheckForErrors = (uapi_UPrimitiveComponent_CheckForErrorsFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_CheckForErrors_handler\0"));
    if(apiuapi_UPrimitiveComponent_CheckForErrors){
        apiuapi_UPrimitiveComponent_CheckForErrors(&uapi_UPrimitiveComponent_CheckForErrors);
    }

    auto const apiuapi_UPrimitiveComponent_ClearMoveIgnoreActors = (uapi_UPrimitiveComponent_ClearMoveIgnoreActorsFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_ClearMoveIgnoreActors_handler\0"));
    if(apiuapi_UPrimitiveComponent_ClearMoveIgnoreActors){
        apiuapi_UPrimitiveComponent_ClearMoveIgnoreActors(&uapi_UPrimitiveComponent_ClearMoveIgnoreActors);
    }

    auto const apiuapi_UPrimitiveComponent_ClearMoveIgnoreComponents = (uapi_UPrimitiveComponent_ClearMoveIgnoreComponentsFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_ClearMoveIgnoreComponents_handler\0"));
    if(apiuapi_UPrimitiveComponent_ClearMoveIgnoreComponents){
        apiuapi_UPrimitiveComponent_ClearMoveIgnoreComponents(&uapi_UPrimitiveComponent_ClearMoveIgnoreComponents);
    }

    auto const apiuapi_UPrimitiveComponent_ComputeHashTextureStreamingBuiltData = (uapi_UPrimitiveComponent_ComputeHashTextureStreamingBuiltDataFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_ComputeHashTextureStreamingBuiltData_handler\0"));
    if(apiuapi_UPrimitiveComponent_ComputeHashTextureStreamingBuiltData){
        apiuapi_UPrimitiveComponent_ComputeHashTextureStreamingBuiltData(&uapi_UPrimitiveComponent_ComputeHashTextureStreamingBuiltData);
    }

    auto const apiuapi_UPrimitiveComponent_CreateRenderState_Concurrent = (uapi_UPrimitiveComponent_CreateRenderState_ConcurrentFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_CreateRenderState_Concurrent_handler\0"));
    if(apiuapi_UPrimitiveComponent_CreateRenderState_Concurrent){
        apiuapi_UPrimitiveComponent_CreateRenderState_Concurrent(&uapi_UPrimitiveComponent_CreateRenderState_Concurrent);
    }

    auto const apiuapi_UPrimitiveComponent_CreateSceneProxy = (uapi_UPrimitiveComponent_CreateSceneProxyFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_CreateSceneProxy_handler\0"));
    if(apiuapi_UPrimitiveComponent_CreateSceneProxy){
        apiuapi_UPrimitiveComponent_CreateSceneProxy(&uapi_UPrimitiveComponent_CreateSceneProxy);
    }

    auto const apiuapi_UPrimitiveComponent_DestroyRenderState_Concurrent = (uapi_UPrimitiveComponent_DestroyRenderState_ConcurrentFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_DestroyRenderState_Concurrent_handler\0"));
    if(apiuapi_UPrimitiveComponent_DestroyRenderState_Concurrent){
        apiuapi_UPrimitiveComponent_DestroyRenderState_Concurrent(&uapi_UPrimitiveComponent_DestroyRenderState_Concurrent);
    }

    auto const apiuapi_UPrimitiveComponent_DispatchMouseOverEvents = (uapi_UPrimitiveComponent_DispatchMouseOverEventsFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_DispatchMouseOverEvents_handler\0"));
    if(apiuapi_UPrimitiveComponent_DispatchMouseOverEvents){
        apiuapi_UPrimitiveComponent_DispatchMouseOverEvents(&uapi_UPrimitiveComponent_DispatchMouseOverEvents);
    }

    auto const apiuapi_UPrimitiveComponent_FinishDestroy = (uapi_UPrimitiveComponent_FinishDestroyFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_FinishDestroy_handler\0"));
    if(apiuapi_UPrimitiveComponent_FinishDestroy){
        apiuapi_UPrimitiveComponent_FinishDestroy(&uapi_UPrimitiveComponent_FinishDestroy);
    }

    auto const apiuapi_UPrimitiveComponent_GetAngularDamping = (uapi_UPrimitiveComponent_GetAngularDampingFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetAngularDamping_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetAngularDamping){
        apiuapi_UPrimitiveComponent_GetAngularDamping(&uapi_UPrimitiveComponent_GetAngularDamping);
    }

    auto const apiuapi_UPrimitiveComponent_GetBodyInstance = (uapi_UPrimitiveComponent_GetBodyInstanceFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetBodyInstance_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetBodyInstance){
        apiuapi_UPrimitiveComponent_GetBodyInstance(&uapi_UPrimitiveComponent_GetBodyInstance);
    }

    auto const apiuapi_UPrimitiveComponent_GetBodySetup = (uapi_UPrimitiveComponent_GetBodySetupFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetBodySetup_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetBodySetup){
        apiuapi_UPrimitiveComponent_GetBodySetup(&uapi_UPrimitiveComponent_GetBodySetup);
    }

    auto const apiuapi_UPrimitiveComponent_GetCenterOfMass = (uapi_UPrimitiveComponent_GetCenterOfMassFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetCenterOfMass_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetCenterOfMass){
        apiuapi_UPrimitiveComponent_GetCenterOfMass(&uapi_UPrimitiveComponent_GetCenterOfMass);
    }

    auto const apiuapi_UPrimitiveComponent_GetCollisionObjectType = (uapi_UPrimitiveComponent_GetCollisionObjectTypeFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetCollisionObjectType_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetCollisionObjectType){
        apiuapi_UPrimitiveComponent_GetCollisionObjectType(&uapi_UPrimitiveComponent_GetCollisionObjectType);
    }

    auto const apiuapi_UPrimitiveComponent_GetCollisionProfileName = (uapi_UPrimitiveComponent_GetCollisionProfileNameFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetCollisionProfileName_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetCollisionProfileName){
        apiuapi_UPrimitiveComponent_GetCollisionProfileName(&uapi_UPrimitiveComponent_GetCollisionProfileName);
    }

    auto const apiuapi_UPrimitiveComponent_GetCollisionShape = (uapi_UPrimitiveComponent_GetCollisionShapeFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetCollisionShape_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetCollisionShape){
        apiuapi_UPrimitiveComponent_GetCollisionShape(&uapi_UPrimitiveComponent_GetCollisionShape);
    }

    auto const apiuapi_UPrimitiveComponent_GetComponentTransformFromBodyInstance = (uapi_UPrimitiveComponent_GetComponentTransformFromBodyInstanceFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetComponentTransformFromBodyInstance_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetComponentTransformFromBodyInstance){
        apiuapi_UPrimitiveComponent_GetComponentTransformFromBodyInstance(&uapi_UPrimitiveComponent_GetComponentTransformFromBodyInstance);
    }

    auto const apiuapi_UPrimitiveComponent_GetComponentVelocity = (uapi_UPrimitiveComponent_GetComponentVelocityFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetComponentVelocity_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetComponentVelocity){
        apiuapi_UPrimitiveComponent_GetComponentVelocity(&uapi_UPrimitiveComponent_GetComponentVelocity);
    }

    auto const apiuapi_UPrimitiveComponent_GetCustomPrimitiveDataIndexForScalarParameter = (uapi_UPrimitiveComponent_GetCustomPrimitiveDataIndexForScalarParameterFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetCustomPrimitiveDataIndexForScalarParameter_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetCustomPrimitiveDataIndexForScalarParameter){
        apiuapi_UPrimitiveComponent_GetCustomPrimitiveDataIndexForScalarParameter(&uapi_UPrimitiveComponent_GetCustomPrimitiveDataIndexForScalarParameter);
    }

    auto const apiuapi_UPrimitiveComponent_GetCustomPrimitiveDataIndexForVectorParameter = (uapi_UPrimitiveComponent_GetCustomPrimitiveDataIndexForVectorParameterFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetCustomPrimitiveDataIndexForVectorParameter_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetCustomPrimitiveDataIndexForVectorParameter){
        apiuapi_UPrimitiveComponent_GetCustomPrimitiveDataIndexForVectorParameter(&uapi_UPrimitiveComponent_GetCustomPrimitiveDataIndexForVectorParameter);
    }

    auto const apiuapi_UPrimitiveComponent_GetDiffuseBoost = (uapi_UPrimitiveComponent_GetDiffuseBoostFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetDiffuseBoost_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetDiffuseBoost){
        apiuapi_UPrimitiveComponent_GetDiffuseBoost(&uapi_UPrimitiveComponent_GetDiffuseBoost);
    }

    auto const apiuapi_UPrimitiveComponent_GetEditorMaterial = (uapi_UPrimitiveComponent_GetEditorMaterialFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetEditorMaterial_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetEditorMaterial){
        apiuapi_UPrimitiveComponent_GetEditorMaterial(&uapi_UPrimitiveComponent_GetEditorMaterial);
    }

    auto const apiuapi_UPrimitiveComponent_GetEmissiveBoost = (uapi_UPrimitiveComponent_GetEmissiveBoostFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetEmissiveBoost_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetEmissiveBoost){
        apiuapi_UPrimitiveComponent_GetEmissiveBoost(&uapi_UPrimitiveComponent_GetEmissiveBoost);
    }

    auto const apiuapi_UPrimitiveComponent_GetGenerateOverlapEvents = (uapi_UPrimitiveComponent_GetGenerateOverlapEventsFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetGenerateOverlapEvents_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetGenerateOverlapEvents){
        apiuapi_UPrimitiveComponent_GetGenerateOverlapEvents(&uapi_UPrimitiveComponent_GetGenerateOverlapEvents);
    }

    auto const apiuapi_UPrimitiveComponent_GetHiddenEditorViews = (uapi_UPrimitiveComponent_GetHiddenEditorViewsFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetHiddenEditorViews_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetHiddenEditorViews){
        apiuapi_UPrimitiveComponent_GetHiddenEditorViews(&uapi_UPrimitiveComponent_GetHiddenEditorViews);
    }

    auto const apiuapi_UPrimitiveComponent_GetInertiaTensor = (uapi_UPrimitiveComponent_GetInertiaTensorFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetInertiaTensor_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetInertiaTensor){
        apiuapi_UPrimitiveComponent_GetInertiaTensor(&uapi_UPrimitiveComponent_GetInertiaTensor);
    }

    auto const apiuapi_UPrimitiveComponent_GetLODParentPrimitive = (uapi_UPrimitiveComponent_GetLODParentPrimitiveFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetLODParentPrimitive_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetLODParentPrimitive){
        apiuapi_UPrimitiveComponent_GetLODParentPrimitive(&uapi_UPrimitiveComponent_GetLODParentPrimitive);
    }

    auto const apiuapi_UPrimitiveComponent_GetLastRenderTime = (uapi_UPrimitiveComponent_GetLastRenderTimeFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetLastRenderTime_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetLastRenderTime){
        apiuapi_UPrimitiveComponent_GetLastRenderTime(&uapi_UPrimitiveComponent_GetLastRenderTime);
    }

    auto const apiuapi_UPrimitiveComponent_GetLastRenderTimeOnScreen = (uapi_UPrimitiveComponent_GetLastRenderTimeOnScreenFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetLastRenderTimeOnScreen_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetLastRenderTimeOnScreen){
        apiuapi_UPrimitiveComponent_GetLastRenderTimeOnScreen(&uapi_UPrimitiveComponent_GetLastRenderTimeOnScreen);
    }

    auto const apiuapi_UPrimitiveComponent_GetLevelInstanceEditingState = (uapi_UPrimitiveComponent_GetLevelInstanceEditingStateFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetLevelInstanceEditingState_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetLevelInstanceEditingState){
        apiuapi_UPrimitiveComponent_GetLevelInstanceEditingState(&uapi_UPrimitiveComponent_GetLevelInstanceEditingState);
    }

    auto const apiuapi_UPrimitiveComponent_GetLightAndShadowMapMemoryUsage = (uapi_UPrimitiveComponent_GetLightAndShadowMapMemoryUsageFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetLightAndShadowMapMemoryUsage_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetLightAndShadowMapMemoryUsage){
        apiuapi_UPrimitiveComponent_GetLightAndShadowMapMemoryUsage(&uapi_UPrimitiveComponent_GetLightAndShadowMapMemoryUsage);
    }

    auto const apiuapi_UPrimitiveComponent_GetLightMapResolution = (uapi_UPrimitiveComponent_GetLightMapResolutionFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetLightMapResolution_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetLightMapResolution){
        apiuapi_UPrimitiveComponent_GetLightMapResolution(&uapi_UPrimitiveComponent_GetLightMapResolution);
    }

    auto const apiuapi_UPrimitiveComponent_GetLightingAttachmentRoot = (uapi_UPrimitiveComponent_GetLightingAttachmentRootFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetLightingAttachmentRoot_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetLightingAttachmentRoot){
        apiuapi_UPrimitiveComponent_GetLightingAttachmentRoot(&uapi_UPrimitiveComponent_GetLightingAttachmentRoot);
    }

    auto const apiuapi_UPrimitiveComponent_GetLinearDamping = (uapi_UPrimitiveComponent_GetLinearDampingFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetLinearDamping_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetLinearDamping){
        apiuapi_UPrimitiveComponent_GetLinearDamping(&uapi_UPrimitiveComponent_GetLinearDamping);
    }

    auto const apiuapi_UPrimitiveComponent_GetMass = (uapi_UPrimitiveComponent_GetMassFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetMass_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetMass){
        apiuapi_UPrimitiveComponent_GetMass(&uapi_UPrimitiveComponent_GetMass);
    }

    auto const apiuapi_UPrimitiveComponent_GetMassScale = (uapi_UPrimitiveComponent_GetMassScaleFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetMassScale_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetMassScale){
        apiuapi_UPrimitiveComponent_GetMassScale(&uapi_UPrimitiveComponent_GetMassScale);
    }

    auto const apiuapi_UPrimitiveComponent_GetMaterial = (uapi_UPrimitiveComponent_GetMaterialFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetMaterial_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetMaterial){
        apiuapi_UPrimitiveComponent_GetMaterial(&uapi_UPrimitiveComponent_GetMaterial);
    }

    auto const apiuapi_UPrimitiveComponent_GetMaterialFromCollisionFaceIndex = (uapi_UPrimitiveComponent_GetMaterialFromCollisionFaceIndexFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetMaterialFromCollisionFaceIndex_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetMaterialFromCollisionFaceIndex){
        apiuapi_UPrimitiveComponent_GetMaterialFromCollisionFaceIndex(&uapi_UPrimitiveComponent_GetMaterialFromCollisionFaceIndex);
    }

    auto const apiuapi_UPrimitiveComponent_GetNumMaterials = (uapi_UPrimitiveComponent_GetNumMaterialsFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetNumMaterials_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetNumMaterials){
        apiuapi_UPrimitiveComponent_GetNumMaterials(&uapi_UPrimitiveComponent_GetNumMaterials);
    }

    auto const apiuapi_UPrimitiveComponent_GetNumUncachedStaticLightingInteractions = (uapi_UPrimitiveComponent_GetNumUncachedStaticLightingInteractionsFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetNumUncachedStaticLightingInteractions_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetNumUncachedStaticLightingInteractions){
        apiuapi_UPrimitiveComponent_GetNumUncachedStaticLightingInteractions(&uapi_UPrimitiveComponent_GetNumUncachedStaticLightingInteractions);
    }

    auto const apiuapi_UPrimitiveComponent_GetPhysicsAngularVelocityInDegrees = (uapi_UPrimitiveComponent_GetPhysicsAngularVelocityInDegreesFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetPhysicsAngularVelocityInDegrees_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetPhysicsAngularVelocityInDegrees){
        apiuapi_UPrimitiveComponent_GetPhysicsAngularVelocityInDegrees(&uapi_UPrimitiveComponent_GetPhysicsAngularVelocityInDegrees);
    }

    auto const apiuapi_UPrimitiveComponent_GetPhysicsAngularVelocityInRadians = (uapi_UPrimitiveComponent_GetPhysicsAngularVelocityInRadiansFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetPhysicsAngularVelocityInRadians_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetPhysicsAngularVelocityInRadians){
        apiuapi_UPrimitiveComponent_GetPhysicsAngularVelocityInRadians(&uapi_UPrimitiveComponent_GetPhysicsAngularVelocityInRadians);
    }

    auto const apiuapi_UPrimitiveComponent_GetPhysicsLinearVelocity = (uapi_UPrimitiveComponent_GetPhysicsLinearVelocityFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetPhysicsLinearVelocity_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetPhysicsLinearVelocity){
        apiuapi_UPrimitiveComponent_GetPhysicsLinearVelocity(&uapi_UPrimitiveComponent_GetPhysicsLinearVelocity);
    }

    auto const apiuapi_UPrimitiveComponent_GetPhysicsLinearVelocityAtPoint = (uapi_UPrimitiveComponent_GetPhysicsLinearVelocityAtPointFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetPhysicsLinearVelocityAtPoint_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetPhysicsLinearVelocityAtPoint){
        apiuapi_UPrimitiveComponent_GetPhysicsLinearVelocityAtPoint(&uapi_UPrimitiveComponent_GetPhysicsLinearVelocityAtPoint);
    }

    auto const apiuapi_UPrimitiveComponent_GetRayTracingGroupId = (uapi_UPrimitiveComponent_GetRayTracingGroupIdFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetRayTracingGroupId_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetRayTracingGroupId){
        apiuapi_UPrimitiveComponent_GetRayTracingGroupId(&uapi_UPrimitiveComponent_GetRayTracingGroupId);
    }

    auto const apiuapi_UPrimitiveComponent_GetShadowIndirectOnly = (uapi_UPrimitiveComponent_GetShadowIndirectOnlyFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetShadowIndirectOnly_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetShadowIndirectOnly){
        apiuapi_UPrimitiveComponent_GetShadowIndirectOnly(&uapi_UPrimitiveComponent_GetShadowIndirectOnly);
    }

    auto const apiuapi_UPrimitiveComponent_GetStaticLightMapResolution = (uapi_UPrimitiveComponent_GetStaticLightMapResolutionFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetStaticLightMapResolution_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetStaticLightMapResolution){
        apiuapi_UPrimitiveComponent_GetStaticLightMapResolution(&uapi_UPrimitiveComponent_GetStaticLightMapResolution);
    }

    auto const apiuapi_UPrimitiveComponent_GetStreamingScale = (uapi_UPrimitiveComponent_GetStreamingScaleFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetStreamingScale_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetStreamingScale){
        apiuapi_UPrimitiveComponent_GetStreamingScale(&uapi_UPrimitiveComponent_GetStreamingScale);
    }

    auto const apiuapi_UPrimitiveComponent_GetVirtualTextureMainPassMaxDrawDistance = (uapi_UPrimitiveComponent_GetVirtualTextureMainPassMaxDrawDistanceFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_GetVirtualTextureMainPassMaxDrawDistance_handler\0"));
    if(apiuapi_UPrimitiveComponent_GetVirtualTextureMainPassMaxDrawDistance){
        apiuapi_UPrimitiveComponent_GetVirtualTextureMainPassMaxDrawDistance(&uapi_UPrimitiveComponent_GetVirtualTextureMainPassMaxDrawDistance);
    }

    auto const apiuapi_UPrimitiveComponent_HasStaticLighting = (uapi_UPrimitiveComponent_HasStaticLightingFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_HasStaticLighting_handler\0"));
    if(apiuapi_UPrimitiveComponent_HasStaticLighting){
        apiuapi_UPrimitiveComponent_HasStaticLighting(&uapi_UPrimitiveComponent_HasStaticLighting);
    }

    auto const apiuapi_UPrimitiveComponent_HasValidPhysicsState = (uapi_UPrimitiveComponent_HasValidPhysicsStateFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_HasValidPhysicsState_handler\0"));
    if(apiuapi_UPrimitiveComponent_HasValidPhysicsState){
        apiuapi_UPrimitiveComponent_HasValidPhysicsState(&uapi_UPrimitiveComponent_HasValidPhysicsState);
    }

    auto const apiuapi_UPrimitiveComponent_HasValidSettingsForStaticLighting = (uapi_UPrimitiveComponent_HasValidSettingsForStaticLightingFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_HasValidSettingsForStaticLighting_handler\0"));
    if(apiuapi_UPrimitiveComponent_HasValidSettingsForStaticLighting){
        apiuapi_UPrimitiveComponent_HasValidSettingsForStaticLighting(&uapi_UPrimitiveComponent_HasValidSettingsForStaticLighting);
    }

    auto const apiuapi_UPrimitiveComponent_IgnoreActorWhenMoving = (uapi_UPrimitiveComponent_IgnoreActorWhenMovingFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_IgnoreActorWhenMoving_handler\0"));
    if(apiuapi_UPrimitiveComponent_IgnoreActorWhenMoving){
        apiuapi_UPrimitiveComponent_IgnoreActorWhenMoving(&uapi_UPrimitiveComponent_IgnoreActorWhenMoving);
    }

    auto const apiuapi_UPrimitiveComponent_IgnoreBoundsForEditorFocus = (uapi_UPrimitiveComponent_IgnoreBoundsForEditorFocusFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_IgnoreBoundsForEditorFocus_handler\0"));
    if(apiuapi_UPrimitiveComponent_IgnoreBoundsForEditorFocus){
        apiuapi_UPrimitiveComponent_IgnoreBoundsForEditorFocus(&uapi_UPrimitiveComponent_IgnoreBoundsForEditorFocus);
    }

    auto const apiuapi_UPrimitiveComponent_IgnoreComponentWhenMoving = (uapi_UPrimitiveComponent_IgnoreComponentWhenMovingFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_IgnoreComponentWhenMoving_handler\0"));
    if(apiuapi_UPrimitiveComponent_IgnoreComponentWhenMoving){
        apiuapi_UPrimitiveComponent_IgnoreComponentWhenMoving(&uapi_UPrimitiveComponent_IgnoreComponentWhenMoving);
    }

    auto const apiuapi_UPrimitiveComponent_InvalidateLightingCacheDetailed = (uapi_UPrimitiveComponent_InvalidateLightingCacheDetailedFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_InvalidateLightingCacheDetailed_handler\0"));
    if(apiuapi_UPrimitiveComponent_InvalidateLightingCacheDetailed){
        apiuapi_UPrimitiveComponent_InvalidateLightingCacheDetailed(&uapi_UPrimitiveComponent_InvalidateLightingCacheDetailed);
    }

    auto const apiuapi_UPrimitiveComponent_InvalidateLumenSurfaceCache = (uapi_UPrimitiveComponent_InvalidateLumenSurfaceCacheFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_InvalidateLumenSurfaceCache_handler\0"));
    if(apiuapi_UPrimitiveComponent_InvalidateLumenSurfaceCache){
        apiuapi_UPrimitiveComponent_InvalidateLumenSurfaceCache(&uapi_UPrimitiveComponent_InvalidateLumenSurfaceCache);
    }

    auto const apiuapi_UPrimitiveComponent_IsAnyRigidBodyAwake = (uapi_UPrimitiveComponent_IsAnyRigidBodyAwakeFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_IsAnyRigidBodyAwake_handler\0"));
    if(apiuapi_UPrimitiveComponent_IsAnyRigidBodyAwake){
        apiuapi_UPrimitiveComponent_IsAnyRigidBodyAwake(&uapi_UPrimitiveComponent_IsAnyRigidBodyAwake);
    }

    auto const apiuapi_UPrimitiveComponent_IsAttachedToStreamingManager = (uapi_UPrimitiveComponent_IsAttachedToStreamingManagerFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_IsAttachedToStreamingManager_handler\0"));
    if(apiuapi_UPrimitiveComponent_IsAttachedToStreamingManager){
        apiuapi_UPrimitiveComponent_IsAttachedToStreamingManager(&uapi_UPrimitiveComponent_IsAttachedToStreamingManager);
    }

    auto const apiuapi_UPrimitiveComponent_IsCompiling = (uapi_UPrimitiveComponent_IsCompilingFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_IsCompiling_handler\0"));
    if(apiuapi_UPrimitiveComponent_IsCompiling){
        apiuapi_UPrimitiveComponent_IsCompiling(&uapi_UPrimitiveComponent_IsCompiling);
    }

    auto const apiuapi_UPrimitiveComponent_IsComponentIndividuallySelected = (uapi_UPrimitiveComponent_IsComponentIndividuallySelectedFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_IsComponentIndividuallySelected_handler\0"));
    if(apiuapi_UPrimitiveComponent_IsComponentIndividuallySelected){
        apiuapi_UPrimitiveComponent_IsComponentIndividuallySelected(&uapi_UPrimitiveComponent_IsComponentIndividuallySelected);
    }

    auto const apiuapi_UPrimitiveComponent_IsEditorOnly = (uapi_UPrimitiveComponent_IsEditorOnlyFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_IsEditorOnly_handler\0"));
    if(apiuapi_UPrimitiveComponent_IsEditorOnly){
        apiuapi_UPrimitiveComponent_IsEditorOnly(&uapi_UPrimitiveComponent_IsEditorOnly);
    }

    auto const apiuapi_UPrimitiveComponent_IsGravityEnabled = (uapi_UPrimitiveComponent_IsGravityEnabledFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_IsGravityEnabled_handler\0"));
    if(apiuapi_UPrimitiveComponent_IsGravityEnabled){
        apiuapi_UPrimitiveComponent_IsGravityEnabled(&uapi_UPrimitiveComponent_IsGravityEnabled);
    }

    auto const apiuapi_UPrimitiveComponent_IsNavigationRelevant = (uapi_UPrimitiveComponent_IsNavigationRelevantFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_IsNavigationRelevant_handler\0"));
    if(apiuapi_UPrimitiveComponent_IsNavigationRelevant){
        apiuapi_UPrimitiveComponent_IsNavigationRelevant(&uapi_UPrimitiveComponent_IsNavigationRelevant);
    }

    auto const apiuapi_UPrimitiveComponent_IsOverlappingActor = (uapi_UPrimitiveComponent_IsOverlappingActorFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_IsOverlappingActor_handler\0"));
    if(apiuapi_UPrimitiveComponent_IsOverlappingActor){
        apiuapi_UPrimitiveComponent_IsOverlappingActor(&uapi_UPrimitiveComponent_IsOverlappingActor);
    }

    auto const apiuapi_UPrimitiveComponent_IsOverlappingComponent = (uapi_UPrimitiveComponent_IsOverlappingComponentFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_IsOverlappingComponent_handler\0"));
    if(apiuapi_UPrimitiveComponent_IsOverlappingComponent){
        apiuapi_UPrimitiveComponent_IsOverlappingComponent(&uapi_UPrimitiveComponent_IsOverlappingComponent);
    }

    auto const apiuapi_UPrimitiveComponent_IsReadyForFinishDestroy = (uapi_UPrimitiveComponent_IsReadyForFinishDestroyFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_IsReadyForFinishDestroy_handler\0"));
    if(apiuapi_UPrimitiveComponent_IsReadyForFinishDestroy){
        apiuapi_UPrimitiveComponent_IsReadyForFinishDestroy(&uapi_UPrimitiveComponent_IsReadyForFinishDestroy);
    }

    auto const apiuapi_UPrimitiveComponent_IsSimulatingPhysics = (uapi_UPrimitiveComponent_IsSimulatingPhysicsFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_IsSimulatingPhysics_handler\0"));
    if(apiuapi_UPrimitiveComponent_IsSimulatingPhysics){
        apiuapi_UPrimitiveComponent_IsSimulatingPhysics(&uapi_UPrimitiveComponent_IsSimulatingPhysics);
    }

    auto const apiuapi_UPrimitiveComponent_IsWelded = (uapi_UPrimitiveComponent_IsWeldedFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_IsWelded_handler\0"));
    if(apiuapi_UPrimitiveComponent_IsWelded){
        apiuapi_UPrimitiveComponent_IsWelded(&uapi_UPrimitiveComponent_IsWelded);
    }

    auto const apiuapi_UPrimitiveComponent_IsWorldGeometry = (uapi_UPrimitiveComponent_IsWorldGeometryFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_IsWorldGeometry_handler\0"));
    if(apiuapi_UPrimitiveComponent_IsWorldGeometry){
        apiuapi_UPrimitiveComponent_IsWorldGeometry(&uapi_UPrimitiveComponent_IsWorldGeometry);
    }

    auto const apiuapi_UPrimitiveComponent_IsZeroExtent = (uapi_UPrimitiveComponent_IsZeroExtentFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_IsZeroExtent_handler\0"));
    if(apiuapi_UPrimitiveComponent_IsZeroExtent){
        apiuapi_UPrimitiveComponent_IsZeroExtent(&uapi_UPrimitiveComponent_IsZeroExtent);
    }

    auto const apiuapi_UPrimitiveComponent_K2_IsCollisionEnabled = (uapi_UPrimitiveComponent_K2_IsCollisionEnabledFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_K2_IsCollisionEnabled_handler\0"));
    if(apiuapi_UPrimitiveComponent_K2_IsCollisionEnabled){
        apiuapi_UPrimitiveComponent_K2_IsCollisionEnabled(&uapi_UPrimitiveComponent_K2_IsCollisionEnabled);
    }

    auto const apiuapi_UPrimitiveComponent_K2_IsPhysicsCollisionEnabled = (uapi_UPrimitiveComponent_K2_IsPhysicsCollisionEnabledFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_K2_IsPhysicsCollisionEnabled_handler\0"));
    if(apiuapi_UPrimitiveComponent_K2_IsPhysicsCollisionEnabled){
        apiuapi_UPrimitiveComponent_K2_IsPhysicsCollisionEnabled(&uapi_UPrimitiveComponent_K2_IsPhysicsCollisionEnabled);
    }

    auto const apiuapi_UPrimitiveComponent_K2_IsQueryCollisionEnabled = (uapi_UPrimitiveComponent_K2_IsQueryCollisionEnabledFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_K2_IsQueryCollisionEnabled_handler\0"));
    if(apiuapi_UPrimitiveComponent_K2_IsQueryCollisionEnabled){
        apiuapi_UPrimitiveComponent_K2_IsQueryCollisionEnabled(&uapi_UPrimitiveComponent_K2_IsQueryCollisionEnabled);
    }

    auto const apiuapi_UPrimitiveComponent_NeedsLoadForClient = (uapi_UPrimitiveComponent_NeedsLoadForClientFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_NeedsLoadForClient_handler\0"));
    if(apiuapi_UPrimitiveComponent_NeedsLoadForClient){
        apiuapi_UPrimitiveComponent_NeedsLoadForClient(&uapi_UPrimitiveComponent_NeedsLoadForClient);
    }

    auto const apiuapi_UPrimitiveComponent_NeedsLoadForServer = (uapi_UPrimitiveComponent_NeedsLoadForServerFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_NeedsLoadForServer_handler\0"));
    if(apiuapi_UPrimitiveComponent_NeedsLoadForServer){
        apiuapi_UPrimitiveComponent_NeedsLoadForServer(&uapi_UPrimitiveComponent_NeedsLoadForServer);
    }

    auto const apiuapi_UPrimitiveComponent_OnActorEnableCollisionChanged = (uapi_UPrimitiveComponent_OnActorEnableCollisionChangedFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_OnActorEnableCollisionChanged_handler\0"));
    if(apiuapi_UPrimitiveComponent_OnActorEnableCollisionChanged){
        apiuapi_UPrimitiveComponent_OnActorEnableCollisionChanged(&uapi_UPrimitiveComponent_OnActorEnableCollisionChanged);
    }

    auto const apiuapi_UPrimitiveComponent_OnAttachmentChanged = (uapi_UPrimitiveComponent_OnAttachmentChangedFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_OnAttachmentChanged_handler\0"));
    if(apiuapi_UPrimitiveComponent_OnAttachmentChanged){
        apiuapi_UPrimitiveComponent_OnAttachmentChanged(&uapi_UPrimitiveComponent_OnAttachmentChanged);
    }

    auto const apiuapi_UPrimitiveComponent_OnComponentDestroyed = (uapi_UPrimitiveComponent_OnComponentDestroyedFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_OnComponentDestroyed_handler\0"));
    if(apiuapi_UPrimitiveComponent_OnComponentDestroyed){
        apiuapi_UPrimitiveComponent_OnComponentDestroyed(&uapi_UPrimitiveComponent_OnComponentDestroyed);
    }

    auto const apiuapi_UPrimitiveComponent_OnCreatePhysicsState = (uapi_UPrimitiveComponent_OnCreatePhysicsStateFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_OnCreatePhysicsState_handler\0"));
    if(apiuapi_UPrimitiveComponent_OnCreatePhysicsState){
        apiuapi_UPrimitiveComponent_OnCreatePhysicsState(&uapi_UPrimitiveComponent_OnCreatePhysicsState);
    }

    auto const apiuapi_UPrimitiveComponent_OnDestroyPhysicsState = (uapi_UPrimitiveComponent_OnDestroyPhysicsStateFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_OnDestroyPhysicsState_handler\0"));
    if(apiuapi_UPrimitiveComponent_OnDestroyPhysicsState){
        apiuapi_UPrimitiveComponent_OnDestroyPhysicsState(&uapi_UPrimitiveComponent_OnDestroyPhysicsState);
    }

    auto const apiuapi_UPrimitiveComponent_OnRegister = (uapi_UPrimitiveComponent_OnRegisterFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_OnRegister_handler\0"));
    if(apiuapi_UPrimitiveComponent_OnRegister){
        apiuapi_UPrimitiveComponent_OnRegister(&uapi_UPrimitiveComponent_OnRegister);
    }

    auto const apiuapi_UPrimitiveComponent_OnUnregister = (uapi_UPrimitiveComponent_OnUnregisterFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_OnUnregister_handler\0"));
    if(apiuapi_UPrimitiveComponent_OnUnregister){
        apiuapi_UPrimitiveComponent_OnUnregister(&uapi_UPrimitiveComponent_OnUnregister);
    }

    auto const apiuapi_UPrimitiveComponent_PostDuplicate = (uapi_UPrimitiveComponent_PostDuplicateFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_PostDuplicate_handler\0"));
    if(apiuapi_UPrimitiveComponent_PostDuplicate){
        apiuapi_UPrimitiveComponent_PostDuplicate(&uapi_UPrimitiveComponent_PostDuplicate);
    }

    auto const apiuapi_UPrimitiveComponent_PostEditImport = (uapi_UPrimitiveComponent_PostEditImportFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_PostEditImport_handler\0"));
    if(apiuapi_UPrimitiveComponent_PostEditImport){
        apiuapi_UPrimitiveComponent_PostEditImport(&uapi_UPrimitiveComponent_PostEditImport);
    }

    auto const apiuapi_UPrimitiveComponent_PostInitProperties = (uapi_UPrimitiveComponent_PostInitPropertiesFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_PostInitProperties_handler\0"));
    if(apiuapi_UPrimitiveComponent_PostInitProperties){
        apiuapi_UPrimitiveComponent_PostInitProperties(&uapi_UPrimitiveComponent_PostInitProperties);
    }

    auto const apiuapi_UPrimitiveComponent_PostLoad = (uapi_UPrimitiveComponent_PostLoadFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_PostLoad_handler\0"));
    if(apiuapi_UPrimitiveComponent_PostLoad){
        apiuapi_UPrimitiveComponent_PostLoad(&uapi_UPrimitiveComponent_PostLoad);
    }

    auto const apiuapi_UPrimitiveComponent_PushEditorVisibilityToProxy = (uapi_UPrimitiveComponent_PushEditorVisibilityToProxyFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_PushEditorVisibilityToProxy_handler\0"));
    if(apiuapi_UPrimitiveComponent_PushEditorVisibilityToProxy){
        apiuapi_UPrimitiveComponent_PushEditorVisibilityToProxy(&uapi_UPrimitiveComponent_PushEditorVisibilityToProxy);
    }

    auto const apiuapi_UPrimitiveComponent_PushHoveredToProxy = (uapi_UPrimitiveComponent_PushHoveredToProxyFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_PushHoveredToProxy_handler\0"));
    if(apiuapi_UPrimitiveComponent_PushHoveredToProxy){
        apiuapi_UPrimitiveComponent_PushHoveredToProxy(&uapi_UPrimitiveComponent_PushHoveredToProxy);
    }

    auto const apiuapi_UPrimitiveComponent_PushLevelInstanceEditingStateToProxy = (uapi_UPrimitiveComponent_PushLevelInstanceEditingStateToProxyFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_PushLevelInstanceEditingStateToProxy_handler\0"));
    if(apiuapi_UPrimitiveComponent_PushLevelInstanceEditingStateToProxy){
        apiuapi_UPrimitiveComponent_PushLevelInstanceEditingStateToProxy(&uapi_UPrimitiveComponent_PushLevelInstanceEditingStateToProxy);
    }

    auto const apiuapi_UPrimitiveComponent_PushSelectionToProxy = (uapi_UPrimitiveComponent_PushSelectionToProxyFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_PushSelectionToProxy_handler\0"));
    if(apiuapi_UPrimitiveComponent_PushSelectionToProxy){
        apiuapi_UPrimitiveComponent_PushSelectionToProxy(&uapi_UPrimitiveComponent_PushSelectionToProxy);
    }

    auto const apiuapi_UPrimitiveComponent_PutAllRigidBodiesToSleep = (uapi_UPrimitiveComponent_PutAllRigidBodiesToSleepFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_PutAllRigidBodiesToSleep_handler\0"));
    if(apiuapi_UPrimitiveComponent_PutAllRigidBodiesToSleep){
        apiuapi_UPrimitiveComponent_PutAllRigidBodiesToSleep(&uapi_UPrimitiveComponent_PutAllRigidBodiesToSleep);
    }

    auto const apiuapi_UPrimitiveComponent_PutRigidBodyToSleep = (uapi_UPrimitiveComponent_PutRigidBodyToSleepFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_PutRigidBodyToSleep_handler\0"));
    if(apiuapi_UPrimitiveComponent_PutRigidBodyToSleep){
        apiuapi_UPrimitiveComponent_PutRigidBodyToSleep(&uapi_UPrimitiveComponent_PutRigidBodyToSleep);
    }

    auto const apiuapi_UPrimitiveComponent_RemapActorTextureStreamingBuiltDataToLevel = (uapi_UPrimitiveComponent_RemapActorTextureStreamingBuiltDataToLevelFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_RemapActorTextureStreamingBuiltDataToLevel_handler\0"));
    if(apiuapi_UPrimitiveComponent_RemapActorTextureStreamingBuiltDataToLevel){
        apiuapi_UPrimitiveComponent_RemapActorTextureStreamingBuiltDataToLevel(&uapi_UPrimitiveComponent_RemapActorTextureStreamingBuiltDataToLevel);
    }

    auto const apiuapi_UPrimitiveComponent_RigidBodyIsAwake = (uapi_UPrimitiveComponent_RigidBodyIsAwakeFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_RigidBodyIsAwake_handler\0"));
    if(apiuapi_UPrimitiveComponent_RigidBodyIsAwake){
        apiuapi_UPrimitiveComponent_RigidBodyIsAwake(&uapi_UPrimitiveComponent_RigidBodyIsAwake);
    }

    auto const apiuapi_UPrimitiveComponent_ScaleByMomentOfInertia = (uapi_UPrimitiveComponent_ScaleByMomentOfInertiaFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_ScaleByMomentOfInertia_handler\0"));
    if(apiuapi_UPrimitiveComponent_ScaleByMomentOfInertia){
        apiuapi_UPrimitiveComponent_ScaleByMomentOfInertia(&uapi_UPrimitiveComponent_ScaleByMomentOfInertia);
    }

    auto const apiuapi_UPrimitiveComponent_SendRenderDebugPhysics = (uapi_UPrimitiveComponent_SendRenderDebugPhysicsFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SendRenderDebugPhysics_handler\0"));
    if(apiuapi_UPrimitiveComponent_SendRenderDebugPhysics){
        apiuapi_UPrimitiveComponent_SendRenderDebugPhysics(&uapi_UPrimitiveComponent_SendRenderDebugPhysics);
    }

    auto const apiuapi_UPrimitiveComponent_SendRenderTransform_Concurrent = (uapi_UPrimitiveComponent_SendRenderTransform_ConcurrentFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SendRenderTransform_Concurrent_handler\0"));
    if(apiuapi_UPrimitiveComponent_SendRenderTransform_Concurrent){
        apiuapi_UPrimitiveComponent_SendRenderTransform_Concurrent(&uapi_UPrimitiveComponent_SendRenderTransform_Concurrent);
    }

    auto const apiuapi_UPrimitiveComponent_SetAllMassScale = (uapi_UPrimitiveComponent_SetAllMassScaleFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetAllMassScale_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetAllMassScale){
        apiuapi_UPrimitiveComponent_SetAllMassScale(&uapi_UPrimitiveComponent_SetAllMassScale);
    }

    auto const apiuapi_UPrimitiveComponent_SetAllPhysicsLinearVelocity = (uapi_UPrimitiveComponent_SetAllPhysicsLinearVelocityFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetAllPhysicsLinearVelocity_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetAllPhysicsLinearVelocity){
        apiuapi_UPrimitiveComponent_SetAllPhysicsLinearVelocity(&uapi_UPrimitiveComponent_SetAllPhysicsLinearVelocity);
    }

    auto const apiuapi_UPrimitiveComponent_SetAllPhysicsPosition = (uapi_UPrimitiveComponent_SetAllPhysicsPositionFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetAllPhysicsPosition_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetAllPhysicsPosition){
        apiuapi_UPrimitiveComponent_SetAllPhysicsPosition(&uapi_UPrimitiveComponent_SetAllPhysicsPosition);
    }

    auto const apiuapi_UPrimitiveComponent_SetAllPhysicsRotation = (uapi_UPrimitiveComponent_SetAllPhysicsRotationFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetAllPhysicsRotation_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetAllPhysicsRotation){
        apiuapi_UPrimitiveComponent_SetAllPhysicsRotation(&uapi_UPrimitiveComponent_SetAllPhysicsRotation);
    }

    auto const apiuapi_UPrimitiveComponent_SetAllUseCCD = (uapi_UPrimitiveComponent_SetAllUseCCDFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetAllUseCCD_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetAllUseCCD){
        apiuapi_UPrimitiveComponent_SetAllUseCCD(&uapi_UPrimitiveComponent_SetAllUseCCD);
    }

    auto const apiuapi_UPrimitiveComponent_SetAngularDamping = (uapi_UPrimitiveComponent_SetAngularDampingFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetAngularDamping_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetAngularDamping){
        apiuapi_UPrimitiveComponent_SetAngularDamping(&uapi_UPrimitiveComponent_SetAngularDamping);
    }

    auto const apiuapi_UPrimitiveComponent_SetBoundsScale = (uapi_UPrimitiveComponent_SetBoundsScaleFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetBoundsScale_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetBoundsScale){
        apiuapi_UPrimitiveComponent_SetBoundsScale(&uapi_UPrimitiveComponent_SetBoundsScale);
    }

    auto const apiuapi_UPrimitiveComponent_SetCachedMaxDrawDistance = (uapi_UPrimitiveComponent_SetCachedMaxDrawDistanceFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetCachedMaxDrawDistance_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetCachedMaxDrawDistance){
        apiuapi_UPrimitiveComponent_SetCachedMaxDrawDistance(&uapi_UPrimitiveComponent_SetCachedMaxDrawDistance);
    }

    auto const apiuapi_UPrimitiveComponent_SetCastHiddenShadow = (uapi_UPrimitiveComponent_SetCastHiddenShadowFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetCastHiddenShadow_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetCastHiddenShadow){
        apiuapi_UPrimitiveComponent_SetCastHiddenShadow(&uapi_UPrimitiveComponent_SetCastHiddenShadow);
    }

    auto const apiuapi_UPrimitiveComponent_SetCastShadow = (uapi_UPrimitiveComponent_SetCastShadowFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetCastShadow_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetCastShadow){
        apiuapi_UPrimitiveComponent_SetCastShadow(&uapi_UPrimitiveComponent_SetCastShadow);
    }

    auto const apiuapi_UPrimitiveComponent_SetCenterOfMass = (uapi_UPrimitiveComponent_SetCenterOfMassFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetCenterOfMass_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetCenterOfMass){
        apiuapi_UPrimitiveComponent_SetCenterOfMass(&uapi_UPrimitiveComponent_SetCenterOfMass);
    }

    auto const apiuapi_UPrimitiveComponent_SetCollisionObjectType = (uapi_UPrimitiveComponent_SetCollisionObjectTypeFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetCollisionObjectType_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetCollisionObjectType){
        apiuapi_UPrimitiveComponent_SetCollisionObjectType(&uapi_UPrimitiveComponent_SetCollisionObjectType);
    }

    auto const apiuapi_UPrimitiveComponent_SetCollisionProfileName = (uapi_UPrimitiveComponent_SetCollisionProfileNameFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetCollisionProfileName_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetCollisionProfileName){
        apiuapi_UPrimitiveComponent_SetCollisionProfileName(&uapi_UPrimitiveComponent_SetCollisionProfileName);
    }

    auto const apiuapi_UPrimitiveComponent_SetCullDistance = (uapi_UPrimitiveComponent_SetCullDistanceFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetCullDistance_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetCullDistance){
        apiuapi_UPrimitiveComponent_SetCullDistance(&uapi_UPrimitiveComponent_SetCullDistance);
    }

    auto const apiuapi_UPrimitiveComponent_SetCustomDepthStencilValue = (uapi_UPrimitiveComponent_SetCustomDepthStencilValueFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetCustomDepthStencilValue_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetCustomDepthStencilValue){
        apiuapi_UPrimitiveComponent_SetCustomDepthStencilValue(&uapi_UPrimitiveComponent_SetCustomDepthStencilValue);
    }

    auto const apiuapi_UPrimitiveComponent_SetCustomPrimitiveDataFloat = (uapi_UPrimitiveComponent_SetCustomPrimitiveDataFloatFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetCustomPrimitiveDataFloat_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetCustomPrimitiveDataFloat){
        apiuapi_UPrimitiveComponent_SetCustomPrimitiveDataFloat(&uapi_UPrimitiveComponent_SetCustomPrimitiveDataFloat);
    }

    auto const apiuapi_UPrimitiveComponent_SetCustomPrimitiveDataVector2 = (uapi_UPrimitiveComponent_SetCustomPrimitiveDataVector2Fn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetCustomPrimitiveDataVector2_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetCustomPrimitiveDataVector2){
        apiuapi_UPrimitiveComponent_SetCustomPrimitiveDataVector2(&uapi_UPrimitiveComponent_SetCustomPrimitiveDataVector2);
    }

    auto const apiuapi_UPrimitiveComponent_SetCustomPrimitiveDataVector3 = (uapi_UPrimitiveComponent_SetCustomPrimitiveDataVector3Fn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetCustomPrimitiveDataVector3_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetCustomPrimitiveDataVector3){
        apiuapi_UPrimitiveComponent_SetCustomPrimitiveDataVector3(&uapi_UPrimitiveComponent_SetCustomPrimitiveDataVector3);
    }

    auto const apiuapi_UPrimitiveComponent_SetCustomPrimitiveDataVector4 = (uapi_UPrimitiveComponent_SetCustomPrimitiveDataVector4Fn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetCustomPrimitiveDataVector4_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetCustomPrimitiveDataVector4){
        apiuapi_UPrimitiveComponent_SetCustomPrimitiveDataVector4(&uapi_UPrimitiveComponent_SetCustomPrimitiveDataVector4);
    }

    auto const apiuapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataFloat = (uapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataFloatFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetDefaultCustomPrimitiveDataFloat_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataFloat){
        apiuapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataFloat(&uapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataFloat);
    }

    auto const apiuapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector2 = (uapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector2Fn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector2_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector2){
        apiuapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector2(&uapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector2);
    }

    auto const apiuapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector3 = (uapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector3Fn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector3_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector3){
        apiuapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector3(&uapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector3);
    }

    auto const apiuapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector4 = (uapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector4Fn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector4_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector4){
        apiuapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector4(&uapi_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector4);
    }

    auto const apiuapi_UPrimitiveComponent_SetEmissiveLightSource = (uapi_UPrimitiveComponent_SetEmissiveLightSourceFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetEmissiveLightSource_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetEmissiveLightSource){
        apiuapi_UPrimitiveComponent_SetEmissiveLightSource(&uapi_UPrimitiveComponent_SetEmissiveLightSource);
    }

    auto const apiuapi_UPrimitiveComponent_SetEnableGravity = (uapi_UPrimitiveComponent_SetEnableGravityFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetEnableGravity_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetEnableGravity){
        apiuapi_UPrimitiveComponent_SetEnableGravity(&uapi_UPrimitiveComponent_SetEnableGravity);
    }

    auto const apiuapi_UPrimitiveComponent_SetGenerateOverlapEvents = (uapi_UPrimitiveComponent_SetGenerateOverlapEventsFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetGenerateOverlapEvents_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetGenerateOverlapEvents){
        apiuapi_UPrimitiveComponent_SetGenerateOverlapEvents(&uapi_UPrimitiveComponent_SetGenerateOverlapEvents);
    }

    auto const apiuapi_UPrimitiveComponent_SetHiddenInSceneCapture = (uapi_UPrimitiveComponent_SetHiddenInSceneCaptureFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetHiddenInSceneCapture_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetHiddenInSceneCapture){
        apiuapi_UPrimitiveComponent_SetHiddenInSceneCapture(&uapi_UPrimitiveComponent_SetHiddenInSceneCapture);
    }

    auto const apiuapi_UPrimitiveComponent_SetIgnoreBoundsForEditorFocus = (uapi_UPrimitiveComponent_SetIgnoreBoundsForEditorFocusFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetIgnoreBoundsForEditorFocus_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetIgnoreBoundsForEditorFocus){
        apiuapi_UPrimitiveComponent_SetIgnoreBoundsForEditorFocus(&uapi_UPrimitiveComponent_SetIgnoreBoundsForEditorFocus);
    }

    auto const apiuapi_UPrimitiveComponent_SetIsBeingMovedByEditor = (uapi_UPrimitiveComponent_SetIsBeingMovedByEditorFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetIsBeingMovedByEditor_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetIsBeingMovedByEditor){
        apiuapi_UPrimitiveComponent_SetIsBeingMovedByEditor(&uapi_UPrimitiveComponent_SetIsBeingMovedByEditor);
    }

    auto const apiuapi_UPrimitiveComponent_SetLODParentPrimitive = (uapi_UPrimitiveComponent_SetLODParentPrimitiveFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetLODParentPrimitive_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetLODParentPrimitive){
        apiuapi_UPrimitiveComponent_SetLODParentPrimitive(&uapi_UPrimitiveComponent_SetLODParentPrimitive);
    }

    auto const apiuapi_UPrimitiveComponent_SetLastRenderTime = (uapi_UPrimitiveComponent_SetLastRenderTimeFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetLastRenderTime_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetLastRenderTime){
        apiuapi_UPrimitiveComponent_SetLastRenderTime(&uapi_UPrimitiveComponent_SetLastRenderTime);
    }

    auto const apiuapi_UPrimitiveComponent_SetLightingChannels = (uapi_UPrimitiveComponent_SetLightingChannelsFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetLightingChannels_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetLightingChannels){
        apiuapi_UPrimitiveComponent_SetLightingChannels(&uapi_UPrimitiveComponent_SetLightingChannels);
    }

    auto const apiuapi_UPrimitiveComponent_SetLinearDamping = (uapi_UPrimitiveComponent_SetLinearDampingFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetLinearDamping_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetLinearDamping){
        apiuapi_UPrimitiveComponent_SetLinearDamping(&uapi_UPrimitiveComponent_SetLinearDamping);
    }

    auto const apiuapi_UPrimitiveComponent_SetMassOverrideInKg = (uapi_UPrimitiveComponent_SetMassOverrideInKgFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetMassOverrideInKg_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetMassOverrideInKg){
        apiuapi_UPrimitiveComponent_SetMassOverrideInKg(&uapi_UPrimitiveComponent_SetMassOverrideInKg);
    }

    auto const apiuapi_UPrimitiveComponent_SetMassScale = (uapi_UPrimitiveComponent_SetMassScaleFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetMassScale_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetMassScale){
        apiuapi_UPrimitiveComponent_SetMassScale(&uapi_UPrimitiveComponent_SetMassScale);
    }

    auto const apiuapi_UPrimitiveComponent_SetMaterial = (uapi_UPrimitiveComponent_SetMaterialFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetMaterial_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetMaterial){
        apiuapi_UPrimitiveComponent_SetMaterial(&uapi_UPrimitiveComponent_SetMaterial);
    }

    auto const apiuapi_UPrimitiveComponent_SetMaterialByName = (uapi_UPrimitiveComponent_SetMaterialByNameFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetMaterialByName_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetMaterialByName){
        apiuapi_UPrimitiveComponent_SetMaterialByName(&uapi_UPrimitiveComponent_SetMaterialByName);
    }

    auto const apiuapi_UPrimitiveComponent_SetNotifyRigidBodyCollision = (uapi_UPrimitiveComponent_SetNotifyRigidBodyCollisionFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetNotifyRigidBodyCollision_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetNotifyRigidBodyCollision){
        apiuapi_UPrimitiveComponent_SetNotifyRigidBodyCollision(&uapi_UPrimitiveComponent_SetNotifyRigidBodyCollision);
    }

    auto const apiuapi_UPrimitiveComponent_SetOnlyOwnerSee = (uapi_UPrimitiveComponent_SetOnlyOwnerSeeFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetOnlyOwnerSee_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetOnlyOwnerSee){
        apiuapi_UPrimitiveComponent_SetOnlyOwnerSee(&uapi_UPrimitiveComponent_SetOnlyOwnerSee);
    }

    auto const apiuapi_UPrimitiveComponent_SetOwnerNoSee = (uapi_UPrimitiveComponent_SetOwnerNoSeeFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetOwnerNoSee_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetOwnerNoSee){
        apiuapi_UPrimitiveComponent_SetOwnerNoSee(&uapi_UPrimitiveComponent_SetOwnerNoSee);
    }

    auto const apiuapi_UPrimitiveComponent_SetPhysMaterialOverride = (uapi_UPrimitiveComponent_SetPhysMaterialOverrideFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetPhysMaterialOverride_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetPhysMaterialOverride){
        apiuapi_UPrimitiveComponent_SetPhysMaterialOverride(&uapi_UPrimitiveComponent_SetPhysMaterialOverride);
    }

    auto const apiuapi_UPrimitiveComponent_SetPhysicsAngularVelocityInDegrees = (uapi_UPrimitiveComponent_SetPhysicsAngularVelocityInDegreesFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetPhysicsAngularVelocityInDegrees_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetPhysicsAngularVelocityInDegrees){
        apiuapi_UPrimitiveComponent_SetPhysicsAngularVelocityInDegrees(&uapi_UPrimitiveComponent_SetPhysicsAngularVelocityInDegrees);
    }

    auto const apiuapi_UPrimitiveComponent_SetPhysicsAngularVelocityInRadians = (uapi_UPrimitiveComponent_SetPhysicsAngularVelocityInRadiansFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetPhysicsAngularVelocityInRadians_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetPhysicsAngularVelocityInRadians){
        apiuapi_UPrimitiveComponent_SetPhysicsAngularVelocityInRadians(&uapi_UPrimitiveComponent_SetPhysicsAngularVelocityInRadians);
    }

    auto const apiuapi_UPrimitiveComponent_SetPhysicsLinearVelocity = (uapi_UPrimitiveComponent_SetPhysicsLinearVelocityFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetPhysicsLinearVelocity_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetPhysicsLinearVelocity){
        apiuapi_UPrimitiveComponent_SetPhysicsLinearVelocity(&uapi_UPrimitiveComponent_SetPhysicsLinearVelocity);
    }

    auto const apiuapi_UPrimitiveComponent_SetPhysicsMaxAngularVelocityInDegrees = (uapi_UPrimitiveComponent_SetPhysicsMaxAngularVelocityInDegreesFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetPhysicsMaxAngularVelocityInDegrees_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetPhysicsMaxAngularVelocityInDegrees){
        apiuapi_UPrimitiveComponent_SetPhysicsMaxAngularVelocityInDegrees(&uapi_UPrimitiveComponent_SetPhysicsMaxAngularVelocityInDegrees);
    }

    auto const apiuapi_UPrimitiveComponent_SetPhysicsMaxAngularVelocityInRadians = (uapi_UPrimitiveComponent_SetPhysicsMaxAngularVelocityInRadiansFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetPhysicsMaxAngularVelocityInRadians_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetPhysicsMaxAngularVelocityInRadians){
        apiuapi_UPrimitiveComponent_SetPhysicsMaxAngularVelocityInRadians(&uapi_UPrimitiveComponent_SetPhysicsMaxAngularVelocityInRadians);
    }

    auto const apiuapi_UPrimitiveComponent_SetReceivesDecals = (uapi_UPrimitiveComponent_SetReceivesDecalsFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetReceivesDecals_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetReceivesDecals){
        apiuapi_UPrimitiveComponent_SetReceivesDecals(&uapi_UPrimitiveComponent_SetReceivesDecals);
    }

    auto const apiuapi_UPrimitiveComponent_SetRenderCustomDepth = (uapi_UPrimitiveComponent_SetRenderCustomDepthFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetRenderCustomDepth_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetRenderCustomDepth){
        apiuapi_UPrimitiveComponent_SetRenderCustomDepth(&uapi_UPrimitiveComponent_SetRenderCustomDepth);
    }

    auto const apiuapi_UPrimitiveComponent_SetRenderInDepthPass = (uapi_UPrimitiveComponent_SetRenderInDepthPassFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetRenderInDepthPass_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetRenderInDepthPass){
        apiuapi_UPrimitiveComponent_SetRenderInDepthPass(&uapi_UPrimitiveComponent_SetRenderInDepthPass);
    }

    auto const apiuapi_UPrimitiveComponent_SetRenderInMainPass = (uapi_UPrimitiveComponent_SetRenderInMainPassFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetRenderInMainPass_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetRenderInMainPass){
        apiuapi_UPrimitiveComponent_SetRenderInMainPass(&uapi_UPrimitiveComponent_SetRenderInMainPass);
    }

    auto const apiuapi_UPrimitiveComponent_SetScalarParameterForCustomPrimitiveData = (uapi_UPrimitiveComponent_SetScalarParameterForCustomPrimitiveDataFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetScalarParameterForCustomPrimitiveData_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetScalarParameterForCustomPrimitiveData){
        apiuapi_UPrimitiveComponent_SetScalarParameterForCustomPrimitiveData(&uapi_UPrimitiveComponent_SetScalarParameterForCustomPrimitiveData);
    }

    auto const apiuapi_UPrimitiveComponent_SetScalarParameterForDefaultCustomPrimitiveData = (uapi_UPrimitiveComponent_SetScalarParameterForDefaultCustomPrimitiveDataFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetScalarParameterForDefaultCustomPrimitiveData_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetScalarParameterForDefaultCustomPrimitiveData){
        apiuapi_UPrimitiveComponent_SetScalarParameterForDefaultCustomPrimitiveData(&uapi_UPrimitiveComponent_SetScalarParameterForDefaultCustomPrimitiveData);
    }

    auto const apiuapi_UPrimitiveComponent_SetSimulatePhysics = (uapi_UPrimitiveComponent_SetSimulatePhysicsFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetSimulatePhysics_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetSimulatePhysics){
        apiuapi_UPrimitiveComponent_SetSimulatePhysics(&uapi_UPrimitiveComponent_SetSimulatePhysics);
    }

    auto const apiuapi_UPrimitiveComponent_SetSingleSampleShadowFromStationaryLights = (uapi_UPrimitiveComponent_SetSingleSampleShadowFromStationaryLightsFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetSingleSampleShadowFromStationaryLights_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetSingleSampleShadowFromStationaryLights){
        apiuapi_UPrimitiveComponent_SetSingleSampleShadowFromStationaryLights(&uapi_UPrimitiveComponent_SetSingleSampleShadowFromStationaryLights);
    }

    auto const apiuapi_UPrimitiveComponent_SetTranslucencySortDistanceOffset = (uapi_UPrimitiveComponent_SetTranslucencySortDistanceOffsetFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetTranslucencySortDistanceOffset_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetTranslucencySortDistanceOffset){
        apiuapi_UPrimitiveComponent_SetTranslucencySortDistanceOffset(&uapi_UPrimitiveComponent_SetTranslucencySortDistanceOffset);
    }

    auto const apiuapi_UPrimitiveComponent_SetTranslucentSortPriority = (uapi_UPrimitiveComponent_SetTranslucentSortPriorityFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetTranslucentSortPriority_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetTranslucentSortPriority){
        apiuapi_UPrimitiveComponent_SetTranslucentSortPriority(&uapi_UPrimitiveComponent_SetTranslucentSortPriority);
    }

    auto const apiuapi_UPrimitiveComponent_SetUseCCD = (uapi_UPrimitiveComponent_SetUseCCDFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetUseCCD_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetUseCCD){
        apiuapi_UPrimitiveComponent_SetUseCCD(&uapi_UPrimitiveComponent_SetUseCCD);
    }

    auto const apiuapi_UPrimitiveComponent_SetVectorParameterForCustomPrimitiveData = (uapi_UPrimitiveComponent_SetVectorParameterForCustomPrimitiveDataFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetVectorParameterForCustomPrimitiveData_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetVectorParameterForCustomPrimitiveData){
        apiuapi_UPrimitiveComponent_SetVectorParameterForCustomPrimitiveData(&uapi_UPrimitiveComponent_SetVectorParameterForCustomPrimitiveData);
    }

    auto const apiuapi_UPrimitiveComponent_SetVectorParameterForDefaultCustomPrimitiveData = (uapi_UPrimitiveComponent_SetVectorParameterForDefaultCustomPrimitiveDataFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetVectorParameterForDefaultCustomPrimitiveData_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetVectorParameterForDefaultCustomPrimitiveData){
        apiuapi_UPrimitiveComponent_SetVectorParameterForDefaultCustomPrimitiveData(&uapi_UPrimitiveComponent_SetVectorParameterForDefaultCustomPrimitiveData);
    }

    auto const apiuapi_UPrimitiveComponent_SetVisibleInRayTracing = (uapi_UPrimitiveComponent_SetVisibleInRayTracingFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetVisibleInRayTracing_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetVisibleInRayTracing){
        apiuapi_UPrimitiveComponent_SetVisibleInRayTracing(&uapi_UPrimitiveComponent_SetVisibleInRayTracing);
    }

    auto const apiuapi_UPrimitiveComponent_SetVisibleInSceneCaptureOnly = (uapi_UPrimitiveComponent_SetVisibleInSceneCaptureOnlyFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SetVisibleInSceneCaptureOnly_handler\0"));
    if(apiuapi_UPrimitiveComponent_SetVisibleInSceneCaptureOnly){
        apiuapi_UPrimitiveComponent_SetVisibleInSceneCaptureOnly(&uapi_UPrimitiveComponent_SetVisibleInSceneCaptureOnly);
    }

    auto const apiuapi_UPrimitiveComponent_ShouldComponentAddToScene = (uapi_UPrimitiveComponent_ShouldComponentAddToSceneFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_ShouldComponentAddToScene_handler\0"));
    if(apiuapi_UPrimitiveComponent_ShouldComponentAddToScene){
        apiuapi_UPrimitiveComponent_ShouldComponentAddToScene(&uapi_UPrimitiveComponent_ShouldComponentAddToScene);
    }

    auto const apiuapi_UPrimitiveComponent_ShouldCreatePhysicsState = (uapi_UPrimitiveComponent_ShouldCreatePhysicsStateFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_ShouldCreatePhysicsState_handler\0"));
    if(apiuapi_UPrimitiveComponent_ShouldCreatePhysicsState){
        apiuapi_UPrimitiveComponent_ShouldCreatePhysicsState(&uapi_UPrimitiveComponent_ShouldCreatePhysicsState);
    }

    auto const apiuapi_UPrimitiveComponent_ShouldGenerateAutoLOD = (uapi_UPrimitiveComponent_ShouldGenerateAutoLODFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_ShouldGenerateAutoLOD_handler\0"));
    if(apiuapi_UPrimitiveComponent_ShouldGenerateAutoLOD){
        apiuapi_UPrimitiveComponent_ShouldGenerateAutoLOD(&uapi_UPrimitiveComponent_ShouldGenerateAutoLOD);
    }

    auto const apiuapi_UPrimitiveComponent_ShouldRecreateProxyOnUpdateTransform = (uapi_UPrimitiveComponent_ShouldRecreateProxyOnUpdateTransformFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_ShouldRecreateProxyOnUpdateTransform_handler\0"));
    if(apiuapi_UPrimitiveComponent_ShouldRecreateProxyOnUpdateTransform){
        apiuapi_UPrimitiveComponent_ShouldRecreateProxyOnUpdateTransform(&uapi_UPrimitiveComponent_ShouldRecreateProxyOnUpdateTransform);
    }

    auto const apiuapi_UPrimitiveComponent_ShouldRenderSelected = (uapi_UPrimitiveComponent_ShouldRenderSelectedFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_ShouldRenderSelected_handler\0"));
    if(apiuapi_UPrimitiveComponent_ShouldRenderSelected){
        apiuapi_UPrimitiveComponent_ShouldRenderSelected(&uapi_UPrimitiveComponent_ShouldRenderSelected);
    }

    auto const apiuapi_UPrimitiveComponent_SupportsWorldPositionOffsetVelocity = (uapi_UPrimitiveComponent_SupportsWorldPositionOffsetVelocityFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SupportsWorldPositionOffsetVelocity_handler\0"));
    if(apiuapi_UPrimitiveComponent_SupportsWorldPositionOffsetVelocity){
        apiuapi_UPrimitiveComponent_SupportsWorldPositionOffsetVelocity(&uapi_UPrimitiveComponent_SupportsWorldPositionOffsetVelocity);
    }

    auto const apiuapi_UPrimitiveComponent_SyncComponentToRBPhysics = (uapi_UPrimitiveComponent_SyncComponentToRBPhysicsFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_SyncComponentToRBPhysics_handler\0"));
    if(apiuapi_UPrimitiveComponent_SyncComponentToRBPhysics){
        apiuapi_UPrimitiveComponent_SyncComponentToRBPhysics(&uapi_UPrimitiveComponent_SyncComponentToRBPhysics);
    }

    auto const apiuapi_UPrimitiveComponent_UnWeldChildren = (uapi_UPrimitiveComponent_UnWeldChildrenFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_UnWeldChildren_handler\0"));
    if(apiuapi_UPrimitiveComponent_UnWeldChildren){
        apiuapi_UPrimitiveComponent_UnWeldChildren(&uapi_UPrimitiveComponent_UnWeldChildren);
    }

    auto const apiuapi_UPrimitiveComponent_UnWeldFromParent = (uapi_UPrimitiveComponent_UnWeldFromParentFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_UnWeldFromParent_handler\0"));
    if(apiuapi_UPrimitiveComponent_UnWeldFromParent){
        apiuapi_UPrimitiveComponent_UnWeldFromParent(&uapi_UPrimitiveComponent_UnWeldFromParent);
    }

    auto const apiuapi_UPrimitiveComponent_UpdateBounds = (uapi_UPrimitiveComponent_UpdateBoundsFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_UpdateBounds_handler\0"));
    if(apiuapi_UPrimitiveComponent_UpdateBounds){
        apiuapi_UPrimitiveComponent_UpdateBounds(&uapi_UPrimitiveComponent_UpdateBounds);
    }

    auto const apiuapi_UPrimitiveComponent_UpdateCollisionProfile = (uapi_UPrimitiveComponent_UpdateCollisionProfileFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_UpdateCollisionProfile_handler\0"));
    if(apiuapi_UPrimitiveComponent_UpdateCollisionProfile){
        apiuapi_UPrimitiveComponent_UpdateCollisionProfile(&uapi_UPrimitiveComponent_UpdateCollisionProfile);
    }

    auto const apiuapi_UPrimitiveComponent_UpdateOcclusionBoundsSlack = (uapi_UPrimitiveComponent_UpdateOcclusionBoundsSlackFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_UpdateOcclusionBoundsSlack_handler\0"));
    if(apiuapi_UPrimitiveComponent_UpdateOcclusionBoundsSlack){
        apiuapi_UPrimitiveComponent_UpdateOcclusionBoundsSlack(&uapi_UPrimitiveComponent_UpdateOcclusionBoundsSlack);
    }

    auto const apiuapi_UPrimitiveComponent_UpdateOverlapsImpl = (uapi_UPrimitiveComponent_UpdateOverlapsImplFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_UpdateOverlapsImpl_handler\0"));
    if(apiuapi_UPrimitiveComponent_UpdateOverlapsImpl){
        apiuapi_UPrimitiveComponent_UpdateOverlapsImpl(&uapi_UPrimitiveComponent_UpdateOverlapsImpl);
    }

    auto const apiuapi_UPrimitiveComponent_UpdatePhysicsVolume = (uapi_UPrimitiveComponent_UpdatePhysicsVolumeFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_UpdatePhysicsVolume_handler\0"));
    if(apiuapi_UPrimitiveComponent_UpdatePhysicsVolume){
        apiuapi_UPrimitiveComponent_UpdatePhysicsVolume(&uapi_UPrimitiveComponent_UpdatePhysicsVolume);
    }

    auto const apiuapi_UPrimitiveComponent_UsesOnlyUnlitMaterials = (uapi_UPrimitiveComponent_UsesOnlyUnlitMaterialsFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_UsesOnlyUnlitMaterials_handler\0"));
    if(apiuapi_UPrimitiveComponent_UsesOnlyUnlitMaterials){
        apiuapi_UPrimitiveComponent_UsesOnlyUnlitMaterials(&uapi_UPrimitiveComponent_UsesOnlyUnlitMaterials);
    }

    auto const apiuapi_UPrimitiveComponent_WakeAllRigidBodies = (uapi_UPrimitiveComponent_WakeAllRigidBodiesFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_WakeAllRigidBodies_handler\0"));
    if(apiuapi_UPrimitiveComponent_WakeAllRigidBodies){
        apiuapi_UPrimitiveComponent_WakeAllRigidBodies(&uapi_UPrimitiveComponent_WakeAllRigidBodies);
    }

    auto const apiuapi_UPrimitiveComponent_WakeRigidBody = (uapi_UPrimitiveComponent_WakeRigidBodyFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_WakeRigidBody_handler\0"));
    if(apiuapi_UPrimitiveComponent_WakeRigidBody){
        apiuapi_UPrimitiveComponent_WakeRigidBody(&uapi_UPrimitiveComponent_WakeRigidBody);
    }

    auto const apiuapi_UPrimitiveComponent_WasRecentlyRendered = (uapi_UPrimitiveComponent_WasRecentlyRenderedFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_WasRecentlyRendered_handler\0"));
    if(apiuapi_UPrimitiveComponent_WasRecentlyRendered){
        apiuapi_UPrimitiveComponent_WasRecentlyRendered(&uapi_UPrimitiveComponent_WasRecentlyRendered);
    }

    auto const apiuapi_UPrimitiveComponent_WeldTo = (uapi_UPrimitiveComponent_WeldToFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_WeldTo_handler\0"));
    if(apiuapi_UPrimitiveComponent_WeldTo){
        apiuapi_UPrimitiveComponent_WeldTo(&uapi_UPrimitiveComponent_WeldTo);
    }

    auto const apiuapi_UPrimitiveComponent_WeldToImplementation = (uapi_UPrimitiveComponent_WeldToImplementationFn)plugin->GetDllExport(TEXT("set_UPrimitiveComponent_WeldToImplementation_handler\0"));
    if(apiuapi_UPrimitiveComponent_WeldToImplementation){
        apiuapi_UPrimitiveComponent_WeldToImplementation(&uapi_UPrimitiveComponent_WeldToImplementation);
    }

    auto const apiuapi_UAnimInstance_AddExternalNotifyHandler = (uapi_UAnimInstance_AddExternalNotifyHandlerFn)plugin->GetDllExport(TEXT("set_UAnimInstance_AddExternalNotifyHandler_handler\0"));
    if(apiuapi_UAnimInstance_AddExternalNotifyHandler){
        apiuapi_UAnimInstance_AddExternalNotifyHandler(&uapi_UAnimInstance_AddExternalNotifyHandler);
    }

    auto const apiuapi_UAnimInstance_BeginDestroy = (uapi_UAnimInstance_BeginDestroyFn)plugin->GetDllExport(TEXT("set_UAnimInstance_BeginDestroy_handler\0"));
    if(apiuapi_UAnimInstance_BeginDestroy){
        apiuapi_UAnimInstance_BeginDestroy(&uapi_UAnimInstance_BeginDestroy);
    }

    auto const apiuapi_UAnimInstance_BlueprintBeginPlay = (uapi_UAnimInstance_BlueprintBeginPlayFn)plugin->GetDllExport(TEXT("set_UAnimInstance_BlueprintBeginPlay_handler\0"));
    if(apiuapi_UAnimInstance_BlueprintBeginPlay){
        apiuapi_UAnimInstance_BlueprintBeginPlay(&uapi_UAnimInstance_BlueprintBeginPlay);
    }

    auto const apiuapi_UAnimInstance_BlueprintInitializeAnimation = (uapi_UAnimInstance_BlueprintInitializeAnimationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_BlueprintInitializeAnimation_handler\0"));
    if(apiuapi_UAnimInstance_BlueprintInitializeAnimation){
        apiuapi_UAnimInstance_BlueprintInitializeAnimation(&uapi_UAnimInstance_BlueprintInitializeAnimation);
    }

    auto const apiuapi_UAnimInstance_BlueprintLinkedAnimationLayersInitialized = (uapi_UAnimInstance_BlueprintLinkedAnimationLayersInitializedFn)plugin->GetDllExport(TEXT("set_UAnimInstance_BlueprintLinkedAnimationLayersInitialized_handler\0"));
    if(apiuapi_UAnimInstance_BlueprintLinkedAnimationLayersInitialized){
        apiuapi_UAnimInstance_BlueprintLinkedAnimationLayersInitialized(&uapi_UAnimInstance_BlueprintLinkedAnimationLayersInitialized);
    }

    auto const apiuapi_UAnimInstance_BlueprintPostEvaluateAnimation = (uapi_UAnimInstance_BlueprintPostEvaluateAnimationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_BlueprintPostEvaluateAnimation_handler\0"));
    if(apiuapi_UAnimInstance_BlueprintPostEvaluateAnimation){
        apiuapi_UAnimInstance_BlueprintPostEvaluateAnimation(&uapi_UAnimInstance_BlueprintPostEvaluateAnimation);
    }

    auto const apiuapi_UAnimInstance_BlueprintThreadSafeUpdateAnimation = (uapi_UAnimInstance_BlueprintThreadSafeUpdateAnimationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_BlueprintThreadSafeUpdateAnimation_handler\0"));
    if(apiuapi_UAnimInstance_BlueprintThreadSafeUpdateAnimation){
        apiuapi_UAnimInstance_BlueprintThreadSafeUpdateAnimation(&uapi_UAnimInstance_BlueprintThreadSafeUpdateAnimation);
    }

    auto const apiuapi_UAnimInstance_BlueprintUpdateAnimation = (uapi_UAnimInstance_BlueprintUpdateAnimationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_BlueprintUpdateAnimation_handler\0"));
    if(apiuapi_UAnimInstance_BlueprintUpdateAnimation){
        apiuapi_UAnimInstance_BlueprintUpdateAnimation(&uapi_UAnimInstance_BlueprintUpdateAnimation);
    }

    auto const apiuapi_UAnimInstance_CanRunParallelWork = (uapi_UAnimInstance_CanRunParallelWorkFn)plugin->GetDllExport(TEXT("set_UAnimInstance_CanRunParallelWork_handler\0"));
    if(apiuapi_UAnimInstance_CanRunParallelWork){
        apiuapi_UAnimInstance_CanRunParallelWork(&uapi_UAnimInstance_CanRunParallelWork);
    }

    auto const apiuapi_UAnimInstance_CanTransitionSignature = (uapi_UAnimInstance_CanTransitionSignatureFn)plugin->GetDllExport(TEXT("set_UAnimInstance_CanTransitionSignature_handler\0"));
    if(apiuapi_UAnimInstance_CanTransitionSignature){
        apiuapi_UAnimInstance_CanTransitionSignature(&uapi_UAnimInstance_CanTransitionSignature);
    }

    auto const apiuapi_UAnimInstance_ClearAllTransitionEvents = (uapi_UAnimInstance_ClearAllTransitionEventsFn)plugin->GetDllExport(TEXT("set_UAnimInstance_ClearAllTransitionEvents_handler\0"));
    if(apiuapi_UAnimInstance_ClearAllTransitionEvents){
        apiuapi_UAnimInstance_ClearAllTransitionEvents(&uapi_UAnimInstance_ClearAllTransitionEvents);
    }

    auto const apiuapi_UAnimInstance_ClearMorphTargets = (uapi_UAnimInstance_ClearMorphTargetsFn)plugin->GetDllExport(TEXT("set_UAnimInstance_ClearMorphTargets_handler\0"));
    if(apiuapi_UAnimInstance_ClearMorphTargets){
        apiuapi_UAnimInstance_ClearMorphTargets(&uapi_UAnimInstance_ClearMorphTargets);
    }

    auto const apiuapi_UAnimInstance_ClearTransitionEvents = (uapi_UAnimInstance_ClearTransitionEventsFn)plugin->GetDllExport(TEXT("set_UAnimInstance_ClearTransitionEvents_handler\0"));
    if(apiuapi_UAnimInstance_ClearTransitionEvents){
        apiuapi_UAnimInstance_ClearTransitionEvents(&uapi_UAnimInstance_ClearTransitionEvents);
    }

    auto const apiuapi_UAnimInstance_CopyCurveValues = (uapi_UAnimInstance_CopyCurveValuesFn)plugin->GetDllExport(TEXT("set_UAnimInstance_CopyCurveValues_handler\0"));
    if(apiuapi_UAnimInstance_CopyCurveValues){
        apiuapi_UAnimInstance_CopyCurveValues(&uapi_UAnimInstance_CopyCurveValues);
    }

    auto const apiuapi_UAnimInstance_DispatchQueuedAnimEvents = (uapi_UAnimInstance_DispatchQueuedAnimEventsFn)plugin->GetDllExport(TEXT("set_UAnimInstance_DispatchQueuedAnimEvents_handler\0"));
    if(apiuapi_UAnimInstance_DispatchQueuedAnimEvents){
        apiuapi_UAnimInstance_DispatchQueuedAnimEvents(&uapi_UAnimInstance_DispatchQueuedAnimEvents);
    }

    auto const apiuapi_UAnimInstance_EndNotifyStates = (uapi_UAnimInstance_EndNotifyStatesFn)plugin->GetDllExport(TEXT("set_UAnimInstance_EndNotifyStates_handler\0"));
    if(apiuapi_UAnimInstance_EndNotifyStates){
        apiuapi_UAnimInstance_EndNotifyStates(&uapi_UAnimInstance_EndNotifyStates);
    }

    auto const apiuapi_UAnimInstance_GetActiveInstanceForMontage = (uapi_UAnimInstance_GetActiveInstanceForMontageFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetActiveInstanceForMontage_handler\0"));
    if(apiuapi_UAnimInstance_GetActiveInstanceForMontage){
        apiuapi_UAnimInstance_GetActiveInstanceForMontage(&uapi_UAnimInstance_GetActiveInstanceForMontage);
    }

    auto const apiuapi_UAnimInstance_GetActiveMontageInstance = (uapi_UAnimInstance_GetActiveMontageInstanceFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetActiveMontageInstance_handler\0"));
    if(apiuapi_UAnimInstance_GetActiveMontageInstance){
        apiuapi_UAnimInstance_GetActiveMontageInstance(&uapi_UAnimInstance_GetActiveMontageInstance);
    }

    auto const apiuapi_UAnimInstance_GetCurrentActiveMontage = (uapi_UAnimInstance_GetCurrentActiveMontageFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetCurrentActiveMontage_handler\0"));
    if(apiuapi_UAnimInstance_GetCurrentActiveMontage){
        apiuapi_UAnimInstance_GetCurrentActiveMontage(&uapi_UAnimInstance_GetCurrentActiveMontage);
    }

    auto const apiuapi_UAnimInstance_GetCurrentStateName = (uapi_UAnimInstance_GetCurrentStateNameFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetCurrentStateName_handler\0"));
    if(apiuapi_UAnimInstance_GetCurrentStateName){
        apiuapi_UAnimInstance_GetCurrentStateName(&uapi_UAnimInstance_GetCurrentStateName);
    }

    auto const apiuapi_UAnimInstance_GetCurveValue = (uapi_UAnimInstance_GetCurveValueFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetCurveValue_handler\0"));
    if(apiuapi_UAnimInstance_GetCurveValue){
        apiuapi_UAnimInstance_GetCurveValue(&uapi_UAnimInstance_GetCurveValue);
    }

    auto const apiuapi_UAnimInstance_GetCurveValue2 = (uapi_UAnimInstance_GetCurveValue2Fn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetCurveValue2_handler\0"));
    if(apiuapi_UAnimInstance_GetCurveValue2){
        apiuapi_UAnimInstance_GetCurveValue2(&uapi_UAnimInstance_GetCurveValue2);
    }

    auto const apiuapi_UAnimInstance_GetCurveValueWithDefault = (uapi_UAnimInstance_GetCurveValueWithDefaultFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetCurveValueWithDefault_handler\0"));
    if(apiuapi_UAnimInstance_GetCurveValueWithDefault){
        apiuapi_UAnimInstance_GetCurveValueWithDefault(&uapi_UAnimInstance_GetCurveValueWithDefault);
    }

    auto const apiuapi_UAnimInstance_GetDeltaSeconds = (uapi_UAnimInstance_GetDeltaSecondsFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetDeltaSeconds_handler\0"));
    if(apiuapi_UAnimInstance_GetDeltaSeconds){
        apiuapi_UAnimInstance_GetDeltaSeconds(&uapi_UAnimInstance_GetDeltaSeconds);
    }

    auto const apiuapi_UAnimInstance_GetInstanceAssetPlayerIndex = (uapi_UAnimInstance_GetInstanceAssetPlayerIndexFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetInstanceAssetPlayerIndex_handler\0"));
    if(apiuapi_UAnimInstance_GetInstanceAssetPlayerIndex){
        apiuapi_UAnimInstance_GetInstanceAssetPlayerIndex(&uapi_UAnimInstance_GetInstanceAssetPlayerIndex);
    }

    auto const apiuapi_UAnimInstance_GetInstanceAssetPlayerLength = (uapi_UAnimInstance_GetInstanceAssetPlayerLengthFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetInstanceAssetPlayerLength_handler\0"));
    if(apiuapi_UAnimInstance_GetInstanceAssetPlayerLength){
        apiuapi_UAnimInstance_GetInstanceAssetPlayerLength(&uapi_UAnimInstance_GetInstanceAssetPlayerLength);
    }

    auto const apiuapi_UAnimInstance_GetInstanceAssetPlayerTime = (uapi_UAnimInstance_GetInstanceAssetPlayerTimeFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetInstanceAssetPlayerTime_handler\0"));
    if(apiuapi_UAnimInstance_GetInstanceAssetPlayerTime){
        apiuapi_UAnimInstance_GetInstanceAssetPlayerTime(&uapi_UAnimInstance_GetInstanceAssetPlayerTime);
    }

    auto const apiuapi_UAnimInstance_GetInstanceAssetPlayerTimeFraction = (uapi_UAnimInstance_GetInstanceAssetPlayerTimeFractionFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetInstanceAssetPlayerTimeFraction_handler\0"));
    if(apiuapi_UAnimInstance_GetInstanceAssetPlayerTimeFraction){
        apiuapi_UAnimInstance_GetInstanceAssetPlayerTimeFraction(&uapi_UAnimInstance_GetInstanceAssetPlayerTimeFraction);
    }

    auto const apiuapi_UAnimInstance_GetInstanceAssetPlayerTimeFromEnd = (uapi_UAnimInstance_GetInstanceAssetPlayerTimeFromEndFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetInstanceAssetPlayerTimeFromEnd_handler\0"));
    if(apiuapi_UAnimInstance_GetInstanceAssetPlayerTimeFromEnd){
        apiuapi_UAnimInstance_GetInstanceAssetPlayerTimeFromEnd(&uapi_UAnimInstance_GetInstanceAssetPlayerTimeFromEnd);
    }

    auto const apiuapi_UAnimInstance_GetInstanceAssetPlayerTimeFromEndFraction = (uapi_UAnimInstance_GetInstanceAssetPlayerTimeFromEndFractionFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetInstanceAssetPlayerTimeFromEndFraction_handler\0"));
    if(apiuapi_UAnimInstance_GetInstanceAssetPlayerTimeFromEndFraction){
        apiuapi_UAnimInstance_GetInstanceAssetPlayerTimeFromEndFraction(&uapi_UAnimInstance_GetInstanceAssetPlayerTimeFromEndFraction);
    }

    auto const apiuapi_UAnimInstance_GetInstanceCurrentStateElapsedTime = (uapi_UAnimInstance_GetInstanceCurrentStateElapsedTimeFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetInstanceCurrentStateElapsedTime_handler\0"));
    if(apiuapi_UAnimInstance_GetInstanceCurrentStateElapsedTime){
        apiuapi_UAnimInstance_GetInstanceCurrentStateElapsedTime(&uapi_UAnimInstance_GetInstanceCurrentStateElapsedTime);
    }

    auto const apiuapi_UAnimInstance_GetInstanceMachineWeight = (uapi_UAnimInstance_GetInstanceMachineWeightFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetInstanceMachineWeight_handler\0"));
    if(apiuapi_UAnimInstance_GetInstanceMachineWeight){
        apiuapi_UAnimInstance_GetInstanceMachineWeight(&uapi_UAnimInstance_GetInstanceMachineWeight);
    }

    auto const apiuapi_UAnimInstance_GetInstanceStateWeight = (uapi_UAnimInstance_GetInstanceStateWeightFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetInstanceStateWeight_handler\0"));
    if(apiuapi_UAnimInstance_GetInstanceStateWeight){
        apiuapi_UAnimInstance_GetInstanceStateWeight(&uapi_UAnimInstance_GetInstanceStateWeight);
    }

    auto const apiuapi_UAnimInstance_GetInstanceTransitionCrossfadeDuration = (uapi_UAnimInstance_GetInstanceTransitionCrossfadeDurationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetInstanceTransitionCrossfadeDuration_handler\0"));
    if(apiuapi_UAnimInstance_GetInstanceTransitionCrossfadeDuration){
        apiuapi_UAnimInstance_GetInstanceTransitionCrossfadeDuration(&uapi_UAnimInstance_GetInstanceTransitionCrossfadeDuration);
    }

    auto const apiuapi_UAnimInstance_GetInstanceTransitionTimeElapsed = (uapi_UAnimInstance_GetInstanceTransitionTimeElapsedFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetInstanceTransitionTimeElapsed_handler\0"));
    if(apiuapi_UAnimInstance_GetInstanceTransitionTimeElapsed){
        apiuapi_UAnimInstance_GetInstanceTransitionTimeElapsed(&uapi_UAnimInstance_GetInstanceTransitionTimeElapsed);
    }

    auto const apiuapi_UAnimInstance_GetInstanceTransitionTimeElapsedFraction = (uapi_UAnimInstance_GetInstanceTransitionTimeElapsedFractionFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetInstanceTransitionTimeElapsedFraction_handler\0"));
    if(apiuapi_UAnimInstance_GetInstanceTransitionTimeElapsedFraction){
        apiuapi_UAnimInstance_GetInstanceTransitionTimeElapsedFraction(&uapi_UAnimInstance_GetInstanceTransitionTimeElapsedFraction);
    }

    auto const apiuapi_UAnimInstance_GetLODLevel = (uapi_UAnimInstance_GetLODLevelFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetLODLevel_handler\0"));
    if(apiuapi_UAnimInstance_GetLODLevel){
        apiuapi_UAnimInstance_GetLODLevel(&uapi_UAnimInstance_GetLODLevel);
    }

    auto const apiuapi_UAnimInstance_GetLinkedAnimGraphInstanceByTag = (uapi_UAnimInstance_GetLinkedAnimGraphInstanceByTagFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetLinkedAnimGraphInstanceByTag_handler\0"));
    if(apiuapi_UAnimInstance_GetLinkedAnimGraphInstanceByTag){
        apiuapi_UAnimInstance_GetLinkedAnimGraphInstanceByTag(&uapi_UAnimInstance_GetLinkedAnimGraphInstanceByTag);
    }

    auto const apiuapi_UAnimInstance_GetLinkedAnimLayerInstanceByGroup = (uapi_UAnimInstance_GetLinkedAnimLayerInstanceByGroupFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetLinkedAnimLayerInstanceByGroup_handler\0"));
    if(apiuapi_UAnimInstance_GetLinkedAnimLayerInstanceByGroup){
        apiuapi_UAnimInstance_GetLinkedAnimLayerInstanceByGroup(&uapi_UAnimInstance_GetLinkedAnimLayerInstanceByGroup);
    }

    auto const apiuapi_UAnimInstance_GetLinkedInputPoseNode = (uapi_UAnimInstance_GetLinkedInputPoseNodeFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetLinkedInputPoseNode_handler\0"));
    if(apiuapi_UAnimInstance_GetLinkedInputPoseNode){
        apiuapi_UAnimInstance_GetLinkedInputPoseNode(&uapi_UAnimInstance_GetLinkedInputPoseNode);
    }

    auto const apiuapi_UAnimInstance_GetMachineDescription = (uapi_UAnimInstance_GetMachineDescriptionFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetMachineDescription_handler\0"));
    if(apiuapi_UAnimInstance_GetMachineDescription){
        apiuapi_UAnimInstance_GetMachineDescription(&uapi_UAnimInstance_GetMachineDescription);
    }

    auto const apiuapi_UAnimInstance_GetMontageInstanceForID = (uapi_UAnimInstance_GetMontageInstanceForIDFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetMontageInstanceForID_handler\0"));
    if(apiuapi_UAnimInstance_GetMontageInstanceForID){
        apiuapi_UAnimInstance_GetMontageInstanceForID(&uapi_UAnimInstance_GetMontageInstanceForID);
    }

    auto const apiuapi_UAnimInstance_GetOwningActor = (uapi_UAnimInstance_GetOwningActorFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetOwningActor_handler\0"));
    if(apiuapi_UAnimInstance_GetOwningActor){
        apiuapi_UAnimInstance_GetOwningActor(&uapi_UAnimInstance_GetOwningActor);
    }

    auto const apiuapi_UAnimInstance_GetOwningComponent = (uapi_UAnimInstance_GetOwningComponentFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetOwningComponent_handler\0"));
    if(apiuapi_UAnimInstance_GetOwningComponent){
        apiuapi_UAnimInstance_GetOwningComponent(&uapi_UAnimInstance_GetOwningComponent);
    }

    auto const apiuapi_UAnimInstance_GetPoseSnapshot = (uapi_UAnimInstance_GetPoseSnapshotFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetPoseSnapshot_handler\0"));
    if(apiuapi_UAnimInstance_GetPoseSnapshot){
        apiuapi_UAnimInstance_GetPoseSnapshot(&uapi_UAnimInstance_GetPoseSnapshot);
    }

    auto const apiuapi_UAnimInstance_GetPropagateNotifiesToLinkedInstances = (uapi_UAnimInstance_GetPropagateNotifiesToLinkedInstancesFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetPropagateNotifiesToLinkedInstances_handler\0"));
    if(apiuapi_UAnimInstance_GetPropagateNotifiesToLinkedInstances){
        apiuapi_UAnimInstance_GetPropagateNotifiesToLinkedInstances(&uapi_UAnimInstance_GetPropagateNotifiesToLinkedInstances);
    }

    auto const apiuapi_UAnimInstance_GetReceiveNotifiesFromLinkedInstances = (uapi_UAnimInstance_GetReceiveNotifiesFromLinkedInstancesFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetReceiveNotifiesFromLinkedInstances_handler\0"));
    if(apiuapi_UAnimInstance_GetReceiveNotifiesFromLinkedInstances){
        apiuapi_UAnimInstance_GetReceiveNotifiesFromLinkedInstances(&uapi_UAnimInstance_GetReceiveNotifiesFromLinkedInstances);
    }

    auto const apiuapi_UAnimInstance_GetRelevantAnimLength = (uapi_UAnimInstance_GetRelevantAnimLengthFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetRelevantAnimLength_handler\0"));
    if(apiuapi_UAnimInstance_GetRelevantAnimLength){
        apiuapi_UAnimInstance_GetRelevantAnimLength(&uapi_UAnimInstance_GetRelevantAnimLength);
    }

    auto const apiuapi_UAnimInstance_GetRelevantAnimTime = (uapi_UAnimInstance_GetRelevantAnimTimeFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetRelevantAnimTime_handler\0"));
    if(apiuapi_UAnimInstance_GetRelevantAnimTime){
        apiuapi_UAnimInstance_GetRelevantAnimTime(&uapi_UAnimInstance_GetRelevantAnimTime);
    }

    auto const apiuapi_UAnimInstance_GetRelevantAnimTimeFraction = (uapi_UAnimInstance_GetRelevantAnimTimeFractionFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetRelevantAnimTimeFraction_handler\0"));
    if(apiuapi_UAnimInstance_GetRelevantAnimTimeFraction){
        apiuapi_UAnimInstance_GetRelevantAnimTimeFraction(&uapi_UAnimInstance_GetRelevantAnimTimeFraction);
    }

    auto const apiuapi_UAnimInstance_GetRelevantAnimTimeRemaining = (uapi_UAnimInstance_GetRelevantAnimTimeRemainingFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetRelevantAnimTimeRemaining_handler\0"));
    if(apiuapi_UAnimInstance_GetRelevantAnimTimeRemaining){
        apiuapi_UAnimInstance_GetRelevantAnimTimeRemaining(&uapi_UAnimInstance_GetRelevantAnimTimeRemaining);
    }

    auto const apiuapi_UAnimInstance_GetRelevantAnimTimeRemainingFraction = (uapi_UAnimInstance_GetRelevantAnimTimeRemainingFractionFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetRelevantAnimTimeRemainingFraction_handler\0"));
    if(apiuapi_UAnimInstance_GetRelevantAnimTimeRemainingFraction){
        apiuapi_UAnimInstance_GetRelevantAnimTimeRemainingFraction(&uapi_UAnimInstance_GetRelevantAnimTimeRemainingFraction);
    }

    auto const apiuapi_UAnimInstance_GetRootMotionMontageInstance = (uapi_UAnimInstance_GetRootMotionMontageInstanceFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetRootMotionMontageInstance_handler\0"));
    if(apiuapi_UAnimInstance_GetRootMotionMontageInstance){
        apiuapi_UAnimInstance_GetRootMotionMontageInstance(&uapi_UAnimInstance_GetRootMotionMontageInstance);
    }

    auto const apiuapi_UAnimInstance_GetSkelMeshComponent = (uapi_UAnimInstance_GetSkelMeshComponentFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetSkelMeshComponent_handler\0"));
    if(apiuapi_UAnimInstance_GetSkelMeshComponent){
        apiuapi_UAnimInstance_GetSkelMeshComponent(&uapi_UAnimInstance_GetSkelMeshComponent);
    }

    auto const apiuapi_UAnimInstance_GetStateMachineIndex = (uapi_UAnimInstance_GetStateMachineIndexFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetStateMachineIndex_handler\0"));
    if(apiuapi_UAnimInstance_GetStateMachineIndex){
        apiuapi_UAnimInstance_GetStateMachineIndex(&uapi_UAnimInstance_GetStateMachineIndex);
    }

    auto const apiuapi_UAnimInstance_GetStateMachineInstance = (uapi_UAnimInstance_GetStateMachineInstanceFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetStateMachineInstance_handler\0"));
    if(apiuapi_UAnimInstance_GetStateMachineInstance){
        apiuapi_UAnimInstance_GetStateMachineInstance(&uapi_UAnimInstance_GetStateMachineInstance);
    }

    auto const apiuapi_UAnimInstance_GetStateMachineInstanceDesc = (uapi_UAnimInstance_GetStateMachineInstanceDescFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetStateMachineInstanceDesc_handler\0"));
    if(apiuapi_UAnimInstance_GetStateMachineInstanceDesc){
        apiuapi_UAnimInstance_GetStateMachineInstanceDesc(&uapi_UAnimInstance_GetStateMachineInstanceDesc);
    }

    auto const apiuapi_UAnimInstance_GetStateMachineInstanceFromName = (uapi_UAnimInstance_GetStateMachineInstanceFromNameFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetStateMachineInstanceFromName_handler\0"));
    if(apiuapi_UAnimInstance_GetStateMachineInstanceFromName){
        apiuapi_UAnimInstance_GetStateMachineInstanceFromName(&uapi_UAnimInstance_GetStateMachineInstanceFromName);
    }

    auto const apiuapi_UAnimInstance_GetSyncGroupIndexFromName = (uapi_UAnimInstance_GetSyncGroupIndexFromNameFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetSyncGroupIndexFromName_handler\0"));
    if(apiuapi_UAnimInstance_GetSyncGroupIndexFromName){
        apiuapi_UAnimInstance_GetSyncGroupIndexFromName(&uapi_UAnimInstance_GetSyncGroupIndexFromName);
    }

    auto const apiuapi_UAnimInstance_GetTimeToClosestMarker = (uapi_UAnimInstance_GetTimeToClosestMarkerFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetTimeToClosestMarker_handler\0"));
    if(apiuapi_UAnimInstance_GetTimeToClosestMarker){
        apiuapi_UAnimInstance_GetTimeToClosestMarker(&uapi_UAnimInstance_GetTimeToClosestMarker);
    }

    auto const apiuapi_UAnimInstance_GetWorld = (uapi_UAnimInstance_GetWorldFn)plugin->GetDllExport(TEXT("set_UAnimInstance_GetWorld_handler\0"));
    if(apiuapi_UAnimInstance_GetWorld){
        apiuapi_UAnimInstance_GetWorld(&uapi_UAnimInstance_GetWorld);
    }

    auto const apiuapi_UAnimInstance_HasActiveCurves = (uapi_UAnimInstance_HasActiveCurvesFn)plugin->GetDllExport(TEXT("set_UAnimInstance_HasActiveCurves_handler\0"));
    if(apiuapi_UAnimInstance_HasActiveCurves){
        apiuapi_UAnimInstance_HasActiveCurves(&uapi_UAnimInstance_HasActiveCurves);
    }

    auto const apiuapi_UAnimInstance_HasMarkerBeenHitThisFrame = (uapi_UAnimInstance_HasMarkerBeenHitThisFrameFn)plugin->GetDllExport(TEXT("set_UAnimInstance_HasMarkerBeenHitThisFrame_handler\0"));
    if(apiuapi_UAnimInstance_HasMarkerBeenHitThisFrame){
        apiuapi_UAnimInstance_HasMarkerBeenHitThisFrame(&uapi_UAnimInstance_HasMarkerBeenHitThisFrame);
    }

    auto const apiuapi_UAnimInstance_HasMorphTargetCurves = (uapi_UAnimInstance_HasMorphTargetCurvesFn)plugin->GetDllExport(TEXT("set_UAnimInstance_HasMorphTargetCurves_handler\0"));
    if(apiuapi_UAnimInstance_HasMorphTargetCurves){
        apiuapi_UAnimInstance_HasMorphTargetCurves(&uapi_UAnimInstance_HasMorphTargetCurves);
    }

    auto const apiuapi_UAnimInstance_InitializeAnimation = (uapi_UAnimInstance_InitializeAnimationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_InitializeAnimation_handler\0"));
    if(apiuapi_UAnimInstance_InitializeAnimation){
        apiuapi_UAnimInstance_InitializeAnimation(&uapi_UAnimInstance_InitializeAnimation);
    }

    auto const apiuapi_UAnimInstance_InitializeGroupedLayers = (uapi_UAnimInstance_InitializeGroupedLayersFn)plugin->GetDllExport(TEXT("set_UAnimInstance_InitializeGroupedLayers_handler\0"));
    if(apiuapi_UAnimInstance_InitializeGroupedLayers){
        apiuapi_UAnimInstance_InitializeGroupedLayers(&uapi_UAnimInstance_InitializeGroupedLayers);
    }

    auto const apiuapi_UAnimInstance_IsAnyMontagePlaying = (uapi_UAnimInstance_IsAnyMontagePlayingFn)plugin->GetDllExport(TEXT("set_UAnimInstance_IsAnyMontagePlaying_handler\0"));
    if(apiuapi_UAnimInstance_IsAnyMontagePlaying){
        apiuapi_UAnimInstance_IsAnyMontagePlaying(&uapi_UAnimInstance_IsAnyMontagePlaying);
    }

    auto const apiuapi_UAnimInstance_IsBeingDebugged = (uapi_UAnimInstance_IsBeingDebuggedFn)plugin->GetDllExport(TEXT("set_UAnimInstance_IsBeingDebugged_handler\0"));
    if(apiuapi_UAnimInstance_IsBeingDebugged){
        apiuapi_UAnimInstance_IsBeingDebugged(&uapi_UAnimInstance_IsBeingDebugged);
    }

    auto const apiuapi_UAnimInstance_IsPlayingSlotAnimation = (uapi_UAnimInstance_IsPlayingSlotAnimationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_IsPlayingSlotAnimation_handler\0"));
    if(apiuapi_UAnimInstance_IsPlayingSlotAnimation){
        apiuapi_UAnimInstance_IsPlayingSlotAnimation(&uapi_UAnimInstance_IsPlayingSlotAnimation);
    }

    auto const apiuapi_UAnimInstance_IsPostUpdatingAnimation = (uapi_UAnimInstance_IsPostUpdatingAnimationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_IsPostUpdatingAnimation_handler\0"));
    if(apiuapi_UAnimInstance_IsPostUpdatingAnimation){
        apiuapi_UAnimInstance_IsPostUpdatingAnimation(&uapi_UAnimInstance_IsPostUpdatingAnimation);
    }

    auto const apiuapi_UAnimInstance_IsRunningParallelEvaluation = (uapi_UAnimInstance_IsRunningParallelEvaluationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_IsRunningParallelEvaluation_handler\0"));
    if(apiuapi_UAnimInstance_IsRunningParallelEvaluation){
        apiuapi_UAnimInstance_IsRunningParallelEvaluation(&uapi_UAnimInstance_IsRunningParallelEvaluation);
    }

    auto const apiuapi_UAnimInstance_IsSyncGroupBetweenMarkers = (uapi_UAnimInstance_IsSyncGroupBetweenMarkersFn)plugin->GetDllExport(TEXT("set_UAnimInstance_IsSyncGroupBetweenMarkers_handler\0"));
    if(apiuapi_UAnimInstance_IsSyncGroupBetweenMarkers){
        apiuapi_UAnimInstance_IsSyncGroupBetweenMarkers(&uapi_UAnimInstance_IsSyncGroupBetweenMarkers);
    }

    auto const apiuapi_UAnimInstance_IsUpdatingAnimation = (uapi_UAnimInstance_IsUpdatingAnimationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_IsUpdatingAnimation_handler\0"));
    if(apiuapi_UAnimInstance_IsUpdatingAnimation){
        apiuapi_UAnimInstance_IsUpdatingAnimation(&uapi_UAnimInstance_IsUpdatingAnimation);
    }

    auto const apiuapi_UAnimInstance_IsUsingMainInstanceMontageEvaluationData = (uapi_UAnimInstance_IsUsingMainInstanceMontageEvaluationDataFn)plugin->GetDllExport(TEXT("set_UAnimInstance_IsUsingMainInstanceMontageEvaluationData_handler\0"));
    if(apiuapi_UAnimInstance_IsUsingMainInstanceMontageEvaluationData){
        apiuapi_UAnimInstance_IsUsingMainInstanceMontageEvaluationData(&uapi_UAnimInstance_IsUsingMainInstanceMontageEvaluationData);
    }

    auto const apiuapi_UAnimInstance_LockAIResources = (uapi_UAnimInstance_LockAIResourcesFn)plugin->GetDllExport(TEXT("set_UAnimInstance_LockAIResources_handler\0"));
    if(apiuapi_UAnimInstance_LockAIResources){
        apiuapi_UAnimInstance_LockAIResources(&uapi_UAnimInstance_LockAIResources);
    }

    auto const apiuapi_UAnimInstance_MontageSync_Follow = (uapi_UAnimInstance_MontageSync_FollowFn)plugin->GetDllExport(TEXT("set_UAnimInstance_MontageSync_Follow_handler\0"));
    if(apiuapi_UAnimInstance_MontageSync_Follow){
        apiuapi_UAnimInstance_MontageSync_Follow(&uapi_UAnimInstance_MontageSync_Follow);
    }

    auto const apiuapi_UAnimInstance_MontageSync_StopFollowing = (uapi_UAnimInstance_MontageSync_StopFollowingFn)plugin->GetDllExport(TEXT("set_UAnimInstance_MontageSync_StopFollowing_handler\0"));
    if(apiuapi_UAnimInstance_MontageSync_StopFollowing){
        apiuapi_UAnimInstance_MontageSync_StopFollowing(&uapi_UAnimInstance_MontageSync_StopFollowing);
    }

    auto const apiuapi_UAnimInstance_Montage_GetBlendTime = (uapi_UAnimInstance_Montage_GetBlendTimeFn)plugin->GetDllExport(TEXT("set_UAnimInstance_Montage_GetBlendTime_handler\0"));
    if(apiuapi_UAnimInstance_Montage_GetBlendTime){
        apiuapi_UAnimInstance_Montage_GetBlendTime(&uapi_UAnimInstance_Montage_GetBlendTime);
    }

    auto const apiuapi_UAnimInstance_Montage_GetBlendingOutDelegate = (uapi_UAnimInstance_Montage_GetBlendingOutDelegateFn)plugin->GetDllExport(TEXT("set_UAnimInstance_Montage_GetBlendingOutDelegate_handler\0"));
    if(apiuapi_UAnimInstance_Montage_GetBlendingOutDelegate){
        apiuapi_UAnimInstance_Montage_GetBlendingOutDelegate(&uapi_UAnimInstance_Montage_GetBlendingOutDelegate);
    }

    auto const apiuapi_UAnimInstance_Montage_GetCurrentSection = (uapi_UAnimInstance_Montage_GetCurrentSectionFn)plugin->GetDllExport(TEXT("set_UAnimInstance_Montage_GetCurrentSection_handler\0"));
    if(apiuapi_UAnimInstance_Montage_GetCurrentSection){
        apiuapi_UAnimInstance_Montage_GetCurrentSection(&uapi_UAnimInstance_Montage_GetCurrentSection);
    }

    auto const apiuapi_UAnimInstance_Montage_GetIsStopped = (uapi_UAnimInstance_Montage_GetIsStoppedFn)plugin->GetDllExport(TEXT("set_UAnimInstance_Montage_GetIsStopped_handler\0"));
    if(apiuapi_UAnimInstance_Montage_GetIsStopped){
        apiuapi_UAnimInstance_Montage_GetIsStopped(&uapi_UAnimInstance_Montage_GetIsStopped);
    }

    auto const apiuapi_UAnimInstance_Montage_GetPlayRate = (uapi_UAnimInstance_Montage_GetPlayRateFn)plugin->GetDllExport(TEXT("set_UAnimInstance_Montage_GetPlayRate_handler\0"));
    if(apiuapi_UAnimInstance_Montage_GetPlayRate){
        apiuapi_UAnimInstance_Montage_GetPlayRate(&uapi_UAnimInstance_Montage_GetPlayRate);
    }

    auto const apiuapi_UAnimInstance_Montage_GetPosition = (uapi_UAnimInstance_Montage_GetPositionFn)plugin->GetDllExport(TEXT("set_UAnimInstance_Montage_GetPosition_handler\0"));
    if(apiuapi_UAnimInstance_Montage_GetPosition){
        apiuapi_UAnimInstance_Montage_GetPosition(&uapi_UAnimInstance_Montage_GetPosition);
    }

    auto const apiuapi_UAnimInstance_Montage_IsActive = (uapi_UAnimInstance_Montage_IsActiveFn)plugin->GetDllExport(TEXT("set_UAnimInstance_Montage_IsActive_handler\0"));
    if(apiuapi_UAnimInstance_Montage_IsActive){
        apiuapi_UAnimInstance_Montage_IsActive(&uapi_UAnimInstance_Montage_IsActive);
    }

    auto const apiuapi_UAnimInstance_Montage_IsPlaying = (uapi_UAnimInstance_Montage_IsPlayingFn)plugin->GetDllExport(TEXT("set_UAnimInstance_Montage_IsPlaying_handler\0"));
    if(apiuapi_UAnimInstance_Montage_IsPlaying){
        apiuapi_UAnimInstance_Montage_IsPlaying(&uapi_UAnimInstance_Montage_IsPlaying);
    }

    auto const apiuapi_UAnimInstance_Montage_JumpToSection = (uapi_UAnimInstance_Montage_JumpToSectionFn)plugin->GetDllExport(TEXT("set_UAnimInstance_Montage_JumpToSection_handler\0"));
    if(apiuapi_UAnimInstance_Montage_JumpToSection){
        apiuapi_UAnimInstance_Montage_JumpToSection(&uapi_UAnimInstance_Montage_JumpToSection);
    }

    auto const apiuapi_UAnimInstance_Montage_JumpToSectionsEnd = (uapi_UAnimInstance_Montage_JumpToSectionsEndFn)plugin->GetDllExport(TEXT("set_UAnimInstance_Montage_JumpToSectionsEnd_handler\0"));
    if(apiuapi_UAnimInstance_Montage_JumpToSectionsEnd){
        apiuapi_UAnimInstance_Montage_JumpToSectionsEnd(&uapi_UAnimInstance_Montage_JumpToSectionsEnd);
    }

    auto const apiuapi_UAnimInstance_Montage_Pause = (uapi_UAnimInstance_Montage_PauseFn)plugin->GetDllExport(TEXT("set_UAnimInstance_Montage_Pause_handler\0"));
    if(apiuapi_UAnimInstance_Montage_Pause){
        apiuapi_UAnimInstance_Montage_Pause(&uapi_UAnimInstance_Montage_Pause);
    }

    auto const apiuapi_UAnimInstance_Montage_Play = (uapi_UAnimInstance_Montage_PlayFn)plugin->GetDllExport(TEXT("set_UAnimInstance_Montage_Play_handler\0"));
    if(apiuapi_UAnimInstance_Montage_Play){
        apiuapi_UAnimInstance_Montage_Play(&uapi_UAnimInstance_Montage_Play);
    }

    auto const apiuapi_UAnimInstance_Montage_Resume = (uapi_UAnimInstance_Montage_ResumeFn)plugin->GetDllExport(TEXT("set_UAnimInstance_Montage_Resume_handler\0"));
    if(apiuapi_UAnimInstance_Montage_Resume){
        apiuapi_UAnimInstance_Montage_Resume(&uapi_UAnimInstance_Montage_Resume);
    }

    auto const apiuapi_UAnimInstance_Montage_SetNextSection = (uapi_UAnimInstance_Montage_SetNextSectionFn)plugin->GetDllExport(TEXT("set_UAnimInstance_Montage_SetNextSection_handler\0"));
    if(apiuapi_UAnimInstance_Montage_SetNextSection){
        apiuapi_UAnimInstance_Montage_SetNextSection(&uapi_UAnimInstance_Montage_SetNextSection);
    }

    auto const apiuapi_UAnimInstance_Montage_SetPlayRate = (uapi_UAnimInstance_Montage_SetPlayRateFn)plugin->GetDllExport(TEXT("set_UAnimInstance_Montage_SetPlayRate_handler\0"));
    if(apiuapi_UAnimInstance_Montage_SetPlayRate){
        apiuapi_UAnimInstance_Montage_SetPlayRate(&uapi_UAnimInstance_Montage_SetPlayRate);
    }

    auto const apiuapi_UAnimInstance_Montage_SetPosition = (uapi_UAnimInstance_Montage_SetPositionFn)plugin->GetDllExport(TEXT("set_UAnimInstance_Montage_SetPosition_handler\0"));
    if(apiuapi_UAnimInstance_Montage_SetPosition){
        apiuapi_UAnimInstance_Montage_SetPosition(&uapi_UAnimInstance_Montage_SetPosition);
    }

    auto const apiuapi_UAnimInstance_Montage_Stop = (uapi_UAnimInstance_Montage_StopFn)plugin->GetDllExport(TEXT("set_UAnimInstance_Montage_Stop_handler\0"));
    if(apiuapi_UAnimInstance_Montage_Stop){
        apiuapi_UAnimInstance_Montage_Stop(&uapi_UAnimInstance_Montage_Stop);
    }

    auto const apiuapi_UAnimInstance_Montage_StopGroupByName = (uapi_UAnimInstance_Montage_StopGroupByNameFn)plugin->GetDllExport(TEXT("set_UAnimInstance_Montage_StopGroupByName_handler\0"));
    if(apiuapi_UAnimInstance_Montage_StopGroupByName){
        apiuapi_UAnimInstance_Montage_StopGroupByName(&uapi_UAnimInstance_Montage_StopGroupByName);
    }

    auto const apiuapi_UAnimInstance_NativeBeginPlay = (uapi_UAnimInstance_NativeBeginPlayFn)plugin->GetDllExport(TEXT("set_UAnimInstance_NativeBeginPlay_handler\0"));
    if(apiuapi_UAnimInstance_NativeBeginPlay){
        apiuapi_UAnimInstance_NativeBeginPlay(&uapi_UAnimInstance_NativeBeginPlay);
    }

    auto const apiuapi_UAnimInstance_NativeInitializeAnimation = (uapi_UAnimInstance_NativeInitializeAnimationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_NativeInitializeAnimation_handler\0"));
    if(apiuapi_UAnimInstance_NativeInitializeAnimation){
        apiuapi_UAnimInstance_NativeInitializeAnimation(&uapi_UAnimInstance_NativeInitializeAnimation);
    }

    auto const apiuapi_UAnimInstance_NativePostEvaluateAnimation = (uapi_UAnimInstance_NativePostEvaluateAnimationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_NativePostEvaluateAnimation_handler\0"));
    if(apiuapi_UAnimInstance_NativePostEvaluateAnimation){
        apiuapi_UAnimInstance_NativePostEvaluateAnimation(&uapi_UAnimInstance_NativePostEvaluateAnimation);
    }

    auto const apiuapi_UAnimInstance_NativeThreadSafeUpdateAnimation = (uapi_UAnimInstance_NativeThreadSafeUpdateAnimationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_NativeThreadSafeUpdateAnimation_handler\0"));
    if(apiuapi_UAnimInstance_NativeThreadSafeUpdateAnimation){
        apiuapi_UAnimInstance_NativeThreadSafeUpdateAnimation(&uapi_UAnimInstance_NativeThreadSafeUpdateAnimation);
    }

    auto const apiuapi_UAnimInstance_NativeUninitializeAnimation = (uapi_UAnimInstance_NativeUninitializeAnimationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_NativeUninitializeAnimation_handler\0"));
    if(apiuapi_UAnimInstance_NativeUninitializeAnimation){
        apiuapi_UAnimInstance_NativeUninitializeAnimation(&uapi_UAnimInstance_NativeUninitializeAnimation);
    }

    auto const apiuapi_UAnimInstance_NativeUpdateAnimation = (uapi_UAnimInstance_NativeUpdateAnimationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_NativeUpdateAnimation_handler\0"));
    if(apiuapi_UAnimInstance_NativeUpdateAnimation){
        apiuapi_UAnimInstance_NativeUpdateAnimation(&uapi_UAnimInstance_NativeUpdateAnimation);
    }

    auto const apiuapi_UAnimInstance_NeedsUpdate = (uapi_UAnimInstance_NeedsUpdateFn)plugin->GetDllExport(TEXT("set_UAnimInstance_NeedsUpdate_handler\0"));
    if(apiuapi_UAnimInstance_NeedsUpdate){
        apiuapi_UAnimInstance_NeedsUpdate(&uapi_UAnimInstance_NeedsUpdate);
    }

    auto const apiuapi_UAnimInstance_OnUROSkipTickAnimation = (uapi_UAnimInstance_OnUROSkipTickAnimationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_OnUROSkipTickAnimation_handler\0"));
    if(apiuapi_UAnimInstance_OnUROSkipTickAnimation){
        apiuapi_UAnimInstance_OnUROSkipTickAnimation(&uapi_UAnimInstance_OnUROSkipTickAnimation);
    }

    auto const apiuapi_UAnimInstance_PCV_ShouldNotifyAboutNodesNotUsingFastPath = (uapi_UAnimInstance_PCV_ShouldNotifyAboutNodesNotUsingFastPathFn)plugin->GetDllExport(TEXT("set_UAnimInstance_PCV_ShouldNotifyAboutNodesNotUsingFastPath_handler\0"));
    if(apiuapi_UAnimInstance_PCV_ShouldNotifyAboutNodesNotUsingFastPath){
        apiuapi_UAnimInstance_PCV_ShouldNotifyAboutNodesNotUsingFastPath(&uapi_UAnimInstance_PCV_ShouldNotifyAboutNodesNotUsingFastPath);
    }

    auto const apiuapi_UAnimInstance_PCV_ShouldWarnAboutNodesNotUsingFastPath = (uapi_UAnimInstance_PCV_ShouldWarnAboutNodesNotUsingFastPathFn)plugin->GetDllExport(TEXT("set_UAnimInstance_PCV_ShouldWarnAboutNodesNotUsingFastPath_handler\0"));
    if(apiuapi_UAnimInstance_PCV_ShouldWarnAboutNodesNotUsingFastPath){
        apiuapi_UAnimInstance_PCV_ShouldWarnAboutNodesNotUsingFastPath(&uapi_UAnimInstance_PCV_ShouldWarnAboutNodesNotUsingFastPath);
    }

    auto const apiuapi_UAnimInstance_ParallelCanEvaluate = (uapi_UAnimInstance_ParallelCanEvaluateFn)plugin->GetDllExport(TEXT("set_UAnimInstance_ParallelCanEvaluate_handler\0"));
    if(apiuapi_UAnimInstance_ParallelCanEvaluate){
        apiuapi_UAnimInstance_ParallelCanEvaluate(&uapi_UAnimInstance_ParallelCanEvaluate);
    }

    auto const apiuapi_UAnimInstance_ParallelUpdateAnimation = (uapi_UAnimInstance_ParallelUpdateAnimationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_ParallelUpdateAnimation_handler\0"));
    if(apiuapi_UAnimInstance_ParallelUpdateAnimation){
        apiuapi_UAnimInstance_ParallelUpdateAnimation(&uapi_UAnimInstance_ParallelUpdateAnimation);
    }

    auto const apiuapi_UAnimInstance_PlaySlotAnimationAsDynamicMontage = (uapi_UAnimInstance_PlaySlotAnimationAsDynamicMontageFn)plugin->GetDllExport(TEXT("set_UAnimInstance_PlaySlotAnimationAsDynamicMontage_handler\0"));
    if(apiuapi_UAnimInstance_PlaySlotAnimationAsDynamicMontage){
        apiuapi_UAnimInstance_PlaySlotAnimationAsDynamicMontage(&uapi_UAnimInstance_PlaySlotAnimationAsDynamicMontage);
    }

    auto const apiuapi_UAnimInstance_PostEvaluateAnimation = (uapi_UAnimInstance_PostEvaluateAnimationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_PostEvaluateAnimation_handler\0"));
    if(apiuapi_UAnimInstance_PostEvaluateAnimation){
        apiuapi_UAnimInstance_PostEvaluateAnimation(&uapi_UAnimInstance_PostEvaluateAnimation);
    }

    auto const apiuapi_UAnimInstance_PostInitProperties = (uapi_UAnimInstance_PostInitPropertiesFn)plugin->GetDllExport(TEXT("set_UAnimInstance_PostInitProperties_handler\0"));
    if(apiuapi_UAnimInstance_PostInitProperties){
        apiuapi_UAnimInstance_PostInitProperties(&uapi_UAnimInstance_PostInitProperties);
    }

    auto const apiuapi_UAnimInstance_PostUpdateAnimation = (uapi_UAnimInstance_PostUpdateAnimationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_PostUpdateAnimation_handler\0"));
    if(apiuapi_UAnimInstance_PostUpdateAnimation){
        apiuapi_UAnimInstance_PostUpdateAnimation(&uapi_UAnimInstance_PostUpdateAnimation);
    }

    auto const apiuapi_UAnimInstance_PreEvaluateAnimation = (uapi_UAnimInstance_PreEvaluateAnimationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_PreEvaluateAnimation_handler\0"));
    if(apiuapi_UAnimInstance_PreEvaluateAnimation){
        apiuapi_UAnimInstance_PreEvaluateAnimation(&uapi_UAnimInstance_PreEvaluateAnimation);
    }

    auto const apiuapi_UAnimInstance_PreUpdateLinkedInstances = (uapi_UAnimInstance_PreUpdateLinkedInstancesFn)plugin->GetDllExport(TEXT("set_UAnimInstance_PreUpdateLinkedInstances_handler\0"));
    if(apiuapi_UAnimInstance_PreUpdateLinkedInstances){
        apiuapi_UAnimInstance_PreUpdateLinkedInstances(&uapi_UAnimInstance_PreUpdateLinkedInstances);
    }

    auto const apiuapi_UAnimInstance_QueryAndMarkTransitionEvent = (uapi_UAnimInstance_QueryAndMarkTransitionEventFn)plugin->GetDllExport(TEXT("set_UAnimInstance_QueryAndMarkTransitionEvent_handler\0"));
    if(apiuapi_UAnimInstance_QueryAndMarkTransitionEvent){
        apiuapi_UAnimInstance_QueryAndMarkTransitionEvent(&uapi_UAnimInstance_QueryAndMarkTransitionEvent);
    }

    auto const apiuapi_UAnimInstance_QueryTransitionEvent = (uapi_UAnimInstance_QueryTransitionEventFn)plugin->GetDllExport(TEXT("set_UAnimInstance_QueryTransitionEvent_handler\0"));
    if(apiuapi_UAnimInstance_QueryTransitionEvent){
        apiuapi_UAnimInstance_QueryTransitionEvent(&uapi_UAnimInstance_QueryTransitionEvent);
    }

    auto const apiuapi_UAnimInstance_RecalcRequiredBones = (uapi_UAnimInstance_RecalcRequiredBonesFn)plugin->GetDllExport(TEXT("set_UAnimInstance_RecalcRequiredBones_handler\0"));
    if(apiuapi_UAnimInstance_RecalcRequiredBones){
        apiuapi_UAnimInstance_RecalcRequiredBones(&uapi_UAnimInstance_RecalcRequiredBones);
    }

    auto const apiuapi_UAnimInstance_RecordMachineWeight = (uapi_UAnimInstance_RecordMachineWeightFn)plugin->GetDllExport(TEXT("set_UAnimInstance_RecordMachineWeight_handler\0"));
    if(apiuapi_UAnimInstance_RecordMachineWeight){
        apiuapi_UAnimInstance_RecordMachineWeight(&uapi_UAnimInstance_RecordMachineWeight);
    }

    auto const apiuapi_UAnimInstance_RecordStateWeight = (uapi_UAnimInstance_RecordStateWeightFn)plugin->GetDllExport(TEXT("set_UAnimInstance_RecordStateWeight_handler\0"));
    if(apiuapi_UAnimInstance_RecordStateWeight){
        apiuapi_UAnimInstance_RecordStateWeight(&uapi_UAnimInstance_RecordStateWeight);
    }

    auto const apiuapi_UAnimInstance_RefreshCurves = (uapi_UAnimInstance_RefreshCurvesFn)plugin->GetDllExport(TEXT("set_UAnimInstance_RefreshCurves_handler\0"));
    if(apiuapi_UAnimInstance_RefreshCurves){
        apiuapi_UAnimInstance_RefreshCurves(&uapi_UAnimInstance_RefreshCurves);
    }

    auto const apiuapi_UAnimInstance_RemoveExternalNotifyHandler = (uapi_UAnimInstance_RemoveExternalNotifyHandlerFn)plugin->GetDllExport(TEXT("set_UAnimInstance_RemoveExternalNotifyHandler_handler\0"));
    if(apiuapi_UAnimInstance_RemoveExternalNotifyHandler){
        apiuapi_UAnimInstance_RemoveExternalNotifyHandler(&uapi_UAnimInstance_RemoveExternalNotifyHandler);
    }

    auto const apiuapi_UAnimInstance_RemovePoseSnapshot = (uapi_UAnimInstance_RemovePoseSnapshotFn)plugin->GetDllExport(TEXT("set_UAnimInstance_RemovePoseSnapshot_handler\0"));
    if(apiuapi_UAnimInstance_RemovePoseSnapshot){
        apiuapi_UAnimInstance_RemovePoseSnapshot(&uapi_UAnimInstance_RemovePoseSnapshot);
    }

    auto const apiuapi_UAnimInstance_RequestMontageInertialization = (uapi_UAnimInstance_RequestMontageInertializationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_RequestMontageInertialization_handler\0"));
    if(apiuapi_UAnimInstance_RequestMontageInertialization){
        apiuapi_UAnimInstance_RequestMontageInertialization(&uapi_UAnimInstance_RequestMontageInertialization);
    }

    auto const apiuapi_UAnimInstance_RequestSlotGroupInertialization = (uapi_UAnimInstance_RequestSlotGroupInertializationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_RequestSlotGroupInertialization_handler\0"));
    if(apiuapi_UAnimInstance_RequestSlotGroupInertialization){
        apiuapi_UAnimInstance_RequestSlotGroupInertialization(&uapi_UAnimInstance_RequestSlotGroupInertialization);
    }

    auto const apiuapi_UAnimInstance_SavePoseSnapshot = (uapi_UAnimInstance_SavePoseSnapshotFn)plugin->GetDllExport(TEXT("set_UAnimInstance_SavePoseSnapshot_handler\0"));
    if(apiuapi_UAnimInstance_SavePoseSnapshot){
        apiuapi_UAnimInstance_SavePoseSnapshot(&uapi_UAnimInstance_SavePoseSnapshot);
    }

    auto const apiuapi_UAnimInstance_SetMorphTarget = (uapi_UAnimInstance_SetMorphTargetFn)plugin->GetDllExport(TEXT("set_UAnimInstance_SetMorphTarget_handler\0"));
    if(apiuapi_UAnimInstance_SetMorphTarget){
        apiuapi_UAnimInstance_SetMorphTarget(&uapi_UAnimInstance_SetMorphTarget);
    }

    auto const apiuapi_UAnimInstance_SetPropagateNotifiesToLinkedInstances = (uapi_UAnimInstance_SetPropagateNotifiesToLinkedInstancesFn)plugin->GetDllExport(TEXT("set_UAnimInstance_SetPropagateNotifiesToLinkedInstances_handler\0"));
    if(apiuapi_UAnimInstance_SetPropagateNotifiesToLinkedInstances){
        apiuapi_UAnimInstance_SetPropagateNotifiesToLinkedInstances(&uapi_UAnimInstance_SetPropagateNotifiesToLinkedInstances);
    }

    auto const apiuapi_UAnimInstance_SetReceiveNotifiesFromLinkedInstances = (uapi_UAnimInstance_SetReceiveNotifiesFromLinkedInstancesFn)plugin->GetDllExport(TEXT("set_UAnimInstance_SetReceiveNotifiesFromLinkedInstances_handler\0"));
    if(apiuapi_UAnimInstance_SetReceiveNotifiesFromLinkedInstances){
        apiuapi_UAnimInstance_SetReceiveNotifiesFromLinkedInstances(&uapi_UAnimInstance_SetReceiveNotifiesFromLinkedInstances);
    }

    auto const apiuapi_UAnimInstance_SetUseMainInstanceMontageEvaluationData = (uapi_UAnimInstance_SetUseMainInstanceMontageEvaluationDataFn)plugin->GetDllExport(TEXT("set_UAnimInstance_SetUseMainInstanceMontageEvaluationData_handler\0"));
    if(apiuapi_UAnimInstance_SetUseMainInstanceMontageEvaluationData){
        apiuapi_UAnimInstance_SetUseMainInstanceMontageEvaluationData(&uapi_UAnimInstance_SetUseMainInstanceMontageEvaluationData);
    }

    auto const apiuapi_UAnimInstance_ShouldExtractRootMotion = (uapi_UAnimInstance_ShouldExtractRootMotionFn)plugin->GetDllExport(TEXT("set_UAnimInstance_ShouldExtractRootMotion_handler\0"));
    if(apiuapi_UAnimInstance_ShouldExtractRootMotion){
        apiuapi_UAnimInstance_ShouldExtractRootMotion(&uapi_UAnimInstance_ShouldExtractRootMotion);
    }

    auto const apiuapi_UAnimInstance_ShouldTriggerAnimNotifyState = (uapi_UAnimInstance_ShouldTriggerAnimNotifyStateFn)plugin->GetDllExport(TEXT("set_UAnimInstance_ShouldTriggerAnimNotifyState_handler\0"));
    if(apiuapi_UAnimInstance_ShouldTriggerAnimNotifyState){
        apiuapi_UAnimInstance_ShouldTriggerAnimNotifyState(&uapi_UAnimInstance_ShouldTriggerAnimNotifyState);
    }

    auto const apiuapi_UAnimInstance_StopAllMontages = (uapi_UAnimInstance_StopAllMontagesFn)plugin->GetDllExport(TEXT("set_UAnimInstance_StopAllMontages_handler\0"));
    if(apiuapi_UAnimInstance_StopAllMontages){
        apiuapi_UAnimInstance_StopAllMontages(&uapi_UAnimInstance_StopAllMontages);
    }

    auto const apiuapi_UAnimInstance_StopSlotAnimation = (uapi_UAnimInstance_StopSlotAnimationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_StopSlotAnimation_handler\0"));
    if(apiuapi_UAnimInstance_StopSlotAnimation){
        apiuapi_UAnimInstance_StopSlotAnimation(&uapi_UAnimInstance_StopSlotAnimation);
    }

    auto const apiuapi_UAnimInstance_TriggerAnimNotifies = (uapi_UAnimInstance_TriggerAnimNotifiesFn)plugin->GetDllExport(TEXT("set_UAnimInstance_TriggerAnimNotifies_handler\0"));
    if(apiuapi_UAnimInstance_TriggerAnimNotifies){
        apiuapi_UAnimInstance_TriggerAnimNotifies(&uapi_UAnimInstance_TriggerAnimNotifies);
    }

    auto const apiuapi_UAnimInstance_TriggerSingleAnimNotify = (uapi_UAnimInstance_TriggerSingleAnimNotifyFn)plugin->GetDllExport(TEXT("set_UAnimInstance_TriggerSingleAnimNotify_handler\0"));
    if(apiuapi_UAnimInstance_TriggerSingleAnimNotify){
        apiuapi_UAnimInstance_TriggerSingleAnimNotify(&uapi_UAnimInstance_TriggerSingleAnimNotify);
    }

    auto const apiuapi_UAnimInstance_TryGetPawnOwner = (uapi_UAnimInstance_TryGetPawnOwnerFn)plugin->GetDllExport(TEXT("set_UAnimInstance_TryGetPawnOwner_handler\0"));
    if(apiuapi_UAnimInstance_TryGetPawnOwner){
        apiuapi_UAnimInstance_TryGetPawnOwner(&uapi_UAnimInstance_TryGetPawnOwner);
    }

    auto const apiuapi_UAnimInstance_UninitializeAnimation = (uapi_UAnimInstance_UninitializeAnimationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_UninitializeAnimation_handler\0"));
    if(apiuapi_UAnimInstance_UninitializeAnimation){
        apiuapi_UAnimInstance_UninitializeAnimation(&uapi_UAnimInstance_UninitializeAnimation);
    }

    auto const apiuapi_UAnimInstance_UnlockAIResources = (uapi_UAnimInstance_UnlockAIResourcesFn)plugin->GetDllExport(TEXT("set_UAnimInstance_UnlockAIResources_handler\0"));
    if(apiuapi_UAnimInstance_UnlockAIResources){
        apiuapi_UAnimInstance_UnlockAIResources(&uapi_UAnimInstance_UnlockAIResources);
    }

    auto const apiuapi_UAnimInstance_UpdateCurvesPostEvaluation = (uapi_UAnimInstance_UpdateCurvesPostEvaluationFn)plugin->GetDllExport(TEXT("set_UAnimInstance_UpdateCurvesPostEvaluation_handler\0"));
    if(apiuapi_UAnimInstance_UpdateCurvesPostEvaluation){
        apiuapi_UAnimInstance_UpdateCurvesPostEvaluation(&uapi_UAnimInstance_UpdateCurvesPostEvaluation);
    }

    auto const apiuapi_UAnimInstance_WasAnimNotifyNameTriggeredInAnyState = (uapi_UAnimInstance_WasAnimNotifyNameTriggeredInAnyStateFn)plugin->GetDllExport(TEXT("set_UAnimInstance_WasAnimNotifyNameTriggeredInAnyState_handler\0"));
    if(apiuapi_UAnimInstance_WasAnimNotifyNameTriggeredInAnyState){
        apiuapi_UAnimInstance_WasAnimNotifyNameTriggeredInAnyState(&uapi_UAnimInstance_WasAnimNotifyNameTriggeredInAnyState);
    }

    auto const apiuapi_UAnimInstance_WasAnimNotifyNameTriggeredInSourceState = (uapi_UAnimInstance_WasAnimNotifyNameTriggeredInSourceStateFn)plugin->GetDllExport(TEXT("set_UAnimInstance_WasAnimNotifyNameTriggeredInSourceState_handler\0"));
    if(apiuapi_UAnimInstance_WasAnimNotifyNameTriggeredInSourceState){
        apiuapi_UAnimInstance_WasAnimNotifyNameTriggeredInSourceState(&uapi_UAnimInstance_WasAnimNotifyNameTriggeredInSourceState);
    }

    auto const apiuapi_UAnimInstance_WasAnimNotifyNameTriggeredInStateMachine = (uapi_UAnimInstance_WasAnimNotifyNameTriggeredInStateMachineFn)plugin->GetDllExport(TEXT("set_UAnimInstance_WasAnimNotifyNameTriggeredInStateMachine_handler\0"));
    if(apiuapi_UAnimInstance_WasAnimNotifyNameTriggeredInStateMachine){
        apiuapi_UAnimInstance_WasAnimNotifyNameTriggeredInStateMachine(&uapi_UAnimInstance_WasAnimNotifyNameTriggeredInStateMachine);
    }

    auto const apiuapi_UKismetSystemLibrary_CancelTransaction = (uapi_UKismetSystemLibrary_CancelTransactionFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_CancelTransaction_handler\0"));
    if(apiuapi_UKismetSystemLibrary_CancelTransaction){
        apiuapi_UKismetSystemLibrary_CancelTransaction(&uapi_UKismetSystemLibrary_CancelTransaction);
    }

    auto const apiuapi_UKismetSystemLibrary_CollectGarbage = (uapi_UKismetSystemLibrary_CollectGarbageFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_CollectGarbage_handler\0"));
    if(apiuapi_UKismetSystemLibrary_CollectGarbage){
        apiuapi_UKismetSystemLibrary_CollectGarbage(&uapi_UKismetSystemLibrary_CollectGarbage);
    }

    auto const apiuapi_UKismetSystemLibrary_ControlScreensaver = (uapi_UKismetSystemLibrary_ControlScreensaverFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_ControlScreensaver_handler\0"));
    if(apiuapi_UKismetSystemLibrary_ControlScreensaver){
        apiuapi_UKismetSystemLibrary_ControlScreensaver(&uapi_UKismetSystemLibrary_ControlScreensaver);
    }

    auto const apiuapi_UKismetSystemLibrary_CreateCopyForUndoBuffer = (uapi_UKismetSystemLibrary_CreateCopyForUndoBufferFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_CreateCopyForUndoBuffer_handler\0"));
    if(apiuapi_UKismetSystemLibrary_CreateCopyForUndoBuffer){
        apiuapi_UKismetSystemLibrary_CreateCopyForUndoBuffer(&uapi_UKismetSystemLibrary_CreateCopyForUndoBuffer);
    }

    auto const apiuapi_UKismetSystemLibrary_DrawDebugCoordinateSystem = (uapi_UKismetSystemLibrary_DrawDebugCoordinateSystemFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_DrawDebugCoordinateSystem_handler\0"));
    if(apiuapi_UKismetSystemLibrary_DrawDebugCoordinateSystem){
        apiuapi_UKismetSystemLibrary_DrawDebugCoordinateSystem(&uapi_UKismetSystemLibrary_DrawDebugCoordinateSystem);
    }

    auto const apiuapi_UKismetSystemLibrary_EndTransaction = (uapi_UKismetSystemLibrary_EndTransactionFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_EndTransaction_handler\0"));
    if(apiuapi_UKismetSystemLibrary_EndTransaction){
        apiuapi_UKismetSystemLibrary_EndTransaction(&uapi_UKismetSystemLibrary_EndTransaction);
    }

    auto const apiuapi_UKismetSystemLibrary_FlushDebugStrings = (uapi_UKismetSystemLibrary_FlushDebugStringsFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_FlushDebugStrings_handler\0"));
    if(apiuapi_UKismetSystemLibrary_FlushDebugStrings){
        apiuapi_UKismetSystemLibrary_FlushDebugStrings(&uapi_UKismetSystemLibrary_FlushDebugStrings);
    }

    auto const apiuapi_UKismetSystemLibrary_FlushPersistentDebugLines = (uapi_UKismetSystemLibrary_FlushPersistentDebugLinesFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_FlushPersistentDebugLines_handler\0"));
    if(apiuapi_UKismetSystemLibrary_FlushPersistentDebugLines){
        apiuapi_UKismetSystemLibrary_FlushPersistentDebugLines(&uapi_UKismetSystemLibrary_FlushPersistentDebugLines);
    }

    auto const apiuapi_UKismetSystemLibrary_ForceCloseAdBanner = (uapi_UKismetSystemLibrary_ForceCloseAdBannerFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_ForceCloseAdBanner_handler\0"));
    if(apiuapi_UKismetSystemLibrary_ForceCloseAdBanner){
        apiuapi_UKismetSystemLibrary_ForceCloseAdBanner(&uapi_UKismetSystemLibrary_ForceCloseAdBanner);
    }

    auto const apiuapi_UKismetSystemLibrary_Generic_GetEditorProperty = (uapi_UKismetSystemLibrary_Generic_GetEditorPropertyFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_Generic_GetEditorProperty_handler\0"));
    if(apiuapi_UKismetSystemLibrary_Generic_GetEditorProperty){
        apiuapi_UKismetSystemLibrary_Generic_GetEditorProperty(&uapi_UKismetSystemLibrary_Generic_GetEditorProperty);
    }

    auto const apiuapi_UKismetSystemLibrary_Generic_SetStructurePropertyByName = (uapi_UKismetSystemLibrary_Generic_SetStructurePropertyByNameFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_Generic_SetStructurePropertyByName_handler\0"));
    if(apiuapi_UKismetSystemLibrary_Generic_SetStructurePropertyByName){
        apiuapi_UKismetSystemLibrary_Generic_SetStructurePropertyByName(&uapi_UKismetSystemLibrary_Generic_SetStructurePropertyByName);
    }

    auto const apiuapi_UKismetSystemLibrary_GetAdIDCount = (uapi_UKismetSystemLibrary_GetAdIDCountFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetAdIDCount_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetAdIDCount){
        apiuapi_UKismetSystemLibrary_GetAdIDCount(&uapi_UKismetSystemLibrary_GetAdIDCount);
    }

    auto const apiuapi_UKismetSystemLibrary_GetBuildConfiguration = (uapi_UKismetSystemLibrary_GetBuildConfigurationFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetBuildConfiguration_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetBuildConfiguration){
        apiuapi_UKismetSystemLibrary_GetBuildConfiguration(&uapi_UKismetSystemLibrary_GetBuildConfiguration);
    }

    auto const apiuapi_UKismetSystemLibrary_GetBuildVersion = (uapi_UKismetSystemLibrary_GetBuildVersionFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetBuildVersion_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetBuildVersion){
        apiuapi_UKismetSystemLibrary_GetBuildVersion(&uapi_UKismetSystemLibrary_GetBuildVersion);
    }

    auto const apiuapi_UKismetSystemLibrary_GetClassDisplayName = (uapi_UKismetSystemLibrary_GetClassDisplayNameFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetClassDisplayName_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetClassDisplayName){
        apiuapi_UKismetSystemLibrary_GetClassDisplayName(&uapi_UKismetSystemLibrary_GetClassDisplayName);
    }

    auto const apiuapi_UKismetSystemLibrary_GetCommandLine = (uapi_UKismetSystemLibrary_GetCommandLineFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetCommandLine_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetCommandLine){
        apiuapi_UKismetSystemLibrary_GetCommandLine(&uapi_UKismetSystemLibrary_GetCommandLine);
    }

    auto const apiuapi_UKismetSystemLibrary_GetDefaultLanguage = (uapi_UKismetSystemLibrary_GetDefaultLanguageFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetDefaultLanguage_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetDefaultLanguage){
        apiuapi_UKismetSystemLibrary_GetDefaultLanguage(&uapi_UKismetSystemLibrary_GetDefaultLanguage);
    }

    auto const apiuapi_UKismetSystemLibrary_GetDefaultLocale = (uapi_UKismetSystemLibrary_GetDefaultLocaleFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetDefaultLocale_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetDefaultLocale){
        apiuapi_UKismetSystemLibrary_GetDefaultLocale(&uapi_UKismetSystemLibrary_GetDefaultLocale);
    }

    auto const apiuapi_UKismetSystemLibrary_GetDeviceId = (uapi_UKismetSystemLibrary_GetDeviceIdFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetDeviceId_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetDeviceId){
        apiuapi_UKismetSystemLibrary_GetDeviceId(&uapi_UKismetSystemLibrary_GetDeviceId);
    }

    auto const apiuapi_UKismetSystemLibrary_GetDisplayName = (uapi_UKismetSystemLibrary_GetDisplayNameFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetDisplayName_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetDisplayName){
        apiuapi_UKismetSystemLibrary_GetDisplayName(&uapi_UKismetSystemLibrary_GetDisplayName);
    }

    auto const apiuapi_UKismetSystemLibrary_GetEditorProperty = (uapi_UKismetSystemLibrary_GetEditorPropertyFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetEditorProperty_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetEditorProperty){
        apiuapi_UKismetSystemLibrary_GetEditorProperty(&uapi_UKismetSystemLibrary_GetEditorProperty);
    }

    auto const apiuapi_UKismetSystemLibrary_GetEngineVersion = (uapi_UKismetSystemLibrary_GetEngineVersionFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetEngineVersion_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetEngineVersion){
        apiuapi_UKismetSystemLibrary_GetEngineVersion(&uapi_UKismetSystemLibrary_GetEngineVersion);
    }

    auto const apiuapi_UKismetSystemLibrary_GetFrameCount = (uapi_UKismetSystemLibrary_GetFrameCountFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetFrameCount_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetFrameCount){
        apiuapi_UKismetSystemLibrary_GetFrameCount(&uapi_UKismetSystemLibrary_GetFrameCount);
    }

    auto const apiuapi_UKismetSystemLibrary_GetGameBundleId = (uapi_UKismetSystemLibrary_GetGameBundleIdFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetGameBundleId_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetGameBundleId){
        apiuapi_UKismetSystemLibrary_GetGameBundleId(&uapi_UKismetSystemLibrary_GetGameBundleId);
    }

    auto const apiuapi_UKismetSystemLibrary_GetGameName = (uapi_UKismetSystemLibrary_GetGameNameFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetGameName_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetGameName){
        apiuapi_UKismetSystemLibrary_GetGameName(&uapi_UKismetSystemLibrary_GetGameName);
    }

    auto const apiuapi_UKismetSystemLibrary_GetGameTimeInSeconds = (uapi_UKismetSystemLibrary_GetGameTimeInSecondsFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetGameTimeInSeconds_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetGameTimeInSeconds){
        apiuapi_UKismetSystemLibrary_GetGameTimeInSeconds(&uapi_UKismetSystemLibrary_GetGameTimeInSeconds);
    }

    auto const apiuapi_UKismetSystemLibrary_GetGamepadControllerName = (uapi_UKismetSystemLibrary_GetGamepadControllerNameFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetGamepadControllerName_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetGamepadControllerName){
        apiuapi_UKismetSystemLibrary_GetGamepadControllerName(&uapi_UKismetSystemLibrary_GetGamepadControllerName);
    }

    auto const apiuapi_UKismetSystemLibrary_GetLocalCurrencyCode = (uapi_UKismetSystemLibrary_GetLocalCurrencyCodeFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetLocalCurrencyCode_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetLocalCurrencyCode){
        apiuapi_UKismetSystemLibrary_GetLocalCurrencyCode(&uapi_UKismetSystemLibrary_GetLocalCurrencyCode);
    }

    auto const apiuapi_UKismetSystemLibrary_GetLocalCurrencySymbol = (uapi_UKismetSystemLibrary_GetLocalCurrencySymbolFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetLocalCurrencySymbol_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetLocalCurrencySymbol){
        apiuapi_UKismetSystemLibrary_GetLocalCurrencySymbol(&uapi_UKismetSystemLibrary_GetLocalCurrencySymbol);
    }

    auto const apiuapi_UKismetSystemLibrary_GetMinYResolutionFor3DView = (uapi_UKismetSystemLibrary_GetMinYResolutionFor3DViewFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetMinYResolutionFor3DView_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetMinYResolutionFor3DView){
        apiuapi_UKismetSystemLibrary_GetMinYResolutionFor3DView(&uapi_UKismetSystemLibrary_GetMinYResolutionFor3DView);
    }

    auto const apiuapi_UKismetSystemLibrary_GetMinYResolutionForUI = (uapi_UKismetSystemLibrary_GetMinYResolutionForUIFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetMinYResolutionForUI_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetMinYResolutionForUI){
        apiuapi_UKismetSystemLibrary_GetMinYResolutionForUI(&uapi_UKismetSystemLibrary_GetMinYResolutionForUI);
    }

    auto const apiuapi_UKismetSystemLibrary_GetObjectName = (uapi_UKismetSystemLibrary_GetObjectNameFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetObjectName_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetObjectName){
        apiuapi_UKismetSystemLibrary_GetObjectName(&uapi_UKismetSystemLibrary_GetObjectName);
    }

    auto const apiuapi_UKismetSystemLibrary_GetOuterObject = (uapi_UKismetSystemLibrary_GetOuterObjectFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetOuterObject_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetOuterObject){
        apiuapi_UKismetSystemLibrary_GetOuterObject(&uapi_UKismetSystemLibrary_GetOuterObject);
    }

    auto const apiuapi_UKismetSystemLibrary_GetPathName = (uapi_UKismetSystemLibrary_GetPathNameFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetPathName_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetPathName){
        apiuapi_UKismetSystemLibrary_GetPathName(&uapi_UKismetSystemLibrary_GetPathName);
    }

    auto const apiuapi_UKismetSystemLibrary_GetPlatformUserDir = (uapi_UKismetSystemLibrary_GetPlatformUserDirFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetPlatformUserDir_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetPlatformUserDir){
        apiuapi_UKismetSystemLibrary_GetPlatformUserDir(&uapi_UKismetSystemLibrary_GetPlatformUserDir);
    }

    auto const apiuapi_UKismetSystemLibrary_GetPlatformUserName = (uapi_UKismetSystemLibrary_GetPlatformUserNameFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetPlatformUserName_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetPlatformUserName){
        apiuapi_UKismetSystemLibrary_GetPlatformUserName(&uapi_UKismetSystemLibrary_GetPlatformUserName);
    }

    auto const apiuapi_UKismetSystemLibrary_GetProjectContentDirectory = (uapi_UKismetSystemLibrary_GetProjectContentDirectoryFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetProjectContentDirectory_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetProjectContentDirectory){
        apiuapi_UKismetSystemLibrary_GetProjectContentDirectory(&uapi_UKismetSystemLibrary_GetProjectContentDirectory);
    }

    auto const apiuapi_UKismetSystemLibrary_GetProjectDirectory = (uapi_UKismetSystemLibrary_GetProjectDirectoryFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetProjectDirectory_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetProjectDirectory){
        apiuapi_UKismetSystemLibrary_GetProjectDirectory(&uapi_UKismetSystemLibrary_GetProjectDirectory);
    }

    auto const apiuapi_UKismetSystemLibrary_GetProjectSavedDirectory = (uapi_UKismetSystemLibrary_GetProjectSavedDirectoryFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetProjectSavedDirectory_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetProjectSavedDirectory){
        apiuapi_UKismetSystemLibrary_GetProjectSavedDirectory(&uapi_UKismetSystemLibrary_GetProjectSavedDirectory);
    }

    auto const apiuapi_UKismetSystemLibrary_GetRenderingDetailMode = (uapi_UKismetSystemLibrary_GetRenderingDetailModeFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetRenderingDetailMode_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetRenderingDetailMode){
        apiuapi_UKismetSystemLibrary_GetRenderingDetailMode(&uapi_UKismetSystemLibrary_GetRenderingDetailMode);
    }

    auto const apiuapi_UKismetSystemLibrary_GetRenderingMaterialQualityLevel = (uapi_UKismetSystemLibrary_GetRenderingMaterialQualityLevelFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetRenderingMaterialQualityLevel_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetRenderingMaterialQualityLevel){
        apiuapi_UKismetSystemLibrary_GetRenderingMaterialQualityLevel(&uapi_UKismetSystemLibrary_GetRenderingMaterialQualityLevel);
    }

    auto const apiuapi_UKismetSystemLibrary_GetSystemPath = (uapi_UKismetSystemLibrary_GetSystemPathFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetSystemPath_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetSystemPath){
        apiuapi_UKismetSystemLibrary_GetSystemPath(&uapi_UKismetSystemLibrary_GetSystemPath);
    }

    auto const apiuapi_UKismetSystemLibrary_GetUniqueDeviceId = (uapi_UKismetSystemLibrary_GetUniqueDeviceIdFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetUniqueDeviceId_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetUniqueDeviceId){
        apiuapi_UKismetSystemLibrary_GetUniqueDeviceId(&uapi_UKismetSystemLibrary_GetUniqueDeviceId);
    }

    auto const apiuapi_UKismetSystemLibrary_GetVolumeButtonsHandledBySystem = (uapi_UKismetSystemLibrary_GetVolumeButtonsHandledBySystemFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_GetVolumeButtonsHandledBySystem_handler\0"));
    if(apiuapi_UKismetSystemLibrary_GetVolumeButtonsHandledBySystem){
        apiuapi_UKismetSystemLibrary_GetVolumeButtonsHandledBySystem(&uapi_UKismetSystemLibrary_GetVolumeButtonsHandledBySystem);
    }

    auto const apiuapi_UKismetSystemLibrary_HasMultipleLocalPlayers = (uapi_UKismetSystemLibrary_HasMultipleLocalPlayersFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_HasMultipleLocalPlayers_handler\0"));
    if(apiuapi_UKismetSystemLibrary_HasMultipleLocalPlayers){
        apiuapi_UKismetSystemLibrary_HasMultipleLocalPlayers(&uapi_UKismetSystemLibrary_HasMultipleLocalPlayers);
    }

    auto const apiuapi_UKismetSystemLibrary_HideAdBanner = (uapi_UKismetSystemLibrary_HideAdBannerFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_HideAdBanner_handler\0"));
    if(apiuapi_UKismetSystemLibrary_HideAdBanner){
        apiuapi_UKismetSystemLibrary_HideAdBanner(&uapi_UKismetSystemLibrary_HideAdBanner);
    }

    auto const apiuapi_UKismetSystemLibrary_IsControllerAssignedToGamepad = (uapi_UKismetSystemLibrary_IsControllerAssignedToGamepadFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_IsControllerAssignedToGamepad_handler\0"));
    if(apiuapi_UKismetSystemLibrary_IsControllerAssignedToGamepad){
        apiuapi_UKismetSystemLibrary_IsControllerAssignedToGamepad(&uapi_UKismetSystemLibrary_IsControllerAssignedToGamepad);
    }

    auto const apiuapi_UKismetSystemLibrary_IsDedicatedServer = (uapi_UKismetSystemLibrary_IsDedicatedServerFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_IsDedicatedServer_handler\0"));
    if(apiuapi_UKismetSystemLibrary_IsDedicatedServer){
        apiuapi_UKismetSystemLibrary_IsDedicatedServer(&uapi_UKismetSystemLibrary_IsDedicatedServer);
    }

    auto const apiuapi_UKismetSystemLibrary_IsInterstitialAdAvailable = (uapi_UKismetSystemLibrary_IsInterstitialAdAvailableFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_IsInterstitialAdAvailable_handler\0"));
    if(apiuapi_UKismetSystemLibrary_IsInterstitialAdAvailable){
        apiuapi_UKismetSystemLibrary_IsInterstitialAdAvailable(&uapi_UKismetSystemLibrary_IsInterstitialAdAvailable);
    }

    auto const apiuapi_UKismetSystemLibrary_IsInterstitialAdRequested = (uapi_UKismetSystemLibrary_IsInterstitialAdRequestedFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_IsInterstitialAdRequested_handler\0"));
    if(apiuapi_UKismetSystemLibrary_IsInterstitialAdRequested){
        apiuapi_UKismetSystemLibrary_IsInterstitialAdRequested(&uapi_UKismetSystemLibrary_IsInterstitialAdRequested);
    }

    auto const apiuapi_UKismetSystemLibrary_IsLoggedIn = (uapi_UKismetSystemLibrary_IsLoggedInFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_IsLoggedIn_handler\0"));
    if(apiuapi_UKismetSystemLibrary_IsLoggedIn){
        apiuapi_UKismetSystemLibrary_IsLoggedIn(&uapi_UKismetSystemLibrary_IsLoggedIn);
    }

    auto const apiuapi_UKismetSystemLibrary_IsPackagedForDistribution = (uapi_UKismetSystemLibrary_IsPackagedForDistributionFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_IsPackagedForDistribution_handler\0"));
    if(apiuapi_UKismetSystemLibrary_IsPackagedForDistribution){
        apiuapi_UKismetSystemLibrary_IsPackagedForDistribution(&uapi_UKismetSystemLibrary_IsPackagedForDistribution);
    }

    auto const apiuapi_UKismetSystemLibrary_IsScreensaverEnabled = (uapi_UKismetSystemLibrary_IsScreensaverEnabledFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_IsScreensaverEnabled_handler\0"));
    if(apiuapi_UKismetSystemLibrary_IsScreensaverEnabled){
        apiuapi_UKismetSystemLibrary_IsScreensaverEnabled(&uapi_UKismetSystemLibrary_IsScreensaverEnabled);
    }

    auto const apiuapi_UKismetSystemLibrary_IsServer = (uapi_UKismetSystemLibrary_IsServerFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_IsServer_handler\0"));
    if(apiuapi_UKismetSystemLibrary_IsServer){
        apiuapi_UKismetSystemLibrary_IsServer(&uapi_UKismetSystemLibrary_IsServer);
    }

    auto const apiuapi_UKismetSystemLibrary_IsStandalone = (uapi_UKismetSystemLibrary_IsStandaloneFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_IsStandalone_handler\0"));
    if(apiuapi_UKismetSystemLibrary_IsStandalone){
        apiuapi_UKismetSystemLibrary_IsStandalone(&uapi_UKismetSystemLibrary_IsStandalone);
    }

    auto const apiuapi_UKismetSystemLibrary_IsUnattended = (uapi_UKismetSystemLibrary_IsUnattendedFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_IsUnattended_handler\0"));
    if(apiuapi_UKismetSystemLibrary_IsUnattended){
        apiuapi_UKismetSystemLibrary_IsUnattended(&uapi_UKismetSystemLibrary_IsUnattended);
    }

    auto const apiuapi_UKismetSystemLibrary_K2_ClearTimer = (uapi_UKismetSystemLibrary_K2_ClearTimerFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_K2_ClearTimer_handler\0"));
    if(apiuapi_UKismetSystemLibrary_K2_ClearTimer){
        apiuapi_UKismetSystemLibrary_K2_ClearTimer(&uapi_UKismetSystemLibrary_K2_ClearTimer);
    }

    auto const apiuapi_UKismetSystemLibrary_K2_GetTimerElapsedTime = (uapi_UKismetSystemLibrary_K2_GetTimerElapsedTimeFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_K2_GetTimerElapsedTime_handler\0"));
    if(apiuapi_UKismetSystemLibrary_K2_GetTimerElapsedTime){
        apiuapi_UKismetSystemLibrary_K2_GetTimerElapsedTime(&uapi_UKismetSystemLibrary_K2_GetTimerElapsedTime);
    }

    auto const apiuapi_UKismetSystemLibrary_K2_GetTimerRemainingTime = (uapi_UKismetSystemLibrary_K2_GetTimerRemainingTimeFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_K2_GetTimerRemainingTime_handler\0"));
    if(apiuapi_UKismetSystemLibrary_K2_GetTimerRemainingTime){
        apiuapi_UKismetSystemLibrary_K2_GetTimerRemainingTime(&uapi_UKismetSystemLibrary_K2_GetTimerRemainingTime);
    }

    auto const apiuapi_UKismetSystemLibrary_K2_IsTimerActive = (uapi_UKismetSystemLibrary_K2_IsTimerActiveFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_K2_IsTimerActive_handler\0"));
    if(apiuapi_UKismetSystemLibrary_K2_IsTimerActive){
        apiuapi_UKismetSystemLibrary_K2_IsTimerActive(&uapi_UKismetSystemLibrary_K2_IsTimerActive);
    }

    auto const apiuapi_UKismetSystemLibrary_K2_IsTimerPaused = (uapi_UKismetSystemLibrary_K2_IsTimerPausedFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_K2_IsTimerPaused_handler\0"));
    if(apiuapi_UKismetSystemLibrary_K2_IsTimerPaused){
        apiuapi_UKismetSystemLibrary_K2_IsTimerPaused(&uapi_UKismetSystemLibrary_K2_IsTimerPaused);
    }

    auto const apiuapi_UKismetSystemLibrary_K2_PauseTimer = (uapi_UKismetSystemLibrary_K2_PauseTimerFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_K2_PauseTimer_handler\0"));
    if(apiuapi_UKismetSystemLibrary_K2_PauseTimer){
        apiuapi_UKismetSystemLibrary_K2_PauseTimer(&uapi_UKismetSystemLibrary_K2_PauseTimer);
    }

    auto const apiuapi_UKismetSystemLibrary_K2_TimerExists = (uapi_UKismetSystemLibrary_K2_TimerExistsFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_K2_TimerExists_handler\0"));
    if(apiuapi_UKismetSystemLibrary_K2_TimerExists){
        apiuapi_UKismetSystemLibrary_K2_TimerExists(&uapi_UKismetSystemLibrary_K2_TimerExists);
    }

    auto const apiuapi_UKismetSystemLibrary_K2_UnPauseTimer = (uapi_UKismetSystemLibrary_K2_UnPauseTimerFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_K2_UnPauseTimer_handler\0"));
    if(apiuapi_UKismetSystemLibrary_K2_UnPauseTimer){
        apiuapi_UKismetSystemLibrary_K2_UnPauseTimer(&uapi_UKismetSystemLibrary_K2_UnPauseTimer);
    }

    auto const apiuapi_UKismetSystemLibrary_LoadInterstitialAd = (uapi_UKismetSystemLibrary_LoadInterstitialAdFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_LoadInterstitialAd_handler\0"));
    if(apiuapi_UKismetSystemLibrary_LoadInterstitialAd){
        apiuapi_UKismetSystemLibrary_LoadInterstitialAd(&uapi_UKismetSystemLibrary_LoadInterstitialAd);
    }

    auto const apiuapi_UKismetSystemLibrary_MakeLiteralBool = (uapi_UKismetSystemLibrary_MakeLiteralBoolFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_MakeLiteralBool_handler\0"));
    if(apiuapi_UKismetSystemLibrary_MakeLiteralBool){
        apiuapi_UKismetSystemLibrary_MakeLiteralBool(&uapi_UKismetSystemLibrary_MakeLiteralBool);
    }

    auto const apiuapi_UKismetSystemLibrary_MakeLiteralByte = (uapi_UKismetSystemLibrary_MakeLiteralByteFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_MakeLiteralByte_handler\0"));
    if(apiuapi_UKismetSystemLibrary_MakeLiteralByte){
        apiuapi_UKismetSystemLibrary_MakeLiteralByte(&uapi_UKismetSystemLibrary_MakeLiteralByte);
    }

    auto const apiuapi_UKismetSystemLibrary_MakeLiteralDouble = (uapi_UKismetSystemLibrary_MakeLiteralDoubleFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_MakeLiteralDouble_handler\0"));
    if(apiuapi_UKismetSystemLibrary_MakeLiteralDouble){
        apiuapi_UKismetSystemLibrary_MakeLiteralDouble(&uapi_UKismetSystemLibrary_MakeLiteralDouble);
    }

    auto const apiuapi_UKismetSystemLibrary_MakeLiteralInt = (uapi_UKismetSystemLibrary_MakeLiteralIntFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_MakeLiteralInt_handler\0"));
    if(apiuapi_UKismetSystemLibrary_MakeLiteralInt){
        apiuapi_UKismetSystemLibrary_MakeLiteralInt(&uapi_UKismetSystemLibrary_MakeLiteralInt);
    }

    auto const apiuapi_UKismetSystemLibrary_MakeLiteralInt64 = (uapi_UKismetSystemLibrary_MakeLiteralInt64Fn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_MakeLiteralInt64_handler\0"));
    if(apiuapi_UKismetSystemLibrary_MakeLiteralInt64){
        apiuapi_UKismetSystemLibrary_MakeLiteralInt64(&uapi_UKismetSystemLibrary_MakeLiteralInt64);
    }

    auto const apiuapi_UKismetSystemLibrary_MakeLiteralName = (uapi_UKismetSystemLibrary_MakeLiteralNameFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_MakeLiteralName_handler\0"));
    if(apiuapi_UKismetSystemLibrary_MakeLiteralName){
        apiuapi_UKismetSystemLibrary_MakeLiteralName(&uapi_UKismetSystemLibrary_MakeLiteralName);
    }

    auto const apiuapi_UKismetSystemLibrary_MakeLiteralString = (uapi_UKismetSystemLibrary_MakeLiteralStringFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_MakeLiteralString_handler\0"));
    if(apiuapi_UKismetSystemLibrary_MakeLiteralString){
        apiuapi_UKismetSystemLibrary_MakeLiteralString(&uapi_UKismetSystemLibrary_MakeLiteralString);
    }

    auto const apiuapi_UKismetSystemLibrary_MakeLiteralText = (uapi_UKismetSystemLibrary_MakeLiteralTextFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_MakeLiteralText_handler\0"));
    if(apiuapi_UKismetSystemLibrary_MakeLiteralText){
        apiuapi_UKismetSystemLibrary_MakeLiteralText(&uapi_UKismetSystemLibrary_MakeLiteralText);
    }

    auto const apiuapi_UKismetSystemLibrary_QuitEditor = (uapi_UKismetSystemLibrary_QuitEditorFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_QuitEditor_handler\0"));
    if(apiuapi_UKismetSystemLibrary_QuitEditor){
        apiuapi_UKismetSystemLibrary_QuitEditor(&uapi_UKismetSystemLibrary_QuitEditor);
    }

    auto const apiuapi_UKismetSystemLibrary_RegisterForRemoteNotifications = (uapi_UKismetSystemLibrary_RegisterForRemoteNotificationsFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_RegisterForRemoteNotifications_handler\0"));
    if(apiuapi_UKismetSystemLibrary_RegisterForRemoteNotifications){
        apiuapi_UKismetSystemLibrary_RegisterForRemoteNotifications(&uapi_UKismetSystemLibrary_RegisterForRemoteNotifications);
    }

    auto const apiuapi_UKismetSystemLibrary_ResetGamepadAssignmentToController = (uapi_UKismetSystemLibrary_ResetGamepadAssignmentToControllerFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_ResetGamepadAssignmentToController_handler\0"));
    if(apiuapi_UKismetSystemLibrary_ResetGamepadAssignmentToController){
        apiuapi_UKismetSystemLibrary_ResetGamepadAssignmentToController(&uapi_UKismetSystemLibrary_ResetGamepadAssignmentToController);
    }

    auto const apiuapi_UKismetSystemLibrary_ResetGamepadAssignments = (uapi_UKismetSystemLibrary_ResetGamepadAssignmentsFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_ResetGamepadAssignments_handler\0"));
    if(apiuapi_UKismetSystemLibrary_ResetGamepadAssignments){
        apiuapi_UKismetSystemLibrary_ResetGamepadAssignments(&uapi_UKismetSystemLibrary_ResetGamepadAssignments);
    }

    auto const apiuapi_UKismetSystemLibrary_SetBoolPropertyByName = (uapi_UKismetSystemLibrary_SetBoolPropertyByNameFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_SetBoolPropertyByName_handler\0"));
    if(apiuapi_UKismetSystemLibrary_SetBoolPropertyByName){
        apiuapi_UKismetSystemLibrary_SetBoolPropertyByName(&uapi_UKismetSystemLibrary_SetBoolPropertyByName);
    }

    auto const apiuapi_UKismetSystemLibrary_SetBytePropertyByName = (uapi_UKismetSystemLibrary_SetBytePropertyByNameFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_SetBytePropertyByName_handler\0"));
    if(apiuapi_UKismetSystemLibrary_SetBytePropertyByName){
        apiuapi_UKismetSystemLibrary_SetBytePropertyByName(&uapi_UKismetSystemLibrary_SetBytePropertyByName);
    }

    auto const apiuapi_UKismetSystemLibrary_SetDoublePropertyByName = (uapi_UKismetSystemLibrary_SetDoublePropertyByNameFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_SetDoublePropertyByName_handler\0"));
    if(apiuapi_UKismetSystemLibrary_SetDoublePropertyByName){
        apiuapi_UKismetSystemLibrary_SetDoublePropertyByName(&uapi_UKismetSystemLibrary_SetDoublePropertyByName);
    }

    auto const apiuapi_UKismetSystemLibrary_SetGamepadsBlockDeviceFeedback = (uapi_UKismetSystemLibrary_SetGamepadsBlockDeviceFeedbackFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_SetGamepadsBlockDeviceFeedback_handler\0"));
    if(apiuapi_UKismetSystemLibrary_SetGamepadsBlockDeviceFeedback){
        apiuapi_UKismetSystemLibrary_SetGamepadsBlockDeviceFeedback(&uapi_UKismetSystemLibrary_SetGamepadsBlockDeviceFeedback);
    }

    auto const apiuapi_UKismetSystemLibrary_SetInt64PropertyByName = (uapi_UKismetSystemLibrary_SetInt64PropertyByNameFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_SetInt64PropertyByName_handler\0"));
    if(apiuapi_UKismetSystemLibrary_SetInt64PropertyByName){
        apiuapi_UKismetSystemLibrary_SetInt64PropertyByName(&uapi_UKismetSystemLibrary_SetInt64PropertyByName);
    }

    auto const apiuapi_UKismetSystemLibrary_SetIntPropertyByName = (uapi_UKismetSystemLibrary_SetIntPropertyByNameFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_SetIntPropertyByName_handler\0"));
    if(apiuapi_UKismetSystemLibrary_SetIntPropertyByName){
        apiuapi_UKismetSystemLibrary_SetIntPropertyByName(&uapi_UKismetSystemLibrary_SetIntPropertyByName);
    }

    auto const apiuapi_UKismetSystemLibrary_SetObjectPropertyByName = (uapi_UKismetSystemLibrary_SetObjectPropertyByNameFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_SetObjectPropertyByName_handler\0"));
    if(apiuapi_UKismetSystemLibrary_SetObjectPropertyByName){
        apiuapi_UKismetSystemLibrary_SetObjectPropertyByName(&uapi_UKismetSystemLibrary_SetObjectPropertyByName);
    }

    auto const apiuapi_UKismetSystemLibrary_SetSuppressViewportTransitionMessage = (uapi_UKismetSystemLibrary_SetSuppressViewportTransitionMessageFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_SetSuppressViewportTransitionMessage_handler\0"));
    if(apiuapi_UKismetSystemLibrary_SetSuppressViewportTransitionMessage){
        apiuapi_UKismetSystemLibrary_SetSuppressViewportTransitionMessage(&uapi_UKismetSystemLibrary_SetSuppressViewportTransitionMessage);
    }

    auto const apiuapi_UKismetSystemLibrary_SetVolumeButtonsHandledBySystem = (uapi_UKismetSystemLibrary_SetVolumeButtonsHandledBySystemFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_SetVolumeButtonsHandledBySystem_handler\0"));
    if(apiuapi_UKismetSystemLibrary_SetVolumeButtonsHandledBySystem){
        apiuapi_UKismetSystemLibrary_SetVolumeButtonsHandledBySystem(&uapi_UKismetSystemLibrary_SetVolumeButtonsHandledBySystem);
    }

    auto const apiuapi_UKismetSystemLibrary_ShowAdBanner = (uapi_UKismetSystemLibrary_ShowAdBannerFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_ShowAdBanner_handler\0"));
    if(apiuapi_UKismetSystemLibrary_ShowAdBanner){
        apiuapi_UKismetSystemLibrary_ShowAdBanner(&uapi_UKismetSystemLibrary_ShowAdBanner);
    }

    auto const apiuapi_UKismetSystemLibrary_ShowInterstitialAd = (uapi_UKismetSystemLibrary_ShowInterstitialAdFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_ShowInterstitialAd_handler\0"));
    if(apiuapi_UKismetSystemLibrary_ShowInterstitialAd){
        apiuapi_UKismetSystemLibrary_ShowInterstitialAd(&uapi_UKismetSystemLibrary_ShowInterstitialAd);
    }

    auto const apiuapi_UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreen = (uapi_UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreenFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreen_handler\0"));
    if(apiuapi_UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreen){
        apiuapi_UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreen(&uapi_UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreen);
    }

    auto const apiuapi_UKismetSystemLibrary_SnapshotObject = (uapi_UKismetSystemLibrary_SnapshotObjectFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_SnapshotObject_handler\0"));
    if(apiuapi_UKismetSystemLibrary_SnapshotObject){
        apiuapi_UKismetSystemLibrary_SnapshotObject(&uapi_UKismetSystemLibrary_SnapshotObject);
    }

    auto const apiuapi_UKismetSystemLibrary_TransactObject = (uapi_UKismetSystemLibrary_TransactObjectFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_TransactObject_handler\0"));
    if(apiuapi_UKismetSystemLibrary_TransactObject){
        apiuapi_UKismetSystemLibrary_TransactObject(&uapi_UKismetSystemLibrary_TransactObject);
    }

    auto const apiuapi_UKismetSystemLibrary_UnregisterForRemoteNotifications = (uapi_UKismetSystemLibrary_UnregisterForRemoteNotificationsFn)plugin->GetDllExport(TEXT("set_UKismetSystemLibrary_UnregisterForRemoteNotifications_handler\0"));
    if(apiuapi_UKismetSystemLibrary_UnregisterForRemoteNotifications){
        apiuapi_UKismetSystemLibrary_UnregisterForRemoteNotifications(&uapi_UKismetSystemLibrary_UnregisterForRemoteNotifications);
    }

    auto const apiuapi_UAnimMontage_AddAnimCompositeSection = (uapi_UAnimMontage_AddAnimCompositeSectionFn)plugin->GetDllExport(TEXT("set_UAnimMontage_AddAnimCompositeSection_handler\0"));
    if(apiuapi_UAnimMontage_AddAnimCompositeSection){
        apiuapi_UAnimMontage_AddAnimCompositeSection(&uapi_UAnimMontage_AddAnimCompositeSection);
    }

    auto const apiuapi_UAnimMontage_CalculateSequenceLength = (uapi_UAnimMontage_CalculateSequenceLengthFn)plugin->GetDllExport(TEXT("set_UAnimMontage_CalculateSequenceLength_handler\0"));
    if(apiuapi_UAnimMontage_CalculateSequenceLength){
        apiuapi_UAnimMontage_CalculateSequenceLength(&uapi_UAnimMontage_CalculateSequenceLength);
    }

    auto const apiuapi_UAnimMontage_CanBeUsedInComposition = (uapi_UAnimMontage_CanBeUsedInCompositionFn)plugin->GetDllExport(TEXT("set_UAnimMontage_CanBeUsedInComposition_handler\0"));
    if(apiuapi_UAnimMontage_CanBeUsedInComposition){
        apiuapi_UAnimMontage_CanBeUsedInComposition(&uapi_UAnimMontage_CanBeUsedInComposition);
    }

    auto const apiuapi_UAnimMontage_CanUseMarkerSync = (uapi_UAnimMontage_CanUseMarkerSyncFn)plugin->GetDllExport(TEXT("set_UAnimMontage_CanUseMarkerSync_handler\0"));
    if(apiuapi_UAnimMontage_CanUseMarkerSync){
        apiuapi_UAnimMontage_CanUseMarkerSync(&uapi_UAnimMontage_CanUseMarkerSync);
    }

    auto const apiuapi_UAnimMontage_CreateSlotAnimationAsDynamicMontage = (uapi_UAnimMontage_CreateSlotAnimationAsDynamicMontageFn)plugin->GetDllExport(TEXT("set_UAnimMontage_CreateSlotAnimationAsDynamicMontage_handler\0"));
    if(apiuapi_UAnimMontage_CreateSlotAnimationAsDynamicMontage){
        apiuapi_UAnimMontage_CreateSlotAnimationAsDynamicMontage(&uapi_UAnimMontage_CreateSlotAnimationAsDynamicMontage);
    }

    auto const apiuapi_UAnimMontage_DeleteAnimCompositeSection = (uapi_UAnimMontage_DeleteAnimCompositeSectionFn)plugin->GetDllExport(TEXT("set_UAnimMontage_DeleteAnimCompositeSection_handler\0"));
    if(apiuapi_UAnimMontage_DeleteAnimCompositeSection){
        apiuapi_UAnimMontage_DeleteAnimCompositeSection(&uapi_UAnimMontage_DeleteAnimCompositeSection);
    }

    auto const apiuapi_UAnimMontage_ExtractRootMotionFromTrackRange = (uapi_UAnimMontage_ExtractRootMotionFromTrackRangeFn)plugin->GetDllExport(TEXT("set_UAnimMontage_ExtractRootMotionFromTrackRange_handler\0"));
    if(apiuapi_UAnimMontage_ExtractRootMotionFromTrackRange){
        apiuapi_UAnimMontage_ExtractRootMotionFromTrackRange(&uapi_UAnimMontage_ExtractRootMotionFromTrackRange);
    }

    auto const apiuapi_UAnimMontage_GetAnimCompositeSectionIndexFromPos = (uapi_UAnimMontage_GetAnimCompositeSectionIndexFromPosFn)plugin->GetDllExport(TEXT("set_UAnimMontage_GetAnimCompositeSectionIndexFromPos_handler\0"));
    if(apiuapi_UAnimMontage_GetAnimCompositeSectionIndexFromPos){
        apiuapi_UAnimMontage_GetAnimCompositeSectionIndexFromPos(&uapi_UAnimMontage_GetAnimCompositeSectionIndexFromPos);
    }

    auto const apiuapi_UAnimMontage_GetAnimationData = (uapi_UAnimMontage_GetAnimationDataFn)plugin->GetDllExport(TEXT("set_UAnimMontage_GetAnimationData_handler\0"));
    if(apiuapi_UAnimMontage_GetAnimationData){
        apiuapi_UAnimMontage_GetAnimationData(&uapi_UAnimMontage_GetAnimationData);
    }

    auto const apiuapi_UAnimMontage_GetDefaultBlendInTime = (uapi_UAnimMontage_GetDefaultBlendInTimeFn)plugin->GetDllExport(TEXT("set_UAnimMontage_GetDefaultBlendInTime_handler\0"));
    if(apiuapi_UAnimMontage_GetDefaultBlendInTime){
        apiuapi_UAnimMontage_GetDefaultBlendInTime(&uapi_UAnimMontage_GetDefaultBlendInTime);
    }

    auto const apiuapi_UAnimMontage_GetDefaultBlendOutTime = (uapi_UAnimMontage_GetDefaultBlendOutTimeFn)plugin->GetDllExport(TEXT("set_UAnimMontage_GetDefaultBlendOutTime_handler\0"));
    if(apiuapi_UAnimMontage_GetDefaultBlendOutTime){
        apiuapi_UAnimMontage_GetDefaultBlendOutTime(&uapi_UAnimMontage_GetDefaultBlendOutTime);
    }

    auto const apiuapi_UAnimMontage_GetGroupName = (uapi_UAnimMontage_GetGroupNameFn)plugin->GetDllExport(TEXT("set_UAnimMontage_GetGroupName_handler\0"));
    if(apiuapi_UAnimMontage_GetGroupName){
        apiuapi_UAnimMontage_GetGroupName(&uapi_UAnimMontage_GetGroupName);
    }

    auto const apiuapi_UAnimMontage_GetNumSections = (uapi_UAnimMontage_GetNumSectionsFn)plugin->GetDllExport(TEXT("set_UAnimMontage_GetNumSections_handler\0"));
    if(apiuapi_UAnimMontage_GetNumSections){
        apiuapi_UAnimMontage_GetNumSections(&uapi_UAnimMontage_GetNumSections);
    }

    auto const apiuapi_UAnimMontage_GetSectionIndex = (uapi_UAnimMontage_GetSectionIndexFn)plugin->GetDllExport(TEXT("set_UAnimMontage_GetSectionIndex_handler\0"));
    if(apiuapi_UAnimMontage_GetSectionIndex){
        apiuapi_UAnimMontage_GetSectionIndex(&uapi_UAnimMontage_GetSectionIndex);
    }

    auto const apiuapi_UAnimMontage_GetSectionIndexFromPosition = (uapi_UAnimMontage_GetSectionIndexFromPositionFn)plugin->GetDllExport(TEXT("set_UAnimMontage_GetSectionIndexFromPosition_handler\0"));
    if(apiuapi_UAnimMontage_GetSectionIndexFromPosition){
        apiuapi_UAnimMontage_GetSectionIndexFromPosition(&uapi_UAnimMontage_GetSectionIndexFromPosition);
    }

    auto const apiuapi_UAnimMontage_GetSectionLength = (uapi_UAnimMontage_GetSectionLengthFn)plugin->GetDllExport(TEXT("set_UAnimMontage_GetSectionLength_handler\0"));
    if(apiuapi_UAnimMontage_GetSectionLength){
        apiuapi_UAnimMontage_GetSectionLength(&uapi_UAnimMontage_GetSectionLength);
    }

    auto const apiuapi_UAnimMontage_GetSectionName = (uapi_UAnimMontage_GetSectionNameFn)plugin->GetDllExport(TEXT("set_UAnimMontage_GetSectionName_handler\0"));
    if(apiuapi_UAnimMontage_GetSectionName){
        apiuapi_UAnimMontage_GetSectionName(&uapi_UAnimMontage_GetSectionName);
    }

    auto const apiuapi_UAnimMontage_GetSectionStartAndEndTime = (uapi_UAnimMontage_GetSectionStartAndEndTimeFn)plugin->GetDllExport(TEXT("set_UAnimMontage_GetSectionStartAndEndTime_handler\0"));
    if(apiuapi_UAnimMontage_GetSectionStartAndEndTime){
        apiuapi_UAnimMontage_GetSectionStartAndEndTime(&uapi_UAnimMontage_GetSectionStartAndEndTime);
    }

    auto const apiuapi_UAnimMontage_GetSectionTimeLeftFromPos = (uapi_UAnimMontage_GetSectionTimeLeftFromPosFn)plugin->GetDllExport(TEXT("set_UAnimMontage_GetSectionTimeLeftFromPos_handler\0"));
    if(apiuapi_UAnimMontage_GetSectionTimeLeftFromPos){
        apiuapi_UAnimMontage_GetSectionTimeLeftFromPos(&uapi_UAnimMontage_GetSectionTimeLeftFromPos);
    }

    auto const apiuapi_UAnimMontage_HasRootMotion = (uapi_UAnimMontage_HasRootMotionFn)plugin->GetDllExport(TEXT("set_UAnimMontage_HasRootMotion_handler\0"));
    if(apiuapi_UAnimMontage_HasRootMotion){
        apiuapi_UAnimMontage_HasRootMotion(&uapi_UAnimMontage_HasRootMotion);
    }

    auto const apiuapi_UAnimMontage_InvalidateRecursiveAsset = (uapi_UAnimMontage_InvalidateRecursiveAssetFn)plugin->GetDllExport(TEXT("set_UAnimMontage_InvalidateRecursiveAsset_handler\0"));
    if(apiuapi_UAnimMontage_InvalidateRecursiveAsset){
        apiuapi_UAnimMontage_InvalidateRecursiveAsset(&uapi_UAnimMontage_InvalidateRecursiveAsset);
    }

    auto const apiuapi_UAnimMontage_IsValidAdditive = (uapi_UAnimMontage_IsValidAdditiveFn)plugin->GetDllExport(TEXT("set_UAnimMontage_IsValidAdditive_handler\0"));
    if(apiuapi_UAnimMontage_IsValidAdditive){
        apiuapi_UAnimMontage_IsValidAdditive(&uapi_UAnimMontage_IsValidAdditive);
    }

    auto const apiuapi_UAnimMontage_IsValidSectionIndex = (uapi_UAnimMontage_IsValidSectionIndexFn)plugin->GetDllExport(TEXT("set_UAnimMontage_IsValidSectionIndex_handler\0"));
    if(apiuapi_UAnimMontage_IsValidSectionIndex){
        apiuapi_UAnimMontage_IsValidSectionIndex(&uapi_UAnimMontage_IsValidSectionIndex);
    }

    auto const apiuapi_UAnimMontage_IsValidSectionName = (uapi_UAnimMontage_IsValidSectionNameFn)plugin->GetDllExport(TEXT("set_UAnimMontage_IsValidSectionName_handler\0"));
    if(apiuapi_UAnimMontage_IsValidSectionName){
        apiuapi_UAnimMontage_IsValidSectionName(&uapi_UAnimMontage_IsValidSectionName);
    }

    auto const apiuapi_UAnimMontage_IsValidSlot = (uapi_UAnimMontage_IsValidSlotFn)plugin->GetDllExport(TEXT("set_UAnimMontage_IsValidSlot_handler\0"));
    if(apiuapi_UAnimMontage_IsValidSlot){
        apiuapi_UAnimMontage_IsValidSlot(&uapi_UAnimMontage_IsValidSlot);
    }

    auto const apiuapi_UAnimMontage_PostLoad = (uapi_UAnimMontage_PostLoadFn)plugin->GetDllExport(TEXT("set_UAnimMontage_PostLoad_handler\0"));
    if(apiuapi_UAnimMontage_PostLoad){
        apiuapi_UAnimMontage_PostLoad(&uapi_UAnimMontage_PostLoad);
    }

    auto const apiuapi_UAnimMontage_RefreshCacheData = (uapi_UAnimMontage_RefreshCacheDataFn)plugin->GetDllExport(TEXT("set_UAnimMontage_RefreshCacheData_handler\0"));
    if(apiuapi_UAnimMontage_RefreshCacheData){
        apiuapi_UAnimMontage_RefreshCacheData(&uapi_UAnimMontage_RefreshCacheData);
    }

    auto const apiuapi_UAnimMontage_SetCompositeLength = (uapi_UAnimMontage_SetCompositeLengthFn)plugin->GetDllExport(TEXT("set_UAnimMontage_SetCompositeLength_handler\0"));
    if(apiuapi_UAnimMontage_SetCompositeLength){
        apiuapi_UAnimMontage_SetCompositeLength(&uapi_UAnimMontage_SetCompositeLength);
    }

    auto const apiuapi_UAnimMontage_UnregisterOnMontageChanged = (uapi_UAnimMontage_UnregisterOnMontageChangedFn)plugin->GetDllExport(TEXT("set_UAnimMontage_UnregisterOnMontageChanged_handler\0"));
    if(apiuapi_UAnimMontage_UnregisterOnMontageChanged){
        apiuapi_UAnimMontage_UnregisterOnMontageChanged(&uapi_UAnimMontage_UnregisterOnMontageChanged);
    }

    auto const apiuapi_UAnimMontage_UpdateLinkableElements = (uapi_UAnimMontage_UpdateLinkableElementsFn)plugin->GetDllExport(TEXT("set_UAnimMontage_UpdateLinkableElements_handler\0"));
    if(apiuapi_UAnimMontage_UpdateLinkableElements){
        apiuapi_UAnimMontage_UpdateLinkableElements(&uapi_UAnimMontage_UpdateLinkableElements);
    }

    auto const apiuapi_UAnimMontage_UpdateLinkableElements2 = (uapi_UAnimMontage_UpdateLinkableElements2Fn)plugin->GetDllExport(TEXT("set_UAnimMontage_UpdateLinkableElements2_handler\0"));
    if(apiuapi_UAnimMontage_UpdateLinkableElements2){
        apiuapi_UAnimMontage_UpdateLinkableElements2(&uapi_UAnimMontage_UpdateLinkableElements2);
    }

    auto const apiuapi_USkeletalMeshComponent_AddClothCollisionSource = (uapi_USkeletalMeshComponent_AddClothCollisionSourceFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_AddClothCollisionSource_handler\0"));
    if(apiuapi_USkeletalMeshComponent_AddClothCollisionSource){
        apiuapi_USkeletalMeshComponent_AddClothCollisionSource(&uapi_USkeletalMeshComponent_AddClothCollisionSource);
    }

    auto const apiuapi_USkeletalMeshComponent_AddForceToAllBodiesBelow = (uapi_USkeletalMeshComponent_AddForceToAllBodiesBelowFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_AddForceToAllBodiesBelow_handler\0"));
    if(apiuapi_USkeletalMeshComponent_AddForceToAllBodiesBelow){
        apiuapi_USkeletalMeshComponent_AddForceToAllBodiesBelow(&uapi_USkeletalMeshComponent_AddForceToAllBodiesBelow);
    }

    auto const apiuapi_USkeletalMeshComponent_AddImpulseToAllBodiesBelow = (uapi_USkeletalMeshComponent_AddImpulseToAllBodiesBelowFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_AddImpulseToAllBodiesBelow_handler\0"));
    if(apiuapi_USkeletalMeshComponent_AddImpulseToAllBodiesBelow){
        apiuapi_USkeletalMeshComponent_AddImpulseToAllBodiesBelow(&uapi_USkeletalMeshComponent_AddImpulseToAllBodiesBelow);
    }

    auto const apiuapi_USkeletalMeshComponent_AllocateTransformData = (uapi_USkeletalMeshComponent_AllocateTransformDataFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_AllocateTransformData_handler\0"));
    if(apiuapi_USkeletalMeshComponent_AllocateTransformData){
        apiuapi_USkeletalMeshComponent_AllocateTransformData(&uapi_USkeletalMeshComponent_AllocateTransformData);
    }

    auto const apiuapi_USkeletalMeshComponent_AllowAnimCurveEvaluation = (uapi_USkeletalMeshComponent_AllowAnimCurveEvaluationFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_AllowAnimCurveEvaluation_handler\0"));
    if(apiuapi_USkeletalMeshComponent_AllowAnimCurveEvaluation){
        apiuapi_USkeletalMeshComponent_AllowAnimCurveEvaluation(&uapi_USkeletalMeshComponent_AllowAnimCurveEvaluation);
    }

    auto const apiuapi_USkeletalMeshComponent_ApplyEditedComponentSpaceTransforms = (uapi_USkeletalMeshComponent_ApplyEditedComponentSpaceTransformsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ApplyEditedComponentSpaceTransforms_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ApplyEditedComponentSpaceTransforms){
        apiuapi_USkeletalMeshComponent_ApplyEditedComponentSpaceTransforms(&uapi_USkeletalMeshComponent_ApplyEditedComponentSpaceTransforms);
    }

    auto const apiuapi_USkeletalMeshComponent_BeginPlay = (uapi_USkeletalMeshComponent_BeginPlayFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_BeginPlay_handler\0"));
    if(apiuapi_USkeletalMeshComponent_BeginPlay){
        apiuapi_USkeletalMeshComponent_BeginPlay(&uapi_USkeletalMeshComponent_BeginPlay);
    }

    auto const apiuapi_USkeletalMeshComponent_BindClothToLeaderPoseComponent = (uapi_USkeletalMeshComponent_BindClothToLeaderPoseComponentFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_BindClothToLeaderPoseComponent_handler\0"));
    if(apiuapi_USkeletalMeshComponent_BindClothToLeaderPoseComponent){
        apiuapi_USkeletalMeshComponent_BindClothToLeaderPoseComponent(&uapi_USkeletalMeshComponent_BindClothToLeaderPoseComponent);
    }

    auto const apiuapi_USkeletalMeshComponent_BreakConstraint = (uapi_USkeletalMeshComponent_BreakConstraintFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_BreakConstraint_handler\0"));
    if(apiuapi_USkeletalMeshComponent_BreakConstraint){
        apiuapi_USkeletalMeshComponent_BreakConstraint(&uapi_USkeletalMeshComponent_BreakConstraint);
    }

    auto const apiuapi_USkeletalMeshComponent_CalculateMass = (uapi_USkeletalMeshComponent_CalculateMassFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_CalculateMass_handler\0"));
    if(apiuapi_USkeletalMeshComponent_CalculateMass){
        apiuapi_USkeletalMeshComponent_CalculateMass(&uapi_USkeletalMeshComponent_CalculateMass);
    }

    auto const apiuapi_USkeletalMeshComponent_CanEditSimulatePhysics = (uapi_USkeletalMeshComponent_CanEditSimulatePhysicsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_CanEditSimulatePhysics_handler\0"));
    if(apiuapi_USkeletalMeshComponent_CanEditSimulatePhysics){
        apiuapi_USkeletalMeshComponent_CanEditSimulatePhysics(&uapi_USkeletalMeshComponent_CanEditSimulatePhysics);
    }

    auto const apiuapi_USkeletalMeshComponent_CanHaveStaticMobility = (uapi_USkeletalMeshComponent_CanHaveStaticMobilityFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_CanHaveStaticMobility_handler\0"));
    if(apiuapi_USkeletalMeshComponent_CanHaveStaticMobility){
        apiuapi_USkeletalMeshComponent_CanHaveStaticMobility(&uapi_USkeletalMeshComponent_CanHaveStaticMobility);
    }

    auto const apiuapi_USkeletalMeshComponent_CanSimulateClothing = (uapi_USkeletalMeshComponent_CanSimulateClothingFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_CanSimulateClothing_handler\0"));
    if(apiuapi_USkeletalMeshComponent_CanSimulateClothing){
        apiuapi_USkeletalMeshComponent_CanSimulateClothing(&uapi_USkeletalMeshComponent_CanSimulateClothing);
    }

    auto const apiuapi_USkeletalMeshComponent_CheckClothTeleport = (uapi_USkeletalMeshComponent_CheckClothTeleportFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_CheckClothTeleport_handler\0"));
    if(apiuapi_USkeletalMeshComponent_CheckClothTeleport){
        apiuapi_USkeletalMeshComponent_CheckClothTeleport(&uapi_USkeletalMeshComponent_CheckClothTeleport);
    }

    auto const apiuapi_USkeletalMeshComponent_ClearAnimNotifyErrors = (uapi_USkeletalMeshComponent_ClearAnimNotifyErrorsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ClearAnimNotifyErrors_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ClearAnimNotifyErrors){
        apiuapi_USkeletalMeshComponent_ClearAnimNotifyErrors(&uapi_USkeletalMeshComponent_ClearAnimNotifyErrors);
    }

    auto const apiuapi_USkeletalMeshComponent_ClearAnimScriptInstance = (uapi_USkeletalMeshComponent_ClearAnimScriptInstanceFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ClearAnimScriptInstance_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ClearAnimScriptInstance){
        apiuapi_USkeletalMeshComponent_ClearAnimScriptInstance(&uapi_USkeletalMeshComponent_ClearAnimScriptInstance);
    }

    auto const apiuapi_USkeletalMeshComponent_ClearCachedAnimProperties = (uapi_USkeletalMeshComponent_ClearCachedAnimPropertiesFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ClearCachedAnimProperties_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ClearCachedAnimProperties){
        apiuapi_USkeletalMeshComponent_ClearCachedAnimProperties(&uapi_USkeletalMeshComponent_ClearCachedAnimProperties);
    }

    auto const apiuapi_USkeletalMeshComponent_ClearMorphTargets = (uapi_USkeletalMeshComponent_ClearMorphTargetsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ClearMorphTargets_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ClearMorphTargets){
        apiuapi_USkeletalMeshComponent_ClearMorphTargets(&uapi_USkeletalMeshComponent_ClearMorphTargets);
    }

    auto const apiuapi_USkeletalMeshComponent_ClearRefPoseOverride = (uapi_USkeletalMeshComponent_ClearRefPoseOverrideFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ClearRefPoseOverride_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ClearRefPoseOverride){
        apiuapi_USkeletalMeshComponent_ClearRefPoseOverride(&uapi_USkeletalMeshComponent_ClearRefPoseOverride);
    }

    auto const apiuapi_USkeletalMeshComponent_CompleteParallelAnimationEvaluation = (uapi_USkeletalMeshComponent_CompleteParallelAnimationEvaluationFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_CompleteParallelAnimationEvaluation_handler\0"));
    if(apiuapi_USkeletalMeshComponent_CompleteParallelAnimationEvaluation){
        apiuapi_USkeletalMeshComponent_CompleteParallelAnimationEvaluation(&uapi_USkeletalMeshComponent_CompleteParallelAnimationEvaluation);
    }

    auto const apiuapi_USkeletalMeshComponent_CompleteParallelClothSimulation = (uapi_USkeletalMeshComponent_CompleteParallelClothSimulationFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_CompleteParallelClothSimulation_handler\0"));
    if(apiuapi_USkeletalMeshComponent_CompleteParallelClothSimulation){
        apiuapi_USkeletalMeshComponent_CompleteParallelClothSimulation(&uapi_USkeletalMeshComponent_CompleteParallelClothSimulation);
    }

    auto const apiuapi_USkeletalMeshComponent_ConditionallyDispatchQueuedAnimEvents = (uapi_USkeletalMeshComponent_ConditionallyDispatchQueuedAnimEventsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ConditionallyDispatchQueuedAnimEvents_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ConditionallyDispatchQueuedAnimEvents){
        apiuapi_USkeletalMeshComponent_ConditionallyDispatchQueuedAnimEvents(&uapi_USkeletalMeshComponent_ConditionallyDispatchQueuedAnimEvents);
    }

    auto const apiuapi_USkeletalMeshComponent_DeallocateTransformData = (uapi_USkeletalMeshComponent_DeallocateTransformDataFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_DeallocateTransformData_handler\0"));
    if(apiuapi_USkeletalMeshComponent_DeallocateTransformData){
        apiuapi_USkeletalMeshComponent_DeallocateTransformData(&uapi_USkeletalMeshComponent_DeallocateTransformData);
    }

    auto const apiuapi_USkeletalMeshComponent_DebugDrawClothing = (uapi_USkeletalMeshComponent_DebugDrawClothingFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_DebugDrawClothing_handler\0"));
    if(apiuapi_USkeletalMeshComponent_DebugDrawClothing){
        apiuapi_USkeletalMeshComponent_DebugDrawClothing(&uapi_USkeletalMeshComponent_DebugDrawClothing);
    }

    auto const apiuapi_USkeletalMeshComponent_DebugDrawClothingTexts = (uapi_USkeletalMeshComponent_DebugDrawClothingTextsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_DebugDrawClothingTexts_handler\0"));
    if(apiuapi_USkeletalMeshComponent_DebugDrawClothingTexts){
        apiuapi_USkeletalMeshComponent_DebugDrawClothingTexts(&uapi_USkeletalMeshComponent_DebugDrawClothingTexts);
    }

    auto const apiuapi_USkeletalMeshComponent_FinalizeBoneTransform = (uapi_USkeletalMeshComponent_FinalizeBoneTransformFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_FinalizeBoneTransform_handler\0"));
    if(apiuapi_USkeletalMeshComponent_FinalizeBoneTransform){
        apiuapi_USkeletalMeshComponent_FinalizeBoneTransform(&uapi_USkeletalMeshComponent_FinalizeBoneTransform);
    }

    auto const apiuapi_USkeletalMeshComponent_FindConstraintBoneName = (uapi_USkeletalMeshComponent_FindConstraintBoneNameFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_FindConstraintBoneName_handler\0"));
    if(apiuapi_USkeletalMeshComponent_FindConstraintBoneName){
        apiuapi_USkeletalMeshComponent_FindConstraintBoneName(&uapi_USkeletalMeshComponent_FindConstraintBoneName);
    }

    auto const apiuapi_USkeletalMeshComponent_FindConstraintIndex = (uapi_USkeletalMeshComponent_FindConstraintIndexFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_FindConstraintIndex_handler\0"));
    if(apiuapi_USkeletalMeshComponent_FindConstraintIndex){
        apiuapi_USkeletalMeshComponent_FindConstraintIndex(&uapi_USkeletalMeshComponent_FindConstraintIndex);
    }

    auto const apiuapi_USkeletalMeshComponent_FindConstraintInstance = (uapi_USkeletalMeshComponent_FindConstraintInstanceFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_FindConstraintInstance_handler\0"));
    if(apiuapi_USkeletalMeshComponent_FindConstraintInstance){
        apiuapi_USkeletalMeshComponent_FindConstraintInstance(&uapi_USkeletalMeshComponent_FindConstraintInstance);
    }

    auto const apiuapi_USkeletalMeshComponent_FindRootBodyIndex = (uapi_USkeletalMeshComponent_FindRootBodyIndexFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_FindRootBodyIndex_handler\0"));
    if(apiuapi_USkeletalMeshComponent_FindRootBodyIndex){
        apiuapi_USkeletalMeshComponent_FindRootBodyIndex(&uapi_USkeletalMeshComponent_FindRootBodyIndex);
    }

    auto const apiuapi_USkeletalMeshComponent_ForceClothNextUpdateTeleport = (uapi_USkeletalMeshComponent_ForceClothNextUpdateTeleportFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ForceClothNextUpdateTeleport_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ForceClothNextUpdateTeleport){
        apiuapi_USkeletalMeshComponent_ForceClothNextUpdateTeleport(&uapi_USkeletalMeshComponent_ForceClothNextUpdateTeleport);
    }

    auto const apiuapi_USkeletalMeshComponent_ForceClothNextUpdateTeleportAndReset = (uapi_USkeletalMeshComponent_ForceClothNextUpdateTeleportAndResetFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ForceClothNextUpdateTeleportAndReset_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ForceClothNextUpdateTeleportAndReset){
        apiuapi_USkeletalMeshComponent_ForceClothNextUpdateTeleportAndReset(&uapi_USkeletalMeshComponent_ForceClothNextUpdateTeleportAndReset);
    }

    auto const apiuapi_USkeletalMeshComponent_GetAllowClothActors = (uapi_USkeletalMeshComponent_GetAllowClothActorsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetAllowClothActors_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetAllowClothActors){
        apiuapi_USkeletalMeshComponent_GetAllowClothActors(&uapi_USkeletalMeshComponent_GetAllowClothActors);
    }

    auto const apiuapi_USkeletalMeshComponent_GetAllowRigidBodyAnimNode = (uapi_USkeletalMeshComponent_GetAllowRigidBodyAnimNodeFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetAllowRigidBodyAnimNode_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetAllowRigidBodyAnimNode){
        apiuapi_USkeletalMeshComponent_GetAllowRigidBodyAnimNode(&uapi_USkeletalMeshComponent_GetAllowRigidBodyAnimNode);
    }

    auto const apiuapi_USkeletalMeshComponent_GetAllowedAnimCurveEvaluate = (uapi_USkeletalMeshComponent_GetAllowedAnimCurveEvaluateFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetAllowedAnimCurveEvaluate_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetAllowedAnimCurveEvaluate){
        apiuapi_USkeletalMeshComponent_GetAllowedAnimCurveEvaluate(&uapi_USkeletalMeshComponent_GetAllowedAnimCurveEvaluate);
    }

    auto const apiuapi_USkeletalMeshComponent_GetBodyInstance = (uapi_USkeletalMeshComponent_GetBodyInstanceFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetBodyInstance_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetBodyInstance){
        apiuapi_USkeletalMeshComponent_GetBodyInstance(&uapi_USkeletalMeshComponent_GetBodyInstance);
    }

    auto const apiuapi_USkeletalMeshComponent_GetBodySetup = (uapi_USkeletalMeshComponent_GetBodySetupFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetBodySetup_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetBodySetup){
        apiuapi_USkeletalMeshComponent_GetBodySetup(&uapi_USkeletalMeshComponent_GetBodySetup);
    }

    auto const apiuapi_USkeletalMeshComponent_GetBoneMass = (uapi_USkeletalMeshComponent_GetBoneMassFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetBoneMass_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetBoneMass){
        apiuapi_USkeletalMeshComponent_GetBoneMass(&uapi_USkeletalMeshComponent_GetBoneMass);
    }

    auto const apiuapi_USkeletalMeshComponent_GetClothMaxDistanceScale = (uapi_USkeletalMeshComponent_GetClothMaxDistanceScaleFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetClothMaxDistanceScale_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetClothMaxDistanceScale){
        apiuapi_USkeletalMeshComponent_GetClothMaxDistanceScale(&uapi_USkeletalMeshComponent_GetClothMaxDistanceScale);
    }

    auto const apiuapi_USkeletalMeshComponent_GetClothingSimulation = (uapi_USkeletalMeshComponent_GetClothingSimulationFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetClothingSimulation_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetClothingSimulation){
        apiuapi_USkeletalMeshComponent_GetClothingSimulation(&uapi_USkeletalMeshComponent_GetClothingSimulation);
    }

    auto const apiuapi_USkeletalMeshComponent_GetClothingSimulationContext = (uapi_USkeletalMeshComponent_GetClothingSimulationContextFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetClothingSimulationContext_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetClothingSimulationContext){
        apiuapi_USkeletalMeshComponent_GetClothingSimulationContext(&uapi_USkeletalMeshComponent_GetClothingSimulationContext);
    }

    auto const apiuapi_USkeletalMeshComponent_GetClothingSimulationInteractor = (uapi_USkeletalMeshComponent_GetClothingSimulationInteractorFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetClothingSimulationInteractor_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetClothingSimulationInteractor){
        apiuapi_USkeletalMeshComponent_GetClothingSimulationInteractor(&uapi_USkeletalMeshComponent_GetClothingSimulationInteractor);
    }

    auto const apiuapi_USkeletalMeshComponent_GetConstraintInstanceByIndex = (uapi_USkeletalMeshComponent_GetConstraintInstanceByIndexFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetConstraintInstanceByIndex_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetConstraintInstanceByIndex){
        apiuapi_USkeletalMeshComponent_GetConstraintInstanceByIndex(&uapi_USkeletalMeshComponent_GetConstraintInstanceByIndex);
    }

    auto const apiuapi_USkeletalMeshComponent_GetCurrentJointAngles = (uapi_USkeletalMeshComponent_GetCurrentJointAnglesFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetCurrentJointAngles_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetCurrentJointAngles){
        apiuapi_USkeletalMeshComponent_GetCurrentJointAngles(&uapi_USkeletalMeshComponent_GetCurrentJointAngles);
    }

    auto const apiuapi_USkeletalMeshComponent_GetDisablePostProcessBlueprint = (uapi_USkeletalMeshComponent_GetDisablePostProcessBlueprintFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetDisablePostProcessBlueprint_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetDisablePostProcessBlueprint){
        apiuapi_USkeletalMeshComponent_GetDisablePostProcessBlueprint(&uapi_USkeletalMeshComponent_GetDisablePostProcessBlueprint);
    }

    auto const apiuapi_USkeletalMeshComponent_GetLinkedAnimGraphInstanceByTag = (uapi_USkeletalMeshComponent_GetLinkedAnimGraphInstanceByTagFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetLinkedAnimGraphInstanceByTag_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetLinkedAnimGraphInstanceByTag){
        apiuapi_USkeletalMeshComponent_GetLinkedAnimGraphInstanceByTag(&uapi_USkeletalMeshComponent_GetLinkedAnimGraphInstanceByTag);
    }

    auto const apiuapi_USkeletalMeshComponent_GetLinkedAnimLayerInstanceByGroup = (uapi_USkeletalMeshComponent_GetLinkedAnimLayerInstanceByGroupFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetLinkedAnimLayerInstanceByGroup_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetLinkedAnimLayerInstanceByGroup){
        apiuapi_USkeletalMeshComponent_GetLinkedAnimLayerInstanceByGroup(&uapi_USkeletalMeshComponent_GetLinkedAnimLayerInstanceByGroup);
    }

    auto const apiuapi_USkeletalMeshComponent_GetMass = (uapi_USkeletalMeshComponent_GetMassFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetMass_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetMass){
        apiuapi_USkeletalMeshComponent_GetMass(&uapi_USkeletalMeshComponent_GetMass);
    }

    auto const apiuapi_USkeletalMeshComponent_GetMorphTarget = (uapi_USkeletalMeshComponent_GetMorphTargetFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetMorphTarget_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetMorphTarget){
        apiuapi_USkeletalMeshComponent_GetMorphTarget(&uapi_USkeletalMeshComponent_GetMorphTarget);
    }

    auto const apiuapi_USkeletalMeshComponent_GetPlayRate = (uapi_USkeletalMeshComponent_GetPlayRateFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetPlayRate_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetPlayRate){
        apiuapi_USkeletalMeshComponent_GetPlayRate(&uapi_USkeletalMeshComponent_GetPlayRate);
    }

    auto const apiuapi_USkeletalMeshComponent_GetPosition = (uapi_USkeletalMeshComponent_GetPositionFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetPosition_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetPosition){
        apiuapi_USkeletalMeshComponent_GetPosition(&uapi_USkeletalMeshComponent_GetPosition);
    }

    auto const apiuapi_USkeletalMeshComponent_GetSingleNodeInstance = (uapi_USkeletalMeshComponent_GetSingleNodeInstanceFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetSingleNodeInstance_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetSingleNodeInstance){
        apiuapi_USkeletalMeshComponent_GetSingleNodeInstance(&uapi_USkeletalMeshComponent_GetSingleNodeInstance);
    }

    auto const apiuapi_USkeletalMeshComponent_GetSkeletalCenterOfMass = (uapi_USkeletalMeshComponent_GetSkeletalCenterOfMassFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetSkeletalCenterOfMass_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetSkeletalCenterOfMass){
        apiuapi_USkeletalMeshComponent_GetSkeletalCenterOfMass(&uapi_USkeletalMeshComponent_GetSkeletalCenterOfMass);
    }

    auto const apiuapi_USkeletalMeshComponent_GetSkeletalMeshAsset = (uapi_USkeletalMeshComponent_GetSkeletalMeshAssetFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetSkeletalMeshAsset_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetSkeletalMeshAsset){
        apiuapi_USkeletalMeshComponent_GetSkeletalMeshAsset(&uapi_USkeletalMeshComponent_GetSkeletalMeshAsset);
    }

    auto const apiuapi_USkeletalMeshComponent_GetTeleportDistanceThreshold = (uapi_USkeletalMeshComponent_GetTeleportDistanceThresholdFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetTeleportDistanceThreshold_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetTeleportDistanceThreshold){
        apiuapi_USkeletalMeshComponent_GetTeleportDistanceThreshold(&uapi_USkeletalMeshComponent_GetTeleportDistanceThreshold);
    }

    auto const apiuapi_USkeletalMeshComponent_GetTeleportRotationThreshold = (uapi_USkeletalMeshComponent_GetTeleportRotationThresholdFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetTeleportRotationThreshold_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetTeleportRotationThreshold){
        apiuapi_USkeletalMeshComponent_GetTeleportRotationThreshold(&uapi_USkeletalMeshComponent_GetTeleportRotationThreshold);
    }

    auto const apiuapi_USkeletalMeshComponent_GetTotalMassBelowBone = (uapi_USkeletalMeshComponent_GetTotalMassBelowBoneFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetTotalMassBelowBone_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetTotalMassBelowBone){
        apiuapi_USkeletalMeshComponent_GetTotalMassBelowBone(&uapi_USkeletalMeshComponent_GetTotalMassBelowBone);
    }

    auto const apiuapi_USkeletalMeshComponent_GetUpdateAnimationInEditor = (uapi_USkeletalMeshComponent_GetUpdateAnimationInEditorFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetUpdateAnimationInEditor_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetUpdateAnimationInEditor){
        apiuapi_USkeletalMeshComponent_GetUpdateAnimationInEditor(&uapi_USkeletalMeshComponent_GetUpdateAnimationInEditor);
    }

    auto const apiuapi_USkeletalMeshComponent_GetUpdateClothInEditor = (uapi_USkeletalMeshComponent_GetUpdateClothInEditorFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_GetUpdateClothInEditor_handler\0"));
    if(apiuapi_USkeletalMeshComponent_GetUpdateClothInEditor){
        apiuapi_USkeletalMeshComponent_GetUpdateClothInEditor(&uapi_USkeletalMeshComponent_GetUpdateClothInEditor);
    }

    auto const apiuapi_USkeletalMeshComponent_HandleExistingParallelEvaluationTask = (uapi_USkeletalMeshComponent_HandleExistingParallelEvaluationTaskFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_HandleExistingParallelEvaluationTask_handler\0"));
    if(apiuapi_USkeletalMeshComponent_HandleExistingParallelEvaluationTask){
        apiuapi_USkeletalMeshComponent_HandleExistingParallelEvaluationTask(&uapi_USkeletalMeshComponent_HandleExistingParallelEvaluationTask);
    }

    auto const apiuapi_USkeletalMeshComponent_HasValidAnimationInstance = (uapi_USkeletalMeshComponent_HasValidAnimationInstanceFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_HasValidAnimationInstance_handler\0"));
    if(apiuapi_USkeletalMeshComponent_HasValidAnimationInstance){
        apiuapi_USkeletalMeshComponent_HasValidAnimationInstance(&uapi_USkeletalMeshComponent_HasValidAnimationInstance);
    }

    auto const apiuapi_USkeletalMeshComponent_InitAnim = (uapi_USkeletalMeshComponent_InitAnimFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_InitAnim_handler\0"));
    if(apiuapi_USkeletalMeshComponent_InitAnim){
        apiuapi_USkeletalMeshComponent_InitAnim(&uapi_USkeletalMeshComponent_InitAnim);
    }

    auto const apiuapi_USkeletalMeshComponent_InitArticulated = (uapi_USkeletalMeshComponent_InitArticulatedFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_InitArticulated_handler\0"));
    if(apiuapi_USkeletalMeshComponent_InitArticulated){
        apiuapi_USkeletalMeshComponent_InitArticulated(&uapi_USkeletalMeshComponent_InitArticulated);
    }

    auto const apiuapi_USkeletalMeshComponent_InitCollisionRelationships = (uapi_USkeletalMeshComponent_InitCollisionRelationshipsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_InitCollisionRelationships_handler\0"));
    if(apiuapi_USkeletalMeshComponent_InitCollisionRelationships){
        apiuapi_USkeletalMeshComponent_InitCollisionRelationships(&uapi_USkeletalMeshComponent_InitCollisionRelationships);
    }

    auto const apiuapi_USkeletalMeshComponent_InitializeAnimScriptInstance = (uapi_USkeletalMeshComponent_InitializeAnimScriptInstanceFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_InitializeAnimScriptInstance_handler\0"));
    if(apiuapi_USkeletalMeshComponent_InitializeAnimScriptInstance){
        apiuapi_USkeletalMeshComponent_InitializeAnimScriptInstance(&uapi_USkeletalMeshComponent_InitializeAnimScriptInstance);
    }

    auto const apiuapi_USkeletalMeshComponent_InitializeComponent = (uapi_USkeletalMeshComponent_InitializeComponentFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_InitializeComponent_handler\0"));
    if(apiuapi_USkeletalMeshComponent_InitializeComponent){
        apiuapi_USkeletalMeshComponent_InitializeComponent(&uapi_USkeletalMeshComponent_InitializeComponent);
    }

    auto const apiuapi_USkeletalMeshComponent_IsAnimBlueprintInstanced = (uapi_USkeletalMeshComponent_IsAnimBlueprintInstancedFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_IsAnimBlueprintInstanced_handler\0"));
    if(apiuapi_USkeletalMeshComponent_IsAnimBlueprintInstanced){
        apiuapi_USkeletalMeshComponent_IsAnimBlueprintInstanced(&uapi_USkeletalMeshComponent_IsAnimBlueprintInstanced);
    }

    auto const apiuapi_USkeletalMeshComponent_IsAnyRigidBodyAwake = (uapi_USkeletalMeshComponent_IsAnyRigidBodyAwakeFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_IsAnyRigidBodyAwake_handler\0"));
    if(apiuapi_USkeletalMeshComponent_IsAnyRigidBodyAwake){
        apiuapi_USkeletalMeshComponent_IsAnyRigidBodyAwake(&uapi_USkeletalMeshComponent_IsAnyRigidBodyAwake);
    }

    auto const apiuapi_USkeletalMeshComponent_IsAnySimulatingPhysics = (uapi_USkeletalMeshComponent_IsAnySimulatingPhysicsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_IsAnySimulatingPhysics_handler\0"));
    if(apiuapi_USkeletalMeshComponent_IsAnySimulatingPhysics){
        apiuapi_USkeletalMeshComponent_IsAnySimulatingPhysics(&uapi_USkeletalMeshComponent_IsAnySimulatingPhysics);
    }

    auto const apiuapi_USkeletalMeshComponent_IsBodyGravityEnabled = (uapi_USkeletalMeshComponent_IsBodyGravityEnabledFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_IsBodyGravityEnabled_handler\0"));
    if(apiuapi_USkeletalMeshComponent_IsBodyGravityEnabled){
        apiuapi_USkeletalMeshComponent_IsBodyGravityEnabled(&uapi_USkeletalMeshComponent_IsBodyGravityEnabled);
    }

    auto const apiuapi_USkeletalMeshComponent_IsClothBoundToLeaderComponent = (uapi_USkeletalMeshComponent_IsClothBoundToLeaderComponentFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_IsClothBoundToLeaderComponent_handler\0"));
    if(apiuapi_USkeletalMeshComponent_IsClothBoundToLeaderComponent){
        apiuapi_USkeletalMeshComponent_IsClothBoundToLeaderComponent(&uapi_USkeletalMeshComponent_IsClothBoundToLeaderComponent);
    }

    auto const apiuapi_USkeletalMeshComponent_IsClothingSimulationSuspended = (uapi_USkeletalMeshComponent_IsClothingSimulationSuspendedFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_IsClothingSimulationSuspended_handler\0"));
    if(apiuapi_USkeletalMeshComponent_IsClothingSimulationSuspended){
        apiuapi_USkeletalMeshComponent_IsClothingSimulationSuspended(&uapi_USkeletalMeshComponent_IsClothingSimulationSuspended);
    }

    auto const apiuapi_USkeletalMeshComponent_IsGravityEnabled = (uapi_USkeletalMeshComponent_IsGravityEnabledFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_IsGravityEnabled_handler\0"));
    if(apiuapi_USkeletalMeshComponent_IsGravityEnabled){
        apiuapi_USkeletalMeshComponent_IsGravityEnabled(&uapi_USkeletalMeshComponent_IsGravityEnabled);
    }

    auto const apiuapi_USkeletalMeshComponent_IsPlaying = (uapi_USkeletalMeshComponent_IsPlayingFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_IsPlaying_handler\0"));
    if(apiuapi_USkeletalMeshComponent_IsPlaying){
        apiuapi_USkeletalMeshComponent_IsPlaying(&uapi_USkeletalMeshComponent_IsPlaying);
    }

    auto const apiuapi_USkeletalMeshComponent_IsPlayingNetworkedRootMotionMontage = (uapi_USkeletalMeshComponent_IsPlayingNetworkedRootMotionMontageFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_IsPlayingNetworkedRootMotionMontage_handler\0"));
    if(apiuapi_USkeletalMeshComponent_IsPlayingNetworkedRootMotionMontage){
        apiuapi_USkeletalMeshComponent_IsPlayingNetworkedRootMotionMontage(&uapi_USkeletalMeshComponent_IsPlayingNetworkedRootMotionMontage);
    }

    auto const apiuapi_USkeletalMeshComponent_IsPlayingRootMotion = (uapi_USkeletalMeshComponent_IsPlayingRootMotionFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_IsPlayingRootMotion_handler\0"));
    if(apiuapi_USkeletalMeshComponent_IsPlayingRootMotion){
        apiuapi_USkeletalMeshComponent_IsPlayingRootMotion(&uapi_USkeletalMeshComponent_IsPlayingRootMotion);
    }

    auto const apiuapi_USkeletalMeshComponent_IsPlayingRootMotionFromEverything = (uapi_USkeletalMeshComponent_IsPlayingRootMotionFromEverythingFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_IsPlayingRootMotionFromEverything_handler\0"));
    if(apiuapi_USkeletalMeshComponent_IsPlayingRootMotionFromEverything){
        apiuapi_USkeletalMeshComponent_IsPlayingRootMotionFromEverything(&uapi_USkeletalMeshComponent_IsPlayingRootMotionFromEverything);
    }

    auto const apiuapi_USkeletalMeshComponent_IsPostEvaluatingAnimation = (uapi_USkeletalMeshComponent_IsPostEvaluatingAnimationFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_IsPostEvaluatingAnimation_handler\0"));
    if(apiuapi_USkeletalMeshComponent_IsPostEvaluatingAnimation){
        apiuapi_USkeletalMeshComponent_IsPostEvaluatingAnimation(&uapi_USkeletalMeshComponent_IsPostEvaluatingAnimation);
    }

    auto const apiuapi_USkeletalMeshComponent_IsRunningParallelEvaluation = (uapi_USkeletalMeshComponent_IsRunningParallelEvaluationFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_IsRunningParallelEvaluation_handler\0"));
    if(apiuapi_USkeletalMeshComponent_IsRunningParallelEvaluation){
        apiuapi_USkeletalMeshComponent_IsRunningParallelEvaluation(&uapi_USkeletalMeshComponent_IsRunningParallelEvaluation);
    }

    auto const apiuapi_USkeletalMeshComponent_IsWindEnabled = (uapi_USkeletalMeshComponent_IsWindEnabledFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_IsWindEnabled_handler\0"));
    if(apiuapi_USkeletalMeshComponent_IsWindEnabled){
        apiuapi_USkeletalMeshComponent_IsWindEnabled(&uapi_USkeletalMeshComponent_IsWindEnabled);
    }

    auto const apiuapi_USkeletalMeshComponent_NotifySkelControlBeyondLimit = (uapi_USkeletalMeshComponent_NotifySkelControlBeyondLimitFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_NotifySkelControlBeyondLimit_handler\0"));
    if(apiuapi_USkeletalMeshComponent_NotifySkelControlBeyondLimit){
        apiuapi_USkeletalMeshComponent_NotifySkelControlBeyondLimit(&uapi_USkeletalMeshComponent_NotifySkelControlBeyondLimit);
    }

    auto const apiuapi_USkeletalMeshComponent_OnComponentCollisionSettingsChanged = (uapi_USkeletalMeshComponent_OnComponentCollisionSettingsChangedFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_OnComponentCollisionSettingsChanged_handler\0"));
    if(apiuapi_USkeletalMeshComponent_OnComponentCollisionSettingsChanged){
        apiuapi_USkeletalMeshComponent_OnComponentCollisionSettingsChanged(&uapi_USkeletalMeshComponent_OnComponentCollisionSettingsChanged);
    }

    auto const apiuapi_USkeletalMeshComponent_OnPreEndOfFrameSync = (uapi_USkeletalMeshComponent_OnPreEndOfFrameSyncFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_OnPreEndOfFrameSync_handler\0"));
    if(apiuapi_USkeletalMeshComponent_OnPreEndOfFrameSync){
        apiuapi_USkeletalMeshComponent_OnPreEndOfFrameSync(&uapi_USkeletalMeshComponent_OnPreEndOfFrameSync);
    }

    auto const apiuapi_USkeletalMeshComponent_OverrideAnimationData = (uapi_USkeletalMeshComponent_OverrideAnimationDataFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_OverrideAnimationData_handler\0"));
    if(apiuapi_USkeletalMeshComponent_OverrideAnimationData){
        apiuapi_USkeletalMeshComponent_OverrideAnimationData(&uapi_USkeletalMeshComponent_OverrideAnimationData);
    }

    auto const apiuapi_USkeletalMeshComponent_ParallelAnimationEvaluation = (uapi_USkeletalMeshComponent_ParallelAnimationEvaluationFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ParallelAnimationEvaluation_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ParallelAnimationEvaluation){
        apiuapi_USkeletalMeshComponent_ParallelAnimationEvaluation(&uapi_USkeletalMeshComponent_ParallelAnimationEvaluation);
    }

    auto const apiuapi_USkeletalMeshComponent_Play = (uapi_USkeletalMeshComponent_PlayFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_Play_handler\0"));
    if(apiuapi_USkeletalMeshComponent_Play){
        apiuapi_USkeletalMeshComponent_Play(&uapi_USkeletalMeshComponent_Play);
    }

    auto const apiuapi_USkeletalMeshComponent_PlayAnimation = (uapi_USkeletalMeshComponent_PlayAnimationFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_PlayAnimation_handler\0"));
    if(apiuapi_USkeletalMeshComponent_PlayAnimation){
        apiuapi_USkeletalMeshComponent_PlayAnimation(&uapi_USkeletalMeshComponent_PlayAnimation);
    }

    auto const apiuapi_USkeletalMeshComponent_PoseTickedThisFrame = (uapi_USkeletalMeshComponent_PoseTickedThisFrameFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_PoseTickedThisFrame_handler\0"));
    if(apiuapi_USkeletalMeshComponent_PoseTickedThisFrame){
        apiuapi_USkeletalMeshComponent_PoseTickedThisFrame(&uapi_USkeletalMeshComponent_PoseTickedThisFrame);
    }

    auto const apiuapi_USkeletalMeshComponent_PostLoad = (uapi_USkeletalMeshComponent_PostLoadFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_PostLoad_handler\0"));
    if(apiuapi_USkeletalMeshComponent_PostLoad){
        apiuapi_USkeletalMeshComponent_PostLoad(&uapi_USkeletalMeshComponent_PostLoad);
    }

    auto const apiuapi_USkeletalMeshComponent_PutAllRigidBodiesToSleep = (uapi_USkeletalMeshComponent_PutAllRigidBodiesToSleepFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_PutAllRigidBodiesToSleep_handler\0"));
    if(apiuapi_USkeletalMeshComponent_PutAllRigidBodiesToSleep){
        apiuapi_USkeletalMeshComponent_PutAllRigidBodiesToSleep(&uapi_USkeletalMeshComponent_PutAllRigidBodiesToSleep);
    }

    auto const apiuapi_USkeletalMeshComponent_RecalcRequiredBones = (uapi_USkeletalMeshComponent_RecalcRequiredBonesFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_RecalcRequiredBones_handler\0"));
    if(apiuapi_USkeletalMeshComponent_RecalcRequiredBones){
        apiuapi_USkeletalMeshComponent_RecalcRequiredBones(&uapi_USkeletalMeshComponent_RecalcRequiredBones);
    }

    auto const apiuapi_USkeletalMeshComponent_RecalcRequiredCurves = (uapi_USkeletalMeshComponent_RecalcRequiredCurvesFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_RecalcRequiredCurves_handler\0"));
    if(apiuapi_USkeletalMeshComponent_RecalcRequiredCurves){
        apiuapi_USkeletalMeshComponent_RecalcRequiredCurves(&uapi_USkeletalMeshComponent_RecalcRequiredCurves);
    }

    auto const apiuapi_USkeletalMeshComponent_RecreateClothingActors = (uapi_USkeletalMeshComponent_RecreateClothingActorsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_RecreateClothingActors_handler\0"));
    if(apiuapi_USkeletalMeshComponent_RecreateClothingActors){
        apiuapi_USkeletalMeshComponent_RecreateClothingActors(&uapi_USkeletalMeshComponent_RecreateClothingActors);
    }

    auto const apiuapi_USkeletalMeshComponent_RefreshBoneTransforms = (uapi_USkeletalMeshComponent_RefreshBoneTransformsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_RefreshBoneTransforms_handler\0"));
    if(apiuapi_USkeletalMeshComponent_RefreshBoneTransforms){
        apiuapi_USkeletalMeshComponent_RefreshBoneTransforms(&uapi_USkeletalMeshComponent_RefreshBoneTransforms);
    }

    auto const apiuapi_USkeletalMeshComponent_RegisterClothTick = (uapi_USkeletalMeshComponent_RegisterClothTickFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_RegisterClothTick_handler\0"));
    if(apiuapi_USkeletalMeshComponent_RegisterClothTick){
        apiuapi_USkeletalMeshComponent_RegisterClothTick(&uapi_USkeletalMeshComponent_RegisterClothTick);
    }

    auto const apiuapi_USkeletalMeshComponent_RegisterEndPhysicsTick = (uapi_USkeletalMeshComponent_RegisterEndPhysicsTickFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_RegisterEndPhysicsTick_handler\0"));
    if(apiuapi_USkeletalMeshComponent_RegisterEndPhysicsTick){
        apiuapi_USkeletalMeshComponent_RegisterEndPhysicsTick(&uapi_USkeletalMeshComponent_RegisterEndPhysicsTick);
    }

    auto const apiuapi_USkeletalMeshComponent_ReleaseAllClothingResources = (uapi_USkeletalMeshComponent_ReleaseAllClothingResourcesFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ReleaseAllClothingResources_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ReleaseAllClothingResources){
        apiuapi_USkeletalMeshComponent_ReleaseAllClothingResources(&uapi_USkeletalMeshComponent_ReleaseAllClothingResources);
    }

    auto const apiuapi_USkeletalMeshComponent_RemoveAllClothingActors = (uapi_USkeletalMeshComponent_RemoveAllClothingActorsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_RemoveAllClothingActors_handler\0"));
    if(apiuapi_USkeletalMeshComponent_RemoveAllClothingActors){
        apiuapi_USkeletalMeshComponent_RemoveAllClothingActors(&uapi_USkeletalMeshComponent_RemoveAllClothingActors);
    }

    auto const apiuapi_USkeletalMeshComponent_RemoveClothCollisionSource = (uapi_USkeletalMeshComponent_RemoveClothCollisionSourceFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_RemoveClothCollisionSource_handler\0"));
    if(apiuapi_USkeletalMeshComponent_RemoveClothCollisionSource){
        apiuapi_USkeletalMeshComponent_RemoveClothCollisionSource(&uapi_USkeletalMeshComponent_RemoveClothCollisionSource);
    }

    auto const apiuapi_USkeletalMeshComponent_RemoveClothCollisionSource2 = (uapi_USkeletalMeshComponent_RemoveClothCollisionSource2Fn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_RemoveClothCollisionSource2_handler\0"));
    if(apiuapi_USkeletalMeshComponent_RemoveClothCollisionSource2){
        apiuapi_USkeletalMeshComponent_RemoveClothCollisionSource2(&uapi_USkeletalMeshComponent_RemoveClothCollisionSource2);
    }

    auto const apiuapi_USkeletalMeshComponent_RequiresPreEndOfFrameSync = (uapi_USkeletalMeshComponent_RequiresPreEndOfFrameSyncFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_RequiresPreEndOfFrameSync_handler\0"));
    if(apiuapi_USkeletalMeshComponent_RequiresPreEndOfFrameSync){
        apiuapi_USkeletalMeshComponent_RequiresPreEndOfFrameSync(&uapi_USkeletalMeshComponent_RequiresPreEndOfFrameSync);
    }

    auto const apiuapi_USkeletalMeshComponent_ResetAllBodiesSimulatePhysics = (uapi_USkeletalMeshComponent_ResetAllBodiesSimulatePhysicsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ResetAllBodiesSimulatePhysics_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ResetAllBodiesSimulatePhysics){
        apiuapi_USkeletalMeshComponent_ResetAllBodiesSimulatePhysics(&uapi_USkeletalMeshComponent_ResetAllBodiesSimulatePhysics);
    }

    auto const apiuapi_USkeletalMeshComponent_ResetAllowedAnimCurveEvaluation = (uapi_USkeletalMeshComponent_ResetAllowedAnimCurveEvaluationFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ResetAllowedAnimCurveEvaluation_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ResetAllowedAnimCurveEvaluation){
        apiuapi_USkeletalMeshComponent_ResetAllowedAnimCurveEvaluation(&uapi_USkeletalMeshComponent_ResetAllowedAnimCurveEvaluation);
    }

    auto const apiuapi_USkeletalMeshComponent_ResetClothCollisionSources = (uapi_USkeletalMeshComponent_ResetClothCollisionSourcesFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ResetClothCollisionSources_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ResetClothCollisionSources){
        apiuapi_USkeletalMeshComponent_ResetClothCollisionSources(&uapi_USkeletalMeshComponent_ResetClothCollisionSources);
    }

    auto const apiuapi_USkeletalMeshComponent_ResetClothTeleportMode = (uapi_USkeletalMeshComponent_ResetClothTeleportModeFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ResetClothTeleportMode_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ResetClothTeleportMode){
        apiuapi_USkeletalMeshComponent_ResetClothTeleportMode(&uapi_USkeletalMeshComponent_ResetClothTeleportMode);
    }

    auto const apiuapi_USkeletalMeshComponent_ResetRootBodyIndex = (uapi_USkeletalMeshComponent_ResetRootBodyIndexFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ResetRootBodyIndex_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ResetRootBodyIndex){
        apiuapi_USkeletalMeshComponent_ResetRootBodyIndex(&uapi_USkeletalMeshComponent_ResetRootBodyIndex);
    }

    auto const apiuapi_USkeletalMeshComponent_ResumeClothingSimulation = (uapi_USkeletalMeshComponent_ResumeClothingSimulationFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ResumeClothingSimulation_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ResumeClothingSimulation){
        apiuapi_USkeletalMeshComponent_ResumeClothingSimulation(&uapi_USkeletalMeshComponent_ResumeClothingSimulation);
    }

    auto const apiuapi_USkeletalMeshComponent_SetAllBodiesCollisionObjectType = (uapi_USkeletalMeshComponent_SetAllBodiesCollisionObjectTypeFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetAllBodiesCollisionObjectType_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetAllBodiesCollisionObjectType){
        apiuapi_USkeletalMeshComponent_SetAllBodiesCollisionObjectType(&uapi_USkeletalMeshComponent_SetAllBodiesCollisionObjectType);
    }

    auto const apiuapi_USkeletalMeshComponent_SetAllBodiesNotifyRigidBodyCollision = (uapi_USkeletalMeshComponent_SetAllBodiesNotifyRigidBodyCollisionFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetAllBodiesNotifyRigidBodyCollision_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetAllBodiesNotifyRigidBodyCollision){
        apiuapi_USkeletalMeshComponent_SetAllBodiesNotifyRigidBodyCollision(&uapi_USkeletalMeshComponent_SetAllBodiesNotifyRigidBodyCollision);
    }

    auto const apiuapi_USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeight = (uapi_USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeightFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeight_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeight){
        apiuapi_USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeight(&uapi_USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeight);
    }

    auto const apiuapi_USkeletalMeshComponent_SetAllBodiesSimulatePhysics = (uapi_USkeletalMeshComponent_SetAllBodiesSimulatePhysicsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetAllBodiesSimulatePhysics_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetAllBodiesSimulatePhysics){
        apiuapi_USkeletalMeshComponent_SetAllBodiesSimulatePhysics(&uapi_USkeletalMeshComponent_SetAllBodiesSimulatePhysics);
    }

    auto const apiuapi_USkeletalMeshComponent_SetAllMassScale = (uapi_USkeletalMeshComponent_SetAllMassScaleFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetAllMassScale_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetAllMassScale){
        apiuapi_USkeletalMeshComponent_SetAllMassScale(&uapi_USkeletalMeshComponent_SetAllMassScale);
    }

    auto const apiuapi_USkeletalMeshComponent_SetAllMotorsAngularDriveParams = (uapi_USkeletalMeshComponent_SetAllMotorsAngularDriveParamsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetAllMotorsAngularDriveParams_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetAllMotorsAngularDriveParams){
        apiuapi_USkeletalMeshComponent_SetAllMotorsAngularDriveParams(&uapi_USkeletalMeshComponent_SetAllMotorsAngularDriveParams);
    }

    auto const apiuapi_USkeletalMeshComponent_SetAllMotorsAngularPositionDrive = (uapi_USkeletalMeshComponent_SetAllMotorsAngularPositionDriveFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetAllMotorsAngularPositionDrive_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetAllMotorsAngularPositionDrive){
        apiuapi_USkeletalMeshComponent_SetAllMotorsAngularPositionDrive(&uapi_USkeletalMeshComponent_SetAllMotorsAngularPositionDrive);
    }

    auto const apiuapi_USkeletalMeshComponent_SetAllMotorsAngularVelocityDrive = (uapi_USkeletalMeshComponent_SetAllMotorsAngularVelocityDriveFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetAllMotorsAngularVelocityDrive_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetAllMotorsAngularVelocityDrive){
        apiuapi_USkeletalMeshComponent_SetAllMotorsAngularVelocityDrive(&uapi_USkeletalMeshComponent_SetAllMotorsAngularVelocityDrive);
    }

    auto const apiuapi_USkeletalMeshComponent_SetAllPhysicsLinearVelocity = (uapi_USkeletalMeshComponent_SetAllPhysicsLinearVelocityFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetAllPhysicsLinearVelocity_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetAllPhysicsLinearVelocity){
        apiuapi_USkeletalMeshComponent_SetAllPhysicsLinearVelocity(&uapi_USkeletalMeshComponent_SetAllPhysicsLinearVelocity);
    }

    auto const apiuapi_USkeletalMeshComponent_SetAllPhysicsPosition = (uapi_USkeletalMeshComponent_SetAllPhysicsPositionFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetAllPhysicsPosition_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetAllPhysicsPosition){
        apiuapi_USkeletalMeshComponent_SetAllPhysicsPosition(&uapi_USkeletalMeshComponent_SetAllPhysicsPosition);
    }

    auto const apiuapi_USkeletalMeshComponent_SetAllPhysicsRotation = (uapi_USkeletalMeshComponent_SetAllPhysicsRotationFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetAllPhysicsRotation_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetAllPhysicsRotation){
        apiuapi_USkeletalMeshComponent_SetAllPhysicsRotation(&uapi_USkeletalMeshComponent_SetAllPhysicsRotation);
    }

    auto const apiuapi_USkeletalMeshComponent_SetAllUseCCD = (uapi_USkeletalMeshComponent_SetAllUseCCDFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetAllUseCCD_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetAllUseCCD){
        apiuapi_USkeletalMeshComponent_SetAllUseCCD(&uapi_USkeletalMeshComponent_SetAllUseCCD);
    }

    auto const apiuapi_USkeletalMeshComponent_SetAllowAnimCurveEvaluation = (uapi_USkeletalMeshComponent_SetAllowAnimCurveEvaluationFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetAllowAnimCurveEvaluation_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetAllowAnimCurveEvaluation){
        apiuapi_USkeletalMeshComponent_SetAllowAnimCurveEvaluation(&uapi_USkeletalMeshComponent_SetAllowAnimCurveEvaluation);
    }

    auto const apiuapi_USkeletalMeshComponent_SetAllowClothActors = (uapi_USkeletalMeshComponent_SetAllowClothActorsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetAllowClothActors_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetAllowClothActors){
        apiuapi_USkeletalMeshComponent_SetAllowClothActors(&uapi_USkeletalMeshComponent_SetAllowClothActors);
    }

    auto const apiuapi_USkeletalMeshComponent_SetAllowRigidBodyAnimNode = (uapi_USkeletalMeshComponent_SetAllowRigidBodyAnimNodeFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetAllowRigidBodyAnimNode_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetAllowRigidBodyAnimNode){
        apiuapi_USkeletalMeshComponent_SetAllowRigidBodyAnimNode(&uapi_USkeletalMeshComponent_SetAllowRigidBodyAnimNode);
    }

    auto const apiuapi_USkeletalMeshComponent_SetAngularLimits = (uapi_USkeletalMeshComponent_SetAngularLimitsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetAngularLimits_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetAngularLimits){
        apiuapi_USkeletalMeshComponent_SetAngularLimits(&uapi_USkeletalMeshComponent_SetAngularLimits);
    }

    auto const apiuapi_USkeletalMeshComponent_SetAnimation = (uapi_USkeletalMeshComponent_SetAnimationFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetAnimation_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetAnimation){
        apiuapi_USkeletalMeshComponent_SetAnimation(&uapi_USkeletalMeshComponent_SetAnimation);
    }

    auto const apiuapi_USkeletalMeshComponent_SetBodyNotifyRigidBodyCollision = (uapi_USkeletalMeshComponent_SetBodyNotifyRigidBodyCollisionFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetBodyNotifyRigidBodyCollision_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetBodyNotifyRigidBodyCollision){
        apiuapi_USkeletalMeshComponent_SetBodyNotifyRigidBodyCollision(&uapi_USkeletalMeshComponent_SetBodyNotifyRigidBodyCollision);
    }

    auto const apiuapi_USkeletalMeshComponent_SetClothMaxDistanceScale = (uapi_USkeletalMeshComponent_SetClothMaxDistanceScaleFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetClothMaxDistanceScale_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetClothMaxDistanceScale){
        apiuapi_USkeletalMeshComponent_SetClothMaxDistanceScale(&uapi_USkeletalMeshComponent_SetClothMaxDistanceScale);
    }

    auto const apiuapi_USkeletalMeshComponent_SetCollisionObjectType = (uapi_USkeletalMeshComponent_SetCollisionObjectTypeFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetCollisionObjectType_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetCollisionObjectType){
        apiuapi_USkeletalMeshComponent_SetCollisionObjectType(&uapi_USkeletalMeshComponent_SetCollisionObjectType);
    }

    auto const apiuapi_USkeletalMeshComponent_SetComponentTickEnabled = (uapi_USkeletalMeshComponent_SetComponentTickEnabledFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetComponentTickEnabled_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetComponentTickEnabled){
        apiuapi_USkeletalMeshComponent_SetComponentTickEnabled(&uapi_USkeletalMeshComponent_SetComponentTickEnabled);
    }

    auto const apiuapi_USkeletalMeshComponent_SetConstraintProfile = (uapi_USkeletalMeshComponent_SetConstraintProfileFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetConstraintProfile_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetConstraintProfile){
        apiuapi_USkeletalMeshComponent_SetConstraintProfile(&uapi_USkeletalMeshComponent_SetConstraintProfile);
    }

    auto const apiuapi_USkeletalMeshComponent_SetConstraintProfileForAll = (uapi_USkeletalMeshComponent_SetConstraintProfileForAllFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetConstraintProfileForAll_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetConstraintProfileForAll){
        apiuapi_USkeletalMeshComponent_SetConstraintProfileForAll(&uapi_USkeletalMeshComponent_SetConstraintProfileForAll);
    }

    auto const apiuapi_USkeletalMeshComponent_SetDisablePostProcessBlueprint = (uapi_USkeletalMeshComponent_SetDisablePostProcessBlueprintFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetDisablePostProcessBlueprint_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetDisablePostProcessBlueprint){
        apiuapi_USkeletalMeshComponent_SetDisablePostProcessBlueprint(&uapi_USkeletalMeshComponent_SetDisablePostProcessBlueprint);
    }

    auto const apiuapi_USkeletalMeshComponent_SetEnableBodyGravity = (uapi_USkeletalMeshComponent_SetEnableBodyGravityFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetEnableBodyGravity_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetEnableBodyGravity){
        apiuapi_USkeletalMeshComponent_SetEnableBodyGravity(&uapi_USkeletalMeshComponent_SetEnableBodyGravity);
    }

    auto const apiuapi_USkeletalMeshComponent_SetEnableGravity = (uapi_USkeletalMeshComponent_SetEnableGravityFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetEnableGravity_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetEnableGravity){
        apiuapi_USkeletalMeshComponent_SetEnableGravity(&uapi_USkeletalMeshComponent_SetEnableGravity);
    }

    auto const apiuapi_USkeletalMeshComponent_SetEnableGravityOnAllBodiesBelow = (uapi_USkeletalMeshComponent_SetEnableGravityOnAllBodiesBelowFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetEnableGravityOnAllBodiesBelow_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetEnableGravityOnAllBodiesBelow){
        apiuapi_USkeletalMeshComponent_SetEnableGravityOnAllBodiesBelow(&uapi_USkeletalMeshComponent_SetEnableGravityOnAllBodiesBelow);
    }

    auto const apiuapi_USkeletalMeshComponent_SetEnablePhysicsBlending = (uapi_USkeletalMeshComponent_SetEnablePhysicsBlendingFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetEnablePhysicsBlending_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetEnablePhysicsBlending){
        apiuapi_USkeletalMeshComponent_SetEnablePhysicsBlending(&uapi_USkeletalMeshComponent_SetEnablePhysicsBlending);
    }

    auto const apiuapi_USkeletalMeshComponent_SetForceRefPose = (uapi_USkeletalMeshComponent_SetForceRefPoseFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetForceRefPose_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetForceRefPose){
        apiuapi_USkeletalMeshComponent_SetForceRefPose(&uapi_USkeletalMeshComponent_SetForceRefPose);
    }

    auto const apiuapi_USkeletalMeshComponent_SetMorphTarget = (uapi_USkeletalMeshComponent_SetMorphTargetFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetMorphTarget_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetMorphTarget){
        apiuapi_USkeletalMeshComponent_SetMorphTarget(&uapi_USkeletalMeshComponent_SetMorphTarget);
    }

    auto const apiuapi_USkeletalMeshComponent_SetNotifyRigidBodyCollision = (uapi_USkeletalMeshComponent_SetNotifyRigidBodyCollisionFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetNotifyRigidBodyCollision_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetNotifyRigidBodyCollision){
        apiuapi_USkeletalMeshComponent_SetNotifyRigidBodyCollision(&uapi_USkeletalMeshComponent_SetNotifyRigidBodyCollision);
    }

    auto const apiuapi_USkeletalMeshComponent_SetNotifyRigidBodyCollisionBelow = (uapi_USkeletalMeshComponent_SetNotifyRigidBodyCollisionBelowFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetNotifyRigidBodyCollisionBelow_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetNotifyRigidBodyCollisionBelow){
        apiuapi_USkeletalMeshComponent_SetNotifyRigidBodyCollisionBelow(&uapi_USkeletalMeshComponent_SetNotifyRigidBodyCollisionBelow);
    }

    auto const apiuapi_USkeletalMeshComponent_SetPhysMaterialOverride = (uapi_USkeletalMeshComponent_SetPhysMaterialOverrideFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetPhysMaterialOverride_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetPhysMaterialOverride){
        apiuapi_USkeletalMeshComponent_SetPhysMaterialOverride(&uapi_USkeletalMeshComponent_SetPhysMaterialOverride);
    }

    auto const apiuapi_USkeletalMeshComponent_SetPhysicsAsset = (uapi_USkeletalMeshComponent_SetPhysicsAssetFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetPhysicsAsset_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetPhysicsAsset){
        apiuapi_USkeletalMeshComponent_SetPhysicsAsset(&uapi_USkeletalMeshComponent_SetPhysicsAsset);
    }

    auto const apiuapi_USkeletalMeshComponent_SetPhysicsBlendWeight = (uapi_USkeletalMeshComponent_SetPhysicsBlendWeightFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetPhysicsBlendWeight_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetPhysicsBlendWeight){
        apiuapi_USkeletalMeshComponent_SetPhysicsBlendWeight(&uapi_USkeletalMeshComponent_SetPhysicsBlendWeight);
    }

    auto const apiuapi_USkeletalMeshComponent_SetPlayRate = (uapi_USkeletalMeshComponent_SetPlayRateFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetPlayRate_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetPlayRate){
        apiuapi_USkeletalMeshComponent_SetPlayRate(&uapi_USkeletalMeshComponent_SetPlayRate);
    }

    auto const apiuapi_USkeletalMeshComponent_SetPosition = (uapi_USkeletalMeshComponent_SetPositionFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetPosition_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetPosition){
        apiuapi_USkeletalMeshComponent_SetPosition(&uapi_USkeletalMeshComponent_SetPosition);
    }

    auto const apiuapi_USkeletalMeshComponent_SetPredictedLODLevel = (uapi_USkeletalMeshComponent_SetPredictedLODLevelFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetPredictedLODLevel_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetPredictedLODLevel){
        apiuapi_USkeletalMeshComponent_SetPredictedLODLevel(&uapi_USkeletalMeshComponent_SetPredictedLODLevel);
    }

    auto const apiuapi_USkeletalMeshComponent_SetRootBodyIndex = (uapi_USkeletalMeshComponent_SetRootBodyIndexFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetRootBodyIndex_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetRootBodyIndex){
        apiuapi_USkeletalMeshComponent_SetRootBodyIndex(&uapi_USkeletalMeshComponent_SetRootBodyIndex);
    }

    auto const apiuapi_USkeletalMeshComponent_SetSimulatePhysics = (uapi_USkeletalMeshComponent_SetSimulatePhysicsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetSimulatePhysics_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetSimulatePhysics){
        apiuapi_USkeletalMeshComponent_SetSimulatePhysics(&uapi_USkeletalMeshComponent_SetSimulatePhysics);
    }

    auto const apiuapi_USkeletalMeshComponent_SetSkeletalMeshAsset = (uapi_USkeletalMeshComponent_SetSkeletalMeshAssetFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetSkeletalMeshAsset_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetSkeletalMeshAsset){
        apiuapi_USkeletalMeshComponent_SetSkeletalMeshAsset(&uapi_USkeletalMeshComponent_SetSkeletalMeshAsset);
    }

    auto const apiuapi_USkeletalMeshComponent_SetSkinnedAssetAndUpdate = (uapi_USkeletalMeshComponent_SetSkinnedAssetAndUpdateFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetSkinnedAssetAndUpdate_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetSkinnedAssetAndUpdate){
        apiuapi_USkeletalMeshComponent_SetSkinnedAssetAndUpdate(&uapi_USkeletalMeshComponent_SetSkinnedAssetAndUpdate);
    }

    auto const apiuapi_USkeletalMeshComponent_SetTeleportDistanceThreshold = (uapi_USkeletalMeshComponent_SetTeleportDistanceThresholdFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetTeleportDistanceThreshold_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetTeleportDistanceThreshold){
        apiuapi_USkeletalMeshComponent_SetTeleportDistanceThreshold(&uapi_USkeletalMeshComponent_SetTeleportDistanceThreshold);
    }

    auto const apiuapi_USkeletalMeshComponent_SetTeleportRotationThreshold = (uapi_USkeletalMeshComponent_SetTeleportRotationThresholdFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetTeleportRotationThreshold_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetTeleportRotationThreshold){
        apiuapi_USkeletalMeshComponent_SetTeleportRotationThreshold(&uapi_USkeletalMeshComponent_SetTeleportRotationThreshold);
    }

    auto const apiuapi_USkeletalMeshComponent_SetUpdateAnimationInEditor = (uapi_USkeletalMeshComponent_SetUpdateAnimationInEditorFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetUpdateAnimationInEditor_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetUpdateAnimationInEditor){
        apiuapi_USkeletalMeshComponent_SetUpdateAnimationInEditor(&uapi_USkeletalMeshComponent_SetUpdateAnimationInEditor);
    }

    auto const apiuapi_USkeletalMeshComponent_SetUpdateClothInEditor = (uapi_USkeletalMeshComponent_SetUpdateClothInEditorFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SetUpdateClothInEditor_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SetUpdateClothInEditor){
        apiuapi_USkeletalMeshComponent_SetUpdateClothInEditor(&uapi_USkeletalMeshComponent_SetUpdateClothInEditor);
    }

    auto const apiuapi_USkeletalMeshComponent_ShouldEvaluatePostProcessInstance = (uapi_USkeletalMeshComponent_ShouldEvaluatePostProcessInstanceFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ShouldEvaluatePostProcessInstance_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ShouldEvaluatePostProcessInstance){
        apiuapi_USkeletalMeshComponent_ShouldEvaluatePostProcessInstance(&uapi_USkeletalMeshComponent_ShouldEvaluatePostProcessInstance);
    }

    auto const apiuapi_USkeletalMeshComponent_ShouldOnlyTickMontages = (uapi_USkeletalMeshComponent_ShouldOnlyTickMontagesFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ShouldOnlyTickMontages_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ShouldOnlyTickMontages){
        apiuapi_USkeletalMeshComponent_ShouldOnlyTickMontages(&uapi_USkeletalMeshComponent_ShouldOnlyTickMontages);
    }

    auto const apiuapi_USkeletalMeshComponent_ShouldPostUpdatePostProcessInstance = (uapi_USkeletalMeshComponent_ShouldPostUpdatePostProcessInstanceFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ShouldPostUpdatePostProcessInstance_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ShouldPostUpdatePostProcessInstance){
        apiuapi_USkeletalMeshComponent_ShouldPostUpdatePostProcessInstance(&uapi_USkeletalMeshComponent_ShouldPostUpdatePostProcessInstance);
    }

    auto const apiuapi_USkeletalMeshComponent_ShouldTickAnimation = (uapi_USkeletalMeshComponent_ShouldTickAnimationFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ShouldTickAnimation_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ShouldTickAnimation){
        apiuapi_USkeletalMeshComponent_ShouldTickAnimation(&uapi_USkeletalMeshComponent_ShouldTickAnimation);
    }

    auto const apiuapi_USkeletalMeshComponent_ShouldTickPose = (uapi_USkeletalMeshComponent_ShouldTickPoseFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ShouldTickPose_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ShouldTickPose){
        apiuapi_USkeletalMeshComponent_ShouldTickPose(&uapi_USkeletalMeshComponent_ShouldTickPose);
    }

    auto const apiuapi_USkeletalMeshComponent_ShouldUpdatePostProcessInstance = (uapi_USkeletalMeshComponent_ShouldUpdatePostProcessInstanceFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ShouldUpdatePostProcessInstance_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ShouldUpdatePostProcessInstance){
        apiuapi_USkeletalMeshComponent_ShouldUpdatePostProcessInstance(&uapi_USkeletalMeshComponent_ShouldUpdatePostProcessInstance);
    }

    auto const apiuapi_USkeletalMeshComponent_ShouldUpdateTransform = (uapi_USkeletalMeshComponent_ShouldUpdateTransformFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ShouldUpdateTransform_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ShouldUpdateTransform){
        apiuapi_USkeletalMeshComponent_ShouldUpdateTransform(&uapi_USkeletalMeshComponent_ShouldUpdateTransform);
    }

    auto const apiuapi_USkeletalMeshComponent_SkelMeshCompOnParticleSystemFinished = (uapi_USkeletalMeshComponent_SkelMeshCompOnParticleSystemFinishedFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SkelMeshCompOnParticleSystemFinished_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SkelMeshCompOnParticleSystemFinished){
        apiuapi_USkeletalMeshComponent_SkelMeshCompOnParticleSystemFinished(&uapi_USkeletalMeshComponent_SkelMeshCompOnParticleSystemFinished);
    }

    auto const apiuapi_USkeletalMeshComponent_Stop = (uapi_USkeletalMeshComponent_StopFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_Stop_handler\0"));
    if(apiuapi_USkeletalMeshComponent_Stop){
        apiuapi_USkeletalMeshComponent_Stop(&uapi_USkeletalMeshComponent_Stop);
    }

    auto const apiuapi_USkeletalMeshComponent_SuspendClothingSimulation = (uapi_USkeletalMeshComponent_SuspendClothingSimulationFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_SuspendClothingSimulation_handler\0"));
    if(apiuapi_USkeletalMeshComponent_SuspendClothingSimulation){
        apiuapi_USkeletalMeshComponent_SuspendClothingSimulation(&uapi_USkeletalMeshComponent_SuspendClothingSimulation);
    }

    auto const apiuapi_USkeletalMeshComponent_TermArticulated = (uapi_USkeletalMeshComponent_TermArticulatedFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_TermArticulated_handler\0"));
    if(apiuapi_USkeletalMeshComponent_TermArticulated){
        apiuapi_USkeletalMeshComponent_TermArticulated(&uapi_USkeletalMeshComponent_TermArticulated);
    }

    auto const apiuapi_USkeletalMeshComponent_TermBodiesBelow = (uapi_USkeletalMeshComponent_TermBodiesBelowFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_TermBodiesBelow_handler\0"));
    if(apiuapi_USkeletalMeshComponent_TermBodiesBelow){
        apiuapi_USkeletalMeshComponent_TermBodiesBelow(&uapi_USkeletalMeshComponent_TermBodiesBelow);
    }

    auto const apiuapi_USkeletalMeshComponent_TermCollisionRelationships = (uapi_USkeletalMeshComponent_TermCollisionRelationshipsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_TermCollisionRelationships_handler\0"));
    if(apiuapi_USkeletalMeshComponent_TermCollisionRelationships){
        apiuapi_USkeletalMeshComponent_TermCollisionRelationships(&uapi_USkeletalMeshComponent_TermCollisionRelationships);
    }

    auto const apiuapi_USkeletalMeshComponent_TickAnimInstances = (uapi_USkeletalMeshComponent_TickAnimInstancesFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_TickAnimInstances_handler\0"));
    if(apiuapi_USkeletalMeshComponent_TickAnimInstances){
        apiuapi_USkeletalMeshComponent_TickAnimInstances(&uapi_USkeletalMeshComponent_TickAnimInstances);
    }

    auto const apiuapi_USkeletalMeshComponent_TickAnimation = (uapi_USkeletalMeshComponent_TickAnimationFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_TickAnimation_handler\0"));
    if(apiuapi_USkeletalMeshComponent_TickAnimation){
        apiuapi_USkeletalMeshComponent_TickAnimation(&uapi_USkeletalMeshComponent_TickAnimation);
    }

    auto const apiuapi_USkeletalMeshComponent_TickPose = (uapi_USkeletalMeshComponent_TickPoseFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_TickPose_handler\0"));
    if(apiuapi_USkeletalMeshComponent_TickPose){
        apiuapi_USkeletalMeshComponent_TickPose(&uapi_USkeletalMeshComponent_TickPose);
    }

    auto const apiuapi_USkeletalMeshComponent_ToggleDisablePostProcessBlueprint = (uapi_USkeletalMeshComponent_ToggleDisablePostProcessBlueprintFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ToggleDisablePostProcessBlueprint_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ToggleDisablePostProcessBlueprint){
        apiuapi_USkeletalMeshComponent_ToggleDisablePostProcessBlueprint(&uapi_USkeletalMeshComponent_ToggleDisablePostProcessBlueprint);
    }

    auto const apiuapi_USkeletalMeshComponent_UnHideBone = (uapi_USkeletalMeshComponent_UnHideBoneFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_UnHideBone_handler\0"));
    if(apiuapi_USkeletalMeshComponent_UnHideBone){
        apiuapi_USkeletalMeshComponent_UnHideBone(&uapi_USkeletalMeshComponent_UnHideBone);
    }

    auto const apiuapi_USkeletalMeshComponent_UnbindClothFromLeaderPoseComponent = (uapi_USkeletalMeshComponent_UnbindClothFromLeaderPoseComponentFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_UnbindClothFromLeaderPoseComponent_handler\0"));
    if(apiuapi_USkeletalMeshComponent_UnbindClothFromLeaderPoseComponent){
        apiuapi_USkeletalMeshComponent_UnbindClothFromLeaderPoseComponent(&uapi_USkeletalMeshComponent_UnbindClothFromLeaderPoseComponent);
    }

    auto const apiuapi_USkeletalMeshComponent_UpdateBoneBodyMapping = (uapi_USkeletalMeshComponent_UpdateBoneBodyMappingFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_UpdateBoneBodyMapping_handler\0"));
    if(apiuapi_USkeletalMeshComponent_UpdateBoneBodyMapping){
        apiuapi_USkeletalMeshComponent_UpdateBoneBodyMapping(&uapi_USkeletalMeshComponent_UpdateBoneBodyMapping);
    }

    auto const apiuapi_USkeletalMeshComponent_UpdateClothTransform = (uapi_USkeletalMeshComponent_UpdateClothTransformFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_UpdateClothTransform_handler\0"));
    if(apiuapi_USkeletalMeshComponent_UpdateClothTransform){
        apiuapi_USkeletalMeshComponent_UpdateClothTransform(&uapi_USkeletalMeshComponent_UpdateClothTransform);
    }

    auto const apiuapi_USkeletalMeshComponent_UpdateCollisionProfile = (uapi_USkeletalMeshComponent_UpdateCollisionProfileFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_UpdateCollisionProfile_handler\0"));
    if(apiuapi_USkeletalMeshComponent_UpdateCollisionProfile){
        apiuapi_USkeletalMeshComponent_UpdateCollisionProfile(&uapi_USkeletalMeshComponent_UpdateCollisionProfile);
    }

    auto const apiuapi_USkeletalMeshComponent_UpdateFollowerComponent = (uapi_USkeletalMeshComponent_UpdateFollowerComponentFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_UpdateFollowerComponent_handler\0"));
    if(apiuapi_USkeletalMeshComponent_UpdateFollowerComponent){
        apiuapi_USkeletalMeshComponent_UpdateFollowerComponent(&uapi_USkeletalMeshComponent_UpdateFollowerComponent);
    }

    auto const apiuapi_USkeletalMeshComponent_UpdateHasValidBodies = (uapi_USkeletalMeshComponent_UpdateHasValidBodiesFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_UpdateHasValidBodies_handler\0"));
    if(apiuapi_USkeletalMeshComponent_UpdateHasValidBodies){
        apiuapi_USkeletalMeshComponent_UpdateHasValidBodies(&uapi_USkeletalMeshComponent_UpdateHasValidBodies);
    }

    auto const apiuapi_USkeletalMeshComponent_UpdateLODStatus = (uapi_USkeletalMeshComponent_UpdateLODStatusFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_UpdateLODStatus_handler\0"));
    if(apiuapi_USkeletalMeshComponent_UpdateLODStatus){
        apiuapi_USkeletalMeshComponent_UpdateLODStatus(&uapi_USkeletalMeshComponent_UpdateLODStatus);
    }

    auto const apiuapi_USkeletalMeshComponent_UpdateMeshForBrokenConstraints = (uapi_USkeletalMeshComponent_UpdateMeshForBrokenConstraintsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_UpdateMeshForBrokenConstraints_handler\0"));
    if(apiuapi_USkeletalMeshComponent_UpdateMeshForBrokenConstraints){
        apiuapi_USkeletalMeshComponent_UpdateMeshForBrokenConstraints(&uapi_USkeletalMeshComponent_UpdateMeshForBrokenConstraints);
    }

    auto const apiuapi_USkeletalMeshComponent_UpdateOverlapsImpl = (uapi_USkeletalMeshComponent_UpdateOverlapsImplFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_UpdateOverlapsImpl_handler\0"));
    if(apiuapi_USkeletalMeshComponent_UpdateOverlapsImpl){
        apiuapi_USkeletalMeshComponent_UpdateOverlapsImpl(&uapi_USkeletalMeshComponent_UpdateOverlapsImpl);
    }

    auto const apiuapi_USkeletalMeshComponent_UpdatePhysicsToRBChannels = (uapi_USkeletalMeshComponent_UpdatePhysicsToRBChannelsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_UpdatePhysicsToRBChannels_handler\0"));
    if(apiuapi_USkeletalMeshComponent_UpdatePhysicsToRBChannels){
        apiuapi_USkeletalMeshComponent_UpdatePhysicsToRBChannels(&uapi_USkeletalMeshComponent_UpdatePhysicsToRBChannels);
    }

    auto const apiuapi_USkeletalMeshComponent_UpdatePoseWatches = (uapi_USkeletalMeshComponent_UpdatePoseWatchesFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_UpdatePoseWatches_handler\0"));
    if(apiuapi_USkeletalMeshComponent_UpdatePoseWatches){
        apiuapi_USkeletalMeshComponent_UpdatePoseWatches(&uapi_USkeletalMeshComponent_UpdatePoseWatches);
    }

    auto const apiuapi_USkeletalMeshComponent_UpdateRBJointMotors = (uapi_USkeletalMeshComponent_UpdateRBJointMotorsFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_UpdateRBJointMotors_handler\0"));
    if(apiuapi_USkeletalMeshComponent_UpdateRBJointMotors){
        apiuapi_USkeletalMeshComponent_UpdateRBJointMotors(&uapi_USkeletalMeshComponent_UpdateRBJointMotors);
    }

    auto const apiuapi_USkeletalMeshComponent_ValidateAnimation = (uapi_USkeletalMeshComponent_ValidateAnimationFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_ValidateAnimation_handler\0"));
    if(apiuapi_USkeletalMeshComponent_ValidateAnimation){
        apiuapi_USkeletalMeshComponent_ValidateAnimation(&uapi_USkeletalMeshComponent_ValidateAnimation);
    }

    auto const apiuapi_USkeletalMeshComponent_WakeAllRigidBodies = (uapi_USkeletalMeshComponent_WakeAllRigidBodiesFn)plugin->GetDllExport(TEXT("set_USkeletalMeshComponent_WakeAllRigidBodies_handler\0"));
    if(apiuapi_USkeletalMeshComponent_WakeAllRigidBodies){
        apiuapi_USkeletalMeshComponent_WakeAllRigidBodies(&uapi_USkeletalMeshComponent_WakeAllRigidBodies);
    }

    auto const apiuapi_UCapsuleComponent_CalcBoundingCylinder = (uapi_UCapsuleComponent_CalcBoundingCylinderFn)plugin->GetDllExport(TEXT("set_UCapsuleComponent_CalcBoundingCylinder_handler\0"));
    if(apiuapi_UCapsuleComponent_CalcBoundingCylinder){
        apiuapi_UCapsuleComponent_CalcBoundingCylinder(&uapi_UCapsuleComponent_CalcBoundingCylinder);
    }

    auto const apiuapi_UCapsuleComponent_CreateSceneProxy = (uapi_UCapsuleComponent_CreateSceneProxyFn)plugin->GetDllExport(TEXT("set_UCapsuleComponent_CreateSceneProxy_handler\0"));
    if(apiuapi_UCapsuleComponent_CreateSceneProxy){
        apiuapi_UCapsuleComponent_CreateSceneProxy(&uapi_UCapsuleComponent_CreateSceneProxy);
    }

    auto const apiuapi_UCapsuleComponent_GetCollisionShape = (uapi_UCapsuleComponent_GetCollisionShapeFn)plugin->GetDllExport(TEXT("set_UCapsuleComponent_GetCollisionShape_handler\0"));
    if(apiuapi_UCapsuleComponent_GetCollisionShape){
        apiuapi_UCapsuleComponent_GetCollisionShape(&uapi_UCapsuleComponent_GetCollisionShape);
    }

    auto const apiuapi_UCapsuleComponent_GetScaledCapsuleHalfHeight = (uapi_UCapsuleComponent_GetScaledCapsuleHalfHeightFn)plugin->GetDllExport(TEXT("set_UCapsuleComponent_GetScaledCapsuleHalfHeight_handler\0"));
    if(apiuapi_UCapsuleComponent_GetScaledCapsuleHalfHeight){
        apiuapi_UCapsuleComponent_GetScaledCapsuleHalfHeight(&uapi_UCapsuleComponent_GetScaledCapsuleHalfHeight);
    }

    auto const apiuapi_UCapsuleComponent_GetScaledCapsuleHalfHeight_WithoutHemisphere = (uapi_UCapsuleComponent_GetScaledCapsuleHalfHeight_WithoutHemisphereFn)plugin->GetDllExport(TEXT("set_UCapsuleComponent_GetScaledCapsuleHalfHeight_WithoutHemisphere_handler\0"));
    if(apiuapi_UCapsuleComponent_GetScaledCapsuleHalfHeight_WithoutHemisphere){
        apiuapi_UCapsuleComponent_GetScaledCapsuleHalfHeight_WithoutHemisphere(&uapi_UCapsuleComponent_GetScaledCapsuleHalfHeight_WithoutHemisphere);
    }

    auto const apiuapi_UCapsuleComponent_GetScaledCapsuleRadius = (uapi_UCapsuleComponent_GetScaledCapsuleRadiusFn)plugin->GetDllExport(TEXT("set_UCapsuleComponent_GetScaledCapsuleRadius_handler\0"));
    if(apiuapi_UCapsuleComponent_GetScaledCapsuleRadius){
        apiuapi_UCapsuleComponent_GetScaledCapsuleRadius(&uapi_UCapsuleComponent_GetScaledCapsuleRadius);
    }

    auto const apiuapi_UCapsuleComponent_GetScaledCapsuleSize = (uapi_UCapsuleComponent_GetScaledCapsuleSizeFn)plugin->GetDllExport(TEXT("set_UCapsuleComponent_GetScaledCapsuleSize_handler\0"));
    if(apiuapi_UCapsuleComponent_GetScaledCapsuleSize){
        apiuapi_UCapsuleComponent_GetScaledCapsuleSize(&uapi_UCapsuleComponent_GetScaledCapsuleSize);
    }

    auto const apiuapi_UCapsuleComponent_GetScaledCapsuleSize_WithoutHemisphere = (uapi_UCapsuleComponent_GetScaledCapsuleSize_WithoutHemisphereFn)plugin->GetDllExport(TEXT("set_UCapsuleComponent_GetScaledCapsuleSize_WithoutHemisphere_handler\0"));
    if(apiuapi_UCapsuleComponent_GetScaledCapsuleSize_WithoutHemisphere){
        apiuapi_UCapsuleComponent_GetScaledCapsuleSize_WithoutHemisphere(&uapi_UCapsuleComponent_GetScaledCapsuleSize_WithoutHemisphere);
    }

    auto const apiuapi_UCapsuleComponent_GetShapeScale = (uapi_UCapsuleComponent_GetShapeScaleFn)plugin->GetDllExport(TEXT("set_UCapsuleComponent_GetShapeScale_handler\0"));
    if(apiuapi_UCapsuleComponent_GetShapeScale){
        apiuapi_UCapsuleComponent_GetShapeScale(&uapi_UCapsuleComponent_GetShapeScale);
    }

    auto const apiuapi_UCapsuleComponent_GetUnscaledCapsuleHalfHeight = (uapi_UCapsuleComponent_GetUnscaledCapsuleHalfHeightFn)plugin->GetDllExport(TEXT("set_UCapsuleComponent_GetUnscaledCapsuleHalfHeight_handler\0"));
    if(apiuapi_UCapsuleComponent_GetUnscaledCapsuleHalfHeight){
        apiuapi_UCapsuleComponent_GetUnscaledCapsuleHalfHeight(&uapi_UCapsuleComponent_GetUnscaledCapsuleHalfHeight);
    }

    auto const apiuapi_UCapsuleComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphere = (uapi_UCapsuleComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphereFn)plugin->GetDllExport(TEXT("set_UCapsuleComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphere_handler\0"));
    if(apiuapi_UCapsuleComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphere){
        apiuapi_UCapsuleComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphere(&uapi_UCapsuleComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphere);
    }

    auto const apiuapi_UCapsuleComponent_GetUnscaledCapsuleRadius = (uapi_UCapsuleComponent_GetUnscaledCapsuleRadiusFn)plugin->GetDllExport(TEXT("set_UCapsuleComponent_GetUnscaledCapsuleRadius_handler\0"));
    if(apiuapi_UCapsuleComponent_GetUnscaledCapsuleRadius){
        apiuapi_UCapsuleComponent_GetUnscaledCapsuleRadius(&uapi_UCapsuleComponent_GetUnscaledCapsuleRadius);
    }

    auto const apiuapi_UCapsuleComponent_GetUnscaledCapsuleSize = (uapi_UCapsuleComponent_GetUnscaledCapsuleSizeFn)plugin->GetDllExport(TEXT("set_UCapsuleComponent_GetUnscaledCapsuleSize_handler\0"));
    if(apiuapi_UCapsuleComponent_GetUnscaledCapsuleSize){
        apiuapi_UCapsuleComponent_GetUnscaledCapsuleSize(&uapi_UCapsuleComponent_GetUnscaledCapsuleSize);
    }

    auto const apiuapi_UCapsuleComponent_GetUnscaledCapsuleSize_WithoutHemisphere = (uapi_UCapsuleComponent_GetUnscaledCapsuleSize_WithoutHemisphereFn)plugin->GetDllExport(TEXT("set_UCapsuleComponent_GetUnscaledCapsuleSize_WithoutHemisphere_handler\0"));
    if(apiuapi_UCapsuleComponent_GetUnscaledCapsuleSize_WithoutHemisphere){
        apiuapi_UCapsuleComponent_GetUnscaledCapsuleSize_WithoutHemisphere(&uapi_UCapsuleComponent_GetUnscaledCapsuleSize_WithoutHemisphere);
    }

    auto const apiuapi_UCapsuleComponent_InitCapsuleSize = (uapi_UCapsuleComponent_InitCapsuleSizeFn)plugin->GetDllExport(TEXT("set_UCapsuleComponent_InitCapsuleSize_handler\0"));
    if(apiuapi_UCapsuleComponent_InitCapsuleSize){
        apiuapi_UCapsuleComponent_InitCapsuleSize(&uapi_UCapsuleComponent_InitCapsuleSize);
    }

    auto const apiuapi_UCapsuleComponent_IsZeroExtent = (uapi_UCapsuleComponent_IsZeroExtentFn)plugin->GetDllExport(TEXT("set_UCapsuleComponent_IsZeroExtent_handler\0"));
    if(apiuapi_UCapsuleComponent_IsZeroExtent){
        apiuapi_UCapsuleComponent_IsZeroExtent(&uapi_UCapsuleComponent_IsZeroExtent);
    }

    auto const apiuapi_UCapsuleComponent_PostLoad = (uapi_UCapsuleComponent_PostLoadFn)plugin->GetDllExport(TEXT("set_UCapsuleComponent_PostLoad_handler\0"));
    if(apiuapi_UCapsuleComponent_PostLoad){
        apiuapi_UCapsuleComponent_PostLoad(&uapi_UCapsuleComponent_PostLoad);
    }

    auto const apiuapi_UCapsuleComponent_SetCapsuleHalfHeight = (uapi_UCapsuleComponent_SetCapsuleHalfHeightFn)plugin->GetDllExport(TEXT("set_UCapsuleComponent_SetCapsuleHalfHeight_handler\0"));
    if(apiuapi_UCapsuleComponent_SetCapsuleHalfHeight){
        apiuapi_UCapsuleComponent_SetCapsuleHalfHeight(&uapi_UCapsuleComponent_SetCapsuleHalfHeight);
    }

    auto const apiuapi_UCapsuleComponent_SetCapsuleRadius = (uapi_UCapsuleComponent_SetCapsuleRadiusFn)plugin->GetDllExport(TEXT("set_UCapsuleComponent_SetCapsuleRadius_handler\0"));
    if(apiuapi_UCapsuleComponent_SetCapsuleRadius){
        apiuapi_UCapsuleComponent_SetCapsuleRadius(&uapi_UCapsuleComponent_SetCapsuleRadius);
    }

    auto const apiuapi_UCapsuleComponent_SetCapsuleSize = (uapi_UCapsuleComponent_SetCapsuleSizeFn)plugin->GetDllExport(TEXT("set_UCapsuleComponent_SetCapsuleSize_handler\0"));
    if(apiuapi_UCapsuleComponent_SetCapsuleSize){
        apiuapi_UCapsuleComponent_SetCapsuleSize(&uapi_UCapsuleComponent_SetCapsuleSize);
    }

    auto const apiuapi_UCapsuleComponent_UpdateBodySetup = (uapi_UCapsuleComponent_UpdateBodySetupFn)plugin->GetDllExport(TEXT("set_UCapsuleComponent_UpdateBodySetup_handler\0"));
    if(apiuapi_UCapsuleComponent_UpdateBodySetup){
        apiuapi_UCapsuleComponent_UpdateBodySetup(&uapi_UCapsuleComponent_UpdateBodySetup);
    }

    auto const apiuapi_UCharacterMovementComponent_AddForce = (uapi_UCharacterMovementComponent_AddForceFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_AddForce_handler\0"));
    if(apiuapi_UCharacterMovementComponent_AddForce){
        apiuapi_UCharacterMovementComponent_AddForce(&uapi_UCharacterMovementComponent_AddForce);
    }

    auto const apiuapi_UCharacterMovementComponent_AddImpulse = (uapi_UCharacterMovementComponent_AddImpulseFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_AddImpulse_handler\0"));
    if(apiuapi_UCharacterMovementComponent_AddImpulse){
        apiuapi_UCharacterMovementComponent_AddImpulse(&uapi_UCharacterMovementComponent_AddImpulse);
    }

    auto const apiuapi_UCharacterMovementComponent_AdjustFloorHeight = (uapi_UCharacterMovementComponent_AdjustFloorHeightFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_AdjustFloorHeight_handler\0"));
    if(apiuapi_UCharacterMovementComponent_AdjustFloorHeight){
        apiuapi_UCharacterMovementComponent_AdjustFloorHeight(&uapi_UCharacterMovementComponent_AdjustFloorHeight);
    }

    auto const apiuapi_UCharacterMovementComponent_ApplyAccumulatedForces = (uapi_UCharacterMovementComponent_ApplyAccumulatedForcesFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_ApplyAccumulatedForces_handler\0"));
    if(apiuapi_UCharacterMovementComponent_ApplyAccumulatedForces){
        apiuapi_UCharacterMovementComponent_ApplyAccumulatedForces(&uapi_UCharacterMovementComponent_ApplyAccumulatedForces);
    }

    auto const apiuapi_UCharacterMovementComponent_ApplyDownwardForce = (uapi_UCharacterMovementComponent_ApplyDownwardForceFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_ApplyDownwardForce_handler\0"));
    if(apiuapi_UCharacterMovementComponent_ApplyDownwardForce){
        apiuapi_UCharacterMovementComponent_ApplyDownwardForce(&uapi_UCharacterMovementComponent_ApplyDownwardForce);
    }

    auto const apiuapi_UCharacterMovementComponent_ApplyNetworkMovementMode = (uapi_UCharacterMovementComponent_ApplyNetworkMovementModeFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_ApplyNetworkMovementMode_handler\0"));
    if(apiuapi_UCharacterMovementComponent_ApplyNetworkMovementMode){
        apiuapi_UCharacterMovementComponent_ApplyNetworkMovementMode(&uapi_UCharacterMovementComponent_ApplyNetworkMovementMode);
    }

    auto const apiuapi_UCharacterMovementComponent_ApplyRepulsionForce = (uapi_UCharacterMovementComponent_ApplyRepulsionForceFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_ApplyRepulsionForce_handler\0"));
    if(apiuapi_UCharacterMovementComponent_ApplyRepulsionForce){
        apiuapi_UCharacterMovementComponent_ApplyRepulsionForce(&uapi_UCharacterMovementComponent_ApplyRepulsionForce);
    }

    auto const apiuapi_UCharacterMovementComponent_BeginDestroy = (uapi_UCharacterMovementComponent_BeginDestroyFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_BeginDestroy_handler\0"));
    if(apiuapi_UCharacterMovementComponent_BeginDestroy){
        apiuapi_UCharacterMovementComponent_BeginDestroy(&uapi_UCharacterMovementComponent_BeginDestroy);
    }

    auto const apiuapi_UCharacterMovementComponent_BeginPlay = (uapi_UCharacterMovementComponent_BeginPlayFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_BeginPlay_handler\0"));
    if(apiuapi_UCharacterMovementComponent_BeginPlay){
        apiuapi_UCharacterMovementComponent_BeginPlay(&uapi_UCharacterMovementComponent_BeginPlay);
    }

    auto const apiuapi_UCharacterMovementComponent_CalcAvoidanceVelocity = (uapi_UCharacterMovementComponent_CalcAvoidanceVelocityFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_CalcAvoidanceVelocity_handler\0"));
    if(apiuapi_UCharacterMovementComponent_CalcAvoidanceVelocity){
        apiuapi_UCharacterMovementComponent_CalcAvoidanceVelocity(&uapi_UCharacterMovementComponent_CalcAvoidanceVelocity);
    }

    auto const apiuapi_UCharacterMovementComponent_CalcVelocity = (uapi_UCharacterMovementComponent_CalcVelocityFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_CalcVelocity_handler\0"));
    if(apiuapi_UCharacterMovementComponent_CalcVelocity){
        apiuapi_UCharacterMovementComponent_CalcVelocity(&uapi_UCharacterMovementComponent_CalcVelocity);
    }

    auto const apiuapi_UCharacterMovementComponent_CanAttemptJump = (uapi_UCharacterMovementComponent_CanAttemptJumpFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_CanAttemptJump_handler\0"));
    if(apiuapi_UCharacterMovementComponent_CanAttemptJump){
        apiuapi_UCharacterMovementComponent_CanAttemptJump(&uapi_UCharacterMovementComponent_CanAttemptJump);
    }

    auto const apiuapi_UCharacterMovementComponent_CanCrouchInCurrentState = (uapi_UCharacterMovementComponent_CanCrouchInCurrentStateFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_CanCrouchInCurrentState_handler\0"));
    if(apiuapi_UCharacterMovementComponent_CanCrouchInCurrentState){
        apiuapi_UCharacterMovementComponent_CanCrouchInCurrentState(&uapi_UCharacterMovementComponent_CanCrouchInCurrentState);
    }

    auto const apiuapi_UCharacterMovementComponent_CanStartPathFollowing = (uapi_UCharacterMovementComponent_CanStartPathFollowingFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_CanStartPathFollowing_handler\0"));
    if(apiuapi_UCharacterMovementComponent_CanStartPathFollowing){
        apiuapi_UCharacterMovementComponent_CanStartPathFollowing(&uapi_UCharacterMovementComponent_CanStartPathFollowing);
    }

    auto const apiuapi_UCharacterMovementComponent_CanStopPathFollowing = (uapi_UCharacterMovementComponent_CanStopPathFollowingFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_CanStopPathFollowing_handler\0"));
    if(apiuapi_UCharacterMovementComponent_CanStopPathFollowing){
        apiuapi_UCharacterMovementComponent_CanStopPathFollowing(&uapi_UCharacterMovementComponent_CanStopPathFollowing);
    }

    auto const apiuapi_UCharacterMovementComponent_CanWalkOffLedges = (uapi_UCharacterMovementComponent_CanWalkOffLedgesFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_CanWalkOffLedges_handler\0"));
    if(apiuapi_UCharacterMovementComponent_CanWalkOffLedges){
        apiuapi_UCharacterMovementComponent_CanWalkOffLedges(&uapi_UCharacterMovementComponent_CanWalkOffLedges);
    }

    auto const apiuapi_UCharacterMovementComponent_ClearAccumulatedForces = (uapi_UCharacterMovementComponent_ClearAccumulatedForcesFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_ClearAccumulatedForces_handler\0"));
    if(apiuapi_UCharacterMovementComponent_ClearAccumulatedForces){
        apiuapi_UCharacterMovementComponent_ClearAccumulatedForces(&uapi_UCharacterMovementComponent_ClearAccumulatedForces);
    }

    auto const apiuapi_UCharacterMovementComponent_ClientAckGoodMove = (uapi_UCharacterMovementComponent_ClientAckGoodMoveFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_ClientAckGoodMove_handler\0"));
    if(apiuapi_UCharacterMovementComponent_ClientAckGoodMove){
        apiuapi_UCharacterMovementComponent_ClientAckGoodMove(&uapi_UCharacterMovementComponent_ClientAckGoodMove);
    }

    auto const apiuapi_UCharacterMovementComponent_ClientAckGoodMove_Implementation = (uapi_UCharacterMovementComponent_ClientAckGoodMove_ImplementationFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_ClientAckGoodMove_Implementation_handler\0"));
    if(apiuapi_UCharacterMovementComponent_ClientAckGoodMove_Implementation){
        apiuapi_UCharacterMovementComponent_ClientAckGoodMove_Implementation(&uapi_UCharacterMovementComponent_ClientAckGoodMove_Implementation);
    }

    auto const apiuapi_UCharacterMovementComponent_ClientAdjustPosition = (uapi_UCharacterMovementComponent_ClientAdjustPositionFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_ClientAdjustPosition_handler\0"));
    if(apiuapi_UCharacterMovementComponent_ClientAdjustPosition){
        apiuapi_UCharacterMovementComponent_ClientAdjustPosition(&uapi_UCharacterMovementComponent_ClientAdjustPosition);
    }

    auto const apiuapi_UCharacterMovementComponent_ClientVeryShortAdjustPosition = (uapi_UCharacterMovementComponent_ClientVeryShortAdjustPositionFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_ClientVeryShortAdjustPosition_handler\0"));
    if(apiuapi_UCharacterMovementComponent_ClientVeryShortAdjustPosition){
        apiuapi_UCharacterMovementComponent_ClientVeryShortAdjustPosition(&uapi_UCharacterMovementComponent_ClientVeryShortAdjustPosition);
    }

    auto const apiuapi_UCharacterMovementComponent_ClientVeryShortAdjustPosition_Implementation = (uapi_UCharacterMovementComponent_ClientVeryShortAdjustPosition_ImplementationFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_ClientVeryShortAdjustPosition_Implementation_handler\0"));
    if(apiuapi_UCharacterMovementComponent_ClientVeryShortAdjustPosition_Implementation){
        apiuapi_UCharacterMovementComponent_ClientVeryShortAdjustPosition_Implementation(&uapi_UCharacterMovementComponent_ClientVeryShortAdjustPosition_Implementation);
    }

    auto const apiuapi_UCharacterMovementComponent_Crouch = (uapi_UCharacterMovementComponent_CrouchFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_Crouch_handler\0"));
    if(apiuapi_UCharacterMovementComponent_Crouch){
        apiuapi_UCharacterMovementComponent_Crouch(&uapi_UCharacterMovementComponent_Crouch);
    }

    auto const apiuapi_UCharacterMovementComponent_Deactivate = (uapi_UCharacterMovementComponent_DeactivateFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_Deactivate_handler\0"));
    if(apiuapi_UCharacterMovementComponent_Deactivate){
        apiuapi_UCharacterMovementComponent_Deactivate(&uapi_UCharacterMovementComponent_Deactivate);
    }

    auto const apiuapi_UCharacterMovementComponent_DisableMovement = (uapi_UCharacterMovementComponent_DisableMovementFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_DisableMovement_handler\0"));
    if(apiuapi_UCharacterMovementComponent_DisableMovement){
        apiuapi_UCharacterMovementComponent_DisableMovement(&uapi_UCharacterMovementComponent_DisableMovement);
    }

    auto const apiuapi_UCharacterMovementComponent_DoJump = (uapi_UCharacterMovementComponent_DoJumpFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_DoJump_handler\0"));
    if(apiuapi_UCharacterMovementComponent_DoJump){
        apiuapi_UCharacterMovementComponent_DoJump(&uapi_UCharacterMovementComponent_DoJump);
    }

    auto const apiuapi_UCharacterMovementComponent_FindWaterLine = (uapi_UCharacterMovementComponent_FindWaterLineFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_FindWaterLine_handler\0"));
    if(apiuapi_UCharacterMovementComponent_FindWaterLine){
        apiuapi_UCharacterMovementComponent_FindWaterLine(&uapi_UCharacterMovementComponent_FindWaterLine);
    }

    auto const apiuapi_UCharacterMovementComponent_FlushServerMoves = (uapi_UCharacterMovementComponent_FlushServerMovesFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_FlushServerMoves_handler\0"));
    if(apiuapi_UCharacterMovementComponent_FlushServerMoves){
        apiuapi_UCharacterMovementComponent_FlushServerMoves(&uapi_UCharacterMovementComponent_FlushServerMoves);
    }

    auto const apiuapi_UCharacterMovementComponent_ForceClientAdjustment = (uapi_UCharacterMovementComponent_ForceClientAdjustmentFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_ForceClientAdjustment_handler\0"));
    if(apiuapi_UCharacterMovementComponent_ForceClientAdjustment){
        apiuapi_UCharacterMovementComponent_ForceClientAdjustment(&uapi_UCharacterMovementComponent_ForceClientAdjustment);
    }

    auto const apiuapi_UCharacterMovementComponent_ForcePositionUpdate = (uapi_UCharacterMovementComponent_ForcePositionUpdateFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_ForcePositionUpdate_handler\0"));
    if(apiuapi_UCharacterMovementComponent_ForcePositionUpdate){
        apiuapi_UCharacterMovementComponent_ForcePositionUpdate(&uapi_UCharacterMovementComponent_ForcePositionUpdate);
    }

    auto const apiuapi_UCharacterMovementComponent_ForceReplicationUpdate = (uapi_UCharacterMovementComponent_ForceReplicationUpdateFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_ForceReplicationUpdate_handler\0"));
    if(apiuapi_UCharacterMovementComponent_ForceReplicationUpdate){
        apiuapi_UCharacterMovementComponent_ForceReplicationUpdate(&uapi_UCharacterMovementComponent_ForceReplicationUpdate);
    }

    auto const apiuapi_UCharacterMovementComponent_GetAnalogInputModifier = (uapi_UCharacterMovementComponent_GetAnalogInputModifierFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetAnalogInputModifier_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetAnalogInputModifier){
        apiuapi_UCharacterMovementComponent_GetAnalogInputModifier(&uapi_UCharacterMovementComponent_GetAnalogInputModifier);
    }

    auto const apiuapi_UCharacterMovementComponent_GetAvoidanceGroupMask = (uapi_UCharacterMovementComponent_GetAvoidanceGroupMaskFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetAvoidanceGroupMask_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetAvoidanceGroupMask){
        apiuapi_UCharacterMovementComponent_GetAvoidanceGroupMask(&uapi_UCharacterMovementComponent_GetAvoidanceGroupMask);
    }

    auto const apiuapi_UCharacterMovementComponent_GetBestDirectionOffActor = (uapi_UCharacterMovementComponent_GetBestDirectionOffActorFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetBestDirectionOffActor_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetBestDirectionOffActor){
        apiuapi_UCharacterMovementComponent_GetBestDirectionOffActor(&uapi_UCharacterMovementComponent_GetBestDirectionOffActor);
    }

    auto const apiuapi_UCharacterMovementComponent_GetCharacterOwner = (uapi_UCharacterMovementComponent_GetCharacterOwnerFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetCharacterOwner_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetCharacterOwner){
        apiuapi_UCharacterMovementComponent_GetCharacterOwner(&uapi_UCharacterMovementComponent_GetCharacterOwner);
    }

    auto const apiuapi_UCharacterMovementComponent_GetCrouchedHalfHeight = (uapi_UCharacterMovementComponent_GetCrouchedHalfHeightFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetCrouchedHalfHeight_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetCrouchedHalfHeight){
        apiuapi_UCharacterMovementComponent_GetCrouchedHalfHeight(&uapi_UCharacterMovementComponent_GetCrouchedHalfHeight);
    }

    auto const apiuapi_UCharacterMovementComponent_GetCurrentAcceleration = (uapi_UCharacterMovementComponent_GetCurrentAccelerationFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetCurrentAcceleration_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetCurrentAcceleration){
        apiuapi_UCharacterMovementComponent_GetCurrentAcceleration(&uapi_UCharacterMovementComponent_GetCurrentAcceleration);
    }

    auto const apiuapi_UCharacterMovementComponent_GetCurrentReplayedSavedMove = (uapi_UCharacterMovementComponent_GetCurrentReplayedSavedMoveFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetCurrentReplayedSavedMove_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetCurrentReplayedSavedMove){
        apiuapi_UCharacterMovementComponent_GetCurrentReplayedSavedMove(&uapi_UCharacterMovementComponent_GetCurrentReplayedSavedMove);
    }

    auto const apiuapi_UCharacterMovementComponent_GetDeltaRotation = (uapi_UCharacterMovementComponent_GetDeltaRotationFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetDeltaRotation_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetDeltaRotation){
        apiuapi_UCharacterMovementComponent_GetDeltaRotation(&uapi_UCharacterMovementComponent_GetDeltaRotation);
    }

    auto const apiuapi_UCharacterMovementComponent_GetFallingLateralAcceleration = (uapi_UCharacterMovementComponent_GetFallingLateralAccelerationFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetFallingLateralAcceleration_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetFallingLateralAcceleration){
        apiuapi_UCharacterMovementComponent_GetFallingLateralAcceleration(&uapi_UCharacterMovementComponent_GetFallingLateralAcceleration);
    }

    auto const apiuapi_UCharacterMovementComponent_GetGravityZ = (uapi_UCharacterMovementComponent_GetGravityZFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetGravityZ_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetGravityZ){
        apiuapi_UCharacterMovementComponent_GetGravityZ(&uapi_UCharacterMovementComponent_GetGravityZ);
    }

    auto const apiuapi_UCharacterMovementComponent_GetGroupsToAvoidMask = (uapi_UCharacterMovementComponent_GetGroupsToAvoidMaskFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetGroupsToAvoidMask_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetGroupsToAvoidMask){
        apiuapi_UCharacterMovementComponent_GetGroupsToAvoidMask(&uapi_UCharacterMovementComponent_GetGroupsToAvoidMask);
    }

    auto const apiuapi_UCharacterMovementComponent_GetGroupsToIgnoreMask = (uapi_UCharacterMovementComponent_GetGroupsToIgnoreMaskFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetGroupsToIgnoreMask_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetGroupsToIgnoreMask){
        apiuapi_UCharacterMovementComponent_GetGroupsToIgnoreMask(&uapi_UCharacterMovementComponent_GetGroupsToIgnoreMask);
    }

    auto const apiuapi_UCharacterMovementComponent_GetImpartedMovementBaseVelocity = (uapi_UCharacterMovementComponent_GetImpartedMovementBaseVelocityFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetImpartedMovementBaseVelocity_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetImpartedMovementBaseVelocity){
        apiuapi_UCharacterMovementComponent_GetImpartedMovementBaseVelocity(&uapi_UCharacterMovementComponent_GetImpartedMovementBaseVelocity);
    }

    auto const apiuapi_UCharacterMovementComponent_GetLastUpdateLocation = (uapi_UCharacterMovementComponent_GetLastUpdateLocationFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetLastUpdateLocation_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetLastUpdateLocation){
        apiuapi_UCharacterMovementComponent_GetLastUpdateLocation(&uapi_UCharacterMovementComponent_GetLastUpdateLocation);
    }

    auto const apiuapi_UCharacterMovementComponent_GetLastUpdateQuat = (uapi_UCharacterMovementComponent_GetLastUpdateQuatFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetLastUpdateQuat_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetLastUpdateQuat){
        apiuapi_UCharacterMovementComponent_GetLastUpdateQuat(&uapi_UCharacterMovementComponent_GetLastUpdateQuat);
    }

    auto const apiuapi_UCharacterMovementComponent_GetLastUpdateRequestedVelocity = (uapi_UCharacterMovementComponent_GetLastUpdateRequestedVelocityFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetLastUpdateRequestedVelocity_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetLastUpdateRequestedVelocity){
        apiuapi_UCharacterMovementComponent_GetLastUpdateRequestedVelocity(&uapi_UCharacterMovementComponent_GetLastUpdateRequestedVelocity);
    }

    auto const apiuapi_UCharacterMovementComponent_GetLastUpdateRotation = (uapi_UCharacterMovementComponent_GetLastUpdateRotationFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetLastUpdateRotation_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetLastUpdateRotation){
        apiuapi_UCharacterMovementComponent_GetLastUpdateRotation(&uapi_UCharacterMovementComponent_GetLastUpdateRotation);
    }

    auto const apiuapi_UCharacterMovementComponent_GetLastUpdateVelocity = (uapi_UCharacterMovementComponent_GetLastUpdateVelocityFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetLastUpdateVelocity_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetLastUpdateVelocity){
        apiuapi_UCharacterMovementComponent_GetLastUpdateVelocity(&uapi_UCharacterMovementComponent_GetLastUpdateVelocity);
    }

    auto const apiuapi_UCharacterMovementComponent_GetMaxAcceleration = (uapi_UCharacterMovementComponent_GetMaxAccelerationFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetMaxAcceleration_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetMaxAcceleration){
        apiuapi_UCharacterMovementComponent_GetMaxAcceleration(&uapi_UCharacterMovementComponent_GetMaxAcceleration);
    }

    auto const apiuapi_UCharacterMovementComponent_GetMaxBrakingDeceleration = (uapi_UCharacterMovementComponent_GetMaxBrakingDecelerationFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetMaxBrakingDeceleration_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetMaxBrakingDeceleration){
        apiuapi_UCharacterMovementComponent_GetMaxBrakingDeceleration(&uapi_UCharacterMovementComponent_GetMaxBrakingDeceleration);
    }

    auto const apiuapi_UCharacterMovementComponent_GetMaxJumpHeight = (uapi_UCharacterMovementComponent_GetMaxJumpHeightFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetMaxJumpHeight_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetMaxJumpHeight){
        apiuapi_UCharacterMovementComponent_GetMaxJumpHeight(&uapi_UCharacterMovementComponent_GetMaxJumpHeight);
    }

    auto const apiuapi_UCharacterMovementComponent_GetMaxJumpHeightWithJumpTime = (uapi_UCharacterMovementComponent_GetMaxJumpHeightWithJumpTimeFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetMaxJumpHeightWithJumpTime_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetMaxJumpHeightWithJumpTime){
        apiuapi_UCharacterMovementComponent_GetMaxJumpHeightWithJumpTime(&uapi_UCharacterMovementComponent_GetMaxJumpHeightWithJumpTime);
    }

    auto const apiuapi_UCharacterMovementComponent_GetMaxSpeed = (uapi_UCharacterMovementComponent_GetMaxSpeedFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetMaxSpeed_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetMaxSpeed){
        apiuapi_UCharacterMovementComponent_GetMaxSpeed(&uapi_UCharacterMovementComponent_GetMaxSpeed);
    }

    auto const apiuapi_UCharacterMovementComponent_GetMinAnalogSpeed = (uapi_UCharacterMovementComponent_GetMinAnalogSpeedFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetMinAnalogSpeed_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetMinAnalogSpeed){
        apiuapi_UCharacterMovementComponent_GetMinAnalogSpeed(&uapi_UCharacterMovementComponent_GetMinAnalogSpeed);
    }

    auto const apiuapi_UCharacterMovementComponent_GetMovementBase = (uapi_UCharacterMovementComponent_GetMovementBaseFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetMovementBase_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetMovementBase){
        apiuapi_UCharacterMovementComponent_GetMovementBase(&uapi_UCharacterMovementComponent_GetMovementBase);
    }

    auto const apiuapi_UCharacterMovementComponent_GetMovementName = (uapi_UCharacterMovementComponent_GetMovementNameFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetMovementName_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetMovementName){
        apiuapi_UCharacterMovementComponent_GetMovementName(&uapi_UCharacterMovementComponent_GetMovementName);
    }

    auto const apiuapi_UCharacterMovementComponent_GetNetworkSafeRandomAngleDegrees = (uapi_UCharacterMovementComponent_GetNetworkSafeRandomAngleDegreesFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetNetworkSafeRandomAngleDegrees_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetNetworkSafeRandomAngleDegrees){
        apiuapi_UCharacterMovementComponent_GetNetworkSafeRandomAngleDegrees(&uapi_UCharacterMovementComponent_GetNetworkSafeRandomAngleDegrees);
    }

    auto const apiuapi_UCharacterMovementComponent_GetPathFollowingBrakingDistance = (uapi_UCharacterMovementComponent_GetPathFollowingBrakingDistanceFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetPathFollowingBrakingDistance_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetPathFollowingBrakingDistance){
        apiuapi_UCharacterMovementComponent_GetPathFollowingBrakingDistance(&uapi_UCharacterMovementComponent_GetPathFollowingBrakingDistance);
    }

    auto const apiuapi_UCharacterMovementComponent_GetPerchRadiusThreshold = (uapi_UCharacterMovementComponent_GetPerchRadiusThresholdFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetPerchRadiusThreshold_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetPerchRadiusThreshold){
        apiuapi_UCharacterMovementComponent_GetPerchRadiusThreshold(&uapi_UCharacterMovementComponent_GetPerchRadiusThreshold);
    }

    auto const apiuapi_UCharacterMovementComponent_GetPredictionData_Client = (uapi_UCharacterMovementComponent_GetPredictionData_ClientFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetPredictionData_Client_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetPredictionData_Client){
        apiuapi_UCharacterMovementComponent_GetPredictionData_Client(&uapi_UCharacterMovementComponent_GetPredictionData_Client);
    }

    auto const apiuapi_UCharacterMovementComponent_GetPredictionData_Client_Character = (uapi_UCharacterMovementComponent_GetPredictionData_Client_CharacterFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetPredictionData_Client_Character_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetPredictionData_Client_Character){
        apiuapi_UCharacterMovementComponent_GetPredictionData_Client_Character(&uapi_UCharacterMovementComponent_GetPredictionData_Client_Character);
    }

    auto const apiuapi_UCharacterMovementComponent_GetPredictionData_Server = (uapi_UCharacterMovementComponent_GetPredictionData_ServerFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetPredictionData_Server_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetPredictionData_Server){
        apiuapi_UCharacterMovementComponent_GetPredictionData_Server(&uapi_UCharacterMovementComponent_GetPredictionData_Server);
    }

    auto const apiuapi_UCharacterMovementComponent_GetPredictionData_Server_Character = (uapi_UCharacterMovementComponent_GetPredictionData_Server_CharacterFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetPredictionData_Server_Character_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetPredictionData_Server_Character){
        apiuapi_UCharacterMovementComponent_GetPredictionData_Server_Character(&uapi_UCharacterMovementComponent_GetPredictionData_Server_Character);
    }

    auto const apiuapi_UCharacterMovementComponent_GetRVOAvoidanceConsiderationRadius = (uapi_UCharacterMovementComponent_GetRVOAvoidanceConsiderationRadiusFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetRVOAvoidanceConsiderationRadius_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetRVOAvoidanceConsiderationRadius){
        apiuapi_UCharacterMovementComponent_GetRVOAvoidanceConsiderationRadius(&uapi_UCharacterMovementComponent_GetRVOAvoidanceConsiderationRadius);
    }

    auto const apiuapi_UCharacterMovementComponent_GetRVOAvoidanceHeight = (uapi_UCharacterMovementComponent_GetRVOAvoidanceHeightFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetRVOAvoidanceHeight_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetRVOAvoidanceHeight){
        apiuapi_UCharacterMovementComponent_GetRVOAvoidanceHeight(&uapi_UCharacterMovementComponent_GetRVOAvoidanceHeight);
    }

    auto const apiuapi_UCharacterMovementComponent_GetRVOAvoidanceOrigin = (uapi_UCharacterMovementComponent_GetRVOAvoidanceOriginFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetRVOAvoidanceOrigin_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetRVOAvoidanceOrigin){
        apiuapi_UCharacterMovementComponent_GetRVOAvoidanceOrigin(&uapi_UCharacterMovementComponent_GetRVOAvoidanceOrigin);
    }

    auto const apiuapi_UCharacterMovementComponent_GetRVOAvoidanceRadius = (uapi_UCharacterMovementComponent_GetRVOAvoidanceRadiusFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetRVOAvoidanceRadius_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetRVOAvoidanceRadius){
        apiuapi_UCharacterMovementComponent_GetRVOAvoidanceRadius(&uapi_UCharacterMovementComponent_GetRVOAvoidanceRadius);
    }

    auto const apiuapi_UCharacterMovementComponent_GetRVOAvoidanceUID = (uapi_UCharacterMovementComponent_GetRVOAvoidanceUIDFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetRVOAvoidanceUID_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetRVOAvoidanceUID){
        apiuapi_UCharacterMovementComponent_GetRVOAvoidanceUID(&uapi_UCharacterMovementComponent_GetRVOAvoidanceUID);
    }

    auto const apiuapi_UCharacterMovementComponent_GetRVOAvoidanceUIDFast = (uapi_UCharacterMovementComponent_GetRVOAvoidanceUIDFastFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetRVOAvoidanceUIDFast_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetRVOAvoidanceUIDFast){
        apiuapi_UCharacterMovementComponent_GetRVOAvoidanceUIDFast(&uapi_UCharacterMovementComponent_GetRVOAvoidanceUIDFast);
    }

    auto const apiuapi_UCharacterMovementComponent_GetRVOAvoidanceWeight = (uapi_UCharacterMovementComponent_GetRVOAvoidanceWeightFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetRVOAvoidanceWeight_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetRVOAvoidanceWeight){
        apiuapi_UCharacterMovementComponent_GetRVOAvoidanceWeight(&uapi_UCharacterMovementComponent_GetRVOAvoidanceWeight);
    }

    auto const apiuapi_UCharacterMovementComponent_GetServerLastTransformUpdateTimeStamp = (uapi_UCharacterMovementComponent_GetServerLastTransformUpdateTimeStampFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetServerLastTransformUpdateTimeStamp_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetServerLastTransformUpdateTimeStamp){
        apiuapi_UCharacterMovementComponent_GetServerLastTransformUpdateTimeStamp(&uapi_UCharacterMovementComponent_GetServerLastTransformUpdateTimeStamp);
    }

    auto const apiuapi_UCharacterMovementComponent_GetSimulationTimeStep = (uapi_UCharacterMovementComponent_GetSimulationTimeStepFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetSimulationTimeStep_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetSimulationTimeStep){
        apiuapi_UCharacterMovementComponent_GetSimulationTimeStep(&uapi_UCharacterMovementComponent_GetSimulationTimeStep);
    }

    auto const apiuapi_UCharacterMovementComponent_GetValidPerchRadius = (uapi_UCharacterMovementComponent_GetValidPerchRadiusFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetValidPerchRadius_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetValidPerchRadius){
        apiuapi_UCharacterMovementComponent_GetValidPerchRadius(&uapi_UCharacterMovementComponent_GetValidPerchRadius);
    }

    auto const apiuapi_UCharacterMovementComponent_GetVelocityForRVOConsideration = (uapi_UCharacterMovementComponent_GetVelocityForRVOConsiderationFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetVelocityForRVOConsideration_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetVelocityForRVOConsideration){
        apiuapi_UCharacterMovementComponent_GetVelocityForRVOConsideration(&uapi_UCharacterMovementComponent_GetVelocityForRVOConsideration);
    }

    auto const apiuapi_UCharacterMovementComponent_GetWalkableFloorAngle = (uapi_UCharacterMovementComponent_GetWalkableFloorAngleFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetWalkableFloorAngle_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetWalkableFloorAngle){
        apiuapi_UCharacterMovementComponent_GetWalkableFloorAngle(&uapi_UCharacterMovementComponent_GetWalkableFloorAngle);
    }

    auto const apiuapi_UCharacterMovementComponent_GetWalkableFloorZ = (uapi_UCharacterMovementComponent_GetWalkableFloorZFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_GetWalkableFloorZ_handler\0"));
    if(apiuapi_UCharacterMovementComponent_GetWalkableFloorZ){
        apiuapi_UCharacterMovementComponent_GetWalkableFloorZ(&uapi_UCharacterMovementComponent_GetWalkableFloorZ);
    }

    auto const apiuapi_UCharacterMovementComponent_HandlePendingLaunch = (uapi_UCharacterMovementComponent_HandlePendingLaunchFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_HandlePendingLaunch_handler\0"));
    if(apiuapi_UCharacterMovementComponent_HandlePendingLaunch){
        apiuapi_UCharacterMovementComponent_HandlePendingLaunch(&uapi_UCharacterMovementComponent_HandlePendingLaunch);
    }

    auto const apiuapi_UCharacterMovementComponent_HasAnimRootMotion = (uapi_UCharacterMovementComponent_HasAnimRootMotionFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_HasAnimRootMotion_handler\0"));
    if(apiuapi_UCharacterMovementComponent_HasAnimRootMotion){
        apiuapi_UCharacterMovementComponent_HasAnimRootMotion(&uapi_UCharacterMovementComponent_HasAnimRootMotion);
    }

    auto const apiuapi_UCharacterMovementComponent_HasPredictionData_Client = (uapi_UCharacterMovementComponent_HasPredictionData_ClientFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_HasPredictionData_Client_handler\0"));
    if(apiuapi_UCharacterMovementComponent_HasPredictionData_Client){
        apiuapi_UCharacterMovementComponent_HasPredictionData_Client(&uapi_UCharacterMovementComponent_HasPredictionData_Client);
    }

    auto const apiuapi_UCharacterMovementComponent_HasPredictionData_Server = (uapi_UCharacterMovementComponent_HasPredictionData_ServerFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_HasPredictionData_Server_handler\0"));
    if(apiuapi_UCharacterMovementComponent_HasPredictionData_Server){
        apiuapi_UCharacterMovementComponent_HasPredictionData_Server(&uapi_UCharacterMovementComponent_HasPredictionData_Server);
    }

    auto const apiuapi_UCharacterMovementComponent_HasRootMotionSources = (uapi_UCharacterMovementComponent_HasRootMotionSourcesFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_HasRootMotionSources_handler\0"));
    if(apiuapi_UCharacterMovementComponent_HasRootMotionSources){
        apiuapi_UCharacterMovementComponent_HasRootMotionSources(&uapi_UCharacterMovementComponent_HasRootMotionSources);
    }

    auto const apiuapi_UCharacterMovementComponent_HasValidData = (uapi_UCharacterMovementComponent_HasValidDataFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_HasValidData_handler\0"));
    if(apiuapi_UCharacterMovementComponent_HasValidData){
        apiuapi_UCharacterMovementComponent_HasValidData(&uapi_UCharacterMovementComponent_HasValidData);
    }

    auto const apiuapi_UCharacterMovementComponent_ImmersionDepth = (uapi_UCharacterMovementComponent_ImmersionDepthFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_ImmersionDepth_handler\0"));
    if(apiuapi_UCharacterMovementComponent_ImmersionDepth){
        apiuapi_UCharacterMovementComponent_ImmersionDepth(&uapi_UCharacterMovementComponent_ImmersionDepth);
    }

    auto const apiuapi_UCharacterMovementComponent_IsCrouching = (uapi_UCharacterMovementComponent_IsCrouchingFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_IsCrouching_handler\0"));
    if(apiuapi_UCharacterMovementComponent_IsCrouching){
        apiuapi_UCharacterMovementComponent_IsCrouching(&uapi_UCharacterMovementComponent_IsCrouching);
    }

    auto const apiuapi_UCharacterMovementComponent_IsFalling = (uapi_UCharacterMovementComponent_IsFallingFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_IsFalling_handler\0"));
    if(apiuapi_UCharacterMovementComponent_IsFalling){
        apiuapi_UCharacterMovementComponent_IsFalling(&uapi_UCharacterMovementComponent_IsFalling);
    }

    auto const apiuapi_UCharacterMovementComponent_IsFlying = (uapi_UCharacterMovementComponent_IsFlyingFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_IsFlying_handler\0"));
    if(apiuapi_UCharacterMovementComponent_IsFlying){
        apiuapi_UCharacterMovementComponent_IsFlying(&uapi_UCharacterMovementComponent_IsFlying);
    }

    auto const apiuapi_UCharacterMovementComponent_IsMovementInProgress = (uapi_UCharacterMovementComponent_IsMovementInProgressFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_IsMovementInProgress_handler\0"));
    if(apiuapi_UCharacterMovementComponent_IsMovementInProgress){
        apiuapi_UCharacterMovementComponent_IsMovementInProgress(&uapi_UCharacterMovementComponent_IsMovementInProgress);
    }

    auto const apiuapi_UCharacterMovementComponent_IsMovingOnGround = (uapi_UCharacterMovementComponent_IsMovingOnGroundFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_IsMovingOnGround_handler\0"));
    if(apiuapi_UCharacterMovementComponent_IsMovingOnGround){
        apiuapi_UCharacterMovementComponent_IsMovingOnGround(&uapi_UCharacterMovementComponent_IsMovingOnGround);
    }

    auto const apiuapi_UCharacterMovementComponent_IsSwimming = (uapi_UCharacterMovementComponent_IsSwimmingFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_IsSwimming_handler\0"));
    if(apiuapi_UCharacterMovementComponent_IsSwimming){
        apiuapi_UCharacterMovementComponent_IsSwimming(&uapi_UCharacterMovementComponent_IsSwimming);
    }

    auto const apiuapi_UCharacterMovementComponent_IsWalking = (uapi_UCharacterMovementComponent_IsWalkingFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_IsWalking_handler\0"));
    if(apiuapi_UCharacterMovementComponent_IsWalking){
        apiuapi_UCharacterMovementComponent_IsWalking(&uapi_UCharacterMovementComponent_IsWalking);
    }

    auto const apiuapi_UCharacterMovementComponent_JumpOff = (uapi_UCharacterMovementComponent_JumpOffFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_JumpOff_handler\0"));
    if(apiuapi_UCharacterMovementComponent_JumpOff){
        apiuapi_UCharacterMovementComponent_JumpOff(&uapi_UCharacterMovementComponent_JumpOff);
    }

    auto const apiuapi_UCharacterMovementComponent_JumpOutOfWater = (uapi_UCharacterMovementComponent_JumpOutOfWaterFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_JumpOutOfWater_handler\0"));
    if(apiuapi_UCharacterMovementComponent_JumpOutOfWater){
        apiuapi_UCharacterMovementComponent_JumpOutOfWater(&uapi_UCharacterMovementComponent_JumpOutOfWater);
    }

    auto const apiuapi_UCharacterMovementComponent_K2_GetWalkableFloorAngle = (uapi_UCharacterMovementComponent_K2_GetWalkableFloorAngleFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_K2_GetWalkableFloorAngle_handler\0"));
    if(apiuapi_UCharacterMovementComponent_K2_GetWalkableFloorAngle){
        apiuapi_UCharacterMovementComponent_K2_GetWalkableFloorAngle(&uapi_UCharacterMovementComponent_K2_GetWalkableFloorAngle);
    }

    auto const apiuapi_UCharacterMovementComponent_K2_GetWalkableFloorZ = (uapi_UCharacterMovementComponent_K2_GetWalkableFloorZFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_K2_GetWalkableFloorZ_handler\0"));
    if(apiuapi_UCharacterMovementComponent_K2_GetWalkableFloorZ){
        apiuapi_UCharacterMovementComponent_K2_GetWalkableFloorZ(&uapi_UCharacterMovementComponent_K2_GetWalkableFloorZ);
    }

    auto const apiuapi_UCharacterMovementComponent_MaybeSaveBaseLocation = (uapi_UCharacterMovementComponent_MaybeSaveBaseLocationFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_MaybeSaveBaseLocation_handler\0"));
    if(apiuapi_UCharacterMovementComponent_MaybeSaveBaseLocation){
        apiuapi_UCharacterMovementComponent_MaybeSaveBaseLocation(&uapi_UCharacterMovementComponent_MaybeSaveBaseLocation);
    }

    auto const apiuapi_UCharacterMovementComponent_MaybeUpdateBasedMovement = (uapi_UCharacterMovementComponent_MaybeUpdateBasedMovementFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_MaybeUpdateBasedMovement_handler\0"));
    if(apiuapi_UCharacterMovementComponent_MaybeUpdateBasedMovement){
        apiuapi_UCharacterMovementComponent_MaybeUpdateBasedMovement(&uapi_UCharacterMovementComponent_MaybeUpdateBasedMovement);
    }

    auto const apiuapi_UCharacterMovementComponent_NotifyBumpedPawn = (uapi_UCharacterMovementComponent_NotifyBumpedPawnFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_NotifyBumpedPawn_handler\0"));
    if(apiuapi_UCharacterMovementComponent_NotifyBumpedPawn){
        apiuapi_UCharacterMovementComponent_NotifyBumpedPawn(&uapi_UCharacterMovementComponent_NotifyBumpedPawn);
    }

    auto const apiuapi_UCharacterMovementComponent_NotifyJumpApex = (uapi_UCharacterMovementComponent_NotifyJumpApexFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_NotifyJumpApex_handler\0"));
    if(apiuapi_UCharacterMovementComponent_NotifyJumpApex){
        apiuapi_UCharacterMovementComponent_NotifyJumpApex(&uapi_UCharacterMovementComponent_NotifyJumpApex);
    }

    auto const apiuapi_UCharacterMovementComponent_OnRegister = (uapi_UCharacterMovementComponent_OnRegisterFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_OnRegister_handler\0"));
    if(apiuapi_UCharacterMovementComponent_OnRegister){
        apiuapi_UCharacterMovementComponent_OnRegister(&uapi_UCharacterMovementComponent_OnRegister);
    }

    auto const apiuapi_UCharacterMovementComponent_OnRootMotionSourceBeingApplied = (uapi_UCharacterMovementComponent_OnRootMotionSourceBeingAppliedFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_OnRootMotionSourceBeingApplied_handler\0"));
    if(apiuapi_UCharacterMovementComponent_OnRootMotionSourceBeingApplied){
        apiuapi_UCharacterMovementComponent_OnRootMotionSourceBeingApplied(&uapi_UCharacterMovementComponent_OnRootMotionSourceBeingApplied);
    }

    auto const apiuapi_UCharacterMovementComponent_OnTeleported = (uapi_UCharacterMovementComponent_OnTeleportedFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_OnTeleported_handler\0"));
    if(apiuapi_UCharacterMovementComponent_OnTeleported){
        apiuapi_UCharacterMovementComponent_OnTeleported(&uapi_UCharacterMovementComponent_OnTeleported);
    }

    auto const apiuapi_UCharacterMovementComponent_PackNetworkMovementMode = (uapi_UCharacterMovementComponent_PackNetworkMovementModeFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_PackNetworkMovementMode_handler\0"));
    if(apiuapi_UCharacterMovementComponent_PackNetworkMovementMode){
        apiuapi_UCharacterMovementComponent_PackNetworkMovementMode(&uapi_UCharacterMovementComponent_PackNetworkMovementMode);
    }

    auto const apiuapi_UCharacterMovementComponent_PackYawAndPitchTo32 = (uapi_UCharacterMovementComponent_PackYawAndPitchTo32Fn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_PackYawAndPitchTo32_handler\0"));
    if(apiuapi_UCharacterMovementComponent_PackYawAndPitchTo32){
        apiuapi_UCharacterMovementComponent_PackYawAndPitchTo32(&uapi_UCharacterMovementComponent_PackYawAndPitchTo32);
    }

    auto const apiuapi_UCharacterMovementComponent_PerformAirControlForPathFollowing = (uapi_UCharacterMovementComponent_PerformAirControlForPathFollowingFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_PerformAirControlForPathFollowing_handler\0"));
    if(apiuapi_UCharacterMovementComponent_PerformAirControlForPathFollowing){
        apiuapi_UCharacterMovementComponent_PerformAirControlForPathFollowing(&uapi_UCharacterMovementComponent_PerformAirControlForPathFollowing);
    }

    auto const apiuapi_UCharacterMovementComponent_PhysFalling = (uapi_UCharacterMovementComponent_PhysFallingFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_PhysFalling_handler\0"));
    if(apiuapi_UCharacterMovementComponent_PhysFalling){
        apiuapi_UCharacterMovementComponent_PhysFalling(&uapi_UCharacterMovementComponent_PhysFalling);
    }

    auto const apiuapi_UCharacterMovementComponent_PhysicsRotation = (uapi_UCharacterMovementComponent_PhysicsRotationFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_PhysicsRotation_handler\0"));
    if(apiuapi_UCharacterMovementComponent_PhysicsRotation){
        apiuapi_UCharacterMovementComponent_PhysicsRotation(&uapi_UCharacterMovementComponent_PhysicsRotation);
    }

    auto const apiuapi_UCharacterMovementComponent_PhysicsVolumeChanged = (uapi_UCharacterMovementComponent_PhysicsVolumeChangedFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_PhysicsVolumeChanged_handler\0"));
    if(apiuapi_UCharacterMovementComponent_PhysicsVolumeChanged){
        apiuapi_UCharacterMovementComponent_PhysicsVolumeChanged(&uapi_UCharacterMovementComponent_PhysicsVolumeChanged);
    }

    auto const apiuapi_UCharacterMovementComponent_PostLoad = (uapi_UCharacterMovementComponent_PostLoadFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_PostLoad_handler\0"));
    if(apiuapi_UCharacterMovementComponent_PostLoad){
        apiuapi_UCharacterMovementComponent_PostLoad(&uapi_UCharacterMovementComponent_PostLoad);
    }

    auto const apiuapi_UCharacterMovementComponent_RegisterComponentTickFunctions = (uapi_UCharacterMovementComponent_RegisterComponentTickFunctionsFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_RegisterComponentTickFunctions_handler\0"));
    if(apiuapi_UCharacterMovementComponent_RegisterComponentTickFunctions){
        apiuapi_UCharacterMovementComponent_RegisterComponentTickFunctions(&uapi_UCharacterMovementComponent_RegisterComponentTickFunctions);
    }

    auto const apiuapi_UCharacterMovementComponent_RemoveRootMotionSource = (uapi_UCharacterMovementComponent_RemoveRootMotionSourceFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_RemoveRootMotionSource_handler\0"));
    if(apiuapi_UCharacterMovementComponent_RemoveRootMotionSource){
        apiuapi_UCharacterMovementComponent_RemoveRootMotionSource(&uapi_UCharacterMovementComponent_RemoveRootMotionSource);
    }

    auto const apiuapi_UCharacterMovementComponent_RemoveRootMotionSourceByID = (uapi_UCharacterMovementComponent_RemoveRootMotionSourceByIDFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_RemoveRootMotionSourceByID_handler\0"));
    if(apiuapi_UCharacterMovementComponent_RemoveRootMotionSourceByID){
        apiuapi_UCharacterMovementComponent_RemoveRootMotionSourceByID(&uapi_UCharacterMovementComponent_RemoveRootMotionSourceByID);
    }

    auto const apiuapi_UCharacterMovementComponent_ResetPredictionData_Client = (uapi_UCharacterMovementComponent_ResetPredictionData_ClientFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_ResetPredictionData_Client_handler\0"));
    if(apiuapi_UCharacterMovementComponent_ResetPredictionData_Client){
        apiuapi_UCharacterMovementComponent_ResetPredictionData_Client(&uapi_UCharacterMovementComponent_ResetPredictionData_Client);
    }

    auto const apiuapi_UCharacterMovementComponent_ResetPredictionData_Server = (uapi_UCharacterMovementComponent_ResetPredictionData_ServerFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_ResetPredictionData_Server_handler\0"));
    if(apiuapi_UCharacterMovementComponent_ResetPredictionData_Server){
        apiuapi_UCharacterMovementComponent_ResetPredictionData_Server(&uapi_UCharacterMovementComponent_ResetPredictionData_Server);
    }

    auto const apiuapi_UCharacterMovementComponent_RoundAcceleration = (uapi_UCharacterMovementComponent_RoundAccelerationFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_RoundAcceleration_handler\0"));
    if(apiuapi_UCharacterMovementComponent_RoundAcceleration){
        apiuapi_UCharacterMovementComponent_RoundAcceleration(&uapi_UCharacterMovementComponent_RoundAcceleration);
    }

    auto const apiuapi_UCharacterMovementComponent_SaveBaseLocation = (uapi_UCharacterMovementComponent_SaveBaseLocationFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_SaveBaseLocation_handler\0"));
    if(apiuapi_UCharacterMovementComponent_SaveBaseLocation){
        apiuapi_UCharacterMovementComponent_SaveBaseLocation(&uapi_UCharacterMovementComponent_SaveBaseLocation);
    }

    auto const apiuapi_UCharacterMovementComponent_SendClientAdjustment = (uapi_UCharacterMovementComponent_SendClientAdjustmentFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_SendClientAdjustment_handler\0"));
    if(apiuapi_UCharacterMovementComponent_SendClientAdjustment){
        apiuapi_UCharacterMovementComponent_SendClientAdjustment(&uapi_UCharacterMovementComponent_SendClientAdjustment);
    }

    auto const apiuapi_UCharacterMovementComponent_SetAvoidanceEnabled = (uapi_UCharacterMovementComponent_SetAvoidanceEnabledFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_SetAvoidanceEnabled_handler\0"));
    if(apiuapi_UCharacterMovementComponent_SetAvoidanceEnabled){
        apiuapi_UCharacterMovementComponent_SetAvoidanceEnabled(&uapi_UCharacterMovementComponent_SetAvoidanceEnabled);
    }

    auto const apiuapi_UCharacterMovementComponent_SetAvoidanceGroup = (uapi_UCharacterMovementComponent_SetAvoidanceGroupFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_SetAvoidanceGroup_handler\0"));
    if(apiuapi_UCharacterMovementComponent_SetAvoidanceGroup){
        apiuapi_UCharacterMovementComponent_SetAvoidanceGroup(&uapi_UCharacterMovementComponent_SetAvoidanceGroup);
    }

    auto const apiuapi_UCharacterMovementComponent_SetAvoidanceVelocityLock = (uapi_UCharacterMovementComponent_SetAvoidanceVelocityLockFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_SetAvoidanceVelocityLock_handler\0"));
    if(apiuapi_UCharacterMovementComponent_SetAvoidanceVelocityLock){
        apiuapi_UCharacterMovementComponent_SetAvoidanceVelocityLock(&uapi_UCharacterMovementComponent_SetAvoidanceVelocityLock);
    }

    auto const apiuapi_UCharacterMovementComponent_SetBase = (uapi_UCharacterMovementComponent_SetBaseFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_SetBase_handler\0"));
    if(apiuapi_UCharacterMovementComponent_SetBase){
        apiuapi_UCharacterMovementComponent_SetBase(&uapi_UCharacterMovementComponent_SetBase);
    }

    auto const apiuapi_UCharacterMovementComponent_SetCrouchedHalfHeight = (uapi_UCharacterMovementComponent_SetCrouchedHalfHeightFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_SetCrouchedHalfHeight_handler\0"));
    if(apiuapi_UCharacterMovementComponent_SetCrouchedHalfHeight){
        apiuapi_UCharacterMovementComponent_SetCrouchedHalfHeight(&uapi_UCharacterMovementComponent_SetCrouchedHalfHeight);
    }

    auto const apiuapi_UCharacterMovementComponent_SetDefaultMovementMode = (uapi_UCharacterMovementComponent_SetDefaultMovementModeFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_SetDefaultMovementMode_handler\0"));
    if(apiuapi_UCharacterMovementComponent_SetDefaultMovementMode){
        apiuapi_UCharacterMovementComponent_SetDefaultMovementMode(&uapi_UCharacterMovementComponent_SetDefaultMovementMode);
    }

    auto const apiuapi_UCharacterMovementComponent_SetGroupsToAvoid = (uapi_UCharacterMovementComponent_SetGroupsToAvoidFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_SetGroupsToAvoid_handler\0"));
    if(apiuapi_UCharacterMovementComponent_SetGroupsToAvoid){
        apiuapi_UCharacterMovementComponent_SetGroupsToAvoid(&uapi_UCharacterMovementComponent_SetGroupsToAvoid);
    }

    auto const apiuapi_UCharacterMovementComponent_SetGroupsToIgnore = (uapi_UCharacterMovementComponent_SetGroupsToIgnoreFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_SetGroupsToIgnore_handler\0"));
    if(apiuapi_UCharacterMovementComponent_SetGroupsToIgnore){
        apiuapi_UCharacterMovementComponent_SetGroupsToIgnore(&uapi_UCharacterMovementComponent_SetGroupsToIgnore);
    }

    auto const apiuapi_UCharacterMovementComponent_SetRVOAvoidanceUID = (uapi_UCharacterMovementComponent_SetRVOAvoidanceUIDFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_SetRVOAvoidanceUID_handler\0"));
    if(apiuapi_UCharacterMovementComponent_SetRVOAvoidanceUID){
        apiuapi_UCharacterMovementComponent_SetRVOAvoidanceUID(&uapi_UCharacterMovementComponent_SetRVOAvoidanceUID);
    }

    auto const apiuapi_UCharacterMovementComponent_SetRVOAvoidanceWeight = (uapi_UCharacterMovementComponent_SetRVOAvoidanceWeightFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_SetRVOAvoidanceWeight_handler\0"));
    if(apiuapi_UCharacterMovementComponent_SetRVOAvoidanceWeight){
        apiuapi_UCharacterMovementComponent_SetRVOAvoidanceWeight(&uapi_UCharacterMovementComponent_SetRVOAvoidanceWeight);
    }

    auto const apiuapi_UCharacterMovementComponent_SetUpdatedComponent = (uapi_UCharacterMovementComponent_SetUpdatedComponentFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_SetUpdatedComponent_handler\0"));
    if(apiuapi_UCharacterMovementComponent_SetUpdatedComponent){
        apiuapi_UCharacterMovementComponent_SetUpdatedComponent(&uapi_UCharacterMovementComponent_SetUpdatedComponent);
    }

    auto const apiuapi_UCharacterMovementComponent_SetWalkableFloorAngle = (uapi_UCharacterMovementComponent_SetWalkableFloorAngleFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_SetWalkableFloorAngle_handler\0"));
    if(apiuapi_UCharacterMovementComponent_SetWalkableFloorAngle){
        apiuapi_UCharacterMovementComponent_SetWalkableFloorAngle(&uapi_UCharacterMovementComponent_SetWalkableFloorAngle);
    }

    auto const apiuapi_UCharacterMovementComponent_SetWalkableFloorZ = (uapi_UCharacterMovementComponent_SetWalkableFloorZFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_SetWalkableFloorZ_handler\0"));
    if(apiuapi_UCharacterMovementComponent_SetWalkableFloorZ){
        apiuapi_UCharacterMovementComponent_SetWalkableFloorZ(&uapi_UCharacterMovementComponent_SetWalkableFloorZ);
    }

    auto const apiuapi_UCharacterMovementComponent_ShouldCorrectRotation = (uapi_UCharacterMovementComponent_ShouldCorrectRotationFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_ShouldCorrectRotation_handler\0"));
    if(apiuapi_UCharacterMovementComponent_ShouldCorrectRotation){
        apiuapi_UCharacterMovementComponent_ShouldCorrectRotation(&uapi_UCharacterMovementComponent_ShouldCorrectRotation);
    }

    auto const apiuapi_UCharacterMovementComponent_ShouldPerformAirControlForPathFollowing = (uapi_UCharacterMovementComponent_ShouldPerformAirControlForPathFollowingFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_ShouldPerformAirControlForPathFollowing_handler\0"));
    if(apiuapi_UCharacterMovementComponent_ShouldPerformAirControlForPathFollowing){
        apiuapi_UCharacterMovementComponent_ShouldPerformAirControlForPathFollowing(&uapi_UCharacterMovementComponent_ShouldPerformAirControlForPathFollowing);
    }

    auto const apiuapi_UCharacterMovementComponent_ShouldRemainVertical = (uapi_UCharacterMovementComponent_ShouldRemainVerticalFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_ShouldRemainVertical_handler\0"));
    if(apiuapi_UCharacterMovementComponent_ShouldRemainVertical){
        apiuapi_UCharacterMovementComponent_ShouldRemainVertical(&uapi_UCharacterMovementComponent_ShouldRemainVertical);
    }

    auto const apiuapi_UCharacterMovementComponent_ShouldUsePackedMovementRPCs = (uapi_UCharacterMovementComponent_ShouldUsePackedMovementRPCsFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_ShouldUsePackedMovementRPCs_handler\0"));
    if(apiuapi_UCharacterMovementComponent_ShouldUsePackedMovementRPCs){
        apiuapi_UCharacterMovementComponent_ShouldUsePackedMovementRPCs(&uapi_UCharacterMovementComponent_ShouldUsePackedMovementRPCs);
    }

    auto const apiuapi_UCharacterMovementComponent_StartNewPhysics = (uapi_UCharacterMovementComponent_StartNewPhysicsFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_StartNewPhysics_handler\0"));
    if(apiuapi_UCharacterMovementComponent_StartNewPhysics){
        apiuapi_UCharacterMovementComponent_StartNewPhysics(&uapi_UCharacterMovementComponent_StartNewPhysics);
    }

    auto const apiuapi_UCharacterMovementComponent_StartSwimming = (uapi_UCharacterMovementComponent_StartSwimmingFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_StartSwimming_handler\0"));
    if(apiuapi_UCharacterMovementComponent_StartSwimming){
        apiuapi_UCharacterMovementComponent_StartSwimming(&uapi_UCharacterMovementComponent_StartSwimming);
    }

    auto const apiuapi_UCharacterMovementComponent_StopActiveMovement = (uapi_UCharacterMovementComponent_StopActiveMovementFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_StopActiveMovement_handler\0"));
    if(apiuapi_UCharacterMovementComponent_StopActiveMovement){
        apiuapi_UCharacterMovementComponent_StopActiveMovement(&uapi_UCharacterMovementComponent_StopActiveMovement);
    }

    auto const apiuapi_UCharacterMovementComponent_UnCrouch = (uapi_UCharacterMovementComponent_UnCrouchFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_UnCrouch_handler\0"));
    if(apiuapi_UCharacterMovementComponent_UnCrouch){
        apiuapi_UCharacterMovementComponent_UnCrouch(&uapi_UCharacterMovementComponent_UnCrouch);
    }

    auto const apiuapi_UCharacterMovementComponent_UpdateBasedMovement = (uapi_UCharacterMovementComponent_UpdateBasedMovementFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_UpdateBasedMovement_handler\0"));
    if(apiuapi_UCharacterMovementComponent_UpdateBasedMovement){
        apiuapi_UCharacterMovementComponent_UpdateBasedMovement(&uapi_UCharacterMovementComponent_UpdateBasedMovement);
    }

    auto const apiuapi_UCharacterMovementComponent_UpdateCharacterStateAfterMovement = (uapi_UCharacterMovementComponent_UpdateCharacterStateAfterMovementFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_UpdateCharacterStateAfterMovement_handler\0"));
    if(apiuapi_UCharacterMovementComponent_UpdateCharacterStateAfterMovement){
        apiuapi_UCharacterMovementComponent_UpdateCharacterStateAfterMovement(&uapi_UCharacterMovementComponent_UpdateCharacterStateAfterMovement);
    }

    auto const apiuapi_UCharacterMovementComponent_UpdateCharacterStateBeforeMovement = (uapi_UCharacterMovementComponent_UpdateCharacterStateBeforeMovementFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_UpdateCharacterStateBeforeMovement_handler\0"));
    if(apiuapi_UCharacterMovementComponent_UpdateCharacterStateBeforeMovement){
        apiuapi_UCharacterMovementComponent_UpdateCharacterStateBeforeMovement(&uapi_UCharacterMovementComponent_UpdateCharacterStateBeforeMovement);
    }

    auto const apiuapi_UCharacterMovementComponent_UpdateFloorFromAdjustment = (uapi_UCharacterMovementComponent_UpdateFloorFromAdjustmentFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_UpdateFloorFromAdjustment_handler\0"));
    if(apiuapi_UCharacterMovementComponent_UpdateFloorFromAdjustment){
        apiuapi_UCharacterMovementComponent_UpdateFloorFromAdjustment(&uapi_UCharacterMovementComponent_UpdateFloorFromAdjustment);
    }

    auto const apiuapi_UCharacterMovementComponent_UpdateProxyAcceleration = (uapi_UCharacterMovementComponent_UpdateProxyAccelerationFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_UpdateProxyAcceleration_handler\0"));
    if(apiuapi_UCharacterMovementComponent_UpdateProxyAcceleration){
        apiuapi_UCharacterMovementComponent_UpdateProxyAcceleration(&uapi_UCharacterMovementComponent_UpdateProxyAcceleration);
    }

    auto const apiuapi_UCharacterMovementComponent_VisualizeMovement = (uapi_UCharacterMovementComponent_VisualizeMovementFn)plugin->GetDllExport(TEXT("set_UCharacterMovementComponent_VisualizeMovement_handler\0"));
    if(apiuapi_UCharacterMovementComponent_VisualizeMovement){
        apiuapi_UCharacterMovementComponent_VisualizeMovement(&uapi_UCharacterMovementComponent_VisualizeMovement);
    }
}