#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(dead_code)]
#![allow(unused_imports)]
use super::*;
use std::{ffi::{c_void, CString}, os::raw::c_char, ops::{Deref, DerefMut}};
use ffis::*;
pub struct RefResult<T: Sized>{
    t: T,
}
impl<T: Sized> RefResult<T>{
    fn new(t: T) -> Self{
        Self { t }
    }
    pub fn get(&self)-> &T{
        &self.t
    }
    pub fn get_mut(&mut self)-> &mut T{
        &mut self.t
    }
}
impl<T: Sized> Deref for RefResult<T> {
    type Target = T;
    fn deref(&self) -> &Self::Target {
        &self.t
    }
}
impl<T: Sized> DerefMut for RefResult<T> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.t
    }
}
mod opaque_types{
    use std::ffi::c_void;
	pub type UObjectOpaque = c_void;//cpp type UObject
	pub type ITargetPlatformOpaque = c_void;//cpp type ITargetPlatform
	pub type UFunctionOpaque = c_void;//cpp type UFunction
	pub type FOutParmRecOpaque = c_void;//cpp type FOutParmRec
	pub type FFrameOpaque = c_void;//cpp type FFrame
	pub type FPropertyOpaque = c_void;//cpp type FProperty
	pub type FObjectInstancingGraphOpaque = c_void;//cpp type FObjectInstancingGraph
	pub type TCHAROpaque = c_void;//cpp type TCHAR
	pub type UScriptStructOpaque = c_void;//cpp type UScriptStruct
	pub type UWorldOpaque = c_void;//cpp type UWorld
	pub type FFeedbackContextOpaque = c_void;//cpp type FFeedbackContext
	pub type UClassOpaque = c_void;//cpp type UClass
	pub type FConfigCacheIniOpaque = c_void;//cpp type FConfigCacheIni
	pub type FLinkerLoadOpaque = c_void;//cpp type FLinkerLoad
	pub type AActorOpaque = c_void;//cpp type AActor
	pub type UDataLayerAssetOpaque = c_void;//cpp type UDataLayerAsset
	pub type UActorComponentOpaque = c_void;//cpp type UActorComponent
	pub type APlayerControllerOpaque = c_void;//cpp type APlayerController
	pub type UNetDriverOpaque = c_void;//cpp type UNetDriver
	pub type APawnOpaque = c_void;//cpp type APawn
	pub type FBlueprintCookedComponentInstancingDataOpaque = c_void;//cpp type FBlueprintCookedComponentInstancingData
	pub type USceneComponentOpaque = c_void;//cpp type USceneComponent
	pub type UPackageOpaque = c_void;//cpp type UPackage
	pub type UGameInstanceOpaque = c_void;//cpp type UGameInstance
	pub type UHLODLayerOpaque = c_void;//cpp type UHLODLayer
	pub type AControllerOpaque = c_void;//cpp type AController
	pub type ULevelOpaque = c_void;//cpp type ULevel
	pub type UNetConnectionOpaque = c_void;//cpp type UNetConnection
	pub type UPlayerOpaque = c_void;//cpp type UPlayer
	pub type UChildActorComponentOpaque = c_void;//cpp type UChildActorComponent
	pub type APhysicsVolumeOpaque = c_void;//cpp type APhysicsVolume
	pub type AWorldSettingsOpaque = c_void;//cpp type AWorldSettings
	pub type FRegisterComponentContextOpaque = c_void;//cpp type FRegisterComponentContext
	pub type UCanvasOpaque = c_void;//cpp type UCanvas
	pub type UDamageTypeOpaque = c_void;//cpp type UDamageType
	pub type UActorChannelOpaque = c_void;//cpp type UActorChannel
	pub type FOutBunchOpaque = c_void;//cpp type FOutBunch
	pub type FReplicationFlagsOpaque = c_void;//cpp type FReplicationFlags
	pub type UPrimitiveComponentOpaque = c_void;//cpp type UPrimitiveComponent
	pub type UPawnMovementComponentOpaque = c_void;//cpp type UPawnMovementComponent
	pub type UPawnNoiseEmitterComponentOpaque = c_void;//cpp type UPawnNoiseEmitterComponent
	pub type APlayerStateOpaque = c_void;//cpp type APlayerState
	pub type ACharacterOpaque = c_void;//cpp type ACharacter
	pub type UTouchInterfaceOpaque = c_void;//cpp type UTouchInterface
	pub type USoundBaseOpaque = c_void;//cpp type USoundBase
	pub type UMaterialInterfaceOpaque = c_void;//cpp type UMaterialInterface
	pub type UCameraShakeSourceComponentOpaque = c_void;//cpp type UCameraShakeSourceComponent
	pub type UForceFeedbackEffectOpaque = c_void;//cpp type UForceFeedbackEffect
	pub type AHUDOpaque = c_void;//cpp type AHUD
	pub type ULocalPlayerOpaque = c_void;//cpp type ULocalPlayer
	pub type UInputComponentOpaque = c_void;//cpp type UInputComponent
	pub type ULevelStreamingOpaque = c_void;//cpp type ULevelStreaming
	pub type FRandomStreamOpaque = c_void;//cpp type FRandomStream
	pub type FLargeWorldCoordinatesRealOpaque = c_void;//cpp type FLargeWorldCoordinatesReal
	pub type UReverbEffectOpaque = c_void;//cpp type UReverbEffect
	pub type USoundMixOpaque = c_void;//cpp type USoundMix
	pub type USoundClassOpaque = c_void;//cpp type USoundClass
	pub type UAudioComponentOpaque = c_void;//cpp type UAudioComponent
	pub type USoundConcurrencyOpaque = c_void;//cpp type USoundConcurrency
	pub type AGameModeBaseOpaque = c_void;//cpp type AGameModeBase
	pub type AGameStateBaseOpaque = c_void;//cpp type AGameStateBase
	pub type APlayerCameraManagerOpaque = c_void;//cpp type APlayerCameraManager
	pub type UStaticMeshOpaque = c_void;//cpp type UStaticMesh
	pub type USoundAttenuationOpaque = c_void;//cpp type USoundAttenuation
	pub type UInitialActiveSoundParamsOpaque = c_void;//cpp type UInitialActiveSoundParams
	pub type UDecalComponentOpaque = c_void;//cpp type UDecalComponent
	pub type UForceFeedbackComponentOpaque = c_void;//cpp type UForceFeedbackComponent
	pub type UForceFeedbackAttenuationOpaque = c_void;//cpp type UForceFeedbackAttenuation
	pub type UArrowComponentOpaque = c_void;//cpp type UArrowComponent
	pub type UCapsuleComponentOpaque = c_void;//cpp type UCapsuleComponent
	pub type UCharacterMovementComponentOpaque = c_void;//cpp type UCharacterMovementComponent
	pub type UAnimMontageOpaque = c_void;//cpp type UAnimMontage
	pub type USkeletalMeshComponentOpaque = c_void;//cpp type USkeletalMeshComponent
	pub type FAnimMontageInstanceOpaque = c_void;//cpp type FAnimMontageInstance
	pub type FScopedMovementUpdateOpaque = c_void;//cpp type FScopedMovementUpdate
	pub type TOverlapArrayViewOpaque = c_void;//cpp type TOverlapArrayView
	pub type UAssetUserDataOpaque = c_void;//cpp type UAssetUserData
	pub type Opaque = c_void;//cpp type 
	pub type FSceneInterfaceOpaque = c_void;//cpp type FSceneInterface
	pub type FTickFunctionOpaque = c_void;//cpp type FTickFunction
	pub type UMaterialParameterCollectionOpaque = c_void;//cpp type UMaterialParameterCollection
	pub type FSceneViewOpaque = c_void;//cpp type FSceneView
	pub type UAISystemBaseOpaque = c_void;//cpp type UAISystemBase
	pub type FLevelCollectionOpaque = c_void;//cpp type FLevelCollection
	pub type FAudioDeviceOpaque = c_void;//cpp type FAudioDevice
	pub type UAvoidanceManagerOpaque = c_void;//cpp type UAvoidanceManager
	pub type ABrushOpaque = c_void;//cpp type ABrush
	pub type UDemoNetDriverOpaque = c_void;//cpp type UDemoNetDriver
	pub type UGameViewportClientOpaque = c_void;//cpp type UGameViewportClient
	pub type ALevelScriptActorOpaque = c_void;//cpp type ALevelScriptActor
	pub type UMaterialParameterCollectionInstanceOpaque = c_void;//cpp type UMaterialParameterCollectionInstance
	pub type FPhysSceneOpaque = c_void;//cpp type FPhysScene
	pub type AServerStreamingLevelsVisibilityOpaque = c_void;//cpp type AServerStreamingLevelsVisibility
	pub type UWorldPartitionOpaque = c_void;//cpp type UWorldPartition
	pub type IInterface_PostProcessVolumeOpaque = c_void;//cpp type IInterface_PostProcessVolume
	pub type UChannelOpaque = c_void;//cpp type UChannel
	pub type UBlueprintOpaque = c_void;//cpp type UBlueprint
	pub type ACameraActorOpaque = c_void;//cpp type ACameraActor
	pub type UNavigationSystemBaseOpaque = c_void;//cpp type UNavigationSystemBase
	pub type AWorldDataLayersOpaque = c_void;//cpp type AWorldDataLayers
	pub type FPrimitiveSceneProxyOpaque = c_void;//cpp type FPrimitiveSceneProxy
	pub type FBodyInstanceOpaque = c_void;//cpp type FBodyInstance
	pub type UBodySetupOpaque = c_void;//cpp type UBodySetup
	pub type UActorTextureStreamingBuildDataComponentOpaque = c_void;//cpp type UActorTextureStreamingBuildDataComponent
	pub type UPhysicalMaterialOpaque = c_void;//cpp type UPhysicalMaterial
	pub type UAnimInstanceOpaque = c_void;//cpp type UAnimInstance
	pub type FAnimNode_LinkedInputPoseOpaque = c_void;//cpp type FAnimNode_LinkedInputPose
	pub type FBakedAnimationStateMachineOpaque = c_void;//cpp type FBakedAnimationStateMachine
	pub type IAnimClassInterfaceOpaque = c_void;//cpp type IAnimClassInterface
	pub type FAnimNode_StateMachineOpaque = c_void;//cpp type FAnimNode_StateMachine
	pub type FPoseSnapshotOpaque = c_void;//cpp type FPoseSnapshot
	pub type UAnimSequenceBaseOpaque = c_void;//cpp type UAnimSequenceBase
	pub type FOnMontageBlendingOutStartedOpaque = c_void;//cpp type FOnMontageBlendingOutStarted
	pub type USkeletalMeshOpaque = c_void;//cpp type USkeletalMesh
	pub type UBlendProfileOpaque = c_void;//cpp type UBlendProfile
	pub type UAnimNotifyStateOpaque = c_void;//cpp type UAnimNotifyState
	pub type FAnimNotifyEventOpaque = c_void;//cpp type FAnimNotifyEvent
	pub type FAnimTrackOpaque = c_void;//cpp type FAnimTrack
	pub type UPhysicsAssetOpaque = c_void;//cpp type UPhysicsAsset
	pub type FPrimitiveDrawInterfaceOpaque = c_void;//cpp type FPrimitiveDrawInterface
	pub type FCanvasOpaque = c_void;//cpp type FCanvas
	pub type FConstraintInstanceOpaque = c_void;//cpp type FConstraintInstance
	pub type IClothingSimulationOpaque = c_void;//cpp type IClothingSimulation
	pub type IClothingSimulationContextOpaque = c_void;//cpp type IClothingSimulationContext
	pub type UClothingSimulationInteractorOpaque = c_void;//cpp type UClothingSimulationInteractor
	pub type UAnimSingleNodeInstanceOpaque = c_void;//cpp type UAnimSingleNodeInstance
	pub type USkelControlLookAtOpaque = c_void;//cpp type USkelControlLookAt
	pub type UAnimationAssetOpaque = c_void;//cpp type UAnimationAsset
	pub type FActorComponentTickFunctionOpaque = c_void;//cpp type FActorComponentTickFunction
	pub type USkinnedAssetOpaque = c_void;//cpp type USkinnedAsset
	pub type UParticleSystemComponentOpaque = c_void;//cpp type UParticleSystemComponent
	pub type FSavedMove_CharacterOpaque = c_void;//cpp type FSavedMove_Character
	pub type FNetworkPredictionData_ClientOpaque = c_void;//cpp type FNetworkPredictionData_Client
	pub type FNetworkPredictionData_Client_CharacterOpaque = c_void;//cpp type FNetworkPredictionData_Client_Character
	pub type FNetworkPredictionData_ServerOpaque = c_void;//cpp type FNetworkPredictionData_Server
	pub type FNetworkPredictionData_Server_CharacterOpaque = c_void;//cpp type FNetworkPredictionData_Server_Character
	pub type FRootMotionSourceOpaque = c_void;//cpp type FRootMotionSource            
}
pub use opaque_types::*;


use glam::{Quat, Vec3};
#[repr(C)]
#[derive(Default, Clone, Copy, Debug, PartialEq)]
pub struct Vector3 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[repr(C)]
#[derive(Default, Clone, Copy, Debug, PartialEq)]
pub struct Quaternion {
    x: f32,
    y: f32,
    z: f32,
    w: f32,
}
#[repr(C)]
#[derive(Default, Clone, Copy, Debug, Eq, PartialEq)]
pub struct Entity {
    pub id: u64,
}
#[repr(C)]
#[derive(Default, Clone, Copy, Debug, Eq, PartialEq)]
pub struct Color {
    pub r: u8,
    pub g: u8,
    pub b: u8,
    pub a: u8,
}

/// cbindgen:ignore
impl Color {
    pub const RED: Self = Self {
        r: 255,
        g: 0,
        b: 0,
        a: 255,
    };
    pub const GREEN: Self = Self {
        r: 0,
        g: 255,
        b: 0,
        a: 255,
    };
    pub const BLUE: Self = Self {
        r: 0,
        g: 0,
        b: 255,
        a: 255,
    };
}
#[repr(C)]
#[derive(Default, Clone, Copy, Debug, Eq, PartialEq)]
pub struct Uuid {
    pub a: u32,
    pub b: u32,
    pub c: u32,
    pub d: u32,
}

#[repr(C)]
#[derive(Default, Clone, Copy, Debug, PartialEq)]
pub struct Vector2 {
    pub x: f32,
    pub y: f32,
}

pub type Vector4 = Quaternion;


#[repr(C)]
#[derive(Default, Clone, Copy, Debug, PartialEq)]
pub struct CollisionBox {
    pub half_extent_x: f32,
    pub half_extent_y: f32,
    pub half_extent_z: f32,
}

#[repr(C)]
#[derive(Default, Clone, Copy, Debug, PartialEq)]
pub struct CollisionSphere {
    pub radius: f32
}

#[repr(C)]
#[derive(Default, Clone, Copy, Debug, PartialEq)]
pub struct CollisionCapsule {
    pub radius: f32,
    pub half_height: f32,
}

#[repr(C)]
#[derive(Clone, Copy)]
pub union CollisionShapeUnion {
    pub collision_box: CollisionBox,
    pub sphere: CollisionSphere,
    pub capsule: CollisionCapsule,
}
#[repr(u32)]
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
pub enum CollisionShapeType{
    Box,
    Capsule,
    Sphere,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct CollisionShape {
    pub data: CollisionShapeUnion,
    pub ty: CollisionShapeType,
}

#[repr(C)]
#[derive(Clone, Copy)]
pub struct OverlapResult {
    pub actor: *mut c_void,
    pub primtive: *mut c_void,
}

#[repr(C)]
#[derive(Default, Clone, Copy, Debug, PartialEq)]
pub struct SoundSettings {
    pub volume: f32,
    pub pitch: f32,
}
#[repr(C)]
#[derive(Default, Clone, Copy, Debug, PartialEq)]
pub struct Rotator {
    /** Rotation around the right axis (around Y axis), Looking up and down (0=Straight Ahead, +Up, -Down) */
    pub pitch: f32,

    /** Rotation around the up axis (around Z axis), Turning around (0=Forward, +Right, -Left)*/
    pub yaw: f32,

    /** Rotation around the forward axis (around X axis), Tilting your head, (0=Straight, +Clockwise, -CCW) */
    pub roll: f32,
}

#[repr(C)]
#[derive(Default, Clone, Copy, Debug, Eq, PartialEq)]
pub struct IntPoint
{
    pub x: i32,
    pub y: i32,
}
#[repr(C)]
#[derive(Default, Clone, Copy, Debug, PartialEq)]
pub struct Transform
{
    pub rotation: Quaternion,
    pub location: Vector3,
    pub scale: Vector3
}

impl From<Quaternion> for Quat {
    fn from(val: Quaternion) -> Self {
        Quat::from_xyzw(val.x, val.y, val.z, val.w)
    }
}

impl From<Vector3> for Vec3 {
    fn from(val: Vector3) -> Self {
        Vec3::new(val.x, val.y, val.z)
    }
}

impl From<Vec3> for Vector3 {
    fn from(v: Vec3) -> Self {
        Vector3 {
            x: v.x,
            y: v.y,
            z: v.z,
        }
    }
}
impl From<Quat> for Quaternion {
    fn from(v: Quat) -> Self {
        Quaternion {
            x: v.x,
            y: v.y,
            z: v.z,
            w: v.w,
        }
    }
}
/*
unreal FName
 */
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct UName{
	pub entry: u32,
	pub number: u32,
}
///imply that this is a unreal object
pub trait IPtr: Sized{
    fn inner(&self) -> *mut c_void;
    fn from_ptr(ptr: *mut c_void) -> Option<Self>;
}
///cast V into R, this casting is unsafe, user should ensure the safety
pub unsafe fn cast_to<V: IPtr, R: IPtr>(from: V) -> Option<R>{
    R::from_ptr(from.inner())
}
pub fn char_str_2_string(cstr: *const std::os::raw::c_char) -> String{
    if cstr.is_null(){
        error!("translate string by null ptr");
        return Default::default();
    }
    unsafe{CString::from_raw(cstr as *mut _)}
    .to_str()
    .map_err(|e| {
        error!("fail to load string {:?}", e)
    })
    .map(|s| s.to_string())
    .unwrap_or_default()
}
#[no_mangle]
unsafe extern fn create_native_string(ptr: *const c_char, size: u32) -> *mut c_char {
    // Take the ownership back to rust and drop the owner
    let slice = std::slice::from_raw_parts(ptr as *const u8, size as usize);
    let Ok(native_str) = CString::new(slice)
    else{
        error!("fail to parse from {:p}", ptr);
        return std::ptr::null_mut();
    };
    native_str.into_raw()
}
///thread unsafe
#[repr(C)]
#[derive(Debug, Clone, Copy)]
pub struct NativeString{
    pub utf_str: *const c_char,
    pub size: u32,
}
///thread unsafe
#[repr(C)]
#[derive(Debug, Clone, Copy)]
pub struct RefString{
    pub utf_str: *const c_char,
    pub str_ref: *mut String,
    pub size: u32,
}
/// rust string to c const string(as parameter)
/// ```
/// pub fn string_2_char_str(rstr: &str) -> binders::NativeString{
///     string_2_cstr!(rstr, rstr);/// 
///     rstr
/// }
/// ```
#[allow(unused)]
#[macro_export]
macro_rules! string_2_cstr{
    ($rstr: expr, $name:ident) => {
        let size = $rstr.len() as u32;
        let utf_str = $rstr.as_ptr() as *const std::ffi::c_char;
        let $name = NativeString{utf_str, size};
    };
}
/// rust string to c ref string(as parameter)
/// ```
/// pub fn string_2_rstr(rstr: &mut String) -> binders::RefString{
///     string_2_rstr!(rstr, rstr);/// 
///     rstr
/// }
/// ```
#[allow(unused)]
#[macro_export]
macro_rules! string_2_rstr{
    ($rstr: expr, $name:ident) => {
        let str_ref = $rstr as *mut String;
        let size = $rstr.len() as u32;
        let utf_str = $rstr.as_str().as_ptr() as *const std::ffi::c_char;
        let $name = RefString{utf_str, size, str_ref};
    };
}
#[no_mangle]
unsafe extern fn reset_rust_string(rstr: RefString, c_str: *const c_char, size: u32){
    // info!("rest rust string {:p}", c_str);
    if c_str.is_null(){
        return;
    }
    if let Some(r_str) = rstr.str_ref.as_mut(){
        if size > rstr.size{
            r_str.reserve_exact((size - rstr.size) as usize + 1);
        }
        r_str.as_mut_vec().set_len(size as usize);
        std::intrinsics::copy(c_str as *const u8, r_str.as_mut_vec().as_mut_ptr(), size as usize);
    }
}

pub struct UObject{
    inner: *mut UObjectOpaque
}
impl IPtr for UObject{
    #[inline]
    fn inner(&self) -> *mut UObjectOpaque { self.inner }
    #[inline]
    fn from_ptr(ptr: *mut c_void) -> Option<Self>{
        if_else!(
            ptr.is_null(),
            None,
            Some(Self{inner: ptr})
        )        
    }
}
impl UObject{
    
	#[inline]
	pub fn AbortInsideMemberFunction(&self){
		unsafe{ UObject_AbortInsideMemberFunctionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn AreNativePropertiesIdenticalTo(&self, Other: &mut UObject) -> bool{
		unsafe{ UObject_AreNativePropertiesIdenticalToInvokerHandler.as_ref().unwrap()(self.inner, Other.inner()) }
	}
	#[inline]
	pub fn BeginCacheForCookedPlatformData(&mut self, TargetPlatform: *mut ITargetPlatformOpaque){
		unsafe{ UObject_BeginCacheForCookedPlatformDataInvokerHandler.as_ref().unwrap()(self.inner, TargetPlatform) }
	}
	#[inline]
	pub fn BeginDestroy(&mut self){
		unsafe{ UObject_BeginDestroyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CallRemoteFunction(&mut self, Function: *mut UFunctionOpaque, Parms: *mut c_void, OutParms: *mut FOutParmRecOpaque, Stack: *mut FFrameOpaque) -> bool{
		unsafe{ UObject_CallRemoteFunctionInvokerHandler.as_ref().unwrap()(self.inner, Function, Parms, OutParms, Stack) }
	}
	#[inline]
	pub fn CanCreateInCurrentContext(Template: &mut UObject) -> bool{
		unsafe{ UObject_CanCreateInCurrentContextInvokerHandler.as_ref().unwrap()(Template.inner()) }
	}
	#[inline]
	pub fn CanEditChange(&self, InProperty: *mut FPropertyOpaque) -> bool{
		unsafe{ UObject_CanEditChangeInvokerHandler.as_ref().unwrap()(self.inner, InProperty) }
	}
	#[inline]
	pub fn CanModify(&self) -> bool{
		unsafe{ UObject_CanModifyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CheckDefaultSubobjects(&self, bForceCheck: bool) -> bool{
		unsafe{ UObject_CheckDefaultSubobjectsInvokerHandler.as_ref().unwrap()(self.inner, bForceCheck) }
	}
	#[inline]
	pub fn ClearAllCachedCookedPlatformData(&mut self){
		unsafe{ UObject_ClearAllCachedCookedPlatformDataInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearCachedCookedPlatformData(&mut self, TargetPlatform: *mut ITargetPlatformOpaque){
		unsafe{ UObject_ClearCachedCookedPlatformDataInvokerHandler.as_ref().unwrap()(self.inner, TargetPlatform) }
	}
	#[inline]
	pub fn ConditionalBeginDestroy(&mut self) -> bool{
		unsafe{ UObject_ConditionalBeginDestroyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ConditionalFinishDestroy(&mut self) -> bool{
		unsafe{ UObject_ConditionalFinishDestroyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ConditionalPostLoad(&mut self){
		unsafe{ UObject_ConditionalPostLoadInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ConditionalPostLoadSubobjects(&mut self, OuterInstanceGraph: *mut FObjectInstancingGraphOpaque){
		unsafe{ UObject_ConditionalPostLoadSubobjectsInvokerHandler.as_ref().unwrap()(self.inner, OuterInstanceGraph) }
	}
	#[inline]
	pub fn DestroyNonNativeProperties(&mut self){
		unsafe{ UObject_DestroyNonNativePropertiesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ExecuteUbergraph(&mut self, EntryPoint: i32){
		unsafe{ UObject_ExecuteUbergraphInvokerHandler.as_ref().unwrap()(self.inner, EntryPoint) }
	}
	#[inline]
	pub fn FindFunction(&self, InName: UName) -> *mut UFunctionOpaque{
		unsafe{ UObject_FindFunctionInvokerHandler.as_ref().unwrap()(self.inner, InName) }
	}
	#[inline]
	pub fn FindFunctionChecked(&self, InName: UName) -> *mut UFunctionOpaque{
		unsafe{ UObject_FindFunctionCheckedInvokerHandler.as_ref().unwrap()(self.inner, InName) }
	}
	#[inline]
	pub fn FinishDestroy(&mut self){
		unsafe{ UObject_FinishDestroyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetArchetype(&self) -> Option<UObject>{
		unsafe{ UObject::from_ptr(UObject_GetArchetypeInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetConfigOverridePlatform(&self) -> *mut TCHAROpaque{
		unsafe{ UObject_GetConfigOverridePlatformInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetDefaultConfigFilename(&self) -> String{
		unsafe{ char_str_2_string(UObject_GetDefaultConfigFilenameInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetDesc(&mut self) -> String{
		unsafe{ char_str_2_string(UObject_GetDescInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetDetailedInfo(&self) -> String{
		unsafe{ char_str_2_string(UObject_GetDetailedInfoInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetExporterName(&mut self) -> UName{
		unsafe{ UObject_GetExporterNameInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetGlobalUserConfigFilename(&self) -> String{
		unsafe{ char_str_2_string(UObject_GetGlobalUserConfigFilenameInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetNetPushIdDynamic(&self) -> u64{
		unsafe{ UObject_GetNetPushIdDynamicInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetProjectUserConfigFilename(&self) -> String{
		unsafe{ char_str_2_string(UObject_GetProjectUserConfigFilenameInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetSparseClassDataStruct(&self) -> *mut UScriptStructOpaque{
		unsafe{ UObject_GetSparseClassDataStructInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetWorld(&self) -> Option<UWorld>{
		unsafe{ UWorld::from_ptr(UObject_GetWorldInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetWorldChecked(&self, bSupported: &mut bool) -> Option<UWorld>{
		unsafe{ UWorld::from_ptr(UObject_GetWorldCheckedInvokerHandler.as_ref().unwrap()(self.inner, bSupported)) }
	}
	#[inline]
	pub fn HasNonEditorOnlyReferences(&self) -> bool{
		unsafe{ UObject_HasNonEditorOnlyReferencesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ImplementsGetWorld(&self) -> bool{
		unsafe{ UObject_ImplementsGetWorldInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ImportCustomProperties(&mut self, SourceText: *mut TCHAROpaque, Warn: *mut FFeedbackContextOpaque){
		unsafe{ UObject_ImportCustomPropertiesInvokerHandler.as_ref().unwrap()(self.inner, SourceText, Warn) }
	}
	#[inline]
	pub fn InstanceSubobjectTemplates(&mut self, InstanceGraph: *mut FObjectInstancingGraphOpaque){
		unsafe{ UObject_InstanceSubobjectTemplatesInvokerHandler.as_ref().unwrap()(self.inner, InstanceGraph) }
	}
	#[inline]
	pub fn IsAsset(&self) -> bool{
		unsafe{ UObject_IsAssetInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsBasedOnArchetype(&self, SomeObject: &UObject) -> bool{
		unsafe{ UObject_IsBasedOnArchetypeInvokerHandler.as_ref().unwrap()(self.inner, SomeObject.inner()) }
	}
	#[inline]
	pub fn IsCachedCookedPlatformDataLoaded(&mut self, TargetPlatform: *mut ITargetPlatformOpaque) -> bool{
		unsafe{ UObject_IsCachedCookedPlatformDataLoadedInvokerHandler.as_ref().unwrap()(self.inner, TargetPlatform) }
	}
	#[inline]
	pub fn IsDestructionThreadSafe(&self) -> bool{
		unsafe{ UObject_IsDestructionThreadSafeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsEditorOnly(&self) -> bool{
		unsafe{ UObject_IsEditorOnlyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsFullNameStableForNetworking(&self) -> bool{
		unsafe{ UObject_IsFullNameStableForNetworkingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsInBlueprint(&self) -> bool{
		unsafe{ UObject_IsInBlueprintInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsLocalizedResource(&self) -> bool{
		unsafe{ UObject_IsLocalizedResourceInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsNameStableForNetworking(&self) -> bool{
		unsafe{ UObject_IsNameStableForNetworkingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPostLoadThreadSafe(&self) -> bool{
		unsafe{ UObject_IsPostLoadThreadSafeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsReadyForAsyncPostLoad(&self) -> bool{
		unsafe{ UObject_IsReadyForAsyncPostLoadInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsReadyForFinishDestroy(&mut self) -> bool{
		unsafe{ UObject_IsReadyForFinishDestroyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsSafeForRootSet(&self) -> bool{
		unsafe{ UObject_IsSafeForRootSetInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsSelected(&self) -> bool{
		unsafe{ UObject_IsSelectedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsSupportedForNetworking(&self) -> bool{
		unsafe{ UObject_IsSupportedForNetworkingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn LoadConfig(&mut self, ConfigClass: *mut UClassOpaque, Filename: *mut TCHAROpaque, PropagationFlags: u32, PropertyToLoad: *mut FPropertyOpaque){
		unsafe{ UObject_LoadConfigInvokerHandler.as_ref().unwrap()(self.inner, ConfigClass, Filename, PropagationFlags, PropertyToLoad) }
	}
	#[inline]
	pub fn MarkAsEditorOnlySubobject(&mut self){
		unsafe{ UObject_MarkAsEditorOnlySubobjectInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn Modify(&mut self, bAlwaysMarkDirty: bool) -> bool{
		unsafe{ UObject_ModifyInvokerHandler.as_ref().unwrap()(self.inner, bAlwaysMarkDirty) }
	}
	#[inline]
	pub fn MoveDataToSparseClassDataStruct(&self){
		unsafe{ UObject_MoveDataToSparseClassDataStructInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn NeedsLoadForClient(&self) -> bool{
		unsafe{ UObject_NeedsLoadForClientInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn NeedsLoadForEditorGame(&self) -> bool{
		unsafe{ UObject_NeedsLoadForEditorGameInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn NeedsLoadForServer(&self) -> bool{
		unsafe{ UObject_NeedsLoadForServerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn NeedsLoadForTargetPlatform(&self, TargetPlatform: *mut ITargetPlatformOpaque) -> bool{
		unsafe{ UObject_NeedsLoadForTargetPlatformInvokerHandler.as_ref().unwrap()(self.inner, TargetPlatform) }
	}
	#[inline]
	pub fn ParseParms(&mut self, Parms: *mut TCHAROpaque){
		unsafe{ UObject_ParseParmsInvokerHandler.as_ref().unwrap()(self.inner, Parms) }
	}
	#[inline]
	pub fn PostCDOContruct(&mut self){
		unsafe{ UObject_PostCDOContructInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostDuplicate(&mut self, bDuplicateForPIE: bool){
		unsafe{ UObject_PostDuplicateInvokerHandler.as_ref().unwrap()(self.inner, bDuplicateForPIE) }
	}
	#[inline]
	pub fn PostEditChange(&mut self){
		unsafe{ UObject_PostEditChangeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostEditImport(&mut self){
		unsafe{ UObject_PostEditImportInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostEditUndo(&mut self){
		unsafe{ UObject_PostEditUndoInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostInitProperties(&mut self){
		unsafe{ UObject_PostInitPropertiesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostInterpChange(&mut self, PropertyThatChanged: *mut FPropertyOpaque){
		unsafe{ UObject_PostInterpChangeInvokerHandler.as_ref().unwrap()(self.inner, PropertyThatChanged) }
	}
	#[inline]
	pub fn PostLinkerChange(&mut self){
		unsafe{ UObject_PostLinkerChangeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostLoad(&mut self){
		unsafe{ UObject_PostLoadInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostLoadSubobjects(&mut self, OuterInstanceGraph: *mut FObjectInstancingGraphOpaque){
		unsafe{ UObject_PostLoadSubobjectsInvokerHandler.as_ref().unwrap()(self.inner, OuterInstanceGraph) }
	}
	#[inline]
	pub fn PostNetReceive(&mut self){
		unsafe{ UObject_PostNetReceiveInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostReinitProperties(&mut self){
		unsafe{ UObject_PostReinitPropertiesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostReloadConfig(&mut self, PropertyThatWasLoaded: *mut FPropertyOpaque){
		unsafe{ UObject_PostReloadConfigInvokerHandler.as_ref().unwrap()(self.inner, PropertyThatWasLoaded) }
	}
	#[inline]
	pub fn PostRename(&mut self, OldOuter: &mut UObject, OldName: UName){
		unsafe{ UObject_PostRenameInvokerHandler.as_ref().unwrap()(self.inner, OldOuter.inner(), OldName) }
	}
	#[inline]
	pub fn PostRepNotifies(&mut self){
		unsafe{ UObject_PostRepNotifiesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PreDestroyFromReplication(&mut self){
		unsafe{ UObject_PreDestroyFromReplicationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PreEditChange(&mut self, PropertyAboutToChange: *mut FPropertyOpaque){
		unsafe{ UObject_PreEditChangeInvokerHandler.as_ref().unwrap()(self.inner, PropertyAboutToChange) }
	}
	#[inline]
	pub fn PreEditUndo(&mut self){
		unsafe{ UObject_PreEditUndoInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PreNetReceive(&mut self){
		unsafe{ UObject_PreNetReceiveInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RegenerateClass(&mut self, ClassToRegenerate: *mut UClassOpaque, PreviousCDO: &mut UObject) -> *mut UClassOpaque{
		unsafe{ UObject_RegenerateClassInvokerHandler.as_ref().unwrap()(self.inner, ClassToRegenerate, PreviousCDO.inner()) }
	}
	#[inline]
	pub fn ReinitializeProperties(&mut self, SourceObject: &mut UObject, InstanceGraph: *mut FObjectInstancingGraphOpaque){
		unsafe{ UObject_ReinitializePropertiesInvokerHandler.as_ref().unwrap()(self.inner, SourceObject.inner(), InstanceGraph) }
	}
	#[inline]
	pub fn ReloadConfig(&mut self, ConfigClass: *mut UClassOpaque, Filename: *mut TCHAROpaque, PropagationFlags: u32, PropertyToLoad: *mut FPropertyOpaque){
		unsafe{ UObject_ReloadConfigInvokerHandler.as_ref().unwrap()(self.inner, ConfigClass, Filename, PropagationFlags, PropertyToLoad) }
	}
	#[inline]
	pub fn SaveConfig(&mut self, Flags: u64, Filename: *mut TCHAROpaque, Config: *mut FConfigCacheIniOpaque, bAllowCopyToDefaultObject: bool){
		unsafe{ UObject_SaveConfigInvokerHandler.as_ref().unwrap()(self.inner, Flags, Filename, Config, bAllowCopyToDefaultObject) }
	}
	#[inline]
	pub fn SetLinker(&mut self, LinkerLoad: *mut FLinkerLoadOpaque, LinkerIndex: i32, bShouldDetachExisting: bool){
		unsafe{ UObject_SetLinkerInvokerHandler.as_ref().unwrap()(self.inner, LinkerLoad, LinkerIndex, bShouldDetachExisting) }
	}
	#[inline]
	pub fn ShutdownAfterError(&mut self){
		unsafe{ UObject_ShutdownAfterErrorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateGlobalUserConfigFile(&mut self){
		unsafe{ UObject_UpdateGlobalUserConfigFileInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateProjectUserConfigFile(&mut self){
		unsafe{ UObject_UpdateProjectUserConfigFileInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn WillNeverCacheCookedPlatformDataAgain(&mut self){
		unsafe{ UObject_WillNeverCacheCookedPlatformDataAgainInvokerHandler.as_ref().unwrap()(self.inner) }
	}
}
pub struct AActor{
    inner: *mut AActorOpaque
}
impl IPtr for AActor{
    #[inline]
    fn inner(&self) -> *mut AActorOpaque { self.inner }
    #[inline]
    fn from_ptr(ptr: *mut c_void) -> Option<Self>{
        if_else!(
            ptr.is_null(),
            None,
            Some(Self{inner: ptr})
        )        
    }
}
impl AActor{
    
	#[inline]
	pub fn ActorHasTag(&self, Tag: UName) -> bool{
		unsafe{ AActor_ActorHasTagInvokerHandler.as_ref().unwrap()(self.inner, Tag) }
	}
	#[inline]
	pub fn ActorToWorld(&self) -> Transform{
		unsafe{ AActor_ActorToWorldInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn AddDataLayer(&mut self, DataLayerAsset: *mut UDataLayerAssetOpaque) -> bool{
		unsafe{ AActor_AddDataLayerInvokerHandler.as_ref().unwrap()(self.inner, DataLayerAsset) }
	}
	#[inline]
	pub fn AddInstanceComponent(&mut self, Component: &mut UActorComponent){
		unsafe{ AActor_AddInstanceComponentInvokerHandler.as_ref().unwrap()(self.inner, Component.inner()) }
	}
	#[inline]
	pub fn AddOwnedComponent(&mut self, Component: &mut UActorComponent){
		unsafe{ AActor_AddOwnedComponentInvokerHandler.as_ref().unwrap()(self.inner, Component.inner()) }
	}
	#[inline]
	pub fn AddTickPrerequisiteActor(&mut self, PrerequisiteActor: &mut AActor){
		unsafe{ AActor_AddTickPrerequisiteActorInvokerHandler.as_ref().unwrap()(self.inner, PrerequisiteActor.inner()) }
	}
	#[inline]
	pub fn AddTickPrerequisiteComponent(&mut self, PrerequisiteComponent: &mut UActorComponent){
		unsafe{ AActor_AddTickPrerequisiteComponentInvokerHandler.as_ref().unwrap()(self.inner, PrerequisiteComponent.inner()) }
	}
	#[inline]
	pub fn AllowReceiveTickEventOnDedicatedServer(&self) -> bool{
		unsafe{ AActor_AllowReceiveTickEventOnDedicatedServerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn AsyncPhysicsTickActor(&mut self, DeltaTime: f32, SimTime: f32){
		unsafe{ AActor_AsyncPhysicsTickActorInvokerHandler.as_ref().unwrap()(self.inner, DeltaTime, SimTime) }
	}
	#[inline]
	pub fn BecomeViewTarget(&mut self, PC: &mut APlayerController){
		unsafe{ AActor_BecomeViewTargetInvokerHandler.as_ref().unwrap()(self.inner, PC.inner()) }
	}
	#[inline]
	pub fn CallPreReplication(&mut self, NetDriver: *mut UNetDriverOpaque){
		unsafe{ AActor_CallPreReplicationInvokerHandler.as_ref().unwrap()(self.inner, NetDriver) }
	}
	#[inline]
	pub fn CallRemoteFunction(&mut self, Function: *mut UFunctionOpaque, Parameters: *mut c_void, OutParms: *mut FOutParmRecOpaque, Stack: *mut FFrameOpaque) -> bool{
		unsafe{ AActor_CallRemoteFunctionInvokerHandler.as_ref().unwrap()(self.inner, Function, Parameters, OutParms, Stack) }
	}
	#[inline]
	pub fn CanBeBaseForCharacter(&self, Pawn: &mut APawn) -> bool{
		unsafe{ AActor_CanBeBaseForCharacterInvokerHandler.as_ref().unwrap()(self.inner, Pawn.inner()) }
	}
	#[inline]
	pub fn CanBeDamaged(&self) -> bool{
		unsafe{ AActor_CanBeDamagedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CanBeInCluster(&self) -> bool{
		unsafe{ AActor_CanBeInClusterInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CanChangeIsSpatiallyLoadedFlag(&self) -> bool{
		unsafe{ AActor_CanChangeIsSpatiallyLoadedFlagInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CanEditChange(&self, InProperty: *mut FPropertyOpaque) -> bool{
		unsafe{ AActor_CanEditChangeInvokerHandler.as_ref().unwrap()(self.inner, InProperty) }
	}
	#[inline]
	pub fn CanEditChangeComponent(&self, Component: &UActorComponent, InProperty: *mut FPropertyOpaque) -> bool{
		unsafe{ AActor_CanEditChangeComponentInvokerHandler.as_ref().unwrap()(self.inner, Component.inner(), InProperty) }
	}
	#[inline]
	pub fn CanEverTick(&self) -> bool{
		unsafe{ AActor_CanEverTickInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CanPlayFromHere(&self) -> bool{
		unsafe{ AActor_CanPlayFromHereInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CheckComponentInstanceName(&mut self, InName: UName){
		unsafe{ AActor_CheckComponentInstanceNameInvokerHandler.as_ref().unwrap()(self.inner, InName) }
	}
	#[inline]
	pub fn CheckDefaultSubobjectsInternal(&self) -> bool{
		unsafe{ AActor_CheckDefaultSubobjectsInternalInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CheckForDeprecated(&mut self){
		unsafe{ AActor_CheckForDeprecatedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CheckForErrors(&mut self){
		unsafe{ AActor_CheckForErrorsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CheckStillInWorld(&mut self) -> bool{
		unsafe{ AActor_CheckStillInWorldInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearActorLabel(&mut self){
		unsafe{ AActor_ClearActorLabelInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearComponentOverlaps(&mut self){
		unsafe{ AActor_ClearComponentOverlapsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearCrossLevelReferences(&mut self){
		unsafe{ AActor_ClearCrossLevelReferencesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearInstanceComponents(&mut self, bDestroyComponents: bool){
		unsafe{ AActor_ClearInstanceComponentsInvokerHandler.as_ref().unwrap()(self.inner, bDestroyComponents) }
	}
	#[inline]
	pub fn ContainsDataLayer(&self, DataLayerAsset: *mut UDataLayerAssetOpaque) -> bool{
		unsafe{ AActor_ContainsDataLayerInvokerHandler.as_ref().unwrap()(self.inner, DataLayerAsset) }
	}
	#[inline]
	pub fn CopyRemoteRoleFrom(&mut self, CopyFromActor: &AActor){
		unsafe{ AActor_CopyRemoteRoleFromInvokerHandler.as_ref().unwrap()(self.inner, CopyFromActor.inner()) }
	}
	#[inline]
	pub fn CreateComponentFromTemplate(&mut self, Template: &mut UActorComponent, InName: UName) -> Option<UActorComponent>{
		unsafe{ UActorComponent::from_ptr(AActor_CreateComponentFromTemplateInvokerHandler.as_ref().unwrap()(self.inner, Template.inner(), InName)) }
	}
	#[inline]
	pub fn CreateComponentFromTemplateData(&mut self, TemplateData: *mut FBlueprintCookedComponentInstancingDataOpaque, InName: UName) -> Option<UActorComponent>{
		unsafe{ UActorComponent::from_ptr(AActor_CreateComponentFromTemplateDataInvokerHandler.as_ref().unwrap()(self.inner, TemplateData, InName)) }
	}
	#[inline]
	pub fn CreateOrUpdateActorFolder(&mut self) -> bool{
		unsafe{ AActor_CreateOrUpdateActorFolderInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn DebugShowComponentHierarchy(&mut self, Info: *mut TCHAROpaque, bShowPosition: bool){
		unsafe{ AActor_DebugShowComponentHierarchyInvokerHandler.as_ref().unwrap()(self.inner, Info, bShowPosition) }
	}
	#[inline]
	pub fn DebugShowOneComponentHierarchy(&mut self, SceneComp: &mut USceneComponent, NestLevel: &mut i32, bShowPosition: bool){
		unsafe{ AActor_DebugShowOneComponentHierarchyInvokerHandler.as_ref().unwrap()(self.inner, SceneComp.inner(), NestLevel, bShowPosition) }
	}
	#[inline]
	pub fn Destroy(&mut self, bNetForce: bool, bShouldModifyLevel: bool) -> bool{
		unsafe{ AActor_DestroyInvokerHandler.as_ref().unwrap()(self.inner, bNetForce, bShouldModifyLevel) }
	}
	#[inline]
	pub fn DestroyConstructedComponents(&mut self){
		unsafe{ AActor_DestroyConstructedComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn DestroyNetworkActorHandled(&mut self) -> bool{
		unsafe{ AActor_DestroyNetworkActorHandledInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn Destroyed(&mut self){
		unsafe{ AActor_DestroyedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn DisableComponentsSimulatePhysics(&mut self){
		unsafe{ AActor_DisableComponentsSimulatePhysicsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn DisableInput(&mut self, PlayerController: &mut APlayerController){
		unsafe{ AActor_DisableInputInvokerHandler.as_ref().unwrap()(self.inner, PlayerController.inner()) }
	}
	#[inline]
	pub fn DispatchBeginPlay(&mut self, bFromLevelStreaming: bool){
		unsafe{ AActor_DispatchBeginPlayInvokerHandler.as_ref().unwrap()(self.inner, bFromLevelStreaming) }
	}
	#[inline]
	pub fn EditorReplacedActor(&mut self, OldActor: &mut AActor){
		unsafe{ AActor_EditorReplacedActorInvokerHandler.as_ref().unwrap()(self.inner, OldActor.inner()) }
	}
	#[inline]
	pub fn EnableInput(&mut self, PlayerController: &mut APlayerController){
		unsafe{ AActor_EnableInputInvokerHandler.as_ref().unwrap()(self.inner, PlayerController.inner()) }
	}
	#[inline]
	pub fn EndViewTarget(&mut self, PC: &mut APlayerController){
		unsafe{ AActor_EndViewTargetInvokerHandler.as_ref().unwrap()(self.inner, PC.inner()) }
	}
	#[inline]
	pub fn ExchangeNetRoles(&mut self, bRemoteOwner: bool){
		unsafe{ AActor_ExchangeNetRolesInvokerHandler.as_ref().unwrap()(self.inner, bRemoteOwner) }
	}
	#[inline]
	pub fn FindActorInPackage(InPackage: *mut UPackageOpaque) -> Option<AActor>{
		unsafe{ AActor::from_ptr(AActor_FindActorInPackageInvokerHandler.as_ref().unwrap()(InPackage)) }
	}
	#[inline]
	pub fn FinishAndRegisterComponent(&mut self, Component: &mut UActorComponent){
		unsafe{ AActor_FinishAndRegisterComponentInvokerHandler.as_ref().unwrap()(self.inner, Component.inner()) }
	}
	#[inline]
	pub fn FixupActorFolder(&mut self){
		unsafe{ AActor_FixupActorFolderInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn FixupDataLayers(&mut self, bRevertChangesOnLockedDataLayer: bool){
		unsafe{ AActor_FixupDataLayersInvokerHandler.as_ref().unwrap()(self.inner, bRevertChangesOnLockedDataLayer) }
	}
	#[inline]
	pub fn FlushNetDormancy(&mut self){
		unsafe{ AActor_FlushNetDormancyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ForceNetRelevant(&mut self){
		unsafe{ AActor_ForceNetRelevantInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ForceNetUpdate(&mut self){
		unsafe{ AActor_ForceNetUpdateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ForcePropertyCompare(&mut self){
		unsafe{ AActor_ForcePropertyCompareInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GatherCurrentMovement(&mut self){
		unsafe{ AActor_GatherCurrentMovementInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetActorEnableCollision(&self) -> bool{
		unsafe{ AActor_GetActorEnableCollisionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetActorForwardVector(&self) -> Vector3{
		unsafe{ AActor_GetActorForwardVectorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetActorGuid(&self) -> Uuid{
		unsafe{ AActor_GetActorGuidInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetActorLocation(&self) -> Vector3{
		unsafe{ AActor_GetActorLocationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetActorNameOrLabel(&self) -> String{
		unsafe{ char_str_2_string(AActor_GetActorNameOrLabelInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetActorQuat(&self) -> Quaternion{
		unsafe{ AActor_GetActorQuatInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetActorRelativeScale3D(&self) -> Vector3{
		unsafe{ AActor_GetActorRelativeScale3DInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetActorRightVector(&self) -> Vector3{
		unsafe{ AActor_GetActorRightVectorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetActorRotation(&self) -> Rotator{
		unsafe{ AActor_GetActorRotationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetActorScale(&self) -> Vector3{
		unsafe{ AActor_GetActorScaleInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetActorScale3D(&self) -> Vector3{
		unsafe{ AActor_GetActorScale3DInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetActorTickInterval(&self) -> f32{
		unsafe{ AActor_GetActorTickIntervalInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetActorTimeDilation(&self) -> f32{
		unsafe{ AActor_GetActorTimeDilationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetActorTimeDilation2(&self, ActorWorld: &mut UWorld) -> f32{
		unsafe{ AActor_GetActorTimeDilation2InvokerHandler.as_ref().unwrap()(self.inner, ActorWorld.inner()) }
	}
	#[inline]
	pub fn GetActorTransform(&self) -> Transform{
		unsafe{ AActor_GetActorTransformInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetActorUpVector(&self) -> Vector3{
		unsafe{ AActor_GetActorUpVectorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetAttachParentActor(&self) -> Option<AActor>{
		unsafe{ AActor::from_ptr(AActor_GetAttachParentActorInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetAttachParentSocketName(&self) -> UName{
		unsafe{ AActor_GetAttachParentSocketNameInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetAutoDestroyWhenFinished(&self) -> bool{
		unsafe{ AActor_GetAutoDestroyWhenFinishedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetCanBeDamagedPropertyName() -> UName{
		unsafe{ AActor_GetCanBeDamagedPropertyNameInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetComponentsBoundingCylinder(&self, CollisionRadius: &mut f32, CollisionHalfHeight: &mut f32, bNonColliding: bool, bIncludeFromChildActors: bool){
		unsafe{ AActor_GetComponentsBoundingCylinderInvokerHandler.as_ref().unwrap()(self.inner, CollisionRadius, CollisionHalfHeight, bNonColliding, bIncludeFromChildActors) }
	}
	#[inline]
	pub fn GetContentBundleGuid(&self) -> Uuid{
		unsafe{ AActor_GetContentBundleGuidInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetCustomIconName(&self) -> UName{
		unsafe{ AActor_GetCustomIconNameInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetDataLayerAssetsPropertyName() -> UName{
		unsafe{ AActor_GetDataLayerAssetsPropertyNameInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetDefaultActorLabel(&self) -> String{
		unsafe{ char_str_2_string(AActor_GetDefaultActorLabelInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetDefaultAttachComponent(&self) -> Option<USceneComponent>{
		unsafe{ USceneComponent::from_ptr(AActor_GetDefaultAttachComponentInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetDistanceTo(&self, OtherActor: &AActor) -> f32{
		unsafe{ AActor_GetDistanceToInvokerHandler.as_ref().unwrap()(self.inner, OtherActor.inner()) }
	}
	#[inline]
	pub fn GetDotProductTo(&self, OtherActor: &AActor) -> f32{
		unsafe{ AActor_GetDotProductToInvokerHandler.as_ref().unwrap()(self.inner, OtherActor.inner()) }
	}
	#[inline]
	pub fn GetFolderGuid(&self, bDirectAccess: bool) -> Uuid{
		unsafe{ AActor_GetFolderGuidInvokerHandler.as_ref().unwrap()(self.inner, bDirectAccess) }
	}
	#[inline]
	pub fn GetFolderPath(&self) -> UName{
		unsafe{ AActor_GetFolderPathInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetFunctionCallspace(&mut self, Function: *mut UFunctionOpaque, Stack: *mut FFrameOpaque) -> i32{
		unsafe{ AActor_GetFunctionCallspaceInvokerHandler.as_ref().unwrap()(self.inner, Function, Stack) }
	}
	#[inline]
	pub fn GetGameInstance(&self) -> *mut UGameInstanceOpaque{
		unsafe{ AActor_GetGameInstanceInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetGameTimeSinceCreation(&self) -> f32{
		unsafe{ AActor_GetGameTimeSinceCreationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetHLODLayer(&self) -> *mut UHLODLayerOpaque{
		unsafe{ AActor_GetHLODLayerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetHLODLayerPropertyName() -> UName{
		unsafe{ AActor_GetHLODLayerPropertyNameInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetHiddenPropertyName() -> UName{
		unsafe{ AActor_GetHiddenPropertyNameInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetHorizontalDistanceTo(&self, OtherActor: &AActor) -> f32{
		unsafe{ AActor_GetHorizontalDistanceToInvokerHandler.as_ref().unwrap()(self.inner, OtherActor.inner()) }
	}
	#[inline]
	pub fn GetHorizontalDotProductTo(&self, OtherActor: &AActor) -> f32{
		unsafe{ AActor_GetHorizontalDotProductToInvokerHandler.as_ref().unwrap()(self.inner, OtherActor.inner()) }
	}
	#[inline]
	pub fn GetHumanReadableName(&self) -> String{
		unsafe{ char_str_2_string(AActor_GetHumanReadableNameInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetInputAxisValue(&self, InputAxisName: UName) -> f32{
		unsafe{ AActor_GetInputAxisValueInvokerHandler.as_ref().unwrap()(self.inner, InputAxisName) }
	}
	#[inline]
	pub fn GetInstigator(&self) -> Option<APawn>{
		unsafe{ APawn::from_ptr(AActor_GetInstigatorInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetInstigatorController(&self) -> Option<AController>{
		unsafe{ AController::from_ptr(AActor_GetInstigatorControllerInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetInstigatorPropertyName() -> UName{
		unsafe{ AActor_GetInstigatorPropertyNameInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetIsReplicated(&self) -> bool{
		unsafe{ AActor_GetIsReplicatedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetIsSpatiallyLoaded(&self) -> bool{
		unsafe{ AActor_GetIsSpatiallyLoadedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetIsSpatiallyLoadedPropertyName() -> UName{
		unsafe{ AActor_GetIsSpatiallyLoadedPropertyNameInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetLastRenderTime(&self) -> f32{
		unsafe{ AActor_GetLastRenderTimeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetLevel(&self) -> *mut ULevelOpaque{
		unsafe{ AActor_GetLevelInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetLevelTransform(&self) -> Transform{
		unsafe{ AActor_GetLevelTransformInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetLifeSpan(&self) -> f32{
		unsafe{ AActor_GetLifeSpanInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetNetConnection(&self) -> *mut UNetConnectionOpaque{
		unsafe{ AActor_GetNetConnectionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetNetDriver(&self) -> *mut UNetDriverOpaque{
		unsafe{ AActor_GetNetDriverInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetNetDriverName(&self) -> UName{
		unsafe{ AActor_GetNetDriverNameInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetNetOwner(&self) -> Option<AActor>{
		unsafe{ AActor::from_ptr(AActor_GetNetOwnerInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetNetOwningPlayer(&mut self) -> *mut UPlayerOpaque{
		unsafe{ AActor_GetNetOwningPlayerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetNumUncachedStaticLightingInteractions(&self) -> i32{
		unsafe{ AActor_GetNumUncachedStaticLightingInteractionsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetOwner(&self) -> Option<AActor>{
		unsafe{ AActor::from_ptr(AActor_GetOwnerInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetParentActor(&self) -> Option<AActor>{
		unsafe{ AActor::from_ptr(AActor_GetParentActorInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetParentComponent(&self) -> *mut UChildActorComponentOpaque{
		unsafe{ AActor_GetParentComponentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetPhysicsVolume(&self) -> *mut APhysicsVolumeOpaque{
		unsafe{ AActor_GetPhysicsVolumeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetPivotOffset(&self) -> Vector3{
		unsafe{ AActor_GetPivotOffsetInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetPlacementExtent(&self) -> Vector3{
		unsafe{ AActor_GetPlacementExtentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetRayTracingGroupId(&self) -> i32{
		unsafe{ AActor_GetRayTracingGroupIdInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetReplicateMovementPropertyName() -> UName{
		unsafe{ AActor_GetReplicateMovementPropertyNameInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetRolePropertyName() -> UName{
		unsafe{ AActor_GetRolePropertyNameInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetRootComponent(&self) -> Option<USceneComponent>{
		unsafe{ USceneComponent::from_ptr(AActor_GetRootComponentInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetRootSelectionParent(&self) -> Option<AActor>{
		unsafe{ AActor::from_ptr(AActor_GetRootSelectionParentInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetRuntimeGrid(&self) -> UName{
		unsafe{ AActor_GetRuntimeGridInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetRuntimeGridPropertyName() -> UName{
		unsafe{ AActor_GetRuntimeGridPropertyNameInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetSceneOutlinerParent(&self) -> Option<AActor>{
		unsafe{ AActor::from_ptr(AActor_GetSceneOutlinerParentInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetSelectionParent(&self) -> Option<AActor>{
		unsafe{ AActor::from_ptr(AActor_GetSelectionParentInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetSimpleCollisionCylinder(&self, CollisionRadius: &mut f32, CollisionHalfHeight: &mut f32){
		unsafe{ AActor_GetSimpleCollisionCylinderInvokerHandler.as_ref().unwrap()(self.inner, CollisionRadius, CollisionHalfHeight) }
	}
	#[inline]
	pub fn GetSimpleCollisionCylinderExtent(&self) -> Vector3{
		unsafe{ AActor_GetSimpleCollisionCylinderExtentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetSimpleCollisionHalfHeight(&self) -> f32{
		unsafe{ AActor_GetSimpleCollisionHalfHeightInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetSimpleCollisionRadius(&self) -> f32{
		unsafe{ AActor_GetSimpleCollisionRadiusInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetSquaredDistanceTo(&self, OtherActor: &AActor) -> f32{
		unsafe{ AActor_GetSquaredDistanceToInvokerHandler.as_ref().unwrap()(self.inner, OtherActor.inner()) }
	}
	#[inline]
	pub fn GetSquaredHorizontalDistanceTo(&self, OtherActor: &AActor) -> f32{
		unsafe{ AActor_GetSquaredHorizontalDistanceToInvokerHandler.as_ref().unwrap()(self.inner, OtherActor.inner()) }
	}
	#[inline]
	pub fn GetTargetLocation(&self, RequestedBy: &mut AActor) -> Vector3{
		unsafe{ AActor_GetTargetLocationInvokerHandler.as_ref().unwrap()(self.inner, RequestedBy.inner()) }
	}
	#[inline]
	pub fn GetTearOff(&self) -> bool{
		unsafe{ AActor_GetTearOffInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetTickableWhenPaused(&mut self) -> bool{
		unsafe{ AActor_GetTickableWhenPausedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetTransform(&self) -> Transform{
		unsafe{ AActor_GetTransformInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetVelocity(&self) -> Vector3{
		unsafe{ AActor_GetVelocityInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetVerticalDistanceTo(&self, OtherActor: &AActor) -> f32{
		unsafe{ AActor_GetVerticalDistanceToInvokerHandler.as_ref().unwrap()(self.inner, OtherActor.inner()) }
	}
	#[inline]
	pub fn GetWorld(&self) -> Option<UWorld>{
		unsafe{ UWorld::from_ptr(AActor_GetWorldInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetWorldSettings(&self) -> *mut AWorldSettingsOpaque{
		unsafe{ AActor_GetWorldSettingsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HandleRegisterComponentWithWorld(&mut self, Component: &mut UActorComponent){
		unsafe{ AActor_HandleRegisterComponentWithWorldInvokerHandler.as_ref().unwrap()(self.inner, Component.inner()) }
	}
	#[inline]
	pub fn HasActiveCameraComponent(&self) -> bool{
		unsafe{ AActor_HasActiveCameraComponentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasActivePawnControlCameraComponent(&self) -> bool{
		unsafe{ AActor_HasActivePawnControlCameraComponentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasActorBegunPlay(&self) -> bool{
		unsafe{ AActor_HasActorBegunPlayInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasActorRegisteredAllComponents(&self) -> bool{
		unsafe{ AActor_HasActorRegisteredAllComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasAuthority(&self) -> bool{
		unsafe{ AActor_HasAuthorityInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasDataLayers(&self) -> bool{
		unsafe{ AActor_HasDataLayersInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasDeferredComponentRegistration(&self) -> bool{
		unsafe{ AActor_HasDeferredComponentRegistrationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasLocalNetOwner(&self) -> bool{
		unsafe{ AActor_HasLocalNetOwnerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasNetOwner(&self) -> bool{
		unsafe{ AActor_HasNetOwnerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasNonTrivialUserConstructionScript(&self) -> bool{
		unsafe{ AActor_HasNonTrivialUserConstructionScriptInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasValidRootComponent(&mut self) -> bool{
		unsafe{ AActor_HasValidRootComponentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IncrementalRegisterComponents(&mut self, NumComponentsToRegister: i32, Context: *mut FRegisterComponentContextOpaque) -> bool{
		unsafe{ AActor_IncrementalRegisterComponentsInvokerHandler.as_ref().unwrap()(self.inner, NumComponentsToRegister, Context) }
	}
	#[inline]
	pub fn InitializeComponents(&mut self){
		unsafe{ AActor_InitializeComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn InvalidateLightingCache(&mut self){
		unsafe{ AActor_InvalidateLightingCacheInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn InvalidateLightingCacheDetailed(&mut self, bTranslationOnly: bool){
		unsafe{ AActor_InvalidateLightingCacheDetailedInvokerHandler.as_ref().unwrap()(self.inner, bTranslationOnly) }
	}
	#[inline]
	pub fn IsActorBeginningPlay(&self) -> bool{
		unsafe{ AActor_IsActorBeginningPlayInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsActorBeginningPlayFromLevelStreaming(&self) -> bool{
		unsafe{ AActor_IsActorBeginningPlayFromLevelStreamingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsActorBeingDestroyed(&self) -> bool{
		unsafe{ AActor_IsActorBeingDestroyedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsActorComponentReplicatedSubObjectRegistered(&self, OwnerComponent: &UActorComponent, SubObject: &UObject) -> bool{
		unsafe{ AActor_IsActorComponentReplicatedSubObjectRegisteredInvokerHandler.as_ref().unwrap()(self.inner, OwnerComponent.inner(), SubObject.inner()) }
	}
	#[inline]
	pub fn IsActorInitialized(&self) -> bool{
		unsafe{ AActor_IsActorInitializedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsActorLabelEditable(&self) -> bool{
		unsafe{ AActor_IsActorLabelEditableInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsActorOrSelectionParentSelected(&self) -> bool{
		unsafe{ AActor_IsActorOrSelectionParentSelectedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsActorTickEnabled(&self) -> bool{
		unsafe{ AActor_IsActorTickEnabledInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsAsset(&self) -> bool{
		unsafe{ AActor_IsAssetInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsAttachedTo(&self, Other: &AActor) -> bool{
		unsafe{ AActor_IsAttachedToInvokerHandler.as_ref().unwrap()(self.inner, Other.inner()) }
	}
	#[inline]
	pub fn IsBasedOnActor(&self, Other: &AActor) -> bool{
		unsafe{ AActor_IsBasedOnActorInvokerHandler.as_ref().unwrap()(self.inner, Other.inner()) }
	}
	#[inline]
	pub fn IsChildActor(&self) -> bool{
		unsafe{ AActor_IsChildActorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsComponentRelevantForNavigation(&self, Component: &mut UActorComponent) -> bool{
		unsafe{ AActor_IsComponentRelevantForNavigationInvokerHandler.as_ref().unwrap()(self.inner, Component.inner()) }
	}
	#[inline]
	pub fn IsDefaultPreviewEnabled(&self) -> bool{
		unsafe{ AActor_IsDefaultPreviewEnabledInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsEditable(&self) -> bool{
		unsafe{ AActor_IsEditableInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsEditorOnly(&self) -> bool{
		unsafe{ AActor_IsEditorOnlyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsForceExternalActorLevelReferenceForPIE(&self) -> bool{
		unsafe{ AActor_IsForceExternalActorLevelReferenceForPIEInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsHLODRelevant(&self) -> bool{
		unsafe{ AActor_IsHLODRelevantInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsHidden(&self) -> bool{
		unsafe{ AActor_IsHiddenInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsHiddenEd(&self) -> bool{
		unsafe{ AActor_IsHiddenEdInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsHiddenEdAtStartup(&self) -> bool{
		unsafe{ AActor_IsHiddenEdAtStartupInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsInEditingLevelInstance(&self) -> bool{
		unsafe{ AActor_IsInEditingLevelInstanceInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsInLevel(&self, TestLevel: *mut ULevelOpaque) -> bool{
		unsafe{ AActor_IsInLevelInvokerHandler.as_ref().unwrap()(self.inner, TestLevel) }
	}
	#[inline]
	pub fn IsInPersistentLevel(&self, bIncludeLevelStreamingPersistent: bool) -> bool{
		unsafe{ AActor_IsInPersistentLevelInvokerHandler.as_ref().unwrap()(self.inner, bIncludeLevelStreamingPersistent) }
	}
	#[inline]
	pub fn IsLevelBoundsRelevant(&self) -> bool{
		unsafe{ AActor_IsLevelBoundsRelevantInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsListedInSceneOutliner(&self) -> bool{
		unsafe{ AActor_IsListedInSceneOutlinerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsLockLocation(&self) -> bool{
		unsafe{ AActor_IsLockLocationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsMainPackageActor(&self) -> bool{
		unsafe{ AActor_IsMainPackageActorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsNameStableForNetworking(&self) -> bool{
		unsafe{ AActor_IsNameStableForNetworkingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsNetStartupActor(&self) -> bool{
		unsafe{ AActor_IsNetStartupActorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsOverlappingActor(&self, Other: &AActor) -> bool{
		unsafe{ AActor_IsOverlappingActorInvokerHandler.as_ref().unwrap()(self.inner, Other.inner()) }
	}
	#[inline]
	pub fn IsOwnedBy(&self, TestOwner: &AActor) -> bool{
		unsafe{ AActor_IsOwnedByInvokerHandler.as_ref().unwrap()(self.inner, TestOwner.inner()) }
	}
	#[inline]
	pub fn IsPendingKillPending(&self) -> bool{
		unsafe{ AActor_IsPendingKillPendingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsReadyForFinishDestroy(&mut self) -> bool{
		unsafe{ AActor_IsReadyForFinishDestroyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsRelevancyOwnerFor(&self, ReplicatedActor: &AActor, ActorOwner: &AActor, ConnectionActor: &AActor) -> bool{
		unsafe{ AActor_IsRelevancyOwnerForInvokerHandler.as_ref().unwrap()(self.inner, ReplicatedActor.inner(), ActorOwner.inner(), ConnectionActor.inner()) }
	}
	#[inline]
	pub fn IsReplicatedActorComponentRegistered(&self, ReplicatedComponent: &UActorComponent) -> bool{
		unsafe{ AActor_IsReplicatedActorComponentRegisteredInvokerHandler.as_ref().unwrap()(self.inner, ReplicatedComponent.inner()) }
	}
	#[inline]
	pub fn IsReplicatedSubObjectRegistered(&self, SubObject: &UObject) -> bool{
		unsafe{ AActor_IsReplicatedSubObjectRegisteredInvokerHandler.as_ref().unwrap()(self.inner, SubObject.inner()) }
	}
	#[inline]
	pub fn IsReplicatingMovement(&self) -> bool{
		unsafe{ AActor_IsReplicatingMovementInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsRootComponentCollisionRegistered(&self) -> bool{
		unsafe{ AActor_IsRootComponentCollisionRegisteredInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsRootComponentMovable(&self) -> bool{
		unsafe{ AActor_IsRootComponentMovableInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsRootComponentStatic(&self) -> bool{
		unsafe{ AActor_IsRootComponentStaticInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsRootComponentStationary(&self) -> bool{
		unsafe{ AActor_IsRootComponentStationaryInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsRunningUserConstructionScript(&self) -> bool{
		unsafe{ AActor_IsRunningUserConstructionScriptInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsRuntimeOnly(&self) -> bool{
		unsafe{ AActor_IsRuntimeOnlyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsSelectable(&self) -> bool{
		unsafe{ AActor_IsSelectableInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsSelectedInEditor(&self) -> bool{
		unsafe{ AActor_IsSelectedInEditorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsSelectionChild(&self) -> bool{
		unsafe{ AActor_IsSelectionChildInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsSelectionParentOfAttachedActors(&self) -> bool{
		unsafe{ AActor_IsSelectionParentOfAttachedActorsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsSupportedForNetworking(&self) -> bool{
		unsafe{ AActor_IsSupportedForNetworkingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsTemporarilyHiddenInEditor(&self, bIncludeParent: bool) -> bool{
		unsafe{ AActor_IsTemporarilyHiddenInEditorInvokerHandler.as_ref().unwrap()(self.inner, bIncludeParent) }
	}
	#[inline]
	pub fn IsUserManaged(&self) -> bool{
		unsafe{ AActor_IsUserManagedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsUsingRegisteredSubObjectList(&self) -> bool{
		unsafe{ AActor_IsUsingRegisteredSubObjectListInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn K2_DestroyActor(&mut self){
		unsafe{ AActor_K2_DestroyActorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn K2_GetActorLocation(&self) -> Vector3{
		unsafe{ AActor_K2_GetActorLocationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn K2_GetActorRotation(&self) -> Rotator{
		unsafe{ AActor_K2_GetActorRotationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn K2_GetRootComponent(&self) -> Option<USceneComponent>{
		unsafe{ USceneComponent::from_ptr(AActor_K2_GetRootComponentInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn K2_OnBecomeViewTarget(&mut self, PC: &mut APlayerController){
		unsafe{ AActor_K2_OnBecomeViewTargetInvokerHandler.as_ref().unwrap()(self.inner, PC.inner()) }
	}
	#[inline]
	pub fn K2_OnEndViewTarget(&mut self, PC: &mut APlayerController){
		unsafe{ AActor_K2_OnEndViewTargetInvokerHandler.as_ref().unwrap()(self.inner, PC.inner()) }
	}
	#[inline]
	pub fn K2_OnReset(&mut self){
		unsafe{ AActor_K2_OnResetInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn K2_SetActorRotation(&mut self, NewRotation: Rotator, bTeleportPhysics: bool) -> bool{
		unsafe{ AActor_K2_SetActorRotationInvokerHandler.as_ref().unwrap()(self.inner, NewRotation, bTeleportPhysics) }
	}
	#[inline]
	pub fn K2_TeleportTo(&mut self, DestLocation: Vector3, DestRotation: Rotator) -> bool{
		unsafe{ AActor_K2_TeleportToInvokerHandler.as_ref().unwrap()(self.inner, DestLocation, DestRotation) }
	}
	#[inline]
	pub fn LifeSpanExpired(&mut self){
		unsafe{ AActor_LifeSpanExpiredInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn MakeNoise(&mut self, Loudness: f32, NoiseInstigator: &mut APawn, NoiseLocation: Vector3, MaxRange: f32, Tag: UName){
		unsafe{ AActor_MakeNoiseInvokerHandler.as_ref().unwrap()(self.inner, Loudness, NoiseInstigator.inner(), NoiseLocation, MaxRange, Tag) }
	}
	#[inline]
	pub fn MarkComponentsAsPendingKill(&mut self){
		unsafe{ AActor_MarkComponentsAsPendingKillInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn MarkComponentsRenderStateDirty(&mut self){
		unsafe{ AActor_MarkComponentsRenderStateDirtyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn Modify(&mut self, bAlwaysMarkDirty: bool) -> bool{
		unsafe{ AActor_ModifyInvokerHandler.as_ref().unwrap()(self.inner, bAlwaysMarkDirty) }
	}
	#[inline]
	pub fn NeedsLoadForTargetPlatform(&self, TargetPlatform: *mut ITargetPlatformOpaque) -> bool{
		unsafe{ AActor_NeedsLoadForTargetPlatformInvokerHandler.as_ref().unwrap()(self.inner, TargetPlatform) }
	}
	#[inline]
	pub fn NotifyActorBeginCursorOver(&mut self){
		unsafe{ AActor_NotifyActorBeginCursorOverInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn NotifyActorBeginOverlap(&mut self, OtherActor: &mut AActor){
		unsafe{ AActor_NotifyActorBeginOverlapInvokerHandler.as_ref().unwrap()(self.inner, OtherActor.inner()) }
	}
	#[inline]
	pub fn NotifyActorEndCursorOver(&mut self){
		unsafe{ AActor_NotifyActorEndCursorOverInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn NotifyActorEndOverlap(&mut self, OtherActor: &mut AActor){
		unsafe{ AActor_NotifyActorEndOverlapInvokerHandler.as_ref().unwrap()(self.inner, OtherActor.inner()) }
	}
	#[inline]
	pub fn OnNetCleanup(&mut self, Connection: *mut UNetConnectionOpaque){
		unsafe{ AActor_OnNetCleanupInvokerHandler.as_ref().unwrap()(self.inner, Connection) }
	}
	#[inline]
	pub fn OnPlayFromHere(&mut self){
		unsafe{ AActor_OnPlayFromHereInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnRep_AttachmentReplication(&mut self){
		unsafe{ AActor_OnRep_AttachmentReplicationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnRep_Instigator(&mut self){
		unsafe{ AActor_OnRep_InstigatorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnRep_ReplicateMovement(&mut self){
		unsafe{ AActor_OnRep_ReplicateMovementInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnRep_ReplicatedMovement(&mut self){
		unsafe{ AActor_OnRep_ReplicatedMovementInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnReplicationPausedChanged(&mut self, bIsReplicationPaused: bool){
		unsafe{ AActor_OnReplicationPausedChangedInvokerHandler.as_ref().unwrap()(self.inner, bIsReplicationPaused) }
	}
	#[inline]
	pub fn OnSubobjectCreatedFromReplication(&mut self, NewSubobject: &mut UObject){
		unsafe{ AActor_OnSubobjectCreatedFromReplicationInvokerHandler.as_ref().unwrap()(self.inner, NewSubobject.inner()) }
	}
	#[inline]
	pub fn OnSubobjectDestroyFromReplication(&mut self, Subobject: &mut UObject){
		unsafe{ AActor_OnSubobjectDestroyFromReplicationInvokerHandler.as_ref().unwrap()(self.inner, Subobject.inner()) }
	}
	#[inline]
	pub fn OpenAssetEditor(&mut self) -> bool{
		unsafe{ AActor_OpenAssetEditorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OutsideWorldBounds(&mut self){
		unsafe{ AActor_OutsideWorldBoundsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OwnsComponent(&self, Component: &mut UActorComponent) -> bool{
		unsafe{ AActor_OwnsComponentInvokerHandler.as_ref().unwrap()(self.inner, Component.inner()) }
	}
	#[inline]
	pub fn PostActorConstruction(&mut self){
		unsafe{ AActor_PostActorConstructionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostActorCreated(&mut self){
		unsafe{ AActor_PostActorCreatedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostEditImport(&mut self){
		unsafe{ AActor_PostEditImportInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostEditMove(&mut self, bFinished: bool){
		unsafe{ AActor_PostEditMoveInvokerHandler.as_ref().unwrap()(self.inner, bFinished) }
	}
	#[inline]
	pub fn PostEditUndo(&mut self){
		unsafe{ AActor_PostEditUndoInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostInitProperties(&mut self){
		unsafe{ AActor_PostInitPropertiesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostInitializeComponents(&mut self){
		unsafe{ AActor_PostInitializeComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostLoad(&mut self){
		unsafe{ AActor_PostLoadInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostLoadSubobjects(&mut self, OuterInstanceGraph: *mut FObjectInstancingGraphOpaque){
		unsafe{ AActor_PostLoadSubobjectsInvokerHandler.as_ref().unwrap()(self.inner, OuterInstanceGraph) }
	}
	#[inline]
	pub fn PostNetInit(&mut self){
		unsafe{ AActor_PostNetInitInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostNetReceive(&mut self){
		unsafe{ AActor_PostNetReceiveInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostNetReceiveLocationAndRotation(&mut self){
		unsafe{ AActor_PostNetReceiveLocationAndRotationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostNetReceivePhysicState(&mut self){
		unsafe{ AActor_PostNetReceivePhysicStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostNetReceiveRole(&mut self){
		unsafe{ AActor_PostNetReceiveRoleInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostRegisterAllComponents(&mut self){
		unsafe{ AActor_PostRegisterAllComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostRename(&mut self, OldOuter: &mut UObject, OldName: UName){
		unsafe{ AActor_PostRenameInvokerHandler.as_ref().unwrap()(self.inner, OldOuter.inner(), OldName) }
	}
	#[inline]
	pub fn PostRenderFor(&mut self, PC: &mut APlayerController, Canvas: *mut UCanvasOpaque, CameraPosition: Vector3, CameraDir: Vector3){
		unsafe{ AActor_PostRenderForInvokerHandler.as_ref().unwrap()(self.inner, PC.inner(), Canvas, CameraPosition, CameraDir) }
	}
	#[inline]
	pub fn PostUnregisterAllComponents(&mut self){
		unsafe{ AActor_PostUnregisterAllComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PreEditChange(&mut self, PropertyThatWillChange: *mut FPropertyOpaque){
		unsafe{ AActor_PreEditChangeInvokerHandler.as_ref().unwrap()(self.inner, PropertyThatWillChange) }
	}
	#[inline]
	pub fn PreEditUndo(&mut self){
		unsafe{ AActor_PreEditUndoInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PreInitializeComponents(&mut self){
		unsafe{ AActor_PreInitializeComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PreNetReceive(&mut self){
		unsafe{ AActor_PreNetReceiveInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PreRegisterAllComponents(&mut self){
		unsafe{ AActor_PreRegisterAllComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PrestreamTextures(&mut self, Seconds: f32, bEnableStreaming: bool, CinematicTextureGroups: i32){
		unsafe{ AActor_PrestreamTexturesInvokerHandler.as_ref().unwrap()(self.inner, Seconds, bEnableStreaming, CinematicTextureGroups) }
	}
	#[inline]
	pub fn ProcessEvent(&mut self, Function: *mut UFunctionOpaque, Parameters: *mut c_void){
		unsafe{ AActor_ProcessEventInvokerHandler.as_ref().unwrap()(self.inner, Function, Parameters) }
	}
	#[inline]
	pub fn PushLevelInstanceEditingStateToProxies(&mut self, bInEditingState: bool){
		unsafe{ AActor_PushLevelInstanceEditingStateToProxiesInvokerHandler.as_ref().unwrap()(self.inner, bInEditingState) }
	}
	#[inline]
	pub fn PushSelectionToProxies(&mut self){
		unsafe{ AActor_PushSelectionToProxiesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ReceiveActorBeginCursorOver(&mut self){
		unsafe{ AActor_ReceiveActorBeginCursorOverInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ReceiveActorBeginOverlap(&mut self, OtherActor: &mut AActor){
		unsafe{ AActor_ReceiveActorBeginOverlapInvokerHandler.as_ref().unwrap()(self.inner, OtherActor.inner()) }
	}
	#[inline]
	pub fn ReceiveActorEndCursorOver(&mut self){
		unsafe{ AActor_ReceiveActorEndCursorOverInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ReceiveActorEndOverlap(&mut self, OtherActor: &mut AActor){
		unsafe{ AActor_ReceiveActorEndOverlapInvokerHandler.as_ref().unwrap()(self.inner, OtherActor.inner()) }
	}
	#[inline]
	pub fn ReceiveAnyDamage(&mut self, Damage: f32, DamageType: *mut UDamageTypeOpaque, InstigatedBy: &mut AController, DamageCauser: &mut AActor){
		unsafe{ AActor_ReceiveAnyDamageInvokerHandler.as_ref().unwrap()(self.inner, Damage, DamageType, InstigatedBy.inner(), DamageCauser.inner()) }
	}
	#[inline]
	pub fn ReceiveAsyncPhysicsTick(&mut self, DeltaSeconds: f32, SimSeconds: f32){
		unsafe{ AActor_ReceiveAsyncPhysicsTickInvokerHandler.as_ref().unwrap()(self.inner, DeltaSeconds, SimSeconds) }
	}
	#[inline]
	pub fn ReceiveDestroyed(&mut self){
		unsafe{ AActor_ReceiveDestroyedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ReceiveTick(&mut self, DeltaSeconds: f32){
		unsafe{ AActor_ReceiveTickInvokerHandler.as_ref().unwrap()(self.inner, DeltaSeconds) }
	}
	#[inline]
	pub fn RegisterAllActorTickFunctions(&mut self, bRegister: bool, bDoComponents: bool){
		unsafe{ AActor_RegisterAllActorTickFunctionsInvokerHandler.as_ref().unwrap()(self.inner, bRegister, bDoComponents) }
	}
	#[inline]
	pub fn RegisterAllComponents(&mut self){
		unsafe{ AActor_RegisterAllComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RemoveActorComponentReplicatedSubObject(&mut self, OwnerComponent: &mut UActorComponent, SubObject: &mut UObject){
		unsafe{ AActor_RemoveActorComponentReplicatedSubObjectInvokerHandler.as_ref().unwrap()(self.inner, OwnerComponent.inner(), SubObject.inner()) }
	}
	#[inline]
	pub fn RemoveAllDataLayers(&mut self) -> bool{
		unsafe{ AActor_RemoveAllDataLayersInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RemoveDataLayer(&mut self, DataLayerAsset: *mut UDataLayerAssetOpaque) -> bool{
		unsafe{ AActor_RemoveDataLayerInvokerHandler.as_ref().unwrap()(self.inner, DataLayerAsset) }
	}
	#[inline]
	pub fn RemoveInstanceComponent(&mut self, Component: &mut UActorComponent){
		unsafe{ AActor_RemoveInstanceComponentInvokerHandler.as_ref().unwrap()(self.inner, Component.inner()) }
	}
	#[inline]
	pub fn RemoveOwnedComponent(&mut self, Component: &mut UActorComponent){
		unsafe{ AActor_RemoveOwnedComponentInvokerHandler.as_ref().unwrap()(self.inner, Component.inner()) }
	}
	#[inline]
	pub fn RemoveReplicatedSubObject(&mut self, SubObject: &mut UObject){
		unsafe{ AActor_RemoveReplicatedSubObjectInvokerHandler.as_ref().unwrap()(self.inner, SubObject.inner()) }
	}
	#[inline]
	pub fn RemoveTickPrerequisiteActor(&mut self, PrerequisiteActor: &mut AActor){
		unsafe{ AActor_RemoveTickPrerequisiteActorInvokerHandler.as_ref().unwrap()(self.inner, PrerequisiteActor.inner()) }
	}
	#[inline]
	pub fn RemoveTickPrerequisiteComponent(&mut self, PrerequisiteComponent: &mut UActorComponent){
		unsafe{ AActor_RemoveTickPrerequisiteComponentInvokerHandler.as_ref().unwrap()(self.inner, PrerequisiteComponent.inner()) }
	}
	#[inline]
	pub fn ReplicateSubobjects(&mut self, Channel: *mut UActorChannelOpaque, Bunch: *mut FOutBunchOpaque, RepFlags: *mut FReplicationFlagsOpaque) -> bool{
		unsafe{ AActor_ReplicateSubobjectsInvokerHandler.as_ref().unwrap()(self.inner, Channel, Bunch, RepFlags) }
	}
	#[inline]
	pub fn ReregisterAllComponents(&mut self){
		unsafe{ AActor_ReregisterAllComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ReregisterComponentsWhenModified(&self) -> bool{
		unsafe{ AActor_ReregisterComponentsWhenModifiedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RerunConstructionScripts(&mut self){
		unsafe{ AActor_RerunConstructionScriptsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn Reset(&mut self){
		unsafe{ AActor_ResetInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ResetOwnedComponents(&mut self){
		unsafe{ AActor_ResetOwnedComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ResetPropertiesForConstruction(&mut self){
		unsafe{ AActor_ResetPropertiesForConstructionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RewindForReplay(&mut self){
		unsafe{ AActor_RewindForReplayInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SeedAllRandomStreams(&mut self){
		unsafe{ AActor_SeedAllRandomStreamsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SetActorEnableCollision(&mut self, bNewActorEnableCollision: bool){
		unsafe{ AActor_SetActorEnableCollisionInvokerHandler.as_ref().unwrap()(self.inner, bNewActorEnableCollision) }
	}
	#[inline]
	pub fn SetActorHiddenInGame(&mut self, bNewHidden: bool){
		unsafe{ AActor_SetActorHiddenInGameInvokerHandler.as_ref().unwrap()(self.inner, bNewHidden) }
	}
	#[inline]
	pub fn SetActorRelativeScale3D(&mut self, NewRelativeScale: Vector3){
		unsafe{ AActor_SetActorRelativeScale3DInvokerHandler.as_ref().unwrap()(self.inner, NewRelativeScale) }
	}
	#[inline]
	pub fn SetActorScale3D(&mut self, NewScale3D: Vector3){
		unsafe{ AActor_SetActorScale3DInvokerHandler.as_ref().unwrap()(self.inner, NewScale3D) }
	}
	#[inline]
	pub fn SetActorTickEnabled(&mut self, bEnabled: bool){
		unsafe{ AActor_SetActorTickEnabledInvokerHandler.as_ref().unwrap()(self.inner, bEnabled) }
	}
	#[inline]
	pub fn SetActorTickInterval(&mut self, TickInterval: f32){
		unsafe{ AActor_SetActorTickIntervalInvokerHandler.as_ref().unwrap()(self.inner, TickInterval) }
	}
	#[inline]
	pub fn SetAutoDestroyWhenFinished(&mut self, bVal: bool){
		unsafe{ AActor_SetAutoDestroyWhenFinishedInvokerHandler.as_ref().unwrap()(self.inner, bVal) }
	}
	#[inline]
	pub fn SetAutonomousProxy(&mut self, bInAutonomousProxy: bool, bAllowForcePropertyCompare: bool){
		unsafe{ AActor_SetAutonomousProxyInvokerHandler.as_ref().unwrap()(self.inner, bInAutonomousProxy, bAllowForcePropertyCompare) }
	}
	#[inline]
	pub fn SetCallPreReplication(&mut self, bCall: bool){
		unsafe{ AActor_SetCallPreReplicationInvokerHandler.as_ref().unwrap()(self.inner, bCall) }
	}
	#[inline]
	pub fn SetCallPreReplicationForReplay(&mut self, bCall: bool){
		unsafe{ AActor_SetCallPreReplicationForReplayInvokerHandler.as_ref().unwrap()(self.inner, bCall) }
	}
	#[inline]
	pub fn SetCanBeDamaged(&mut self, bInCanBeDamaged: bool){
		unsafe{ AActor_SetCanBeDamagedInvokerHandler.as_ref().unwrap()(self.inner, bInCanBeDamaged) }
	}
	#[inline]
	pub fn SetForceExternalActorLevelReferenceForPIE(&mut self, bValue: bool){
		unsafe{ AActor_SetForceExternalActorLevelReferenceForPIEInvokerHandler.as_ref().unwrap()(self.inner, bValue) }
	}
	#[inline]
	pub fn SetHLODLayer(&mut self, InHLODLayer: *mut UHLODLayerOpaque){
		unsafe{ AActor_SetHLODLayerInvokerHandler.as_ref().unwrap()(self.inner, InHLODLayer) }
	}
	#[inline]
	pub fn SetHasActorRegisteredAllComponents(&mut self){
		unsafe{ AActor_SetHasActorRegisteredAllComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SetHidden(&mut self, bInHidden: bool){
		unsafe{ AActor_SetHiddenInvokerHandler.as_ref().unwrap()(self.inner, bInHidden) }
	}
	#[inline]
	pub fn SetInstigator(&mut self, InInstigator: &mut APawn){
		unsafe{ AActor_SetInstigatorInvokerHandler.as_ref().unwrap()(self.inner, InInstigator.inner()) }
	}
	#[inline]
	pub fn SetIsHiddenEdLayer(&mut self, bIsHiddenEdLayer: bool) -> bool{
		unsafe{ AActor_SetIsHiddenEdLayerInvokerHandler.as_ref().unwrap()(self.inner, bIsHiddenEdLayer) }
	}
	#[inline]
	pub fn SetIsSpatiallyLoaded(&mut self, bInIsSpatiallyLoaded: bool){
		unsafe{ AActor_SetIsSpatiallyLoadedInvokerHandler.as_ref().unwrap()(self.inner, bInIsSpatiallyLoaded) }
	}
	#[inline]
	pub fn SetIsTemporarilyHiddenInEditor(&mut self, bIsHidden: bool){
		unsafe{ AActor_SetIsTemporarilyHiddenInEditorInvokerHandler.as_ref().unwrap()(self.inner, bIsHidden) }
	}
	#[inline]
	pub fn SetLODParent(&mut self, InLODParent: &mut UPrimitiveComponent, InParentDrawDistance: f32){
		unsafe{ AActor_SetLODParentInvokerHandler.as_ref().unwrap()(self.inner, InLODParent.inner(), InParentDrawDistance) }
	}
	#[inline]
	pub fn SetLifeSpan(&mut self, InLifespan: f32){
		unsafe{ AActor_SetLifeSpanInvokerHandler.as_ref().unwrap()(self.inner, InLifespan) }
	}
	#[inline]
	pub fn SetLockLocation(&mut self, bInLockLocation: bool){
		unsafe{ AActor_SetLockLocationInvokerHandler.as_ref().unwrap()(self.inner, bInLockLocation) }
	}
	#[inline]
	pub fn SetNetAddressable(&mut self){
		unsafe{ AActor_SetNetAddressableInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SetNetDriverName(&mut self, NewNetDriverName: UName){
		unsafe{ AActor_SetNetDriverNameInvokerHandler.as_ref().unwrap()(self.inner, NewNetDriverName) }
	}
	#[inline]
	pub fn SetOwner(&mut self, NewOwner: &mut AActor){
		unsafe{ AActor_SetOwnerInvokerHandler.as_ref().unwrap()(self.inner, NewOwner.inner()) }
	}
	#[inline]
	pub fn SetPackageExternal(&mut self, bExternal: bool, bShouldDirty: bool){
		unsafe{ AActor_SetPackageExternalInvokerHandler.as_ref().unwrap()(self.inner, bExternal, bShouldDirty) }
	}
	#[inline]
	pub fn SetRayTracingGroupId(&mut self, InRaytracingGroupId: i32){
		unsafe{ AActor_SetRayTracingGroupIdInvokerHandler.as_ref().unwrap()(self.inner, InRaytracingGroupId) }
	}
	#[inline]
	pub fn SetReplicateMovement(&mut self, bInReplicateMovement: bool){
		unsafe{ AActor_SetReplicateMovementInvokerHandler.as_ref().unwrap()(self.inner, bInReplicateMovement) }
	}
	#[inline]
	pub fn SetReplicates(&mut self, bInReplicates: bool){
		unsafe{ AActor_SetReplicatesInvokerHandler.as_ref().unwrap()(self.inner, bInReplicates) }
	}
	#[inline]
	pub fn SetReplicatingMovement(&mut self, bInReplicateMovement: bool){
		unsafe{ AActor_SetReplicatingMovementInvokerHandler.as_ref().unwrap()(self.inner, bInReplicateMovement) }
	}
	#[inline]
	pub fn SetRootComponent(&mut self, NewRootComponent: &mut USceneComponent) -> bool{
		unsafe{ AActor_SetRootComponentInvokerHandler.as_ref().unwrap()(self.inner, NewRootComponent.inner()) }
	}
	#[inline]
	pub fn SetRuntimeGrid(&mut self, InRuntimeGrid: UName){
		unsafe{ AActor_SetRuntimeGridInvokerHandler.as_ref().unwrap()(self.inner, InRuntimeGrid) }
	}
	#[inline]
	pub fn SetTickableWhenPaused(&mut self, bTickableWhenPaused: bool){
		unsafe{ AActor_SetTickableWhenPausedInvokerHandler.as_ref().unwrap()(self.inner, bTickableWhenPaused) }
	}
	#[inline]
	pub fn ShouldCookOptimizedBPComponentData(&self) -> bool{
		unsafe{ AActor_ShouldCookOptimizedBPComponentDataInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldExport(&mut self) -> bool{
		unsafe{ AActor_ShouldExportInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldImport(&mut self, ActorPropString: &str, IsMovingLevel: bool) -> bool{
		string_2_cstr!(ActorPropString, ActorPropString);
		unsafe{ AActor_ShouldImportInvokerHandler.as_ref().unwrap()(self.inner, ActorPropString, IsMovingLevel) }
	}
	#[inline]
	pub fn ShouldLevelKeepRefIfExternal(&self) -> bool{
		unsafe{ AActor_ShouldLevelKeepRefIfExternalInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldTickIfViewportsOnly(&self) -> bool{
		unsafe{ AActor_ShouldTickIfViewportsOnlyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SupportsDataLayer(&self) -> bool{
		unsafe{ AActor_SupportsDataLayerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SupportsExternalPackaging(&self) -> bool{
		unsafe{ AActor_SupportsExternalPackagingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SupportsLayers(&self) -> bool{
		unsafe{ AActor_SupportsLayersInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SwapRoles(&mut self){
		unsafe{ AActor_SwapRolesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn TearOff(&mut self){
		unsafe{ AActor_TearOffInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn TeleportSucceeded(&mut self, bIsATest: bool){
		unsafe{ AActor_TeleportSucceededInvokerHandler.as_ref().unwrap()(self.inner, bIsATest) }
	}
	#[inline]
	pub fn Tick(&mut self, DeltaSeconds: f32){
		unsafe{ AActor_TickInvokerHandler.as_ref().unwrap()(self.inner, DeltaSeconds) }
	}
	#[inline]
	pub fn TornOff(&mut self){
		unsafe{ AActor_TornOffInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UninitializeComponents(&mut self){
		unsafe{ AActor_UninitializeComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UnregisterAllComponents(&mut self, bForReregister: bool){
		unsafe{ AActor_UnregisterAllComponentsInvokerHandler.as_ref().unwrap()(self.inner, bForReregister) }
	}
	#[inline]
	pub fn UpdateAllReplicatedComponents(&mut self){
		unsafe{ AActor_UpdateAllReplicatedComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateComponentTransforms(&mut self){
		unsafe{ AActor_UpdateComponentTransformsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateOverlaps(&mut self, bDoNotifies: bool){
		unsafe{ AActor_UpdateOverlapsInvokerHandler.as_ref().unwrap()(self.inner, bDoNotifies) }
	}
	#[inline]
	pub fn UpdateReplicatedComponent(&mut self, Component: &mut UActorComponent){
		unsafe{ AActor_UpdateReplicatedComponentInvokerHandler.as_ref().unwrap()(self.inner, Component.inner()) }
	}
	#[inline]
	pub fn UseShortConnectTimeout(&self) -> bool{
		unsafe{ AActor_UseShortConnectTimeoutInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UserConstructionScript(&mut self){
		unsafe{ AActor_UserConstructionScriptInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn WasRecentlyRendered(&self, Tolerance: f32) -> bool{
		unsafe{ AActor_WasRecentlyRenderedInvokerHandler.as_ref().unwrap()(self.inner, Tolerance) }
	}
}
pub struct APawn{
    inner: *mut APawnOpaque
}
impl IPtr for APawn{
    #[inline]
    fn inner(&self) -> *mut APawnOpaque { self.inner }
    #[inline]
    fn from_ptr(ptr: *mut c_void) -> Option<Self>{
        if_else!(
            ptr.is_null(),
            None,
            Some(Self{inner: ptr})
        )        
    }
}
impl APawn{
    
	#[inline]
	pub fn GetController(&self) -> Option<AController>{
		unsafe{ AController::from_ptr(APawn_GetControllerInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetLocalViewingPlayerController(&self) -> Option<APlayerController>{
		unsafe{ APlayerController::from_ptr(APawn_GetLocalViewingPlayerControllerInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetMovementBase(&self) -> Option<UPrimitiveComponent>{
		unsafe{ UPrimitiveComponent::from_ptr(APawn_GetMovementBaseInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetMovementComponent(&self) -> *mut UPawnMovementComponentOpaque{
		unsafe{ APawn_GetMovementComponentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetPawnNoiseEmitterComponent(&self) -> *mut UPawnNoiseEmitterComponentOpaque{
		unsafe{ APawn_GetPawnNoiseEmitterComponentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetPlayerState(&self) -> *mut APlayerStateOpaque{
		unsafe{ APawn_GetPlayerStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsLocalPlayerControllerViewingAPawn(&self) -> bool{
		unsafe{ APawn_IsLocalPlayerControllerViewingAPawnInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsLocallyViewed(&self) -> bool{
		unsafe{ APawn_IsLocallyViewedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PawnMakeNoise(&mut self, Loudness: f32, NoiseLocation: Vector3, bUseNoiseMakerLocation: bool, NoiseMaker: &mut AActor){
		unsafe{ APawn_PawnMakeNoiseInvokerHandler.as_ref().unwrap()(self.inner, Loudness, NoiseLocation, bUseNoiseMakerLocation, NoiseMaker.inner()) }
	}
	#[inline]
	pub fn SetPlayerState(&mut self, NewPlayerState: *mut APlayerStateOpaque){
		unsafe{ APawn_SetPlayerStateInvokerHandler.as_ref().unwrap()(self.inner, NewPlayerState) }
	}
}
pub struct AController{
    inner: *mut AControllerOpaque
}
impl IPtr for AController{
    #[inline]
    fn inner(&self) -> *mut AControllerOpaque { self.inner }
    #[inline]
    fn from_ptr(ptr: *mut c_void) -> Option<Self>{
        if_else!(
            ptr.is_null(),
            None,
            Some(Self{inner: ptr})
        )        
    }
}
impl AController{
    
	#[inline]
	pub fn ChangeState(&mut self, NewState: UName){
		unsafe{ AController_ChangeStateInvokerHandler.as_ref().unwrap()(self.inner, NewState) }
	}
	#[inline]
	pub fn CleanupPlayerState(&mut self){
		unsafe{ AController_CleanupPlayerStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClientSetLocation(&mut self, NewLocation: Vector3, NewRotation: Rotator){
		unsafe{ AController_ClientSetLocationInvokerHandler.as_ref().unwrap()(self.inner, NewLocation, NewRotation) }
	}
	#[inline]
	pub fn ClientSetRotation(&mut self, NewRotation: Rotator, bResetCamera: bool){
		unsafe{ AController_ClientSetRotationInvokerHandler.as_ref().unwrap()(self.inner, NewRotation, bResetCamera) }
	}
	#[inline]
	pub fn CurrentLevelUnloaded(&mut self){
		unsafe{ AController_CurrentLevelUnloadedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn Destroyed(&mut self){
		unsafe{ AController_DestroyedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn FailedToSpawnPawn(&mut self){
		unsafe{ AController_FailedToSpawnPawnInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GameHasEnded(&mut self, EndGameFocus: &mut AActor, bIsWinner: bool){
		unsafe{ AController_GameHasEndedInvokerHandler.as_ref().unwrap()(self.inner, EndGameFocus.inner(), bIsWinner) }
	}
	#[inline]
	pub fn GetCharacter(&self) -> Option<ACharacter>{
		unsafe{ ACharacter::from_ptr(AController_GetCharacterInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetControlRotation(&self) -> Rotator{
		unsafe{ AController_GetControlRotationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetDesiredRotation(&self) -> Rotator{
		unsafe{ AController_GetDesiredRotationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetHumanReadableName(&self) -> String{
		unsafe{ char_str_2_string(AController_GetHumanReadableNameInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetNavAgentLocation(&self) -> Vector3{
		unsafe{ AController_GetNavAgentLocationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetPawn(&self) -> Option<APawn>{
		unsafe{ APawn::from_ptr(AController_GetPawnInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetStateName(&self) -> UName{
		unsafe{ AController_GetStateNameInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetViewTarget(&self) -> Option<AActor>{
		unsafe{ AActor::from_ptr(AController_GetViewTargetInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn InitPlayerState(&mut self){
		unsafe{ AController_InitPlayerStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn InstigatedAnyDamage(&mut self, Damage: f32, DamageType: *mut UDamageTypeOpaque, DamagedActor: &mut AActor, DamageCauser: &mut AActor){
		unsafe{ AController_InstigatedAnyDamageInvokerHandler.as_ref().unwrap()(self.inner, Damage, DamageType, DamagedActor.inner(), DamageCauser.inner()) }
	}
	#[inline]
	pub fn IsFollowingAPath(&self) -> bool{
		unsafe{ AController_IsFollowingAPathInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsInState(&self, InStateName: UName) -> bool{
		unsafe{ AController_IsInStateInvokerHandler.as_ref().unwrap()(self.inner, InStateName) }
	}
	#[inline]
	pub fn IsLocalController(&self) -> bool{
		unsafe{ AController_IsLocalControllerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsLocalPlayerController(&self) -> bool{
		unsafe{ AController_IsLocalPlayerControllerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsLookInputIgnored(&self) -> bool{
		unsafe{ AController_IsLookInputIgnoredInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsMoveInputIgnored(&self) -> bool{
		unsafe{ AController_IsMoveInputIgnoredInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPlayerController(&self) -> bool{
		unsafe{ AController_IsPlayerControllerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn K2_DestroyActor(&mut self){
		unsafe{ AController_K2_DestroyActorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn K2_GetPawn(&self) -> Option<APawn>{
		unsafe{ APawn::from_ptr(AController_K2_GetPawnInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn LineOfSightTo(&self, Other: &AActor, ViewPoint: Vector3, bAlternateChecks: bool) -> bool{
		unsafe{ AController_LineOfSightToInvokerHandler.as_ref().unwrap()(self.inner, Other.inner(), ViewPoint, bAlternateChecks) }
	}
	#[inline]
	pub fn OnRep_Pawn(&mut self){
		unsafe{ AController_OnRep_PawnInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnRep_PlayerState(&mut self){
		unsafe{ AController_OnRep_PlayerStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PawnPendingDestroy(&mut self, inPawn: &mut APawn){
		unsafe{ AController_PawnPendingDestroyInvokerHandler.as_ref().unwrap()(self.inner, inPawn.inner()) }
	}
	#[inline]
	pub fn Possess(&mut self, InPawn: &mut APawn){
		unsafe{ AController_PossessInvokerHandler.as_ref().unwrap()(self.inner, InPawn.inner()) }
	}
	#[inline]
	pub fn PostInitializeComponents(&mut self){
		unsafe{ AController_PostInitializeComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn Reset(&mut self){
		unsafe{ AController_ResetInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ResetIgnoreInputFlags(&mut self){
		unsafe{ AController_ResetIgnoreInputFlagsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ResetIgnoreLookInput(&mut self){
		unsafe{ AController_ResetIgnoreLookInputInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ResetIgnoreMoveInput(&mut self){
		unsafe{ AController_ResetIgnoreMoveInputInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SetIgnoreLookInput(&mut self, bNewLookInput: bool){
		unsafe{ AController_SetIgnoreLookInputInvokerHandler.as_ref().unwrap()(self.inner, bNewLookInput) }
	}
	#[inline]
	pub fn SetIgnoreMoveInput(&mut self, bNewMoveInput: bool){
		unsafe{ AController_SetIgnoreMoveInputInvokerHandler.as_ref().unwrap()(self.inner, bNewMoveInput) }
	}
	#[inline]
	pub fn SetPawn(&mut self, InPawn: &mut APawn){
		unsafe{ AController_SetPawnInvokerHandler.as_ref().unwrap()(self.inner, InPawn.inner()) }
	}
	#[inline]
	pub fn SetPawnFromRep(&mut self, InPawn: &mut APawn){
		unsafe{ AController_SetPawnFromRepInvokerHandler.as_ref().unwrap()(self.inner, InPawn.inner()) }
	}
	#[inline]
	pub fn ShouldParticipateInSeamlessTravel(&self) -> bool{
		unsafe{ AController_ShouldParticipateInSeamlessTravelInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldPostponePathUpdates(&self) -> bool{
		unsafe{ AController_ShouldPostponePathUpdatesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn StopMovement(&mut self){
		unsafe{ AController_StopMovementInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UnPossess(&mut self){
		unsafe{ AController_UnPossessInvokerHandler.as_ref().unwrap()(self.inner) }
	}
}
pub struct APlayerController{
    inner: *mut APlayerControllerOpaque
}
impl IPtr for APlayerController{
    #[inline]
    fn inner(&self) -> *mut APlayerControllerOpaque { self.inner }
    #[inline]
    fn from_ptr(ptr: *mut c_void) -> Option<Self>{
        if_else!(
            ptr.is_null(),
            None,
            Some(Self{inner: ptr})
        )        
    }
}
impl APlayerController{
    
	#[inline]
	pub fn AcknowledgePossession(&mut self, P: &mut APawn){
		unsafe{ APlayerController_AcknowledgePossessionInvokerHandler.as_ref().unwrap()(self.inner, P.inner()) }
	}
	#[inline]
	pub fn ActivateTouchInterface(&mut self, NewTouchInterface: *mut UTouchInterfaceOpaque){
		unsafe{ APlayerController_ActivateTouchInterfaceInvokerHandler.as_ref().unwrap()(self.inner, NewTouchInterface) }
	}
	#[inline]
	pub fn AddCheats(&mut self, bForce: bool){
		unsafe{ APlayerController_AddCheatsInvokerHandler.as_ref().unwrap()(self.inner, bForce) }
	}
	#[inline]
	pub fn AddPitchInput(&mut self, Val: f32){
		unsafe{ APlayerController_AddPitchInputInvokerHandler.as_ref().unwrap()(self.inner, Val) }
	}
	#[inline]
	pub fn AddRollInput(&mut self, Val: f32){
		unsafe{ APlayerController_AddRollInputInvokerHandler.as_ref().unwrap()(self.inner, Val) }
	}
	#[inline]
	pub fn AddYawInput(&mut self, Val: f32){
		unsafe{ APlayerController_AddYawInputInvokerHandler.as_ref().unwrap()(self.inner, Val) }
	}
	#[inline]
	pub fn AutoManageActiveCameraTarget(&mut self, SuggestedTarget: &mut AActor){
		unsafe{ APlayerController_AutoManageActiveCameraTargetInvokerHandler.as_ref().unwrap()(self.inner, SuggestedTarget.inner()) }
	}
	#[inline]
	pub fn BeginInactiveState(&mut self){
		unsafe{ APlayerController_BeginInactiveStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn Camera(&mut self, NewMode: UName){
		unsafe{ APlayerController_CameraInvokerHandler.as_ref().unwrap()(self.inner, NewMode) }
	}
	#[inline]
	pub fn CanRestartPlayer(&mut self) -> bool{
		unsafe{ APlayerController_CanRestartPlayerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ChangeState(&mut self, NewState: UName){
		unsafe{ APlayerController_ChangeStateInvokerHandler.as_ref().unwrap()(self.inner, NewState) }
	}
	#[inline]
	pub fn CleanUpAudioComponents(&mut self){
		unsafe{ APlayerController_CleanUpAudioComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CleanupGameViewport(&mut self){
		unsafe{ APlayerController_CleanupGameViewportInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CleanupPlayerState(&mut self){
		unsafe{ APlayerController_CleanupPlayerStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearAudioListenerAttenuationOverride(&mut self){
		unsafe{ APlayerController_ClearAudioListenerAttenuationOverrideInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearAudioListenerOverride(&mut self){
		unsafe{ APlayerController_ClearAudioListenerOverrideInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClientAddTextureStreamingLoc(&mut self, InLoc: Vector3, Duration: f32, bOverrideLocation: bool){
		unsafe{ APlayerController_ClientAddTextureStreamingLocInvokerHandler.as_ref().unwrap()(self.inner, InLoc, Duration, bOverrideLocation) }
	}
	#[inline]
	pub fn ClientCancelPendingMapChange(&mut self){
		unsafe{ APlayerController_ClientCancelPendingMapChangeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClientCapBandwidth(&mut self, Cap: i32){
		unsafe{ APlayerController_ClientCapBandwidthInvokerHandler.as_ref().unwrap()(self.inner, Cap) }
	}
	#[inline]
	pub fn ClientClearCameraLensEffects(&mut self){
		unsafe{ APlayerController_ClientClearCameraLensEffectsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClientCommitMapChange(&mut self){
		unsafe{ APlayerController_ClientCommitMapChangeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClientEnableNetworkVoice(&mut self, bEnable: bool){
		unsafe{ APlayerController_ClientEnableNetworkVoiceInvokerHandler.as_ref().unwrap()(self.inner, bEnable) }
	}
	#[inline]
	pub fn ClientEndOnlineSession(&mut self){
		unsafe{ APlayerController_ClientEndOnlineSessionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClientFlushLevelStreaming(&mut self){
		unsafe{ APlayerController_ClientFlushLevelStreamingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClientForceGarbageCollection(&mut self){
		unsafe{ APlayerController_ClientForceGarbageCollectionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClientGameEnded(&mut self, EndGameFocus: &mut AActor, bIsWinner: bool){
		unsafe{ APlayerController_ClientGameEndedInvokerHandler.as_ref().unwrap()(self.inner, EndGameFocus.inner(), bIsWinner) }
	}
	#[inline]
	pub fn ClientGotoState(&mut self, NewState: UName){
		unsafe{ APlayerController_ClientGotoStateInvokerHandler.as_ref().unwrap()(self.inner, NewState) }
	}
	#[inline]
	pub fn ClientIgnoreLookInput(&mut self, bIgnore: bool){
		unsafe{ APlayerController_ClientIgnoreLookInputInvokerHandler.as_ref().unwrap()(self.inner, bIgnore) }
	}
	#[inline]
	pub fn ClientIgnoreMoveInput(&mut self, bIgnore: bool){
		unsafe{ APlayerController_ClientIgnoreMoveInputInvokerHandler.as_ref().unwrap()(self.inner, bIgnore) }
	}
	#[inline]
	pub fn ClientPlaySound(&mut self, Sound: *mut USoundBaseOpaque, VolumeMultiplier: f32, PitchMultiplier: f32){
		unsafe{ APlayerController_ClientPlaySoundInvokerHandler.as_ref().unwrap()(self.inner, Sound, VolumeMultiplier, PitchMultiplier) }
	}
	#[inline]
	pub fn ClientPlaySoundAtLocation(&mut self, Sound: *mut USoundBaseOpaque, Location: Vector3, VolumeMultiplier: f32, PitchMultiplier: f32){
		unsafe{ APlayerController_ClientPlaySoundAtLocationInvokerHandler.as_ref().unwrap()(self.inner, Sound, Location, VolumeMultiplier, PitchMultiplier) }
	}
	#[inline]
	pub fn ClientPrepareMapChange(&mut self, LevelName: UName, bFirst: bool, bLast: bool){
		unsafe{ APlayerController_ClientPrepareMapChangeInvokerHandler.as_ref().unwrap()(self.inner, LevelName, bFirst, bLast) }
	}
	#[inline]
	pub fn ClientPrestreamTextures(&mut self, ForcedActor: &mut AActor, ForceDuration: f32, bEnableStreaming: bool, CinematicTextureGroups: i32){
		unsafe{ APlayerController_ClientPrestreamTexturesInvokerHandler.as_ref().unwrap()(self.inner, ForcedActor.inner(), ForceDuration, bEnableStreaming, CinematicTextureGroups) }
	}
	#[inline]
	pub fn ClientRecvServerAckFrame(&mut self, LastProcessedInputFrame: i32, RecvServerFrameNumber: i32, TimeDilation: i8){
		unsafe{ APlayerController_ClientRecvServerAckFrameInvokerHandler.as_ref().unwrap()(self.inner, LastProcessedInputFrame, RecvServerFrameNumber, TimeDilation) }
	}
	#[inline]
	pub fn ClientRecvServerAckFrameDebug(&mut self, NumBuffered: u8, TargetNumBufferedCmds: f32){
		unsafe{ APlayerController_ClientRecvServerAckFrameDebugInvokerHandler.as_ref().unwrap()(self.inner, NumBuffered, TargetNumBufferedCmds) }
	}
	#[inline]
	pub fn ClientRepObjRef(&mut self, Object: &mut UObject){
		unsafe{ APlayerController_ClientRepObjRefInvokerHandler.as_ref().unwrap()(self.inner, Object.inner()) }
	}
	#[inline]
	pub fn ClientReset(&mut self){
		unsafe{ APlayerController_ClientResetInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClientRestart(&mut self, NewPawn: &mut APawn){
		unsafe{ APlayerController_ClientRestartInvokerHandler.as_ref().unwrap()(self.inner, NewPawn.inner()) }
	}
	#[inline]
	pub fn ClientRetryClientRestart(&mut self, NewPawn: &mut APawn){
		unsafe{ APlayerController_ClientRetryClientRestartInvokerHandler.as_ref().unwrap()(self.inner, NewPawn.inner()) }
	}
	#[inline]
	pub fn ClientSetBlockOnAsyncLoading(&mut self){
		unsafe{ APlayerController_ClientSetBlockOnAsyncLoadingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClientSetCameraFade(&mut self, bEnableFading: bool, FadeColor: Color, FadeAlpha: Vector2, FadeTime: f32, bFadeAudio: bool, bHoldWhenFinished: bool){
		unsafe{ APlayerController_ClientSetCameraFadeInvokerHandler.as_ref().unwrap()(self.inner, bEnableFading, FadeColor, FadeAlpha, FadeTime, bFadeAudio, bHoldWhenFinished) }
	}
	#[inline]
	pub fn ClientSetCameraMode(&mut self, NewCamMode: UName){
		unsafe{ APlayerController_ClientSetCameraModeInvokerHandler.as_ref().unwrap()(self.inner, NewCamMode) }
	}
	#[inline]
	pub fn ClientSetCinematicMode(&mut self, bInCinematicMode: bool, bAffectsMovement: bool, bAffectsTurning: bool, bAffectsHUD: bool){
		unsafe{ APlayerController_ClientSetCinematicModeInvokerHandler.as_ref().unwrap()(self.inner, bInCinematicMode, bAffectsMovement, bAffectsTurning, bAffectsHUD) }
	}
	#[inline]
	pub fn ClientSetForceMipLevelsToBeResident(&mut self, Material: *mut UMaterialInterfaceOpaque, ForceDuration: f32, CinematicTextureGroups: i32){
		unsafe{ APlayerController_ClientSetForceMipLevelsToBeResidentInvokerHandler.as_ref().unwrap()(self.inner, Material, ForceDuration, CinematicTextureGroups) }
	}
	#[inline]
	pub fn ClientSetSpectatorWaiting(&mut self, bWaiting: bool){
		unsafe{ APlayerController_ClientSetSpectatorWaitingInvokerHandler.as_ref().unwrap()(self.inner, bWaiting) }
	}
	#[inline]
	pub fn ClientStartOnlineSession(&mut self){
		unsafe{ APlayerController_ClientStartOnlineSessionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClientStopCameraShakesFromSource(&mut self, SourceComponent: *mut UCameraShakeSourceComponentOpaque, bImmediately: bool){
		unsafe{ APlayerController_ClientStopCameraShakesFromSourceInvokerHandler.as_ref().unwrap()(self.inner, SourceComponent, bImmediately) }
	}
	#[inline]
	pub fn ClientStopForceFeedback(&mut self, ForceFeedbackEffect: *mut UForceFeedbackEffectOpaque, Tag: UName){
		unsafe{ APlayerController_ClientStopForceFeedbackInvokerHandler.as_ref().unwrap()(self.inner, ForceFeedbackEffect, Tag) }
	}
	#[inline]
	pub fn ClientUpdateLevelStreamingStatus(&mut self, PackageName: UName, bNewShouldBeLoaded: bool, bNewShouldBeVisible: bool, bNewShouldBlockOnLoad: bool, LODIndex: i32){
		unsafe{ APlayerController_ClientUpdateLevelStreamingStatusInvokerHandler.as_ref().unwrap()(self.inner, PackageName, bNewShouldBeLoaded, bNewShouldBeVisible, bNewShouldBlockOnLoad, LODIndex) }
	}
	#[inline]
	pub fn ClientVoiceHandshakeComplete(&mut self){
		unsafe{ APlayerController_ClientVoiceHandshakeCompleteInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CreateTouchInterface(&mut self){
		unsafe{ APlayerController_CreateTouchInterfaceInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn DefaultCanUnpause(&mut self) -> bool{
		unsafe{ APlayerController_DefaultCanUnpauseInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn DelayedPrepareMapChange(&mut self){
		unsafe{ APlayerController_DelayedPrepareMapChangeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn DestroyNetworkActorHandled(&mut self) -> bool{
		unsafe{ APlayerController_DestroyNetworkActorHandledInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn Destroyed(&mut self){
		unsafe{ APlayerController_DestroyedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn DisableInput(&mut self, PlayerController: &mut APlayerController){
		unsafe{ APlayerController_DisableInputInvokerHandler.as_ref().unwrap()(self.inner, PlayerController.inner()) }
	}
	#[inline]
	pub fn EnableCheats(&mut self){
		unsafe{ APlayerController_EnableCheatsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn EnableInput(&mut self, PlayerController: &mut APlayerController){
		unsafe{ APlayerController_EnableInputInvokerHandler.as_ref().unwrap()(self.inner, PlayerController.inner()) }
	}
	#[inline]
	pub fn EndInactiveState(&mut self){
		unsafe{ APlayerController_EndInactiveStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn FOV(&mut self, NewFOV: f32){
		unsafe{ APlayerController_FOVInvokerHandler.as_ref().unwrap()(self.inner, NewFOV) }
	}
	#[inline]
	pub fn FailedToSpawnPawn(&mut self){
		unsafe{ APlayerController_FailedToSpawnPawnInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn FlushPressedKeys(&mut self){
		unsafe{ APlayerController_FlushPressedKeysInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ForceSingleNetUpdateFor(&mut self, Target: &mut AActor){
		unsafe{ APlayerController_ForceSingleNetUpdateForInvokerHandler.as_ref().unwrap()(self.inner, Target.inner()) }
	}
	#[inline]
	pub fn GameHasEnded(&mut self, EndGameFocus: &mut AActor, bIsWinner: bool){
		unsafe{ APlayerController_GameHasEndedInvokerHandler.as_ref().unwrap()(self.inner, EndGameFocus.inner(), bIsWinner) }
	}
	#[inline]
	pub fn GameplayUnmuteAllPlayers(&mut self){
		unsafe{ APlayerController_GameplayUnmuteAllPlayersInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetFocalLocation(&self) -> Vector3{
		unsafe{ APlayerController_GetFocalLocationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetHUD(&self) -> *mut AHUDOpaque{
		unsafe{ APlayerController_GetHUDInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetInputMouseDelta(&self, DeltaX: &mut f32, DeltaY: &mut f32){
		unsafe{ APlayerController_GetInputMouseDeltaInvokerHandler.as_ref().unwrap()(self.inner, DeltaX, DeltaY) }
	}
	#[inline]
	pub fn GetLocalPlayer(&self) -> *mut ULocalPlayerOpaque{
		unsafe{ APlayerController_GetLocalPlayerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetLocalToServerAsyncPhysicsTickOffset(&self) -> i32{
		unsafe{ APlayerController_GetLocalToServerAsyncPhysicsTickOffsetInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetMinRespawnDelay(&mut self) -> f32{
		unsafe{ APlayerController_GetMinRespawnDelayInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetMousePosition(&self, LocationX: &mut f32, LocationY: &mut f32) -> bool{
		unsafe{ APlayerController_GetMousePositionInvokerHandler.as_ref().unwrap()(self.inner, LocationX, LocationY) }
	}
	#[inline]
	pub fn GetNetConnection(&self) -> *mut UNetConnectionOpaque{
		unsafe{ APlayerController_GetNetConnectionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetNetOwner(&self) -> Option<AActor>{
		unsafe{ AActor::from_ptr(APlayerController_GetNetOwnerInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetNetOwningPlayer(&mut self) -> *mut UPlayerOpaque{
		unsafe{ APlayerController_GetNetOwningPlayerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetNextViewablePlayer(&mut self, dir: i32) -> *mut APlayerStateOpaque{
		unsafe{ APlayerController_GetNextViewablePlayerInvokerHandler.as_ref().unwrap()(self.inner, dir) }
	}
	#[inline]
	pub fn GetPawnOrSpectator(&self) -> Option<APawn>{
		unsafe{ APawn::from_ptr(APlayerController_GetPawnOrSpectatorInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetPlayerNetworkAddress(&mut self) -> String{
		unsafe{ char_str_2_string(APlayerController_GetPlayerNetworkAddressInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetServerNetworkAddress(&mut self) -> String{
		unsafe{ char_str_2_string(APlayerController_GetServerNetworkAddressInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetSpawnLocation(&self) -> Vector3{
		unsafe{ APlayerController_GetSpawnLocationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetSplitscreenPlayerByIndex(&self, PlayerIndex: i32) -> *mut APlayerStateOpaque{
		unsafe{ APlayerController_GetSplitscreenPlayerByIndexInvokerHandler.as_ref().unwrap()(self.inner, PlayerIndex) }
	}
	#[inline]
	pub fn GetSplitscreenPlayerCount(&self) -> i32{
		unsafe{ APlayerController_GetSplitscreenPlayerCountInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetViewTarget(&self) -> Option<AActor>{
		unsafe{ AActor::from_ptr(APlayerController_GetViewTargetInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetViewportSize(&self, SizeX: &mut i32, SizeY: &mut i32){
		unsafe{ APlayerController_GetViewportSizeInvokerHandler.as_ref().unwrap()(self.inner, SizeX, SizeY) }
	}
	#[inline]
	pub fn HasClientLoadedCurrentWorld(&mut self) -> bool{
		unsafe{ APlayerController_HasClientLoadedCurrentWorldInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IncludeInNetConditionGroup(&mut self, NetGroup: UName){
		unsafe{ APlayerController_IncludeInNetConditionGroupInvokerHandler.as_ref().unwrap()(self.inner, NetGroup) }
	}
	#[inline]
	pub fn InitInputSystem(&mut self){
		unsafe{ APlayerController_InitInputSystemInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn InputEnabled(&self) -> bool{
		unsafe{ APlayerController_InputEnabledInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsFrozen(&mut self) -> bool{
		unsafe{ APlayerController_IsFrozenInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsInputComponentInStack(&self, Input: *mut UInputComponentOpaque) -> bool{
		unsafe{ APlayerController_IsInputComponentInStackInvokerHandler.as_ref().unwrap()(self.inner, Input) }
	}
	#[inline]
	pub fn IsLocalController(&self) -> bool{
		unsafe{ APlayerController_IsLocalControllerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsMemberOfNetConditionGroup(&self, NetGroup: UName) -> bool{
		unsafe{ APlayerController_IsMemberOfNetConditionGroupInvokerHandler.as_ref().unwrap()(self.inner, NetGroup) }
	}
	#[inline]
	pub fn IsPaused(&self) -> bool{
		unsafe{ APlayerController_IsPausedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPrimaryPlayer(&self) -> bool{
		unsafe{ APlayerController_IsPrimaryPlayerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsSplitscreenPlayer(&self, OutSplitscreenPlayerIndex: &mut i32) -> bool{
		unsafe{ APlayerController_IsSplitscreenPlayerInvokerHandler.as_ref().unwrap()(self.inner, OutSplitscreenPlayerIndex) }
	}
	#[inline]
	pub fn IsStreamingSourceEnabled(&self) -> bool{
		unsafe{ APlayerController_IsStreamingSourceEnabledInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn K2_ClientPlayForceFeedback(&mut self, ForceFeedbackEffect: *mut UForceFeedbackEffectOpaque, Tag: UName, bLooping: bool, bIgnoreTimeDilation: bool, bPlayWhilePaused: bool){
		unsafe{ APlayerController_K2_ClientPlayForceFeedbackInvokerHandler.as_ref().unwrap()(self.inner, ForceFeedbackEffect, Tag, bLooping, bIgnoreTimeDilation, bPlayWhilePaused) }
	}
	#[inline]
	pub fn LevelStreamingStatusChanged(&mut self, LevelObject: *mut ULevelStreamingOpaque, bNewShouldBeLoaded: bool, bNewShouldBeVisible: bool, bNewShouldBlockOnLoad: bool, LODIndex: i32){
		unsafe{ APlayerController_LevelStreamingStatusChangedInvokerHandler.as_ref().unwrap()(self.inner, LevelObject, bNewShouldBeLoaded, bNewShouldBeVisible, bNewShouldBlockOnLoad, LODIndex) }
	}
	#[inline]
	pub fn NetworkRemapPath(&mut self, InPackageName: UName, bReading: bool) -> UName{
		unsafe{ APlayerController_NetworkRemapPathInvokerHandler.as_ref().unwrap()(self.inner, InPackageName, bReading) }
	}
	#[inline]
	pub fn NotifyActorChannelFailure(&mut self, ActorChan: *mut UActorChannelOpaque){
		unsafe{ APlayerController_NotifyActorChannelFailureInvokerHandler.as_ref().unwrap()(self.inner, ActorChan) }
	}
	#[inline]
	pub fn NotifyLoadedWorld(&mut self, WorldPackageName: UName, bFinalDest: bool){
		unsafe{ APlayerController_NotifyLoadedWorldInvokerHandler.as_ref().unwrap()(self.inner, WorldPackageName, bFinalDest) }
	}
	#[inline]
	pub fn NotifyServerReceivedClientData(&mut self, InPawn: &mut APawn, TimeStamp: f32) -> bool{
		unsafe{ APlayerController_NotifyServerReceivedClientDataInvokerHandler.as_ref().unwrap()(self.inner, InPawn.inner(), TimeStamp) }
	}
	#[inline]
	pub fn OnAddedToPlayerControllerList(&mut self){
		unsafe{ APlayerController_OnAddedToPlayerControllerListInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnNetCleanup(&mut self, Connection: *mut UNetConnectionOpaque){
		unsafe{ APlayerController_OnNetCleanupInvokerHandler.as_ref().unwrap()(self.inner, Connection) }
	}
	#[inline]
	pub fn OnRemovedFromPlayerControllerList(&mut self){
		unsafe{ APlayerController_OnRemovedFromPlayerControllerListInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnServerStartedVisualLogger(&mut self, bIsLogging: bool){
		unsafe{ APlayerController_OnServerStartedVisualLoggerInvokerHandler.as_ref().unwrap()(self.inner, bIsLogging) }
	}
	#[inline]
	pub fn Pause(&mut self){
		unsafe{ APlayerController_PauseInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PawnLeavingGame(&mut self){
		unsafe{ APlayerController_PawnLeavingGameInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PlayerTick(&mut self, DeltaTime: f32){
		unsafe{ APlayerController_PlayerTickInvokerHandler.as_ref().unwrap()(self.inner, DeltaTime) }
	}
	#[inline]
	pub fn PopInputComponent(&mut self, Input: *mut UInputComponentOpaque) -> bool{
		unsafe{ APlayerController_PopInputComponentInvokerHandler.as_ref().unwrap()(self.inner, Input) }
	}
	#[inline]
	pub fn PostInitializeComponents(&mut self){
		unsafe{ APlayerController_PostInitializeComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostLoad(&mut self){
		unsafe{ APlayerController_PostLoadInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostProcessInput(&mut self, DeltaTime: f32, bGamePaused: bool){
		unsafe{ APlayerController_PostProcessInputInvokerHandler.as_ref().unwrap()(self.inner, DeltaTime, bGamePaused) }
	}
	#[inline]
	pub fn PostSeamlessTravel(&mut self){
		unsafe{ APlayerController_PostSeamlessTravelInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PreProcessInput(&mut self, DeltaTime: f32, bGamePaused: bool){
		unsafe{ APlayerController_PreProcessInputInvokerHandler.as_ref().unwrap()(self.inner, DeltaTime, bGamePaused) }
	}
	#[inline]
	pub fn PushInputComponent(&mut self, Input: *mut UInputComponentOpaque){
		unsafe{ APlayerController_PushInputComponentInvokerHandler.as_ref().unwrap()(self.inner, Input) }
	}
	#[inline]
	pub fn ReceivedPlayer(&mut self){
		unsafe{ APlayerController_ReceivedPlayerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RemoveFromNetConditionGroup(&mut self, NetGroup: UName){
		unsafe{ APlayerController_RemoveFromNetConditionGroupInvokerHandler.as_ref().unwrap()(self.inner, NetGroup) }
	}
	#[inline]
	pub fn Reset(&mut self){
		unsafe{ APlayerController_ResetInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ResetCameraMode(&mut self){
		unsafe{ APlayerController_ResetCameraModeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ResetControllerLightColor(&mut self){
		unsafe{ APlayerController_ResetControllerLightColorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ResetIgnoreInputFlags(&mut self){
		unsafe{ APlayerController_ResetIgnoreInputFlagsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RestartLevel(&mut self){
		unsafe{ APlayerController_RestartLevelInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SafeRetryClientRestart(&mut self){
		unsafe{ APlayerController_SafeRetryClientRestartInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SafeServerCheckClientPossession(&mut self){
		unsafe{ APlayerController_SafeServerCheckClientPossessionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SafeServerUpdateSpectatorState(&mut self){
		unsafe{ APlayerController_SafeServerUpdateSpectatorStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SeamlessTravelFrom(&mut self, OldPC: &mut APlayerController){
		unsafe{ APlayerController_SeamlessTravelFromInvokerHandler.as_ref().unwrap()(self.inner, OldPC.inner()) }
	}
	#[inline]
	pub fn SeamlessTravelTo(&mut self, NewPC: &mut APlayerController){
		unsafe{ APlayerController_SeamlessTravelToInvokerHandler.as_ref().unwrap()(self.inner, NewPC.inner()) }
	}
	#[inline]
	pub fn SendClientAdjustment(&mut self){
		unsafe{ APlayerController_SendClientAdjustmentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ServerAcknowledgePossession(&mut self, P: &mut APawn){
		unsafe{ APlayerController_ServerAcknowledgePossessionInvokerHandler.as_ref().unwrap()(self.inner, P.inner()) }
	}
	#[inline]
	pub fn ServerCamera(&mut self, NewMode: UName){
		unsafe{ APlayerController_ServerCameraInvokerHandler.as_ref().unwrap()(self.inner, NewMode) }
	}
	#[inline]
	pub fn ServerCheckClientPossession(&mut self){
		unsafe{ APlayerController_ServerCheckClientPossessionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ServerCheckClientPossessionReliable(&mut self){
		unsafe{ APlayerController_ServerCheckClientPossessionReliableInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ServerNotifyLoadedWorld(&mut self, WorldPackageName: UName){
		unsafe{ APlayerController_ServerNotifyLoadedWorldInvokerHandler.as_ref().unwrap()(self.inner, WorldPackageName) }
	}
	#[inline]
	pub fn ServerPause(&mut self){
		unsafe{ APlayerController_ServerPauseInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ServerRestartPlayer(&mut self){
		unsafe{ APlayerController_ServerRestartPlayerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ServerSetSpectatorLocation(&mut self, NewLoc: Vector3, NewRot: Rotator){
		unsafe{ APlayerController_ServerSetSpectatorLocationInvokerHandler.as_ref().unwrap()(self.inner, NewLoc, NewRot) }
	}
	#[inline]
	pub fn ServerSetSpectatorWaiting(&mut self, bWaiting: bool){
		unsafe{ APlayerController_ServerSetSpectatorWaitingInvokerHandler.as_ref().unwrap()(self.inner, bWaiting) }
	}
	#[inline]
	pub fn ServerShortTimeout(&mut self){
		unsafe{ APlayerController_ServerShortTimeoutInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ServerToggleAILogging(&mut self){
		unsafe{ APlayerController_ServerToggleAILoggingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ServerVerifyViewTarget(&mut self){
		unsafe{ APlayerController_ServerVerifyViewTargetInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ServerViewNextPlayer(&mut self){
		unsafe{ APlayerController_ServerViewNextPlayerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ServerViewPrevPlayer(&mut self){
		unsafe{ APlayerController_ServerViewPrevPlayerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SetAsLocalPlayerController(&mut self){
		unsafe{ APlayerController_SetAsLocalPlayerControllerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SetAudioListenerAttenuationOverride(&mut self, AttachToComponent: &mut USceneComponent, AttenuationLocationOVerride: Vector3){
		unsafe{ APlayerController_SetAudioListenerAttenuationOverrideInvokerHandler.as_ref().unwrap()(self.inner, AttachToComponent.inner(), AttenuationLocationOVerride) }
	}
	#[inline]
	pub fn SetAudioListenerOverride(&mut self, AttachToComponent: &mut USceneComponent, Location: Vector3, Rotation: Rotator){
		unsafe{ APlayerController_SetAudioListenerOverrideInvokerHandler.as_ref().unwrap()(self.inner, AttachToComponent.inner(), Location, Rotation) }
	}
	#[inline]
	pub fn SetCameraMode(&mut self, NewCamMode: UName){
		unsafe{ APlayerController_SetCameraModeInvokerHandler.as_ref().unwrap()(self.inner, NewCamMode) }
	}
	#[inline]
	pub fn SetCinematicMode(&mut self, bInCinematicMode: bool, bAffectsMovement: bool, bAffectsTurning: bool){
		unsafe{ APlayerController_SetCinematicModeInvokerHandler.as_ref().unwrap()(self.inner, bInCinematicMode, bAffectsMovement, bAffectsTurning) }
	}
	#[inline]
	pub fn SetCinematicMode2(&mut self, bInCinematicMode: bool, bHidePlayer: bool, bAffectsHUD: bool, bAffectsMovement: bool, bAffectsTurning: bool){
		unsafe{ APlayerController_SetCinematicMode2InvokerHandler.as_ref().unwrap()(self.inner, bInCinematicMode, bHidePlayer, bAffectsHUD, bAffectsMovement, bAffectsTurning) }
	}
	#[inline]
	pub fn SetControllerLightColor(&mut self, Color: Color){
		unsafe{ APlayerController_SetControllerLightColorInvokerHandler.as_ref().unwrap()(self.inner, Color) }
	}
	#[inline]
	pub fn SetDisableHaptics(&mut self, bNewDisabled: bool){
		unsafe{ APlayerController_SetDisableHapticsInvokerHandler.as_ref().unwrap()(self.inner, bNewDisabled) }
	}
	#[inline]
	pub fn SetMotionControlsEnabled(&mut self, bEnabled: bool){
		unsafe{ APlayerController_SetMotionControlsEnabledInvokerHandler.as_ref().unwrap()(self.inner, bEnabled) }
	}
	#[inline]
	pub fn SetNetSpeed(&mut self, NewSpeed: i32){
		unsafe{ APlayerController_SetNetSpeedInvokerHandler.as_ref().unwrap()(self.inner, NewSpeed) }
	}
	#[inline]
	pub fn SetPawn(&mut self, InPawn: &mut APawn){
		unsafe{ APlayerController_SetPawnInvokerHandler.as_ref().unwrap()(self.inner, InPawn.inner()) }
	}
	#[inline]
	pub fn SetPlayer(&mut self, InPlayer: *mut UPlayerOpaque){
		unsafe{ APlayerController_SetPlayerInvokerHandler.as_ref().unwrap()(self.inner, InPlayer) }
	}
	#[inline]
	pub fn SetShowMouseCursor(&mut self, bShow: bool){
		unsafe{ APlayerController_SetShowMouseCursorInvokerHandler.as_ref().unwrap()(self.inner, bShow) }
	}
	#[inline]
	pub fn SetVirtualJoystickVisibility(&mut self, bVisible: bool){
		unsafe{ APlayerController_SetVirtualJoystickVisibilityInvokerHandler.as_ref().unwrap()(self.inner, bVisible) }
	}
	#[inline]
	pub fn ShouldFlushKeysWhenViewportFocusChanges(&self) -> bool{
		unsafe{ APlayerController_ShouldFlushKeysWhenViewportFocusChangesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldParticipateInSeamlessTravel(&self) -> bool{
		unsafe{ APlayerController_ShouldParticipateInSeamlessTravelInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldPerformFullTickWhenPaused(&self) -> bool{
		unsafe{ APlayerController_ShouldPerformFullTickWhenPausedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldShowMouseCursor(&self) -> bool{
		unsafe{ APlayerController_ShouldShowMouseCursorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SmoothTargetViewRotation(&mut self, TargetPawn: &mut APawn, DeltaSeconds: f32){
		unsafe{ APlayerController_SmoothTargetViewRotationInvokerHandler.as_ref().unwrap()(self.inner, TargetPawn.inner(), DeltaSeconds) }
	}
	#[inline]
	pub fn SpawnDefaultHUD(&mut self){
		unsafe{ APlayerController_SpawnDefaultHUDInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SpawnPlayerCameraManager(&mut self){
		unsafe{ APlayerController_SpawnPlayerCameraManagerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn StartFire(&mut self, FireModeNum: u8){
		unsafe{ APlayerController_StartFireInvokerHandler.as_ref().unwrap()(self.inner, FireModeNum) }
	}
	#[inline]
	pub fn StartSpectatingOnly(&mut self){
		unsafe{ APlayerController_StartSpectatingOnlyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn StartTalking(&mut self){
		unsafe{ APlayerController_StartTalkingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn StopTalking(&mut self){
		unsafe{ APlayerController_StopTalkingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn StreamingSourceShouldActivate(&self) -> bool{
		unsafe{ APlayerController_StreamingSourceShouldActivateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn StreamingSourceShouldBlockOnSlowStreaming(&self) -> bool{
		unsafe{ APlayerController_StreamingSourceShouldBlockOnSlowStreamingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ToggleSpeaking(&mut self, bInSpeaking: bool){
		unsafe{ APlayerController_ToggleSpeakingInvokerHandler.as_ref().unwrap()(self.inner, bInSpeaking) }
	}
	#[inline]
	pub fn UnFreeze(&mut self){
		unsafe{ APlayerController_UnFreezeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateCameraManager(&mut self, DeltaSeconds: f32){
		unsafe{ APlayerController_UpdateCameraManagerInvokerHandler.as_ref().unwrap()(self.inner, DeltaSeconds) }
	}
	#[inline]
	pub fn UpdatePing(&mut self, InPing: f32){
		unsafe{ APlayerController_UpdatePingInvokerHandler.as_ref().unwrap()(self.inner, InPing) }
	}
	#[inline]
	pub fn UpdateRotation(&mut self, DeltaTime: f32){
		unsafe{ APlayerController_UpdateRotationInvokerHandler.as_ref().unwrap()(self.inner, DeltaTime) }
	}
	#[inline]
	pub fn UseShortConnectTimeout(&self) -> bool{
		unsafe{ APlayerController_UseShortConnectTimeoutInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ViewAPlayer(&mut self, dir: i32){
		unsafe{ APlayerController_ViewAPlayerInvokerHandler.as_ref().unwrap()(self.inner, dir) }
	}
}
pub struct FRandomStream{
    inner: *mut FRandomStreamOpaque
}
impl IPtr for FRandomStream{
    #[inline]
    fn inner(&self) -> *mut FRandomStreamOpaque { self.inner }
    #[inline]
    fn from_ptr(ptr: *mut c_void) -> Option<Self>{
        if_else!(
            ptr.is_null(),
            None,
            Some(Self{inner: ptr})
        )        
    }
}
impl FRandomStream{
    
	#[inline]
	pub fn FRand(&self) -> f32{
		unsafe{ FRandomStream_FRandInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GenerateNewSeed(&mut self){
		unsafe{ FRandomStream_GenerateNewSeedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetCurrentSeed(&self) -> i32{
		unsafe{ FRandomStream_GetCurrentSeedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetFraction(&self) -> f32{
		unsafe{ FRandomStream_GetFractionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetInitialSeed(&self) -> i32{
		unsafe{ FRandomStream_GetInitialSeedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetUnitVector(&self) -> Vector3{
		unsafe{ FRandomStream_GetUnitVectorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetUnsignedInt(&self) -> u32{
		unsafe{ FRandomStream_GetUnsignedIntInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn Initialize(&mut self, InSeed: i32){
		unsafe{ FRandomStream_InitializeInvokerHandler.as_ref().unwrap()(self.inner, InSeed) }
	}
	#[inline]
	pub fn RandHelper(&self, A: i32) -> i32{
		unsafe{ FRandomStream_RandHelperInvokerHandler.as_ref().unwrap()(self.inner, A) }
	}
	#[inline]
	pub fn RandRange(&self, Min: i32, Max: i32) -> i32{
		unsafe{ FRandomStream_RandRangeInvokerHandler.as_ref().unwrap()(self.inner, Min, Max) }
	}
	#[inline]
	pub fn Reset(&self){
		unsafe{ FRandomStream_ResetInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ToString(&self) -> String{
		unsafe{ char_str_2_string(FRandomStream_ToStringInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn VRand(&self) -> Vector3{
		unsafe{ FRandomStream_VRandInvokerHandler.as_ref().unwrap()(self.inner) }
	}
}
pub struct FLargeWorldCoordinatesReal{
    inner: *mut FLargeWorldCoordinatesRealOpaque
}
impl IPtr for FLargeWorldCoordinatesReal{
    #[inline]
    fn inner(&self) -> *mut FLargeWorldCoordinatesRealOpaque { self.inner }
    #[inline]
    fn from_ptr(ptr: *mut c_void) -> Option<Self>{
        if_else!(
            ptr.is_null(),
            None,
            Some(Self{inner: ptr})
        )        
    }
}
impl FLargeWorldCoordinatesReal{
    
}
#[repr(C)]
pub struct UGameplayStatics{

}
impl UGameplayStatics{
	#[inline]
	pub fn ActivateReverbEffect(WorldContextObject: &UObject, ReverbEffect: *mut UReverbEffectOpaque, TagName: UName, Priority: f32, Volume: f32, FadeTime: f32){
		unsafe{ UGameplayStatics_ActivateReverbEffectInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), ReverbEffect, TagName, Priority, Volume, FadeTime) }
	}
	#[inline]
	pub fn AreSubtitlesEnabled() -> bool{
		unsafe{ UGameplayStatics_AreSubtitlesEnabledInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn CancelAsyncLoading(){
		unsafe{ UGameplayStatics_CancelAsyncLoadingInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn ClearSoundMixClassOverride(WorldContextObject: &UObject, InSoundMixModifier: *mut USoundMixOpaque, InSoundClass: *mut USoundClassOpaque, FadeOutTime: f32){
		unsafe{ UGameplayStatics_ClearSoundMixClassOverrideInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), InSoundMixModifier, InSoundClass, FadeOutTime) }
	}
	#[inline]
	pub fn ClearSoundMixModifiers(WorldContextObject: &UObject){
		unsafe{ UGameplayStatics_ClearSoundMixModifiersInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn CreatePlayer(WorldContextObject: &UObject, ControllerId: i32, bSpawnPlayerController: bool) -> Option<APlayerController>{
		unsafe{ APlayerController::from_ptr(UGameplayStatics_CreatePlayerInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), ControllerId, bSpawnPlayerController)) }
	}
	#[inline]
	pub fn CreateSound2D(WorldContextObject: &UObject, Sound: *mut USoundBaseOpaque, VolumeMultiplier: f32, PitchMultiplier: f32, StartTime: f32, ConcurrencySettings: *mut USoundConcurrencyOpaque, bPersistAcrossLevelTransition: bool, bAutoDestroy: bool) -> *mut UAudioComponentOpaque{
		unsafe{ UGameplayStatics_CreateSound2DInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), Sound, VolumeMultiplier, PitchMultiplier, StartTime, ConcurrencySettings, bPersistAcrossLevelTransition, bAutoDestroy) }
	}
	#[inline]
	pub fn DeactivateReverbEffect(WorldContextObject: &UObject, TagName: UName){
		unsafe{ UGameplayStatics_DeactivateReverbEffectInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), TagName) }
	}
	#[inline]
	pub fn EnableLiveStreaming(Enable: bool){
		unsafe{ UGameplayStatics_EnableLiveStreamingInvokerHandler.as_ref().unwrap()(Enable) }
	}
	#[inline]
	pub fn FlushLevelStreaming(WorldContextObject: &UObject){
		unsafe{ UGameplayStatics_FlushLevelStreamingInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn GetAccurateRealTime(Seconds: &mut i32, PartialSeconds: &mut f64){
		unsafe{ UGameplayStatics_GetAccurateRealTimeInvokerHandler.as_ref().unwrap()(Seconds, PartialSeconds) }
	}
	#[inline]
	pub fn GetActiveSpatialPluginName(WorldContextObject: &UObject) -> UName{
		unsafe{ UGameplayStatics_GetActiveSpatialPluginNameInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn GetAudioTimeSeconds(WorldContextObject: &UObject) -> f64{
		unsafe{ UGameplayStatics_GetAudioTimeSecondsInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn GetCurrentLevelName(WorldContextObject: &UObject, bRemovePrefixString: bool) -> String{
		unsafe{ char_str_2_string(UGameplayStatics_GetCurrentLevelNameInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), bRemovePrefixString)) }
	}
	#[inline]
	pub fn GetCurrentReverbEffect(WorldContextObject: &UObject) -> *mut UReverbEffectOpaque{
		unsafe{ UGameplayStatics_GetCurrentReverbEffectInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn GetEnableWorldRendering(WorldContextObject: &UObject) -> bool{
		unsafe{ UGameplayStatics_GetEnableWorldRenderingInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn GetGameInstance(WorldContextObject: &UObject) -> *mut UGameInstanceOpaque{
		unsafe{ UGameplayStatics_GetGameInstanceInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn GetGameMode(WorldContextObject: &UObject) -> Option<AGameModeBase>{
		unsafe{ AGameModeBase::from_ptr(UGameplayStatics_GetGameModeInvokerHandler.as_ref().unwrap()(WorldContextObject.inner())) }
	}
	#[inline]
	pub fn GetGameState(WorldContextObject: &UObject) -> *mut AGameStateBaseOpaque{
		unsafe{ UGameplayStatics_GetGameStateInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn GetGlobalTimeDilation(WorldContextObject: &UObject) -> f32{
		unsafe{ UGameplayStatics_GetGlobalTimeDilationInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn GetMaxAudioChannelCount(WorldContextObject: &UObject) -> i32{
		unsafe{ UGameplayStatics_GetMaxAudioChannelCountInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn GetNumLocalPlayerControllers(WorldContextObject: &UObject) -> i32{
		unsafe{ UGameplayStatics_GetNumLocalPlayerControllersInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn GetNumPlayerControllers(WorldContextObject: &UObject) -> i32{
		unsafe{ UGameplayStatics_GetNumPlayerControllersInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn GetNumPlayerStates(WorldContextObject: &UObject) -> i32{
		unsafe{ UGameplayStatics_GetNumPlayerStatesInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn GetObjectClass(Object: &UObject) -> *mut UClassOpaque{
		unsafe{ UGameplayStatics_GetObjectClassInvokerHandler.as_ref().unwrap()(Object.inner()) }
	}
	#[inline]
	pub fn GetPlatformName() -> String{
		unsafe{ char_str_2_string(UGameplayStatics_GetPlatformNameInvokerHandler.as_ref().unwrap()()) }
	}
	#[inline]
	pub fn GetPlayerCameraManager(WorldContextObject: &UObject, PlayerIndex: i32) -> *mut APlayerCameraManagerOpaque{
		unsafe{ UGameplayStatics_GetPlayerCameraManagerInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), PlayerIndex) }
	}
	#[inline]
	pub fn GetPlayerCharacter(WorldContextObject: &UObject, PlayerIndex: i32) -> Option<ACharacter>{
		unsafe{ ACharacter::from_ptr(UGameplayStatics_GetPlayerCharacterInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), PlayerIndex)) }
	}
	#[inline]
	pub fn GetPlayerController(WorldContextObject: &UObject, PlayerIndex: i32) -> Option<APlayerController>{
		unsafe{ APlayerController::from_ptr(UGameplayStatics_GetPlayerControllerInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), PlayerIndex)) }
	}
	#[inline]
	pub fn GetPlayerControllerFromID(WorldContextObject: &UObject, ControllerID: i32) -> Option<APlayerController>{
		unsafe{ APlayerController::from_ptr(UGameplayStatics_GetPlayerControllerFromIDInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), ControllerID)) }
	}
	#[inline]
	pub fn GetPlayerControllerID(Player: &mut APlayerController) -> i32{
		unsafe{ UGameplayStatics_GetPlayerControllerIDInvokerHandler.as_ref().unwrap()(Player.inner()) }
	}
	#[inline]
	pub fn GetPlayerPawn(WorldContextObject: &UObject, PlayerIndex: i32) -> Option<APawn>{
		unsafe{ APawn::from_ptr(UGameplayStatics_GetPlayerPawnInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), PlayerIndex)) }
	}
	#[inline]
	pub fn GetPlayerState(WorldContextObject: &UObject, PlayerStateIndex: i32) -> *mut APlayerStateOpaque{
		unsafe{ UGameplayStatics_GetPlayerStateInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), PlayerStateIndex) }
	}
	#[inline]
	pub fn GetRealTimeSeconds(WorldContextObject: &UObject) -> f64{
		unsafe{ UGameplayStatics_GetRealTimeSecondsInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn GetStreamingLevel(WorldContextObject: &UObject, PackageName: UName) -> *mut ULevelStreamingOpaque{
		unsafe{ UGameplayStatics_GetStreamingLevelInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), PackageName) }
	}
	#[inline]
	pub fn GetTimeSeconds(WorldContextObject: &UObject) -> f64{
		unsafe{ UGameplayStatics_GetTimeSecondsInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn GetUnpausedTimeSeconds(WorldContextObject: &UObject) -> f64{
		unsafe{ UGameplayStatics_GetUnpausedTimeSecondsInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn GetWorldDeltaSeconds(WorldContextObject: &UObject) -> f64{
		unsafe{ UGameplayStatics_GetWorldDeltaSecondsInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn GrassOverlappingSphereCount(WorldContextObject: &UObject, StaticMesh: *mut UStaticMeshOpaque, CenterPosition: Vector3, Radius: f32) -> i32{
		unsafe{ UGameplayStatics_GrassOverlappingSphereCountInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), StaticMesh, CenterPosition, Radius) }
	}
	#[inline]
	pub fn IsGamePaused(WorldContextObject: &UObject) -> bool{
		unsafe{ UGameplayStatics_IsGamePausedInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn IsSplitscreenForceDisabled(WorldContextObject: &UObject) -> bool{
		unsafe{ UGameplayStatics_IsSplitscreenForceDisabledInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn OpenLevel(WorldContextObject: &UObject, LevelName: UName, bAbsolute: bool, Options: &str){
		string_2_cstr!(Options, Options);
		unsafe{ UGameplayStatics_OpenLevelInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), LevelName, bAbsolute, Options) }
	}
	#[inline]
	pub fn PlaySound2D(WorldContextObject: &UObject, Sound: *mut USoundBaseOpaque, VolumeMultiplier: f32, PitchMultiplier: f32, StartTime: f32, ConcurrencySettings: *mut USoundConcurrencyOpaque, OwningActor: &AActor, bIsUISound: bool){
		unsafe{ UGameplayStatics_PlaySound2DInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), Sound, VolumeMultiplier, PitchMultiplier, StartTime, ConcurrencySettings, OwningActor.inner(), bIsUISound) }
	}
	#[inline]
	pub fn PlaySoundAtLocation(WorldContextObject: &UObject, Sound: *mut USoundBaseOpaque, Location: Vector3, Rotation: Rotator, VolumeMultiplier: f32, PitchMultiplier: f32, StartTime: f32, AttenuationSettings: *mut USoundAttenuationOpaque, ConcurrencySettings: *mut USoundConcurrencyOpaque, OwningActor: &AActor, InitialParams: *mut UInitialActiveSoundParamsOpaque){
		unsafe{ UGameplayStatics_PlaySoundAtLocationInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), Sound, Location, Rotation, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, OwningActor.inner(), InitialParams) }
	}
	#[inline]
	pub fn PlaySoundAtLocation2(WorldContextObject: &UObject, Sound: *mut USoundBaseOpaque, Location: Vector3, VolumeMultiplier: f32, PitchMultiplier: f32, StartTime: f32, AttenuationSettings: *mut USoundAttenuationOpaque, ConcurrencySettings: *mut USoundConcurrencyOpaque, InitialParams: *mut UInitialActiveSoundParamsOpaque){
		unsafe{ UGameplayStatics_PlaySoundAtLocation2InvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), Sound, Location, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, InitialParams) }
	}
	#[inline]
	pub fn PopSoundMixModifier(WorldContextObject: &UObject, InSoundMixModifier: *mut USoundMixOpaque){
		unsafe{ UGameplayStatics_PopSoundMixModifierInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), InSoundMixModifier) }
	}
	#[inline]
	pub fn PrimeAllSoundsInSoundClass(InSoundClass: *mut USoundClassOpaque){
		unsafe{ UGameplayStatics_PrimeAllSoundsInSoundClassInvokerHandler.as_ref().unwrap()(InSoundClass) }
	}
	#[inline]
	pub fn PrimeSound(InSound: *mut USoundBaseOpaque){
		unsafe{ UGameplayStatics_PrimeSoundInvokerHandler.as_ref().unwrap()(InSound) }
	}
	#[inline]
	pub fn PushSoundMixModifier(WorldContextObject: &UObject, InSoundMixModifier: *mut USoundMixOpaque){
		unsafe{ UGameplayStatics_PushSoundMixModifierInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), InSoundMixModifier) }
	}
	#[inline]
	pub fn RebaseLocalOriginOntoZero(WorldContextObject: &mut UObject, WorldLocation: Vector3) -> Vector3{
		unsafe{ UGameplayStatics_RebaseLocalOriginOntoZeroInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), WorldLocation) }
	}
	#[inline]
	pub fn RebaseZeroOriginOntoLocal(WorldContextObject: &mut UObject, WorldLocation: Vector3) -> Vector3{
		unsafe{ UGameplayStatics_RebaseZeroOriginOntoLocalInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), WorldLocation) }
	}
	#[inline]
	pub fn RemovePlayer(Player: &mut APlayerController, bDestroyPawn: bool){
		unsafe{ UGameplayStatics_RemovePlayerInvokerHandler.as_ref().unwrap()(Player.inner(), bDestroyPawn) }
	}
	#[inline]
	pub fn SetActiveSpatialPluginByName(WorldContextObject: &UObject, InPluginName: UName) -> bool{
		unsafe{ UGameplayStatics_SetActiveSpatialPluginByNameInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), InPluginName) }
	}
	#[inline]
	pub fn SetBaseSoundMix(WorldContextObject: &UObject, InSoundMix: *mut USoundMixOpaque){
		unsafe{ UGameplayStatics_SetBaseSoundMixInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), InSoundMix) }
	}
	#[inline]
	pub fn SetEnableWorldRendering(WorldContextObject: &UObject, bEnable: bool){
		unsafe{ UGameplayStatics_SetEnableWorldRenderingInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), bEnable) }
	}
	#[inline]
	pub fn SetForceDisableSplitscreen(WorldContextObject: &UObject, bDisable: bool){
		unsafe{ UGameplayStatics_SetForceDisableSplitscreenInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), bDisable) }
	}
	#[inline]
	pub fn SetGamePaused(WorldContextObject: &UObject, bPaused: bool) -> bool{
		unsafe{ UGameplayStatics_SetGamePausedInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), bPaused) }
	}
	#[inline]
	pub fn SetGlobalListenerFocusParameters(WorldContextObject: &UObject, FocusAzimuthScale: f32, NonFocusAzimuthScale: f32, FocusDistanceScale: f32, NonFocusDistanceScale: f32, FocusVolumeScale: f32, NonFocusVolumeScale: f32, FocusPriorityScale: f32, NonFocusPriorityScale: f32){
		unsafe{ UGameplayStatics_SetGlobalListenerFocusParametersInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), FocusAzimuthScale, NonFocusAzimuthScale, FocusDistanceScale, NonFocusDistanceScale, FocusVolumeScale, NonFocusVolumeScale, FocusPriorityScale, NonFocusPriorityScale) }
	}
	#[inline]
	pub fn SetGlobalPitchModulation(WorldContextObject: &UObject, PitchModulation: f32, TimeSec: f32){
		unsafe{ UGameplayStatics_SetGlobalPitchModulationInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), PitchModulation, TimeSec) }
	}
	#[inline]
	pub fn SetGlobalTimeDilation(WorldContextObject: &UObject, TimeDilation: f32){
		unsafe{ UGameplayStatics_SetGlobalTimeDilationInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), TimeDilation) }
	}
	#[inline]
	pub fn SetMaxAudioChannelsScaled(WorldContextObject: &UObject, MaxChannelCountScale: f32){
		unsafe{ UGameplayStatics_SetMaxAudioChannelsScaledInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), MaxChannelCountScale) }
	}
	#[inline]
	pub fn SetPlayerControllerID(Player: &mut APlayerController, ControllerId: i32){
		unsafe{ UGameplayStatics_SetPlayerControllerIDInvokerHandler.as_ref().unwrap()(Player.inner(), ControllerId) }
	}
	#[inline]
	pub fn SetSoundClassDistanceScale(WorldContextObject: &UObject, SoundClass: *mut USoundClassOpaque, DistanceAttenuationScale: f32, TimeSec: f32){
		unsafe{ UGameplayStatics_SetSoundClassDistanceScaleInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), SoundClass, DistanceAttenuationScale, TimeSec) }
	}
	#[inline]
	pub fn SetSoundMixClassOverride(WorldContextObject: &UObject, InSoundMixModifier: *mut USoundMixOpaque, InSoundClass: *mut USoundClassOpaque, Volume: f32, Pitch: f32, FadeInTime: f32, bApplyToChildren: bool){
		unsafe{ UGameplayStatics_SetSoundMixClassOverrideInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), InSoundMixModifier, InSoundClass, Volume, Pitch, FadeInTime, bApplyToChildren) }
	}
	#[inline]
	pub fn SetSubtitlesEnabled(bEnabled: bool){
		unsafe{ UGameplayStatics_SetSubtitlesEnabledInvokerHandler.as_ref().unwrap()(bEnabled) }
	}
	#[inline]
	pub fn SpawnDecalAtLocation(WorldContextObject: &UObject, DecalMaterial: *mut UMaterialInterfaceOpaque, DecalSize: Vector3, Location: Vector3, Rotation: Rotator, LifeSpan: f32) -> *mut UDecalComponentOpaque{
		unsafe{ UGameplayStatics_SpawnDecalAtLocationInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), DecalMaterial, DecalSize, Location, Rotation, LifeSpan) }
	}
	#[inline]
	pub fn SpawnForceFeedbackAtLocation(WorldContextObject: &UObject, ForceFeedbackEffect: *mut UForceFeedbackEffectOpaque, Location: Vector3, Rotation: Rotator, bLooping: bool, IntensityMultiplier: f32, StartTime: f32, AttenuationSettings: *mut UForceFeedbackAttenuationOpaque, bAutoDestroy: bool) -> *mut UForceFeedbackComponentOpaque{
		unsafe{ UGameplayStatics_SpawnForceFeedbackAtLocationInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), ForceFeedbackEffect, Location, Rotation, bLooping, IntensityMultiplier, StartTime, AttenuationSettings, bAutoDestroy) }
	}
	#[inline]
	pub fn SpawnSound2D(WorldContextObject: &UObject, Sound: *mut USoundBaseOpaque, VolumeMultiplier: f32, PitchMultiplier: f32, StartTime: f32, ConcurrencySettings: *mut USoundConcurrencyOpaque, bPersistAcrossLevelTransition: bool, bAutoDestroy: bool) -> *mut UAudioComponentOpaque{
		unsafe{ UGameplayStatics_SpawnSound2DInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), Sound, VolumeMultiplier, PitchMultiplier, StartTime, ConcurrencySettings, bPersistAcrossLevelTransition, bAutoDestroy) }
	}
	#[inline]
	pub fn SpawnSoundAtLocation(WorldContextObject: &UObject, Sound: *mut USoundBaseOpaque, Location: Vector3, Rotation: Rotator, VolumeMultiplier: f32, PitchMultiplier: f32, StartTime: f32, AttenuationSettings: *mut USoundAttenuationOpaque, ConcurrencySettings: *mut USoundConcurrencyOpaque, bAutoDestroy: bool) -> *mut UAudioComponentOpaque{
		unsafe{ UGameplayStatics_SpawnSoundAtLocationInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), Sound, Location, Rotation, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, bAutoDestroy) }
	}
	#[inline]
	pub fn UnRetainAllSoundsInSoundClass(InSoundClass: *mut USoundClassOpaque){
		unsafe{ UGameplayStatics_UnRetainAllSoundsInSoundClassInvokerHandler.as_ref().unwrap()(InSoundClass) }
	}
}
pub struct ACharacter{
    inner: *mut ACharacterOpaque
}
impl IPtr for ACharacter{
    #[inline]
    fn inner(&self) -> *mut ACharacterOpaque { self.inner }
    #[inline]
    fn from_ptr(ptr: *mut c_void) -> Option<Self>{
        if_else!(
            ptr.is_null(),
            None,
            Some(Self{inner: ptr})
        )        
    }
}
impl ACharacter{
    
	#[inline]
	pub fn BeginPlay(&mut self){
		unsafe{ ACharacter_BeginPlayInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CacheInitialMeshOffset(&mut self, MeshRelativeLocation: Vector3, MeshRelativeRotation: Rotator){
		unsafe{ ACharacter_CacheInitialMeshOffsetInvokerHandler.as_ref().unwrap()(self.inner, MeshRelativeLocation, MeshRelativeRotation) }
	}
	#[inline]
	pub fn CanCrouch(&self) -> bool{
		unsafe{ ACharacter_CanCrouchInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CanJump(&self) -> bool{
		unsafe{ ACharacter_CanJumpInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CheckJumpInput(&mut self, DeltaTime: f32){
		unsafe{ ACharacter_CheckJumpInputInvokerHandler.as_ref().unwrap()(self.inner, DeltaTime) }
	}
	#[inline]
	pub fn ClearCrossLevelReferences(&mut self){
		unsafe{ ACharacter_ClearCrossLevelReferencesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearJumpInput(&mut self, DeltaTime: f32){
		unsafe{ ACharacter_ClearJumpInputInvokerHandler.as_ref().unwrap()(self.inner, DeltaTime) }
	}
	#[inline]
	pub fn ClientAckGoodMove(&mut self, TimeStamp: f32){
		unsafe{ ACharacter_ClientAckGoodMoveInvokerHandler.as_ref().unwrap()(self.inner, TimeStamp) }
	}
	#[inline]
	pub fn ClientAckGoodMove_Implementation(&mut self, TimeStamp: f32){
		unsafe{ ACharacter_ClientAckGoodMove_ImplementationInvokerHandler.as_ref().unwrap()(self.inner, TimeStamp) }
	}
	#[inline]
	pub fn ClientAdjustPosition(&mut self, TimeStamp: f32, NewLoc: Vector3, NewVel: Vector3, NewBase: &mut UPrimitiveComponent, NewBaseBoneName: UName, bHasBase: bool, bBaseRelativePosition: bool, ServerMovementMode: u8){
		unsafe{ ACharacter_ClientAdjustPositionInvokerHandler.as_ref().unwrap()(self.inner, TimeStamp, NewLoc, NewVel, NewBase.inner(), NewBaseBoneName, bHasBase, bBaseRelativePosition, ServerMovementMode) }
	}
	#[inline]
	pub fn ClientAdjustPosition_Implementation(&mut self, TimeStamp: f32, NewLoc: Vector3, NewVel: Vector3, NewBase: &mut UPrimitiveComponent, NewBaseBoneName: UName, bHasBase: bool, bBaseRelativePosition: bool, ServerMovementMode: u8){
		unsafe{ ACharacter_ClientAdjustPosition_ImplementationInvokerHandler.as_ref().unwrap()(self.inner, TimeStamp, NewLoc, NewVel, NewBase.inner(), NewBaseBoneName, bHasBase, bBaseRelativePosition, ServerMovementMode) }
	}
	#[inline]
	pub fn ClientCheatFly(&mut self){
		unsafe{ ACharacter_ClientCheatFlyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClientCheatFly_Implementation(&mut self){
		unsafe{ ACharacter_ClientCheatFly_ImplementationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClientCheatGhost(&mut self){
		unsafe{ ACharacter_ClientCheatGhostInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClientCheatGhost_Implementation(&mut self){
		unsafe{ ACharacter_ClientCheatGhost_ImplementationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClientCheatWalk(&mut self){
		unsafe{ ACharacter_ClientCheatWalkInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClientCheatWalk_Implementation(&mut self){
		unsafe{ ACharacter_ClientCheatWalk_ImplementationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClientVeryShortAdjustPosition(&mut self, TimeStamp: f32, NewLoc: Vector3, NewBase: &mut UPrimitiveComponent, NewBaseBoneName: UName, bHasBase: bool, bBaseRelativePosition: bool, ServerMovementMode: u8){
		unsafe{ ACharacter_ClientVeryShortAdjustPositionInvokerHandler.as_ref().unwrap()(self.inner, TimeStamp, NewLoc, NewBase.inner(), NewBaseBoneName, bHasBase, bBaseRelativePosition, ServerMovementMode) }
	}
	#[inline]
	pub fn ClientVeryShortAdjustPosition_Implementation(&mut self, TimeStamp: f32, NewLoc: Vector3, NewBase: &mut UPrimitiveComponent, NewBaseBoneName: UName, bHasBase: bool, bBaseRelativePosition: bool, ServerMovementMode: u8){
		unsafe{ ACharacter_ClientVeryShortAdjustPosition_ImplementationInvokerHandler.as_ref().unwrap()(self.inner, TimeStamp, NewLoc, NewBase.inner(), NewBaseBoneName, bHasBase, bBaseRelativePosition, ServerMovementMode) }
	}
	#[inline]
	pub fn Crouch(&mut self, bClientSimulation: bool){
		unsafe{ ACharacter_CrouchInvokerHandler.as_ref().unwrap()(self.inner, bClientSimulation) }
	}
	#[inline]
	pub fn Falling(&mut self){
		unsafe{ ACharacter_FallingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetAnimRootMotionTranslationScale(&self) -> f32{
		unsafe{ ACharacter_GetAnimRootMotionTranslationScaleInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetArrowComponent(&self) -> *mut UArrowComponentOpaque{
		unsafe{ ACharacter_GetArrowComponentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetBaseRotationOffset(&self) -> Quaternion{
		unsafe{ ACharacter_GetBaseRotationOffsetInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetBaseRotationOffsetRotator(&self) -> Rotator{
		unsafe{ ACharacter_GetBaseRotationOffsetRotatorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetBaseTranslationOffset(&self) -> Vector3{
		unsafe{ ACharacter_GetBaseTranslationOffsetInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetCapsuleComponent(&self) -> Option<UCapsuleComponent>{
		unsafe{ UCapsuleComponent::from_ptr(ACharacter_GetCapsuleComponentInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetCharacterMovement(&self) -> Option<UCharacterMovementComponent>{
		unsafe{ UCharacterMovementComponent::from_ptr(ACharacter_GetCharacterMovementInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetCurrentMontage(&self) -> Option<UAnimMontage>{
		unsafe{ UAnimMontage::from_ptr(ACharacter_GetCurrentMontageInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetDefaultHalfHeight(&self) -> f32{
		unsafe{ ACharacter_GetDefaultHalfHeightInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetJumpMaxHoldTime(&self) -> f32{
		unsafe{ ACharacter_GetJumpMaxHoldTimeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetMesh(&self) -> Option<USkeletalMeshComponent>{
		unsafe{ USkeletalMeshComponent::from_ptr(ACharacter_GetMeshInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetMovementBase(&self) -> Option<UPrimitiveComponent>{
		unsafe{ UPrimitiveComponent::from_ptr(ACharacter_GetMovementBaseInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetMovementComponent(&self) -> *mut UPawnMovementComponentOpaque{
		unsafe{ ACharacter_GetMovementComponentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetNavAgentLocation(&self) -> Vector3{
		unsafe{ ACharacter_GetNavAgentLocationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetReplicatedMovementMode(&self) -> u8{
		unsafe{ ACharacter_GetReplicatedMovementModeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetReplicatedServerLastTransformUpdateTimeStamp(&self) -> f32{
		unsafe{ ACharacter_GetReplicatedServerLastTransformUpdateTimeStampInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetRootMotionAnimMontageInstance(&self) -> *mut FAnimMontageInstanceOpaque{
		unsafe{ ACharacter_GetRootMotionAnimMontageInstanceInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetSimpleCollisionCylinder(&self, CollisionRadius: &mut f32, CollisionHalfHeight: &mut f32){
		unsafe{ ACharacter_GetSimpleCollisionCylinderInvokerHandler.as_ref().unwrap()(self.inner, CollisionRadius, CollisionHalfHeight) }
	}
	#[inline]
	pub fn HasAnyRootMotion(&self) -> bool{
		unsafe{ ACharacter_HasAnyRootMotionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsJumpProvidingForce(&self) -> bool{
		unsafe{ ACharacter_IsJumpProvidingForceInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPlayingNetworkedRootMotionMontage(&self) -> bool{
		unsafe{ ACharacter_IsPlayingNetworkedRootMotionMontageInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPlayingRootMotion(&self) -> bool{
		unsafe{ ACharacter_IsPlayingRootMotionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn Jump(&mut self){
		unsafe{ ACharacter_JumpInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn K2_OnEndCrouch(&mut self, HalfHeightAdjust: f32, ScaledHalfHeightAdjust: f32){
		unsafe{ ACharacter_K2_OnEndCrouchInvokerHandler.as_ref().unwrap()(self.inner, HalfHeightAdjust, ScaledHalfHeightAdjust) }
	}
	#[inline]
	pub fn K2_OnStartCrouch(&mut self, HalfHeightAdjust: f32, ScaledHalfHeightAdjust: f32){
		unsafe{ ACharacter_K2_OnStartCrouchInvokerHandler.as_ref().unwrap()(self.inner, HalfHeightAdjust, ScaledHalfHeightAdjust) }
	}
	#[inline]
	pub fn K2_UpdateCustomMovement(&mut self, DeltaTime: f32){
		unsafe{ ACharacter_K2_UpdateCustomMovementInvokerHandler.as_ref().unwrap()(self.inner, DeltaTime) }
	}
	#[inline]
	pub fn LaunchCharacter(&mut self, LaunchVelocity: Vector3, bXYOverride: bool, bZOverride: bool){
		unsafe{ ACharacter_LaunchCharacterInvokerHandler.as_ref().unwrap()(self.inner, LaunchVelocity, bXYOverride, bZOverride) }
	}
	#[inline]
	pub fn NotifyActorBeginOverlap(&mut self, OtherActor: &mut AActor){
		unsafe{ ACharacter_NotifyActorBeginOverlapInvokerHandler.as_ref().unwrap()(self.inner, OtherActor.inner()) }
	}
	#[inline]
	pub fn NotifyActorEndOverlap(&mut self, OtherActor: &mut AActor){
		unsafe{ ACharacter_NotifyActorEndOverlapInvokerHandler.as_ref().unwrap()(self.inner, OtherActor.inner()) }
	}
	#[inline]
	pub fn NotifyJumpApex(&mut self){
		unsafe{ ACharacter_NotifyJumpApexInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnEndCrouch(&mut self, HalfHeightAdjust: f32, ScaledHalfHeightAdjust: f32){
		unsafe{ ACharacter_OnEndCrouchInvokerHandler.as_ref().unwrap()(self.inner, HalfHeightAdjust, ScaledHalfHeightAdjust) }
	}
	#[inline]
	pub fn OnJumped(&mut self){
		unsafe{ ACharacter_OnJumpedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnJumped_Implementation(&mut self){
		unsafe{ ACharacter_OnJumped_ImplementationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnLaunched(&mut self, LaunchVelocity: Vector3, bXYOverride: bool, bZOverride: bool){
		unsafe{ ACharacter_OnLaunchedInvokerHandler.as_ref().unwrap()(self.inner, LaunchVelocity, bXYOverride, bZOverride) }
	}
	#[inline]
	pub fn OnRep_IsCrouched(&mut self){
		unsafe{ ACharacter_OnRep_IsCrouchedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnRep_ReplayLastTransformUpdateTimeStamp(&mut self){
		unsafe{ ACharacter_OnRep_ReplayLastTransformUpdateTimeStampInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnRep_ReplicatedBasedMovement(&mut self){
		unsafe{ ACharacter_OnRep_ReplicatedBasedMovementInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnRep_ReplicatedMovement(&mut self){
		unsafe{ ACharacter_OnRep_ReplicatedMovementInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnRep_RootMotion(&mut self){
		unsafe{ ACharacter_OnRep_RootMotionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnStartCrouch(&mut self, HalfHeightAdjust: f32, ScaledHalfHeightAdjust: f32){
		unsafe{ ACharacter_OnStartCrouchInvokerHandler.as_ref().unwrap()(self.inner, HalfHeightAdjust, ScaledHalfHeightAdjust) }
	}
	#[inline]
	pub fn PawnClientRestart(&mut self){
		unsafe{ ACharacter_PawnClientRestartInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PlayAnimMontage(&mut self, AnimMontage: &mut UAnimMontage, InPlayRate: f32, StartSectionName: UName) -> f32{
		unsafe{ ACharacter_PlayAnimMontageInvokerHandler.as_ref().unwrap()(self.inner, AnimMontage.inner(), InPlayRate, StartSectionName) }
	}
	#[inline]
	pub fn PossessedBy(&mut self, NewController: &mut AController){
		unsafe{ ACharacter_PossessedByInvokerHandler.as_ref().unwrap()(self.inner, NewController.inner()) }
	}
	#[inline]
	pub fn PostInitializeComponents(&mut self){
		unsafe{ ACharacter_PostInitializeComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostLoad(&mut self){
		unsafe{ ACharacter_PostLoadInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostNetReceive(&mut self){
		unsafe{ ACharacter_PostNetReceiveInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostNetReceiveLocationAndRotation(&mut self){
		unsafe{ ACharacter_PostNetReceiveLocationAndRotationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PreNetReceive(&mut self){
		unsafe{ ACharacter_PreNetReceiveInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RecalculateBaseEyeHeight(&mut self){
		unsafe{ ACharacter_RecalculateBaseEyeHeightInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RecalculateCrouchedEyeHeight(&mut self){
		unsafe{ ACharacter_RecalculateCrouchedEyeHeightInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ResetJumpState(&mut self){
		unsafe{ ACharacter_ResetJumpStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn Restart(&mut self){
		unsafe{ ACharacter_RestartInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SetAnimRootMotionTranslationScale(&mut self, InAnimRootMotionTranslationScale: f32){
		unsafe{ ACharacter_SetAnimRootMotionTranslationScaleInvokerHandler.as_ref().unwrap()(self.inner, InAnimRootMotionTranslationScale) }
	}
	#[inline]
	pub fn SetBase(&mut self, NewBase: &mut UPrimitiveComponent, BoneName: UName, bNotifyActor: bool){
		unsafe{ ACharacter_SetBaseInvokerHandler.as_ref().unwrap()(self.inner, NewBase.inner(), BoneName, bNotifyActor) }
	}
	#[inline]
	pub fn SetReplicateMovement(&mut self, bInReplicateMovement: bool){
		unsafe{ ACharacter_SetReplicateMovementInvokerHandler.as_ref().unwrap()(self.inner, bInReplicateMovement) }
	}
	#[inline]
	pub fn SetupPlayerInputComponent(&mut self, PlayerInputComponent: *mut UInputComponentOpaque){
		unsafe{ ACharacter_SetupPlayerInputComponentInvokerHandler.as_ref().unwrap()(self.inner, PlayerInputComponent) }
	}
	#[inline]
	pub fn SimulatedRootMotionPositionFixup(&mut self, DeltaSeconds: f32){
		unsafe{ ACharacter_SimulatedRootMotionPositionFixupInvokerHandler.as_ref().unwrap()(self.inner, DeltaSeconds) }
	}
	#[inline]
	pub fn StopAnimMontage(&mut self, AnimMontage: &mut UAnimMontage){
		unsafe{ ACharacter_StopAnimMontageInvokerHandler.as_ref().unwrap()(self.inner, AnimMontage.inner()) }
	}
	#[inline]
	pub fn StopJumping(&mut self){
		unsafe{ ACharacter_StopJumpingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn TornOff(&mut self){
		unsafe{ ACharacter_TornOffInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn TurnOff(&mut self){
		unsafe{ ACharacter_TurnOffInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UnCrouch(&mut self, bClientSimulation: bool){
		unsafe{ ACharacter_UnCrouchInvokerHandler.as_ref().unwrap()(self.inner, bClientSimulation) }
	}
	#[inline]
	pub fn UnPossessed(&mut self){
		unsafe{ ACharacter_UnPossessedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateNavigationRelevance(&mut self){
		unsafe{ ACharacter_UpdateNavigationRelevanceInvokerHandler.as_ref().unwrap()(self.inner) }
	}
}
pub struct AGameModeBase{
    inner: *mut AGameModeBaseOpaque
}
impl IPtr for AGameModeBase{
    #[inline]
    fn inner(&self) -> *mut AGameModeBaseOpaque { self.inner }
    #[inline]
    fn from_ptr(ptr: *mut c_void) -> Option<Self>{
        if_else!(
            ptr.is_null(),
            None,
            Some(Self{inner: ptr})
        )        
    }
}
impl AGameModeBase{
    
	#[inline]
	pub fn AllowCheats(&mut self, P: &mut APlayerController) -> bool{
		unsafe{ AGameModeBase_AllowCheatsInvokerHandler.as_ref().unwrap()(self.inner, P.inner()) }
	}
	#[inline]
	pub fn AllowPausing(&mut self, PC: &mut APlayerController) -> bool{
		unsafe{ AGameModeBase_AllowPausingInvokerHandler.as_ref().unwrap()(self.inner, PC.inner()) }
	}
	#[inline]
	pub fn CanSpectate(&mut self, Viewer: &mut APlayerController, ViewTarget: *mut APlayerStateOpaque) -> bool{
		unsafe{ AGameModeBase_CanSpectateInvokerHandler.as_ref().unwrap()(self.inner, Viewer.inner(), ViewTarget) }
	}
	#[inline]
	pub fn ChoosePlayerStart(&mut self, Player: &mut AController) -> Option<AActor>{
		unsafe{ AActor::from_ptr(AGameModeBase_ChoosePlayerStartInvokerHandler.as_ref().unwrap()(self.inner, Player.inner())) }
	}
	#[inline]
	pub fn ClearPause(&mut self) -> bool{
		unsafe{ AGameModeBase_ClearPauseInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn DispatchPostLogin(&mut self, NewPlayer: &mut AController){
		unsafe{ AGameModeBase_DispatchPostLoginInvokerHandler.as_ref().unwrap()(self.inner, NewPlayer.inner()) }
	}
	#[inline]
	pub fn ForceClearUnpauseDelegates(&mut self, PauseActor: &mut AActor){
		unsafe{ AGameModeBase_ForceClearUnpauseDelegatesInvokerHandler.as_ref().unwrap()(self.inner, PauseActor.inner()) }
	}
	#[inline]
	pub fn GetNumPlayers(&mut self) -> i32{
		unsafe{ AGameModeBase_GetNumPlayersInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetNumSpectators(&mut self) -> i32{
		unsafe{ AGameModeBase_GetNumSpectatorsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HandleStartingNewPlayer(&mut self, NewPlayer: &mut APlayerController){
		unsafe{ AGameModeBase_HandleStartingNewPlayerInvokerHandler.as_ref().unwrap()(self.inner, NewPlayer.inner()) }
	}
	#[inline]
	pub fn HasMatchEnded(&self) -> bool{
		unsafe{ AGameModeBase_HasMatchEndedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasMatchStarted(&self) -> bool{
		unsafe{ AGameModeBase_HasMatchStartedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn InitGameState(&mut self){
		unsafe{ AGameModeBase_InitGameStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn InitStartSpot(&mut self, StartSpot: &mut AActor, NewPlayer: &mut AController){
		unsafe{ AGameModeBase_InitStartSpotInvokerHandler.as_ref().unwrap()(self.inner, StartSpot.inner(), NewPlayer.inner()) }
	}
	#[inline]
	pub fn IsHandlingReplays(&mut self) -> bool{
		unsafe{ AGameModeBase_IsHandlingReplaysInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPaused(&self) -> bool{
		unsafe{ AGameModeBase_IsPausedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn K2_OnLogout(&mut self, ExitingController: &mut AController){
		unsafe{ AGameModeBase_K2_OnLogoutInvokerHandler.as_ref().unwrap()(self.inner, ExitingController.inner()) }
	}
	#[inline]
	pub fn K2_OnRestartPlayer(&mut self, NewPlayer: &mut AController){
		unsafe{ AGameModeBase_K2_OnRestartPlayerInvokerHandler.as_ref().unwrap()(self.inner, NewPlayer.inner()) }
	}
	#[inline]
	pub fn K2_PostLogin(&mut self, NewPlayer: &mut APlayerController){
		unsafe{ AGameModeBase_K2_PostLoginInvokerHandler.as_ref().unwrap()(self.inner, NewPlayer.inner()) }
	}
	#[inline]
	pub fn Logout(&mut self, Exiting: &mut AController){
		unsafe{ AGameModeBase_LogoutInvokerHandler.as_ref().unwrap()(self.inner, Exiting.inner()) }
	}
	#[inline]
	pub fn MustSpectate(&self, NewPlayerController: &mut APlayerController) -> bool{
		unsafe{ AGameModeBase_MustSpectateInvokerHandler.as_ref().unwrap()(self.inner, NewPlayerController.inner()) }
	}
	#[inline]
	pub fn PlayerCanRestart(&mut self, Player: &mut APlayerController) -> bool{
		unsafe{ AGameModeBase_PlayerCanRestartInvokerHandler.as_ref().unwrap()(self.inner, Player.inner()) }
	}
	#[inline]
	pub fn PostLogin(&mut self, NewPlayer: &mut APlayerController){
		unsafe{ AGameModeBase_PostLoginInvokerHandler.as_ref().unwrap()(self.inner, NewPlayer.inner()) }
	}
	#[inline]
	pub fn PostSeamlessTravel(&mut self){
		unsafe{ AGameModeBase_PostSeamlessTravelInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PreInitializeComponents(&mut self){
		unsafe{ AGameModeBase_PreInitializeComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn Reset(&mut self){
		unsafe{ AGameModeBase_ResetInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ResetLevel(&mut self){
		unsafe{ AGameModeBase_ResetLevelInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RestartPlayer(&mut self, NewPlayer: &mut AController){
		unsafe{ AGameModeBase_RestartPlayerInvokerHandler.as_ref().unwrap()(self.inner, NewPlayer.inner()) }
	}
	#[inline]
	pub fn RestartPlayerAtPlayerStart(&mut self, NewPlayer: &mut AController, StartSpot: &mut AActor){
		unsafe{ AGameModeBase_RestartPlayerAtPlayerStartInvokerHandler.as_ref().unwrap()(self.inner, NewPlayer.inner(), StartSpot.inner()) }
	}
	#[inline]
	pub fn ReturnToMainMenuHost(&mut self){
		unsafe{ AGameModeBase_ReturnToMainMenuHostInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SetPlayerDefaults(&mut self, PlayerPawn: &mut APawn){
		unsafe{ AGameModeBase_SetPlayerDefaultsInvokerHandler.as_ref().unwrap()(self.inner, PlayerPawn.inner()) }
	}
	#[inline]
	pub fn ShouldReset(&mut self, ActorToReset: &mut AActor) -> bool{
		unsafe{ AGameModeBase_ShouldResetInvokerHandler.as_ref().unwrap()(self.inner, ActorToReset.inner()) }
	}
	#[inline]
	pub fn SpawnDefaultPawnFor(&mut self, NewPlayer: &mut AController, StartSpot: &mut AActor) -> Option<APawn>{
		unsafe{ APawn::from_ptr(AGameModeBase_SpawnDefaultPawnForInvokerHandler.as_ref().unwrap()(self.inner, NewPlayer.inner(), StartSpot.inner())) }
	}
	#[inline]
	pub fn StartPlay(&mut self){
		unsafe{ AGameModeBase_StartPlayInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn StartToLeaveMap(&mut self){
		unsafe{ AGameModeBase_StartToLeaveMapInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SwapPlayerControllers(&mut self, OldPC: &mut APlayerController, NewPC: &mut APlayerController){
		unsafe{ AGameModeBase_SwapPlayerControllersInvokerHandler.as_ref().unwrap()(self.inner, OldPC.inner(), NewPC.inner()) }
	}
}
pub struct USceneComponent{
    inner: *mut USceneComponentOpaque
}
impl IPtr for USceneComponent{
    #[inline]
    fn inner(&self) -> *mut USceneComponentOpaque { self.inner }
    #[inline]
    fn from_ptr(ptr: *mut c_void) -> Option<Self>{
        if_else!(
            ptr.is_null(),
            None,
            Some(Self{inner: ptr})
        )        
    }
}
impl USceneComponent{
    
	#[inline]
	pub fn BeginDestroy(&mut self){
		unsafe{ USceneComponent_BeginDestroyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CalcBoundingCylinder(&self, CylinderRadius: &mut f32, CylinderHalfHeight: &mut f32){
		unsafe{ USceneComponent_CalcBoundingCylinderInvokerHandler.as_ref().unwrap()(self.inner, CylinderRadius, CylinderHalfHeight) }
	}
	#[inline]
	pub fn CanAttachAsChild(&self, ChildComponent: &USceneComponent, SocketName: UName) -> bool{
		unsafe{ USceneComponent_CanAttachAsChildInvokerHandler.as_ref().unwrap()(self.inner, ChildComponent.inner(), SocketName) }
	}
	#[inline]
	pub fn CanEditChange(&self, Property: *mut FPropertyOpaque) -> bool{
		unsafe{ USceneComponent_CanEditChangeInvokerHandler.as_ref().unwrap()(self.inner, Property) }
	}
	#[inline]
	pub fn CanEverRender(&self) -> bool{
		unsafe{ USceneComponent_CanEverRenderInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CanHaveStaticMobility(&self) -> bool{
		unsafe{ USceneComponent_CanHaveStaticMobilityInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearSkipUpdateOverlaps(&mut self){
		unsafe{ USceneComponent_ClearSkipUpdateOverlapsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ConditionalUpdateComponentToWorld(&mut self){
		unsafe{ USceneComponent_ConditionalUpdateComponentToWorldInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn DestroyComponent(&mut self, bPromoteChildren: bool){
		unsafe{ USceneComponent_DestroyComponentInvokerHandler.as_ref().unwrap()(self.inner, bPromoteChildren) }
	}
	#[inline]
	pub fn DoesSocketExist(&self, InSocketName: UName) -> bool{
		unsafe{ USceneComponent_DoesSocketExistInvokerHandler.as_ref().unwrap()(self.inner, InSocketName) }
	}
	#[inline]
	pub fn GetAbsoluteLocationPropertyName() -> UName{
		unsafe{ USceneComponent_GetAbsoluteLocationPropertyNameInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetAbsoluteRotationPropertyName() -> UName{
		unsafe{ USceneComponent_GetAbsoluteRotationPropertyNameInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetAbsoluteScalePropertyName() -> UName{
		unsafe{ USceneComponent_GetAbsoluteScalePropertyNameInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetActorPositionForRenderer(&self) -> Vector3{
		unsafe{ USceneComponent_GetActorPositionForRendererInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetAttachParent(&self) -> Option<USceneComponent>{
		unsafe{ USceneComponent::from_ptr(USceneComponent_GetAttachParentInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetAttachParentActor(&self) -> Option<AActor>{
		unsafe{ AActor::from_ptr(USceneComponent_GetAttachParentActorInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetAttachSocketName(&self) -> UName{
		unsafe{ USceneComponent_GetAttachSocketNameInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetAttachmentRoot(&self) -> Option<USceneComponent>{
		unsafe{ USceneComponent::from_ptr(USceneComponent_GetAttachmentRootInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetAttachmentRootActor(&self) -> Option<AActor>{
		unsafe{ AActor::from_ptr(USceneComponent_GetAttachmentRootActorInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetChildComponent(&self, ChildIndex: i32) -> Option<USceneComponent>{
		unsafe{ USceneComponent::from_ptr(USceneComponent_GetChildComponentInvokerHandler.as_ref().unwrap()(self.inner, ChildIndex)) }
	}
	#[inline]
	pub fn GetCollisionObjectType(&self) -> ECollisionChannel{
		unsafe{ USceneComponent_GetCollisionObjectTypeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetComponentLocation(&self) -> Vector3{
		unsafe{ USceneComponent_GetComponentLocationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetComponentQuat(&self) -> Quaternion{
		unsafe{ USceneComponent_GetComponentQuatInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetComponentRotation(&self) -> Rotator{
		unsafe{ USceneComponent_GetComponentRotationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetComponentScale(&self) -> Vector3{
		unsafe{ USceneComponent_GetComponentScaleInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetComponentToWorld(&self) -> Transform{
		unsafe{ USceneComponent_GetComponentToWorldInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetComponentTransform(&self) -> Transform{
		unsafe{ USceneComponent_GetComponentTransformInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetComponentVelocity(&self) -> Vector3{
		unsafe{ USceneComponent_GetComponentVelocityInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetCurrentScopedMovement(&self) -> *mut FScopedMovementUpdateOpaque{
		unsafe{ USceneComponent_GetCurrentScopedMovementInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetDefaultSceneRootVariableName() -> UName{
		unsafe{ USceneComponent_GetDefaultSceneRootVariableNameInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetForwardVector(&self) -> Vector3{
		unsafe{ USceneComponent_GetForwardVectorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetNumChildrenComponents(&self) -> i32{
		unsafe{ USceneComponent_GetNumChildrenComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetNumUncachedStaticLightingInteractions(&self) -> i32{
		unsafe{ USceneComponent_GetNumUncachedStaticLightingInteractionsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetPhysicsVolume(&self) -> *mut APhysicsVolumeOpaque{
		unsafe{ USceneComponent_GetPhysicsVolumeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetRelativeLocation(&self) -> Vector3{
		unsafe{ USceneComponent_GetRelativeLocationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetRelativeLocationPropertyName() -> UName{
		unsafe{ USceneComponent_GetRelativeLocationPropertyNameInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetRelativeLocation_DirectMutable(&mut self) -> Vector3{
		unsafe{ USceneComponent_GetRelativeLocation_DirectMutableInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetRelativeRotation(&self) -> Rotator{
		unsafe{ USceneComponent_GetRelativeRotationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetRelativeRotationPropertyName() -> UName{
		unsafe{ USceneComponent_GetRelativeRotationPropertyNameInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetRelativeRotation_DirectMutable(&mut self) -> Rotator{
		unsafe{ USceneComponent_GetRelativeRotation_DirectMutableInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetRelativeScale3D(&self) -> Vector3{
		unsafe{ USceneComponent_GetRelativeScale3DInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetRelativeScale3DPropertyName() -> UName{
		unsafe{ USceneComponent_GetRelativeScale3DPropertyNameInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetRelativeScale3D_DirectMutable(&mut self) -> Vector3{
		unsafe{ USceneComponent_GetRelativeScale3D_DirectMutableInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetRelativeTransform(&self) -> Transform{
		unsafe{ USceneComponent_GetRelativeTransformInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetRightVector(&self) -> Vector3{
		unsafe{ USceneComponent_GetRightVectorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetShouldUpdatePhysicsVolume(&self) -> bool{
		unsafe{ USceneComponent_GetShouldUpdatePhysicsVolumeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetSocketLocation(&self, InSocketName: UName) -> Vector3{
		unsafe{ USceneComponent_GetSocketLocationInvokerHandler.as_ref().unwrap()(self.inner, InSocketName) }
	}
	#[inline]
	pub fn GetSocketQuaternion(&self, InSocketName: UName) -> Quaternion{
		unsafe{ USceneComponent_GetSocketQuaternionInvokerHandler.as_ref().unwrap()(self.inner, InSocketName) }
	}
	#[inline]
	pub fn GetSocketRotation(&self, InSocketName: UName) -> Rotator{
		unsafe{ USceneComponent_GetSocketRotationInvokerHandler.as_ref().unwrap()(self.inner, InSocketName) }
	}
	#[inline]
	pub fn GetUpVector(&self) -> Vector3{
		unsafe{ USceneComponent_GetUpVectorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetVisibleFlag(&self) -> bool{
		unsafe{ USceneComponent_GetVisibleFlagInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetVisiblePropertyName() -> UName{
		unsafe{ USceneComponent_GetVisiblePropertyNameInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn HasAnySockets(&self) -> bool{
		unsafe{ USceneComponent_HasAnySocketsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsAnySimulatingPhysics(&self) -> bool{
		unsafe{ USceneComponent_IsAnySimulatingPhysicsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsAttachedTo(&self, TestComp: &USceneComponent) -> bool{
		unsafe{ USceneComponent_IsAttachedToInvokerHandler.as_ref().unwrap()(self.inner, TestComp.inner()) }
	}
	#[inline]
	pub fn IsCollisionEnabled(&self) -> bool{
		unsafe{ USceneComponent_IsCollisionEnabledInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsDeferringMovementUpdates(&self) -> bool{
		unsafe{ USceneComponent_IsDeferringMovementUpdatesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPhysicsCollisionEnabled(&self) -> bool{
		unsafe{ USceneComponent_IsPhysicsCollisionEnabledInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPostLoadThreadSafe(&self) -> bool{
		unsafe{ USceneComponent_IsPostLoadThreadSafeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPrecomputedLightingValid(&self) -> bool{
		unsafe{ USceneComponent_IsPrecomputedLightingValidInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsQueryCollisionEnabled(&self) -> bool{
		unsafe{ USceneComponent_IsQueryCollisionEnabledInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsSimulatingPhysics(&self, BoneName: UName) -> bool{
		unsafe{ USceneComponent_IsSimulatingPhysicsInvokerHandler.as_ref().unwrap()(self.inner, BoneName) }
	}
	#[inline]
	pub fn IsUsingAbsoluteLocation(&self) -> bool{
		unsafe{ USceneComponent_IsUsingAbsoluteLocationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsUsingAbsoluteRotation(&self) -> bool{
		unsafe{ USceneComponent_IsUsingAbsoluteRotationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsUsingAbsoluteScale(&self) -> bool{
		unsafe{ USceneComponent_IsUsingAbsoluteScaleInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsVisible(&self) -> bool{
		unsafe{ USceneComponent_IsVisibleInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsVisibleInEditor(&self) -> bool{
		unsafe{ USceneComponent_IsVisibleInEditorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsWorldGeometry(&self) -> bool{
		unsafe{ USceneComponent_IsWorldGeometryInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn K2_GetComponentLocation(&self) -> Vector3{
		unsafe{ USceneComponent_K2_GetComponentLocationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn K2_GetComponentRotation(&self) -> Rotator{
		unsafe{ USceneComponent_K2_GetComponentRotationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn K2_GetComponentScale(&self) -> Vector3{
		unsafe{ USceneComponent_K2_GetComponentScaleInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn K2_GetComponentToWorld(&self) -> Transform{
		unsafe{ USceneComponent_K2_GetComponentToWorldInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn NeedsLoadForTargetPlatform(&self, TargetPlatform: *mut ITargetPlatformOpaque) -> bool{
		unsafe{ USceneComponent_NeedsLoadForTargetPlatformInvokerHandler.as_ref().unwrap()(self.inner, TargetPlatform) }
	}
	#[inline]
	pub fn OnAttachmentChanged(&mut self){
		unsafe{ USceneComponent_OnAttachmentChangedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnComponentDestroyed(&mut self, bDestroyingHierarchy: bool){
		unsafe{ USceneComponent_OnComponentDestroyedInvokerHandler.as_ref().unwrap()(self.inner, bDestroyingHierarchy) }
	}
	#[inline]
	pub fn OnRegister(&mut self){
		unsafe{ USceneComponent_OnRegisterInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnUnregister(&mut self){
		unsafe{ USceneComponent_OnUnregisterInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostEditComponentMove(&mut self, bFinished: bool){
		unsafe{ USceneComponent_PostEditComponentMoveInvokerHandler.as_ref().unwrap()(self.inner, bFinished) }
	}
	#[inline]
	pub fn PostInterpChange(&mut self, PropertyThatChanged: *mut FPropertyOpaque){
		unsafe{ USceneComponent_PostInterpChangeInvokerHandler.as_ref().unwrap()(self.inner, PropertyThatChanged) }
	}
	#[inline]
	pub fn PostLoad(&mut self){
		unsafe{ USceneComponent_PostLoadInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostNetReceive(&mut self){
		unsafe{ USceneComponent_PostNetReceiveInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostRepNotifies(&mut self){
		unsafe{ USceneComponent_PostRepNotifiesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PreNetReceive(&mut self){
		unsafe{ USceneComponent_PreNetReceiveInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PropagateLightingScenarioChange(&mut self){
		unsafe{ USceneComponent_PropagateLightingScenarioChangeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ResetRelativeTransform(&mut self){
		unsafe{ USceneComponent_ResetRelativeTransformInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SetAbsolute(&mut self, bNewAbsoluteLocation: bool, bNewAbsoluteRotation: bool, bNewAbsoluteScale: bool){
		unsafe{ USceneComponent_SetAbsoluteInvokerHandler.as_ref().unwrap()(self.inner, bNewAbsoluteLocation, bNewAbsoluteRotation, bNewAbsoluteScale) }
	}
	#[inline]
	pub fn SetHiddenInGame(&mut self, NewHidden: bool, bPropagateToChildren: bool){
		unsafe{ USceneComponent_SetHiddenInGameInvokerHandler.as_ref().unwrap()(self.inner, NewHidden, bPropagateToChildren) }
	}
	#[inline]
	pub fn SetPhysicsVolume(&mut self, NewVolume: *mut APhysicsVolumeOpaque, bTriggerNotifiers: bool){
		unsafe{ USceneComponent_SetPhysicsVolumeInvokerHandler.as_ref().unwrap()(self.inner, NewVolume, bTriggerNotifiers) }
	}
	#[inline]
	pub fn SetRelativeLocation_Direct(&mut self, NewRelativeLocation: Vector3){
		unsafe{ USceneComponent_SetRelativeLocation_DirectInvokerHandler.as_ref().unwrap()(self.inner, NewRelativeLocation) }
	}
	#[inline]
	pub fn SetRelativeRotation_Direct(&mut self, NewRelativeRotation: Rotator){
		unsafe{ USceneComponent_SetRelativeRotation_DirectInvokerHandler.as_ref().unwrap()(self.inner, NewRelativeRotation) }
	}
	#[inline]
	pub fn SetRelativeScale3D(&mut self, NewScale3D: Vector3){
		unsafe{ USceneComponent_SetRelativeScale3DInvokerHandler.as_ref().unwrap()(self.inner, NewScale3D) }
	}
	#[inline]
	pub fn SetRelativeScale3D_Direct(&mut self, NewRelativeScale3D: Vector3){
		unsafe{ USceneComponent_SetRelativeScale3D_DirectInvokerHandler.as_ref().unwrap()(self.inner, NewRelativeScale3D) }
	}
	#[inline]
	pub fn SetShouldUpdatePhysicsVolume(&mut self, bInShouldUpdatePhysicsVolume: bool){
		unsafe{ USceneComponent_SetShouldUpdatePhysicsVolumeInvokerHandler.as_ref().unwrap()(self.inner, bInShouldUpdatePhysicsVolume) }
	}
	#[inline]
	pub fn SetUsingAbsoluteLocation(&mut self, bInAbsoluteLocation: bool){
		unsafe{ USceneComponent_SetUsingAbsoluteLocationInvokerHandler.as_ref().unwrap()(self.inner, bInAbsoluteLocation) }
	}
	#[inline]
	pub fn SetUsingAbsoluteRotation(&mut self, bInAbsoluteRotation: bool){
		unsafe{ USceneComponent_SetUsingAbsoluteRotationInvokerHandler.as_ref().unwrap()(self.inner, bInAbsoluteRotation) }
	}
	#[inline]
	pub fn SetUsingAbsoluteScale(&mut self, bInAbsoluteRotation: bool){
		unsafe{ USceneComponent_SetUsingAbsoluteScaleInvokerHandler.as_ref().unwrap()(self.inner, bInAbsoluteRotation) }
	}
	#[inline]
	pub fn SetVisibility(&mut self, bNewVisibility: bool, bPropagateToChildren: bool){
		unsafe{ USceneComponent_SetVisibilityInvokerHandler.as_ref().unwrap()(self.inner, bNewVisibility, bPropagateToChildren) }
	}
	#[inline]
	pub fn SetVisibleFlag(&mut self, bInVisible: bool){
		unsafe{ USceneComponent_SetVisibleFlagInvokerHandler.as_ref().unwrap()(self.inner, bInVisible) }
	}
	#[inline]
	pub fn SetWorldScale3D(&mut self, NewScale: Vector3){
		unsafe{ USceneComponent_SetWorldScale3DInvokerHandler.as_ref().unwrap()(self.inner, NewScale) }
	}
	#[inline]
	pub fn SetupAttachment(&mut self, InParent: &mut USceneComponent, InSocketName: UName){
		unsafe{ USceneComponent_SetupAttachmentInvokerHandler.as_ref().unwrap()(self.inner, InParent.inner(), InSocketName) }
	}
	#[inline]
	pub fn ShouldCollideWhenPlacing(&self) -> bool{
		unsafe{ USceneComponent_ShouldCollideWhenPlacingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldComponentAddToScene(&self) -> bool{
		unsafe{ USceneComponent_ShouldComponentAddToSceneInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldCreateRenderState(&self) -> bool{
		unsafe{ USceneComponent_ShouldCreateRenderStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldRender(&self) -> bool{
		unsafe{ USceneComponent_ShouldRenderInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldSkipUpdateOverlaps(&self) -> bool{
		unsafe{ USceneComponent_ShouldSkipUpdateOverlapsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ToggleVisibility(&mut self, bPropagateToChildren: bool){
		unsafe{ USceneComponent_ToggleVisibilityInvokerHandler.as_ref().unwrap()(self.inner, bPropagateToChildren) }
	}
	#[inline]
	pub fn UpdateBounds(&mut self){
		unsafe{ USceneComponent_UpdateBoundsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateOverlaps(&mut self, PendingOverlaps: *mut TOverlapArrayViewOpaque, bDoNotifies: bool, OverlapsAtEndLocation: *mut TOverlapArrayViewOpaque) -> bool{
		unsafe{ USceneComponent_UpdateOverlapsInvokerHandler.as_ref().unwrap()(self.inner, PendingOverlaps, bDoNotifies, OverlapsAtEndLocation) }
	}
	#[inline]
	pub fn UpdatePhysicsVolume(&mut self, bTriggerNotifiers: bool){
		unsafe{ USceneComponent_UpdatePhysicsVolumeInvokerHandler.as_ref().unwrap()(self.inner, bTriggerNotifiers) }
	}
}
pub struct UActorComponent{
    inner: *mut UActorComponentOpaque
}
impl IPtr for UActorComponent{
    #[inline]
    fn inner(&self) -> *mut UActorComponentOpaque { self.inner }
    #[inline]
    fn from_ptr(ptr: *mut c_void) -> Option<Self>{
        if_else!(
            ptr.is_null(),
            None,
            Some(Self{inner: ptr})
        )        
    }
}
impl UActorComponent{
    
	#[inline]
	pub fn Activate(&mut self, bReset: bool){
		unsafe{ UActorComponent_ActivateInvokerHandler.as_ref().unwrap()(self.inner, bReset) }
	}
	#[inline]
	pub fn AddAssetUserData(&mut self, InUserData: *mut UAssetUserDataOpaque){
		unsafe{ UActorComponent_AddAssetUserDataInvokerHandler.as_ref().unwrap()(self.inner, InUserData) }
	}
	#[inline]
	pub fn AddTickPrerequisiteActor(&mut self, PrerequisiteActor: &mut AActor){
		unsafe{ UActorComponent_AddTickPrerequisiteActorInvokerHandler.as_ref().unwrap()(self.inner, PrerequisiteActor.inner()) }
	}
	#[inline]
	pub fn AddTickPrerequisiteComponent(&mut self, PrerequisiteComponent: &mut UActorComponent){
		unsafe{ UActorComponent_AddTickPrerequisiteComponentInvokerHandler.as_ref().unwrap()(self.inner, PrerequisiteComponent.inner()) }
	}
	#[inline]
	pub fn AdditionalStatObject(&self) -> *mut Opaque{
		unsafe{ UActorComponent_AdditionalStatObjectInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn AllowReregistration(&self) -> bool{
		unsafe{ UActorComponent_AllowReregistrationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn AsyncPhysicsTickComponent(&mut self, DeltaTime: f32, SimTime: f32){
		unsafe{ UActorComponent_AsyncPhysicsTickComponentInvokerHandler.as_ref().unwrap()(self.inner, DeltaTime, SimTime) }
	}
	#[inline]
	pub fn BeginDestroy(&mut self){
		unsafe{ UActorComponent_BeginDestroyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn BeginPlay(&mut self){
		unsafe{ UActorComponent_BeginPlayInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CallRemoteFunction(&mut self, Function: *mut UFunctionOpaque, Parameters: *mut c_void, OutParms: *mut FOutParmRecOpaque, Stack: *mut FFrameOpaque) -> bool{
		unsafe{ UActorComponent_CallRemoteFunctionInvokerHandler.as_ref().unwrap()(self.inner, Function, Parameters, OutParms, Stack) }
	}
	#[inline]
	pub fn CanEditChange(&self, InProperty: *mut FPropertyOpaque) -> bool{
		unsafe{ UActorComponent_CanEditChangeInvokerHandler.as_ref().unwrap()(self.inner, InProperty) }
	}
	#[inline]
	pub fn CanEverAffectNavigation(&self) -> bool{
		unsafe{ UActorComponent_CanEverAffectNavigationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CheckForErrors(&mut self){
		unsafe{ UActorComponent_CheckForErrorsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearNeedEndOfFrameUpdate(&mut self){
		unsafe{ UActorComponent_ClearNeedEndOfFrameUpdateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearUCSModifiedProperties(&mut self){
		unsafe{ UActorComponent_ClearUCSModifiedPropertiesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ComponentHasTag(&self, Tag: UName) -> bool{
		unsafe{ UActorComponent_ComponentHasTagInvokerHandler.as_ref().unwrap()(self.inner, Tag) }
	}
	#[inline]
	pub fn ComponentIsInLevel(&self, TestLevel: *mut ULevelOpaque) -> bool{
		unsafe{ UActorComponent_ComponentIsInLevelInvokerHandler.as_ref().unwrap()(self.inner, TestLevel) }
	}
	#[inline]
	pub fn ComponentIsInPersistentLevel(&self, bIncludeLevelStreamingPersistent: bool) -> bool{
		unsafe{ UActorComponent_ComponentIsInPersistentLevelInvokerHandler.as_ref().unwrap()(self.inner, bIncludeLevelStreamingPersistent) }
	}
	#[inline]
	pub fn CreatePhysicsState(&mut self, bAllowDeferral: bool){
		unsafe{ UActorComponent_CreatePhysicsStateInvokerHandler.as_ref().unwrap()(self.inner, bAllowDeferral) }
	}
	#[inline]
	pub fn Deactivate(&mut self){
		unsafe{ UActorComponent_DeactivateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn DestroyComponent(&mut self, bPromoteChildren: bool){
		unsafe{ UActorComponent_DestroyComponentInvokerHandler.as_ref().unwrap()(self.inner, bPromoteChildren) }
	}
	#[inline]
	pub fn DestroyPhysicsState(&mut self){
		unsafe{ UActorComponent_DestroyPhysicsStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn DetermineUCSModifiedProperties(&mut self){
		unsafe{ UActorComponent_DetermineUCSModifiedPropertiesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn DoDeferredRenderUpdates_Concurrent(&mut self){
		unsafe{ UActorComponent_DoDeferredRenderUpdates_ConcurrentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetComponentClassCanReplicate(&self) -> bool{
		unsafe{ UActorComponent_GetComponentClassCanReplicateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetComponentLevel(&self) -> *mut ULevelOpaque{
		unsafe{ UActorComponent_GetComponentLevelInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetComponentTickInterval(&self) -> f32{
		unsafe{ UActorComponent_GetComponentTickIntervalInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetFunctionCallspace(&mut self, Function: *mut UFunctionOpaque, Stack: *mut FFrameOpaque) -> i32{
		unsafe{ UActorComponent_GetFunctionCallspaceInvokerHandler.as_ref().unwrap()(self.inner, Function, Stack) }
	}
	#[inline]
	pub fn GetIsReplicated(&self) -> bool{
		unsafe{ UActorComponent_GetIsReplicatedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetMarkedForEndOfFrameUpdateState(&self) -> u32{
		unsafe{ UActorComponent_GetMarkedForEndOfFrameUpdateStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetMarkedForPreEndOfFrameSync(&self) -> u32{
		unsafe{ UActorComponent_GetMarkedForPreEndOfFrameSyncInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetOwner(&self) -> Option<AActor>{
		unsafe{ AActor::from_ptr(UActorComponent_GetOwnerInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetReadableName(&self) -> String{
		unsafe{ char_str_2_string(UActorComponent_GetReadableNameInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetScene(&self) -> *mut FSceneInterfaceOpaque{
		unsafe{ UActorComponent_GetSceneInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetUCSSerializationIndex(&self) -> i32{
		unsafe{ UActorComponent_GetUCSSerializationIndexInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetWorld(&self) -> Option<UWorld>{
		unsafe{ UWorld::from_ptr(UActorComponent_GetWorldInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn HasBeenCreated(&self) -> bool{
		unsafe{ UActorComponent_HasBeenCreatedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasBeenInitialized(&self) -> bool{
		unsafe{ UActorComponent_HasBeenInitializedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasBegunPlay(&self) -> bool{
		unsafe{ UActorComponent_HasBegunPlayInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn InitializeComponent(&mut self){
		unsafe{ UActorComponent_InitializeComponentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn InvalidateLightingCache(&mut self){
		unsafe{ UActorComponent_InvalidateLightingCacheInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn InvalidateLightingCacheDetailed(&mut self, bInvalidateBuildEnqueuedLighting: bool, bTranslationOnly: bool){
		unsafe{ UActorComponent_InvalidateLightingCacheDetailedInvokerHandler.as_ref().unwrap()(self.inner, bInvalidateBuildEnqueuedLighting, bTranslationOnly) }
	}
	#[inline]
	pub fn IsActive(&self) -> bool{
		unsafe{ UActorComponent_IsActiveInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsBeingDestroyed(&self) -> bool{
		unsafe{ UActorComponent_IsBeingDestroyedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsComponentTickEnabled(&self) -> bool{
		unsafe{ UActorComponent_IsComponentTickEnabledInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsCreatedByConstructionScript(&self) -> bool{
		unsafe{ UActorComponent_IsCreatedByConstructionScriptInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsEditableWhenInherited(&self) -> bool{
		unsafe{ UActorComponent_IsEditableWhenInheritedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsEditorOnly(&self) -> bool{
		unsafe{ UActorComponent_IsEditorOnlyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsHLODRelevant(&self) -> bool{
		unsafe{ UActorComponent_IsHLODRelevantInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsNameStableForNetworking(&self) -> bool{
		unsafe{ UActorComponent_IsNameStableForNetworkingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsNavigationRelevant(&self) -> bool{
		unsafe{ UActorComponent_IsNavigationRelevantInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsNetSimulating(&self) -> bool{
		unsafe{ UActorComponent_IsNetSimulatingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsNetStartupComponent(&self) -> bool{
		unsafe{ UActorComponent_IsNetStartupComponentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsOwnerRunningUserConstructionScript(&self) -> bool{
		unsafe{ UActorComponent_IsOwnerRunningUserConstructionScriptInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsOwnerSelected(&self) -> bool{
		unsafe{ UActorComponent_IsOwnerSelectedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPhysicsStateCreated(&self) -> bool{
		unsafe{ UActorComponent_IsPhysicsStateCreatedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsReadyForOwnerToAutoDestroy(&self) -> bool{
		unsafe{ UActorComponent_IsReadyForOwnerToAutoDestroyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsReadyForReplication(&self) -> bool{
		unsafe{ UActorComponent_IsReadyForReplicationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsRegistered(&self) -> bool{
		unsafe{ UActorComponent_IsRegisteredInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsRenderInstancesDirty(&self) -> bool{
		unsafe{ UActorComponent_IsRenderInstancesDirtyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsRenderStateCreated(&self) -> bool{
		unsafe{ UActorComponent_IsRenderStateCreatedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsRenderStateDirty(&self) -> bool{
		unsafe{ UActorComponent_IsRenderStateDirtyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsRenderTransformDirty(&self) -> bool{
		unsafe{ UActorComponent_IsRenderTransformDirtyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsReplicatedSubObjectRegistered(&self, SubObject: &UObject) -> bool{
		unsafe{ UActorComponent_IsReplicatedSubObjectRegisteredInvokerHandler.as_ref().unwrap()(self.inner, SubObject.inner()) }
	}
	#[inline]
	pub fn IsSelectedInEditor(&self) -> bool{
		unsafe{ UActorComponent_IsSelectedInEditorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsSupportedForNetworking(&self) -> bool{
		unsafe{ UActorComponent_IsSupportedForNetworkingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsUsingRegisteredSubObjectList(&self) -> bool{
		unsafe{ UActorComponent_IsUsingRegisteredSubObjectListInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsVisualizationComponent(&self) -> bool{
		unsafe{ UActorComponent_IsVisualizationComponentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn K2_DestroyComponent(&mut self, Object: &mut UObject){
		unsafe{ UActorComponent_K2_DestroyComponentInvokerHandler.as_ref().unwrap()(self.inner, Object.inner()) }
	}
	#[inline]
	pub fn MarkAsEditorOnlySubobject(&mut self){
		unsafe{ UActorComponent_MarkAsEditorOnlySubobjectInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn MarkForNeededEndOfFrameRecreate(&mut self){
		unsafe{ UActorComponent_MarkForNeededEndOfFrameRecreateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn MarkForNeededEndOfFrameUpdate(&mut self){
		unsafe{ UActorComponent_MarkForNeededEndOfFrameUpdateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn MarkRenderDynamicDataDirty(&mut self){
		unsafe{ UActorComponent_MarkRenderDynamicDataDirtyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn MarkRenderInstancesDirty(&mut self){
		unsafe{ UActorComponent_MarkRenderInstancesDirtyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn MarkRenderStateDirty(&mut self){
		unsafe{ UActorComponent_MarkRenderStateDirtyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn MarkRenderTransformDirty(&mut self){
		unsafe{ UActorComponent_MarkRenderTransformDirtyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn Modify(&mut self, bAlwaysMarkDirty: bool) -> bool{
		unsafe{ UActorComponent_ModifyInvokerHandler.as_ref().unwrap()(self.inner, bAlwaysMarkDirty) }
	}
	#[inline]
	pub fn NeedsLoadForClient(&self) -> bool{
		unsafe{ UActorComponent_NeedsLoadForClientInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn NeedsLoadForEditorGame(&self) -> bool{
		unsafe{ UActorComponent_NeedsLoadForEditorGameInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn NeedsLoadForServer(&self) -> bool{
		unsafe{ UActorComponent_NeedsLoadForServerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnActorEnableCollisionChanged(&mut self){
		unsafe{ UActorComponent_OnActorEnableCollisionChangedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnComponentCreated(&mut self){
		unsafe{ UActorComponent_OnComponentCreatedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnComponentDestroyed(&mut self, bDestroyingHierarchy: bool){
		unsafe{ UActorComponent_OnComponentDestroyedInvokerHandler.as_ref().unwrap()(self.inner, bDestroyingHierarchy) }
	}
	#[inline]
	pub fn OnCreatedFromReplication(&mut self){
		unsafe{ UActorComponent_OnCreatedFromReplicationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnDestroyedFromReplication(&mut self){
		unsafe{ UActorComponent_OnDestroyedFromReplicationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnEndOfFrameUpdateDuringTick(&mut self){
		unsafe{ UActorComponent_OnEndOfFrameUpdateDuringTickInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnPreEndOfFrameSync(&mut self){
		unsafe{ UActorComponent_OnPreEndOfFrameSyncInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnRep_IsActive(&mut self){
		unsafe{ UActorComponent_OnRep_IsActiveInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostApplyToComponent(&mut self){
		unsafe{ UActorComponent_PostApplyToComponentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostEditUndo(&mut self){
		unsafe{ UActorComponent_PostEditUndoInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostInitProperties(&mut self){
		unsafe{ UActorComponent_PostInitPropertiesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostLoad(&mut self){
		unsafe{ UActorComponent_PostLoadInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostRename(&mut self, OldOuter: &mut UObject, OldName: UName){
		unsafe{ UActorComponent_PostRenameInvokerHandler.as_ref().unwrap()(self.inner, OldOuter.inner(), OldName) }
	}
	#[inline]
	pub fn PreEditChange(&mut self, PropertyThatWillChange: *mut FPropertyOpaque){
		unsafe{ UActorComponent_PreEditChangeInvokerHandler.as_ref().unwrap()(self.inner, PropertyThatWillChange) }
	}
	#[inline]
	pub fn PreEditUndo(&mut self){
		unsafe{ UActorComponent_PreEditUndoInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ReadyForReplication(&mut self){
		unsafe{ UActorComponent_ReadyForReplicationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ReceiveAsyncPhysicsTick(&mut self, DeltaSeconds: f32, SimSeconds: f32){
		unsafe{ UActorComponent_ReceiveAsyncPhysicsTickInvokerHandler.as_ref().unwrap()(self.inner, DeltaSeconds, SimSeconds) }
	}
	#[inline]
	pub fn ReceiveBeginPlay(&mut self){
		unsafe{ UActorComponent_ReceiveBeginPlayInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ReceiveTick(&mut self, DeltaSeconds: f32){
		unsafe{ UActorComponent_ReceiveTickInvokerHandler.as_ref().unwrap()(self.inner, DeltaSeconds) }
	}
	#[inline]
	pub fn RecreatePhysicsState(&mut self){
		unsafe{ UActorComponent_RecreatePhysicsStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RecreateRenderState_Concurrent(&mut self){
		unsafe{ UActorComponent_RecreateRenderState_ConcurrentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RegisterAllComponentTickFunctions(&mut self, bRegister: bool){
		unsafe{ UActorComponent_RegisterAllComponentTickFunctionsInvokerHandler.as_ref().unwrap()(self.inner, bRegister) }
	}
	#[inline]
	pub fn RegisterComponent(&mut self){
		unsafe{ UActorComponent_RegisterComponentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RegisterComponentWithWorld(&mut self, InWorld: &mut UWorld, Context: *mut FRegisterComponentContextOpaque){
		unsafe{ UActorComponent_RegisterComponentWithWorldInvokerHandler.as_ref().unwrap()(self.inner, InWorld.inner(), Context) }
	}
	#[inline]
	pub fn RemoveReplicatedSubObject(&mut self, SubObject: &mut UObject){
		unsafe{ UActorComponent_RemoveReplicatedSubObjectInvokerHandler.as_ref().unwrap()(self.inner, SubObject.inner()) }
	}
	#[inline]
	pub fn RemoveTickPrerequisiteActor(&mut self, PrerequisiteActor: &mut AActor){
		unsafe{ UActorComponent_RemoveTickPrerequisiteActorInvokerHandler.as_ref().unwrap()(self.inner, PrerequisiteActor.inner()) }
	}
	#[inline]
	pub fn RemoveTickPrerequisiteComponent(&mut self, PrerequisiteComponent: &mut UActorComponent){
		unsafe{ UActorComponent_RemoveTickPrerequisiteComponentInvokerHandler.as_ref().unwrap()(self.inner, PrerequisiteComponent.inner()) }
	}
	#[inline]
	pub fn ReplicateSubobjects(&mut self, Channel: *mut UActorChannelOpaque, Bunch: *mut FOutBunchOpaque, RepFlags: *mut FReplicationFlagsOpaque) -> bool{
		unsafe{ UActorComponent_ReplicateSubobjectsInvokerHandler.as_ref().unwrap()(self.inner, Channel, Bunch, RepFlags) }
	}
	#[inline]
	pub fn RequiresGameThreadEndOfFrameRecreate(&self) -> bool{
		unsafe{ UActorComponent_RequiresGameThreadEndOfFrameRecreateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RequiresGameThreadEndOfFrameUpdates(&self) -> bool{
		unsafe{ UActorComponent_RequiresGameThreadEndOfFrameUpdatesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RequiresPreEndOfFrameSync(&self) -> bool{
		unsafe{ UActorComponent_RequiresPreEndOfFrameSyncInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ReregisterComponent(&mut self){
		unsafe{ UActorComponent_ReregisterComponentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SetActive(&mut self, bNewActive: bool, bReset: bool){
		unsafe{ UActorComponent_SetActiveInvokerHandler.as_ref().unwrap()(self.inner, bNewActive, bReset) }
	}
	#[inline]
	pub fn SetActiveFlag(&mut self, bNewIsActive: bool){
		unsafe{ UActorComponent_SetActiveFlagInvokerHandler.as_ref().unwrap()(self.inner, bNewIsActive) }
	}
	#[inline]
	pub fn SetAutoActivate(&mut self, bNewAutoActivate: bool){
		unsafe{ UActorComponent_SetAutoActivateInvokerHandler.as_ref().unwrap()(self.inner, bNewAutoActivate) }
	}
	#[inline]
	pub fn SetCanEverAffectNavigation(&mut self, bRelevant: bool){
		unsafe{ UActorComponent_SetCanEverAffectNavigationInvokerHandler.as_ref().unwrap()(self.inner, bRelevant) }
	}
	#[inline]
	pub fn SetComponentTickEnabled(&mut self, bEnabled: bool){
		unsafe{ UActorComponent_SetComponentTickEnabledInvokerHandler.as_ref().unwrap()(self.inner, bEnabled) }
	}
	#[inline]
	pub fn SetComponentTickEnabledAsync(&mut self, bEnabled: bool){
		unsafe{ UActorComponent_SetComponentTickEnabledAsyncInvokerHandler.as_ref().unwrap()(self.inner, bEnabled) }
	}
	#[inline]
	pub fn SetComponentTickInterval(&mut self, TickInterval: f32){
		unsafe{ UActorComponent_SetComponentTickIntervalInvokerHandler.as_ref().unwrap()(self.inner, TickInterval) }
	}
	#[inline]
	pub fn SetComponentTickIntervalAndCooldown(&mut self, TickInterval: f32){
		unsafe{ UActorComponent_SetComponentTickIntervalAndCooldownInvokerHandler.as_ref().unwrap()(self.inner, TickInterval) }
	}
	#[inline]
	pub fn SetIsNetStartupComponent(&mut self, bInIsNetStartupComponent: bool){
		unsafe{ UActorComponent_SetIsNetStartupComponentInvokerHandler.as_ref().unwrap()(self.inner, bInIsNetStartupComponent) }
	}
	#[inline]
	pub fn SetIsReplicated(&mut self, ShouldReplicate: bool){
		unsafe{ UActorComponent_SetIsReplicatedInvokerHandler.as_ref().unwrap()(self.inner, ShouldReplicate) }
	}
	#[inline]
	pub fn SetIsVisualizationComponent(&mut self, bInIsVisualizationComponent: bool){
		unsafe{ UActorComponent_SetIsVisualizationComponentInvokerHandler.as_ref().unwrap()(self.inner, bInIsVisualizationComponent) }
	}
	#[inline]
	pub fn SetNetAddressable(&mut self){
		unsafe{ UActorComponent_SetNetAddressableInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SetPackageExternal(&mut self, bExternal: bool, bShouldDirty: bool){
		unsafe{ UActorComponent_SetPackageExternalInvokerHandler.as_ref().unwrap()(self.inner, bExternal, bShouldDirty) }
	}
	#[inline]
	pub fn SetTickableWhenPaused(&mut self, bTickableWhenPaused: bool){
		unsafe{ UActorComponent_SetTickableWhenPausedInvokerHandler.as_ref().unwrap()(self.inner, bTickableWhenPaused) }
	}
	#[inline]
	pub fn SetupActorComponentTickFunction(&mut self, TickFunction: *mut FTickFunctionOpaque) -> bool{
		unsafe{ UActorComponent_SetupActorComponentTickFunctionInvokerHandler.as_ref().unwrap()(self.inner, TickFunction) }
	}
	#[inline]
	pub fn ToggleActive(&mut self){
		unsafe{ UActorComponent_ToggleActiveInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UninitializeComponent(&mut self){
		unsafe{ UActorComponent_UninitializeComponentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UnregisterComponent(&mut self){
		unsafe{ UActorComponent_UnregisterComponentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
}
pub struct UWorld{
    inner: *mut UWorldOpaque
}
impl IPtr for UWorld{
    #[inline]
    fn inner(&self) -> *mut UWorldOpaque { self.inner }
    #[inline]
    fn from_ptr(ptr: *mut c_void) -> Option<Self>{
        if_else!(
            ptr.is_null(),
            None,
            Some(Self{inner: ptr})
        )        
    }
}
impl UWorld{
    
	#[inline]
	pub fn AddController(&mut self, Controller: &mut AController){
		unsafe{ UWorld_AddControllerInvokerHandler.as_ref().unwrap()(self.inner, Controller.inner()) }
	}
	#[inline]
	pub fn AddLevel(&mut self, InLevel: *mut ULevelOpaque) -> bool{
		unsafe{ UWorld_AddLevelInvokerHandler.as_ref().unwrap()(self.inner, InLevel) }
	}
	#[inline]
	pub fn AddNetworkActor(&mut self, Actor: &mut AActor){
		unsafe{ UWorld_AddNetworkActorInvokerHandler.as_ref().unwrap()(self.inner, Actor.inner()) }
	}
	#[inline]
	pub fn AddParameterCollectionInstance(&mut self, Collection: *mut UMaterialParameterCollectionOpaque, bUpdateScene: bool){
		unsafe{ UWorld_AddParameterCollectionInstanceInvokerHandler.as_ref().unwrap()(self.inner, Collection, bUpdateScene) }
	}
	#[inline]
	pub fn AddPhysicsVolume(&mut self, Volume: *mut APhysicsVolumeOpaque){
		unsafe{ UWorld_AddPhysicsVolumeInvokerHandler.as_ref().unwrap()(self.inner, Volume) }
	}
	#[inline]
	pub fn AddPostProcessingSettings(&mut self, ViewLocation: Vector3, SceneView: *mut FSceneViewOpaque){
		unsafe{ UWorld_AddPostProcessingSettingsInvokerHandler.as_ref().unwrap()(self.inner, ViewLocation, SceneView) }
	}
	#[inline]
	pub fn AddStreamingLevel(&mut self, StreamingLevelToAdd: *mut ULevelStreamingOpaque){
		unsafe{ UWorld_AddStreamingLevelInvokerHandler.as_ref().unwrap()(self.inner, StreamingLevelToAdd) }
	}
	#[inline]
	pub fn AddUniqueStreamingLevel(&mut self, StreamingLevelToAdd: *mut ULevelStreamingOpaque){
		unsafe{ UWorld_AddUniqueStreamingLevelInvokerHandler.as_ref().unwrap()(self.inner, StreamingLevelToAdd) }
	}
	#[inline]
	pub fn AllowAudioPlayback(&self) -> bool{
		unsafe{ UWorld_AllowAudioPlaybackInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn AllowLevelLoadRequests(&self) -> bool{
		unsafe{ UWorld_AllowLevelLoadRequestsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn AreActorsInitialized(&self) -> bool{
		unsafe{ UWorld_AreActorsInitializedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn AreAlwaysLoadedLevelsLoaded(&self) -> bool{
		unsafe{ UWorld_AreAlwaysLoadedLevelsLoadedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn AsyncLoadAlwaysLoadedLevelsForSeamlessTravel(&mut self){
		unsafe{ UWorld_AsyncLoadAlwaysLoadedLevelsForSeamlessTravelInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn BeginDestroy(&mut self){
		unsafe{ UWorld_BeginDestroyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn BeginPlay(&mut self){
		unsafe{ UWorld_BeginPlayInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn BeginTearingDown(&mut self){
		unsafe{ UWorld_BeginTearingDownInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn BlockTillLevelStreamingCompleted(&mut self){
		unsafe{ UWorld_BlockTillLevelStreamingCompletedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn BroadcastLevelsChanged(&mut self){
		unsafe{ UWorld_BroadcastLevelsChangedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn BuildPIEPackagePrefix(PIEInstanceID: i32) -> String{
		unsafe{ char_str_2_string(UWorld_BuildPIEPackagePrefixInvokerHandler.as_ref().unwrap()(PIEInstanceID)) }
	}
	#[inline]
	pub fn CancelPendingMapChange(&mut self){
		unsafe{ UWorld_CancelPendingMapChangeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CleanupActors(&mut self){
		unsafe{ UWorld_CleanupActorsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CleanupWorld(&mut self, bSessionEnded: bool, bCleanupResources: bool, NewWorld: &mut UWorld){
		unsafe{ UWorld_CleanupWorldInvokerHandler.as_ref().unwrap()(self.inner, bSessionEnded, bCleanupResources, NewWorld.inner()) }
	}
	#[inline]
	pub fn ClearActorComponentEndOfFrameUpdate(&mut self, Component: &mut UActorComponent){
		unsafe{ UWorld_ClearActorComponentEndOfFrameUpdateInvokerHandler.as_ref().unwrap()(self.inner, Component.inner()) }
	}
	#[inline]
	pub fn ClearDemoNetDriver(&mut self){
		unsafe{ UWorld_ClearDemoNetDriverInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearNetDriver(&mut self, Driver: *mut UNetDriverOpaque){
		unsafe{ UWorld_ClearNetDriverInvokerHandler.as_ref().unwrap()(self.inner, Driver) }
	}
	#[inline]
	pub fn ClearStreamingLevels(&mut self){
		unsafe{ UWorld_ClearStreamingLevelsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearWorldComponents(&mut self){
		unsafe{ UWorld_ClearWorldComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CommitMapChange(&mut self){
		unsafe{ UWorld_CommitMapChangeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CommitModelSurfaces(&mut self){
		unsafe{ UWorld_CommitModelSurfacesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ConditionallyBuildStreamingData(&mut self){
		unsafe{ UWorld_ConditionallyBuildStreamingDataInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ContainsActor(&self, Actor: &mut AActor) -> bool{
		unsafe{ UWorld_ContainsActorInvokerHandler.as_ref().unwrap()(self.inner, Actor.inner()) }
	}
	#[inline]
	pub fn ContainsLevel(&self, InLevel: *mut ULevelOpaque) -> bool{
		unsafe{ UWorld_ContainsLevelInvokerHandler.as_ref().unwrap()(self.inner, InLevel) }
	}
	#[inline]
	pub fn CopyGameState(&mut self, FromGameMode: &mut AGameModeBase, FromGameState: *mut AGameStateBaseOpaque){
		unsafe{ UWorld_CopyGameStateInvokerHandler.as_ref().unwrap()(self.inner, FromGameMode.inner(), FromGameState) }
	}
	#[inline]
	pub fn CreateAISystem(&mut self) -> *mut UAISystemBaseOpaque{
		unsafe{ UWorld_CreateAISystemInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CreateFXSystem(&mut self){
		unsafe{ UWorld_CreateFXSystemInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CreatePhysicsScene(&mut self, Settings: *mut AWorldSettingsOpaque){
		unsafe{ UWorld_CreatePhysicsSceneInvokerHandler.as_ref().unwrap()(self.inner, Settings) }
	}
	#[inline]
	pub fn DeSelectLevel(&mut self, InLevel: *mut ULevelOpaque){
		unsafe{ UWorld_DeSelectLevelInvokerHandler.as_ref().unwrap()(self.inner, InLevel) }
	}
	#[inline]
	pub fn DelayStreamingVolumeUpdates(&mut self, InFrameDelay: i32){
		unsafe{ UWorld_DelayStreamingVolumeUpdatesInvokerHandler.as_ref().unwrap()(self.inner, InFrameDelay) }
	}
	#[inline]
	pub fn DestroyActor(&mut self, Actor: &mut AActor, bNetForce: bool, bShouldModifyLevel: bool) -> bool{
		unsafe{ UWorld_DestroyActorInvokerHandler.as_ref().unwrap()(self.inner, Actor.inner(), bNetForce, bShouldModifyLevel) }
	}
	#[inline]
	pub fn DestroyDemoNetDriver(&mut self){
		unsafe{ UWorld_DestroyDemoNetDriverInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn DestroySwappedPC(&mut self, Connection: *mut UNetConnectionOpaque) -> bool{
		unsafe{ UWorld_DestroySwappedPCInvokerHandler.as_ref().unwrap()(self.inner, Connection) }
	}
	#[inline]
	pub fn DestroyWorld(&mut self, bInformEngineOfWorld: bool, NewWorld: &mut UWorld){
		unsafe{ UWorld_DestroyWorldInvokerHandler.as_ref().unwrap()(self.inner, bInformEngineOfWorld, NewWorld.inner()) }
	}
	#[inline]
	pub fn DuplicateRequestedLevels(&mut self, MapName: UName){
		unsafe{ UWorld_DuplicateRequestedLevelsInvokerHandler.as_ref().unwrap()(self.inner, MapName) }
	}
	#[inline]
	pub fn EditorDestroyActor(&mut self, Actor: &mut AActor, bShouldModifyLevel: bool) -> bool{
		unsafe{ UWorld_EditorDestroyActorInvokerHandler.as_ref().unwrap()(self.inner, Actor.inner(), bShouldModifyLevel) }
	}
	#[inline]
	pub fn EnsureCollisionTreeIsBuilt(&mut self){
		unsafe{ UWorld_EnsureCollisionTreeIsBuiltInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn FindWorldInPackage(Package: *mut UPackageOpaque) -> Option<UWorld>{
		unsafe{ UWorld::from_ptr(UWorld_FindWorldInPackageInvokerHandler.as_ref().unwrap()(Package)) }
	}
	#[inline]
	pub fn FinishDestroy(&mut self){
		unsafe{ UWorld_FinishDestroyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn FinishPhysicsSim(&mut self){
		unsafe{ UWorld_FinishPhysicsSimInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn FlushDeferredParameterCollectionInstanceUpdates(&mut self){
		unsafe{ UWorld_FlushDeferredParameterCollectionInstanceUpdatesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetAISystem(&mut self) -> *mut UAISystemBaseOpaque{
		unsafe{ UWorld_GetAISystemInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetActiveLevelCollection(&self) -> *mut FLevelCollectionOpaque{
		unsafe{ UWorld_GetActiveLevelCollectionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetActiveLevelCollectionIndex(&self) -> i32{
		unsafe{ UWorld_GetActiveLevelCollectionIndexInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetActiveLightingScenario(&self) -> *mut ULevelOpaque{
		unsafe{ UWorld_GetActiveLightingScenarioInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetActorCount(&self) -> i32{
		unsafe{ UWorld_GetActorCountInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetAddressURL(&self) -> String{
		unsafe{ char_str_2_string(UWorld_GetAddressURLInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetAllowDeferredPhysicsStateCreation(&self) -> bool{
		unsafe{ UWorld_GetAllowDeferredPhysicsStateCreationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetAudioDeviceRaw(&self) -> *mut FAudioDeviceOpaque{
		unsafe{ UWorld_GetAudioDeviceRawInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetAudioTimeSeconds(&self) -> f64{
		unsafe{ UWorld_GetAudioTimeSecondsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetAvoidanceManager(&mut self) -> *mut UAvoidanceManagerOpaque{
		unsafe{ UWorld_GetAvoidanceManagerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetBlockTillLevelStreamingCompletedEpoch(&self) -> i32{
		unsafe{ UWorld_GetBlockTillLevelStreamingCompletedEpochInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetCanvasForDrawMaterialToRenderTarget(&mut self) -> *mut UCanvasOpaque{
		unsafe{ UWorld_GetCanvasForDrawMaterialToRenderTargetInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetCanvasForRenderingToTarget(&mut self) -> *mut UCanvasOpaque{
		unsafe{ UWorld_GetCanvasForRenderingToTargetInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetCurrentLevel(&self) -> *mut ULevelOpaque{
		unsafe{ UWorld_GetCurrentLevelInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetCurrentLevelPendingInvisibility(&self) -> *mut ULevelOpaque{
		unsafe{ UWorld_GetCurrentLevelPendingInvisibilityInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetCurrentLevelPendingVisibility(&self) -> *mut ULevelOpaque{
		unsafe{ UWorld_GetCurrentLevelPendingVisibilityInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetDebugDisplayName(&self) -> String{
		unsafe{ char_str_2_string(UWorld_GetDebugDisplayNameInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetDefaultBrush(&self) -> *mut ABrushOpaque{
		unsafe{ UWorld_GetDefaultBrushInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetDefaultGravityZ(&self) -> f32{
		unsafe{ UWorld_GetDefaultGravityZInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetDefaultPhysicsVolume(&self) -> *mut APhysicsVolumeOpaque{
		unsafe{ UWorld_GetDefaultPhysicsVolumeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetDeltaSeconds(&self) -> f32{
		unsafe{ UWorld_GetDeltaSecondsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetDemoNetDriver(&self) -> *mut UDemoNetDriverOpaque{
		unsafe{ UWorld_GetDemoNetDriverInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetDetailMode(&self) -> i32{
		unsafe{ UWorld_GetDetailModeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetDuplicatedWorldForPIE(InWorld: &mut UWorld, InPIEackage: *mut UPackageOpaque, PIEInstanceID: i32) -> Option<UWorld>{
		unsafe{ UWorld::from_ptr(UWorld_GetDuplicatedWorldForPIEInvokerHandler.as_ref().unwrap()(InWorld.inner(), InPIEackage, PIEInstanceID)) }
	}
	#[inline]
	pub fn GetFirstLocalPlayerFromController(&self) -> *mut ULocalPlayerOpaque{
		unsafe{ UWorld_GetFirstLocalPlayerFromControllerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetFirstPlayerController(&self) -> Option<APlayerController>{
		unsafe{ APlayerController::from_ptr(UWorld_GetFirstPlayerControllerInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetGameInstance(&self) -> *mut UGameInstanceOpaque{
		unsafe{ UWorld_GetGameInstanceInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetGameState(&self) -> *mut AGameStateBaseOpaque{
		unsafe{ UWorld_GetGameStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetGameViewport(&self) -> *mut UGameViewportClientOpaque{
		unsafe{ UWorld_GetGameViewportInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetGravityZ(&self) -> f32{
		unsafe{ UWorld_GetGravityZInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetIsInBlockTillLevelStreamingCompleted(&self) -> bool{
		unsafe{ UWorld_GetIsInBlockTillLevelStreamingCompletedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetLevel(&self, InLevelIndex: i32) -> *mut ULevelOpaque{
		unsafe{ UWorld_GetLevelInvokerHandler.as_ref().unwrap()(self.inner, InLevelIndex) }
	}
	#[inline]
	pub fn GetLevelScriptActor(&self, OwnerLevel: *mut ULevelOpaque) -> *mut ALevelScriptActorOpaque{
		unsafe{ UWorld_GetLevelScriptActorInvokerHandler.as_ref().unwrap()(self.inner, OwnerLevel) }
	}
	#[inline]
	pub fn GetLevelStreamingForPackageName(&mut self, PackageName: UName) -> *mut ULevelStreamingOpaque{
		unsafe{ UWorld_GetLevelStreamingForPackageNameInvokerHandler.as_ref().unwrap()(self.inner, PackageName) }
	}
	#[inline]
	pub fn GetLocalURL(&self) -> String{
		unsafe{ char_str_2_string(UWorld_GetLocalURLInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetMapName(&self) -> String{
		unsafe{ char_str_2_string(UWorld_GetMapNameInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetNetDriver(&self) -> *mut UNetDriverOpaque{
		unsafe{ UWorld_GetNetDriverInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetNonDefaultPhysicsVolumeCount(&self) -> i32{
		unsafe{ UWorld_GetNonDefaultPhysicsVolumeCountInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetNumControllers(&self) -> i32{
		unsafe{ UWorld_GetNumControllersInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetNumLevels(&self) -> i32{
		unsafe{ UWorld_GetNumLevelsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetNumPlayerControllers(&self) -> i32{
		unsafe{ UWorld_GetNumPlayerControllersInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetNumSelectedLevels(&self) -> i32{
		unsafe{ UWorld_GetNumSelectedLevelsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetParameterCollectionInstance(&self, Collection: *mut UMaterialParameterCollectionOpaque) -> *mut UMaterialParameterCollectionInstanceOpaque{
		unsafe{ UWorld_GetParameterCollectionInstanceInvokerHandler.as_ref().unwrap()(self.inner, Collection) }
	}
	#[inline]
	pub fn GetPhysicsScene(&self) -> *mut FPhysSceneOpaque{
		unsafe{ UWorld_GetPhysicsSceneInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetProgressDenominator(&self) -> i32{
		unsafe{ UWorld_GetProgressDenominatorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetRealTimeSeconds(&self) -> f64{
		unsafe{ UWorld_GetRealTimeSecondsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetSelectedLevel(&self, InLevelIndex: i32) -> *mut ULevelOpaque{
		unsafe{ UWorld_GetSelectedLevelInvokerHandler.as_ref().unwrap()(self.inner, InLevelIndex) }
	}
	#[inline]
	pub fn GetServerStreamingLevelsVisibility(&self) -> *mut AServerStreamingLevelsVisibilityOpaque{
		unsafe{ UWorld_GetServerStreamingLevelsVisibilityInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetShouldForceUnloadStreamingLevels(&self) -> bool{
		unsafe{ UWorld_GetShouldForceUnloadStreamingLevelsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetShouldForceVisibleStreamingLevels(&self) -> bool{
		unsafe{ UWorld_GetShouldForceVisibleStreamingLevelsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetTimeSeconds(&self) -> f64{
		unsafe{ UWorld_GetTimeSecondsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetUnpausedTimeSeconds(&self) -> f64{
		unsafe{ UWorld_GetUnpausedTimeSecondsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetWorld(&self) -> Option<UWorld>{
		unsafe{ UWorld::from_ptr(UWorld_GetWorldInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetWorldPartition(&self) -> *mut UWorldPartitionOpaque{
		unsafe{ UWorld_GetWorldPartitionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetWorldSettings(&self, bCheckStreamingPersistent: bool, bChecked: bool) -> *mut AWorldSettingsOpaque{
		unsafe{ UWorld_GetWorldSettingsInvokerHandler.as_ref().unwrap()(self.inner, bCheckStreamingPersistent, bChecked) }
	}
	#[inline]
	pub fn HandleTimelineScrubbed(&mut self){
		unsafe{ UWorld_HandleTimelineScrubbedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasBegunPlay(&self) -> bool{
		unsafe{ UWorld_HasBegunPlayInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasDefaultPhysicsVolume(&self) -> bool{
		unsafe{ UWorld_HasDefaultPhysicsVolumeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasEndOfFrameUpdates(&self) -> bool{
		unsafe{ UWorld_HasEndOfFrameUpdatesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasEverBeenInitialized(&self) -> bool{
		unsafe{ UWorld_HasEverBeenInitializedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasMarkedObjectsPendingKill(&self) -> bool{
		unsafe{ UWorld_HasMarkedObjectsPendingKillInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasStreamingLevelsToConsider(&self) -> bool{
		unsafe{ UWorld_HasStreamingLevelsToConsiderInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn InitializeSubsystems(&mut self){
		unsafe{ UWorld_InitializeSubsystemsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn InsertPostProcessVolume(&mut self, InVolume: *mut IInterface_PostProcessVolumeOpaque){
		unsafe{ UWorld_InsertPostProcessVolumeInvokerHandler.as_ref().unwrap()(self.inner, InVolume) }
	}
	#[inline]
	pub fn InvalidateAllSkyCaptures(&mut self){
		unsafe{ UWorld_InvalidateAllSkyCapturesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn InvalidateModelGeometry(&mut self, InLevel: *mut ULevelOpaque){
		unsafe{ UWorld_InvalidateModelGeometryInvokerHandler.as_ref().unwrap()(self.inner, InLevel) }
	}
	#[inline]
	pub fn InvalidateModelSurface(&mut self, bCurrentLevelOnly: bool){
		unsafe{ UWorld_InvalidateModelSurfaceInvokerHandler.as_ref().unwrap()(self.inner, bCurrentLevelOnly) }
	}
	#[inline]
	pub fn IsCameraMoveable(&self) -> bool{
		unsafe{ UWorld_IsCameraMoveableInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsEditorWorld(&self) -> bool{
		unsafe{ UWorld_IsEditorWorldInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsGameWorld(&self) -> bool{
		unsafe{ UWorld_IsGameWorldInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsInSeamlessTravel(&self) -> bool{
		unsafe{ UWorld_IsInSeamlessTravelInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsInitialized(&self) -> bool{
		unsafe{ UWorld_IsInitializedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsInstanced(&self) -> bool{
		unsafe{ UWorld_IsInstancedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsLevelSelected(&self, InLevel: *mut ULevelOpaque) -> bool{
		unsafe{ UWorld_IsLevelSelectedInvokerHandler.as_ref().unwrap()(self.inner, InLevel) }
	}
	#[inline]
	pub fn IsMapChangeReady(&self) -> bool{
		unsafe{ UWorld_IsMapChangeReadyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsMovieSceneSequenceTickHandlerBound(&self) -> bool{
		unsafe{ UWorld_IsMovieSceneSequenceTickHandlerBoundInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsNameStableForNetworking(&self) -> bool{
		unsafe{ UWorld_IsNameStableForNetworkingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsNavigationRebuilt(&self) -> bool{
		unsafe{ UWorld_IsNavigationRebuiltInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPartitionedWorld(&self) -> bool{
		unsafe{ UWorld_IsPartitionedWorldInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPartitionedWorld2(InWorld: &UWorld) -> bool{
		unsafe{ UWorld_IsPartitionedWorld2InvokerHandler.as_ref().unwrap()(InWorld.inner()) }
	}
	#[inline]
	pub fn IsPaused(&self) -> bool{
		unsafe{ UWorld_IsPausedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPlayInEditor(&self) -> bool{
		unsafe{ UWorld_IsPlayInEditorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPlayInMobilePreview(&self) -> bool{
		unsafe{ UWorld_IsPlayInMobilePreviewInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPlayInPreview(&self) -> bool{
		unsafe{ UWorld_IsPlayInPreviewInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPlayInVulkanPreview(&self) -> bool{
		unsafe{ UWorld_IsPlayInVulkanPreviewInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPlayingClientReplay(&self) -> bool{
		unsafe{ UWorld_IsPlayingClientReplayInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPlayingReplay(&self) -> bool{
		unsafe{ UWorld_IsPlayingReplayInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPreparingMapChange(&self) -> bool{
		unsafe{ UWorld_IsPreparingMapChangeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPreviewWorld(&self) -> bool{
		unsafe{ UWorld_IsPreviewWorldInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsReadyForFinishDestroy(&mut self) -> bool{
		unsafe{ UWorld_IsReadyForFinishDestroyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsRecordingClientReplay(&self) -> bool{
		unsafe{ UWorld_IsRecordingClientReplayInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsRecordingReplay(&self) -> bool{
		unsafe{ UWorld_IsRecordingReplayInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsRefreshingStreamingLevels(&self) -> bool{
		unsafe{ UWorld_IsRefreshingStreamingLevelsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsStreamingLevelBeingConsidered(&self, StreamingLevel: *mut ULevelStreamingOpaque) -> bool{
		unsafe{ UWorld_IsStreamingLevelBeingConsideredInvokerHandler.as_ref().unwrap()(self.inner, StreamingLevel) }
	}
	#[inline]
	pub fn IsVisibilityRequestPending(&self) -> bool{
		unsafe{ UWorld_IsVisibilityRequestPendingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsWorldOrExternalActorPackage(Package: *mut UPackageOpaque) -> bool{
		unsafe{ UWorld_IsWorldOrExternalActorPackageInvokerHandler.as_ref().unwrap()(Package) }
	}
	#[inline]
	pub fn IssueEditorLoadWarnings(&mut self){
		unsafe{ UWorld_IssueEditorLoadWarningsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn K2_GetWorldSettings(&mut self) -> *mut AWorldSettingsOpaque{
		unsafe{ UWorld_K2_GetWorldSettingsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn MarkActorComponentForNeededEndOfFrameUpdate(&mut self, Component: &mut UActorComponent, bForceGameThread: bool){
		unsafe{ UWorld_MarkActorComponentForNeededEndOfFrameUpdateInvokerHandler.as_ref().unwrap()(self.inner, Component.inner(), bForceGameThread) }
	}
	#[inline]
	pub fn MarkObjectsPendingKill(&mut self){
		unsafe{ UWorld_MarkObjectsPendingKillInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ModifyLevel(&self, Level: *mut ULevelOpaque){
		unsafe{ UWorld_ModifyLevelInvokerHandler.as_ref().unwrap()(self.inner, Level) }
	}
	#[inline]
	pub fn NotifyAcceptedConnection(&mut self, Connection: *mut UNetConnectionOpaque){
		unsafe{ UWorld_NotifyAcceptedConnectionInvokerHandler.as_ref().unwrap()(self.inner, Connection) }
	}
	#[inline]
	pub fn NotifyAcceptingChannel(&mut self, Channel: *mut UChannelOpaque) -> bool{
		unsafe{ UWorld_NotifyAcceptingChannelInvokerHandler.as_ref().unwrap()(self.inner, Channel) }
	}
	#[inline]
	pub fn NotifyOfBlueprintDebuggingAssociation(&mut self, Blueprint: *mut UBlueprintOpaque, DebugObject: &mut UObject){
		unsafe{ UWorld_NotifyOfBlueprintDebuggingAssociationInvokerHandler.as_ref().unwrap()(self.inner, Blueprint, DebugObject.inner()) }
	}
	#[inline]
	pub fn PopulateStreamingLevelsToConsider(&mut self){
		unsafe{ UWorld_PopulateStreamingLevelsToConsiderInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostDuplicate(&mut self, bDuplicateForPIE: bool){
		unsafe{ UWorld_PostDuplicateInvokerHandler.as_ref().unwrap()(self.inner, bDuplicateForPIE) }
	}
	#[inline]
	pub fn PostInitializeSubsystems(&mut self){
		unsafe{ UWorld_PostInitializeSubsystemsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostLoad(&mut self){
		unsafe{ UWorld_PostLoadInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PropagateLightingScenarioChange(&mut self){
		unsafe{ UWorld_PropagateLightingScenarioChangeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RefreshStreamingLevels(&mut self){
		unsafe{ UWorld_RefreshStreamingLevelsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RegisterAutoActivateCamera(&mut self, CameraActor: *mut ACameraActorOpaque, PlayerIndex: i32){
		unsafe{ UWorld_RegisterAutoActivateCameraInvokerHandler.as_ref().unwrap()(self.inner, CameraActor, PlayerIndex) }
	}
	#[inline]
	pub fn ReleasePhysicsScene(&mut self){
		unsafe{ UWorld_ReleasePhysicsSceneInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RemoveActor(&self, Actor: &mut AActor, bShouldModifyLevel: bool){
		unsafe{ UWorld_RemoveActorInvokerHandler.as_ref().unwrap()(self.inner, Actor.inner(), bShouldModifyLevel) }
	}
	#[inline]
	pub fn RemoveController(&mut self, Controller: &mut AController){
		unsafe{ UWorld_RemoveControllerInvokerHandler.as_ref().unwrap()(self.inner, Controller.inner()) }
	}
	#[inline]
	pub fn RemoveLevel(&mut self, InLevel: *mut ULevelOpaque) -> bool{
		unsafe{ UWorld_RemoveLevelInvokerHandler.as_ref().unwrap()(self.inner, InLevel) }
	}
	#[inline]
	pub fn RemoveNetworkActor(&self, Actor: &mut AActor){
		unsafe{ UWorld_RemoveNetworkActorInvokerHandler.as_ref().unwrap()(self.inner, Actor.inner()) }
	}
	#[inline]
	pub fn RemovePhysicsVolume(&mut self, Volume: *mut APhysicsVolumeOpaque){
		unsafe{ UWorld_RemovePhysicsVolumeInvokerHandler.as_ref().unwrap()(self.inner, Volume) }
	}
	#[inline]
	pub fn RemovePostProcessVolume(&mut self, InVolume: *mut IInterface_PostProcessVolumeOpaque){
		unsafe{ UWorld_RemovePostProcessVolumeInvokerHandler.as_ref().unwrap()(self.inner, InVolume) }
	}
	#[inline]
	pub fn RemoveStreamingLevel(&mut self, StreamingLevelToRemove: *mut ULevelStreamingOpaque) -> bool{
		unsafe{ UWorld_RemoveStreamingLevelInvokerHandler.as_ref().unwrap()(self.inner, StreamingLevelToRemove) }
	}
	#[inline]
	pub fn RemoveStreamingLevelAt(&mut self, IndexToRemove: i32) -> bool{
		unsafe{ UWorld_RemoveStreamingLevelAtInvokerHandler.as_ref().unwrap()(self.inner, IndexToRemove) }
	}
	#[inline]
	pub fn RenameToPIEWorld(&mut self, PIEInstanceID: i32){
		unsafe{ UWorld_RenameToPIEWorldInvokerHandler.as_ref().unwrap()(self.inner, PIEInstanceID) }
	}
	#[inline]
	pub fn RequiresHitProxies(&self) -> bool{
		unsafe{ UWorld_RequiresHitProxiesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SelectLevel(&mut self, InLevel: *mut ULevelOpaque){
		unsafe{ UWorld_SelectLevelInvokerHandler.as_ref().unwrap()(self.inner, InLevel) }
	}
	#[inline]
	pub fn SendAllEndOfFrameUpdates(&mut self){
		unsafe{ UWorld_SendAllEndOfFrameUpdatesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SetActiveLevelCollection(&mut self, LevelCollectionIndex: i32){
		unsafe{ UWorld_SetActiveLevelCollectionInvokerHandler.as_ref().unwrap()(self.inner, LevelCollectionIndex) }
	}
	#[inline]
	pub fn SetAllowDeferredPhysicsStateCreation(&mut self, bAllow: bool){
		unsafe{ UWorld_SetAllowDeferredPhysicsStateCreationInvokerHandler.as_ref().unwrap()(self.inner, bAllow) }
	}
	#[inline]
	pub fn SetCurrentLevel(&mut self, InLevel: *mut ULevelOpaque) -> bool{
		unsafe{ UWorld_SetCurrentLevelInvokerHandler.as_ref().unwrap()(self.inner, InLevel) }
	}
	#[inline]
	pub fn SetDemoNetDriver(&mut self, InDemoNetDriver: *mut UDemoNetDriverOpaque){
		unsafe{ UWorld_SetDemoNetDriverInvokerHandler.as_ref().unwrap()(self.inner, InDemoNetDriver) }
	}
	#[inline]
	pub fn SetGameInstance(&mut self, NewGI: *mut UGameInstanceOpaque){
		unsafe{ UWorld_SetGameInstanceInvokerHandler.as_ref().unwrap()(self.inner, NewGI) }
	}
	#[inline]
	pub fn SetGameState(&mut self, NewGameState: *mut AGameStateBaseOpaque){
		unsafe{ UWorld_SetGameStateInvokerHandler.as_ref().unwrap()(self.inner, NewGameState) }
	}
	#[inline]
	pub fn SetMapNeedsLightingFullyRebuilt(&mut self, InNumLightingUnbuiltObjects: i32, InNumUnbuiltReflectionCaptures: i32){
		unsafe{ UWorld_SetMapNeedsLightingFullyRebuiltInvokerHandler.as_ref().unwrap()(self.inner, InNumLightingUnbuiltObjects, InNumUnbuiltReflectionCaptures) }
	}
	#[inline]
	pub fn SetMaterialParameterCollectionInstanceNeedsUpdate(&mut self){
		unsafe{ UWorld_SetMaterialParameterCollectionInstanceNeedsUpdateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SetNavigationSystem(&mut self, InNavigationSystem: *mut UNavigationSystemBaseOpaque){
		unsafe{ UWorld_SetNavigationSystemInvokerHandler.as_ref().unwrap()(self.inner, InNavigationSystem) }
	}
	#[inline]
	pub fn SetNetDriver(&mut self, NewDriver: *mut UNetDriverOpaque){
		unsafe{ UWorld_SetNetDriverInvokerHandler.as_ref().unwrap()(self.inner, NewDriver) }
	}
	#[inline]
	pub fn SetPhysicsScene(&mut self, InScene: *mut FPhysSceneOpaque){
		unsafe{ UWorld_SetPhysicsSceneInvokerHandler.as_ref().unwrap()(self.inner, InScene) }
	}
	#[inline]
	pub fn SetSeamlessTravelMidpointPause(&mut self, bNowPaused: bool){
		unsafe{ UWorld_SetSeamlessTravelMidpointPauseInvokerHandler.as_ref().unwrap()(self.inner, bNowPaused) }
	}
	#[inline]
	pub fn SetShouldForceUnloadStreamingLevels(&mut self, bInShouldForceUnloadStreamingLevels: bool){
		unsafe{ UWorld_SetShouldForceUnloadStreamingLevelsInvokerHandler.as_ref().unwrap()(self.inner, bInShouldForceUnloadStreamingLevels) }
	}
	#[inline]
	pub fn SetShouldForceVisibleStreamingLevels(&mut self, bInShouldForceVisibleStreamingLevels: bool){
		unsafe{ UWorld_SetShouldForceVisibleStreamingLevelsInvokerHandler.as_ref().unwrap()(self.inner, bInShouldForceVisibleStreamingLevels) }
	}
	#[inline]
	pub fn SetShouldTick(&mut self, bInShouldTick: bool){
		unsafe{ UWorld_SetShouldTickInvokerHandler.as_ref().unwrap()(self.inner, bInShouldTick) }
	}
	#[inline]
	pub fn SetWorldDataLayers(&mut self, NewWorldDataLayers: *mut AWorldDataLayersOpaque){
		unsafe{ UWorld_SetWorldDataLayersInvokerHandler.as_ref().unwrap()(self.inner, NewWorldDataLayers) }
	}
	#[inline]
	pub fn SetupParameterCollectionInstances(&mut self){
		unsafe{ UWorld_SetupParameterCollectionInstancesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SetupPhysicsTickFunctions(&mut self, DeltaSeconds: f32){
		unsafe{ UWorld_SetupPhysicsTickFunctionsInvokerHandler.as_ref().unwrap()(self.inner, DeltaSeconds) }
	}
	#[inline]
	pub fn ShouldTick(&self) -> bool{
		unsafe{ UWorld_ShouldTickInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShrinkLevel(&mut self){
		unsafe{ UWorld_ShrinkLevelInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SpawnBrush(&mut self) -> *mut ABrushOpaque{
		unsafe{ UWorld_SpawnBrushInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn StartPhysicsSim(&mut self){
		unsafe{ UWorld_StartPhysicsSimInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SupportsMakingInvisibleTransactionRequests(&self) -> bool{
		unsafe{ UWorld_SupportsMakingInvisibleTransactionRequestsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SupportsMakingVisibleTransactionRequests(&self) -> bool{
		unsafe{ UWorld_SupportsMakingVisibleTransactionRequestsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn TickNetClient(&mut self, DeltaSeconds: f32){
		unsafe{ UWorld_TickNetClientInvokerHandler.as_ref().unwrap()(self.inner, DeltaSeconds) }
	}
	#[inline]
	pub fn TimeSince(&self, Time: f64) -> f64{
		unsafe{ UWorld_TimeSinceInvokerHandler.as_ref().unwrap()(self.inner, Time) }
	}
	#[inline]
	pub fn TransferBlueprintDebugReferences(&mut self, NewWorld: &mut UWorld){
		unsafe{ UWorld_TransferBlueprintDebugReferencesInvokerHandler.as_ref().unwrap()(self.inner, NewWorld.inner()) }
	}
	#[inline]
	pub fn TriggerStreamingDataRebuild(&mut self){
		unsafe{ UWorld_TriggerStreamingDataRebuildInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateActorComponentEndOfFrameUpdateState(&self, Component: &mut UActorComponent){
		unsafe{ UWorld_UpdateActorComponentEndOfFrameUpdateStateInvokerHandler.as_ref().unwrap()(self.inner, Component.inner()) }
	}
	#[inline]
	pub fn UpdateAllSkyCaptures(&mut self){
		unsafe{ UWorld_UpdateAllSkyCapturesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateConstraintActors(&mut self){
		unsafe{ UWorld_UpdateConstraintActorsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateCullDistanceVolumes(&mut self, ActorToUpdate: &mut AActor, ComponentToUpdate: &mut UPrimitiveComponent) -> bool{
		unsafe{ UWorld_UpdateCullDistanceVolumesInvokerHandler.as_ref().unwrap()(self.inner, ActorToUpdate.inner(), ComponentToUpdate.inner()) }
	}
	#[inline]
	pub fn UpdateLevelStreaming(&mut self){
		unsafe{ UWorld_UpdateLevelStreamingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateParameterCollectionInstances(&mut self, bUpdateInstanceUniformBuffers: bool, bRecreateUniformBuffer: bool){
		unsafe{ UWorld_UpdateParameterCollectionInstancesInvokerHandler.as_ref().unwrap()(self.inner, bUpdateInstanceUniformBuffers, bRecreateUniformBuffer) }
	}
	#[inline]
	pub fn UpdateStreamingLevelPriority(&mut self, StreamingLevel: *mut ULevelStreamingOpaque){
		unsafe{ UWorld_UpdateStreamingLevelPriorityInvokerHandler.as_ref().unwrap()(self.inner, StreamingLevel) }
	}
	#[inline]
	pub fn UpdateStreamingLevelShouldBeConsidered(&mut self, StreamingLevelToConsider: *mut ULevelStreamingOpaque){
		unsafe{ UWorld_UpdateStreamingLevelShouldBeConsideredInvokerHandler.as_ref().unwrap()(self.inner, StreamingLevelToConsider) }
	}
	#[inline]
	pub fn UpdateWorldComponents(&mut self, bRerunConstructionScripts: bool, bCurrentLevelOnly: bool, Context: *mut FRegisterComponentContextOpaque){
		unsafe{ UWorld_UpdateWorldComponentsInvokerHandler.as_ref().unwrap()(self.inner, bRerunConstructionScripts, bCurrentLevelOnly, Context) }
	}
	#[inline]
	pub fn UsesGameHiddenFlags(&self) -> bool{
		unsafe{ UWorld_UsesGameHiddenFlagsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn WelcomePlayer(&mut self, Connection: *mut UNetConnectionOpaque){
		unsafe{ UWorld_WelcomePlayerInvokerHandler.as_ref().unwrap()(self.inner, Connection) }
	}
}
pub struct UPrimitiveComponent{
    inner: *mut UPrimitiveComponentOpaque
}
impl IPtr for UPrimitiveComponent{
    #[inline]
    fn inner(&self) -> *mut UPrimitiveComponentOpaque { self.inner }
    #[inline]
    fn from_ptr(ptr: *mut c_void) -> Option<Self>{
        if_else!(
            ptr.is_null(),
            None,
            Some(Self{inner: ptr})
        )        
    }
}
impl UPrimitiveComponent{
    
	#[inline]
	pub fn AddAngularImpulseInDegrees(&mut self, Impulse: Vector3, BoneName: UName, bVelChange: bool){
		unsafe{ UPrimitiveComponent_AddAngularImpulseInDegreesInvokerHandler.as_ref().unwrap()(self.inner, Impulse, BoneName, bVelChange) }
	}
	#[inline]
	pub fn AddAngularImpulseInRadians(&mut self, Impulse: Vector3, BoneName: UName, bVelChange: bool){
		unsafe{ UPrimitiveComponent_AddAngularImpulseInRadiansInvokerHandler.as_ref().unwrap()(self.inner, Impulse, BoneName, bVelChange) }
	}
	#[inline]
	pub fn AddForce(&mut self, Force: Vector3, BoneName: UName, bAccelChange: bool){
		unsafe{ UPrimitiveComponent_AddForceInvokerHandler.as_ref().unwrap()(self.inner, Force, BoneName, bAccelChange) }
	}
	#[inline]
	pub fn AddForceAtLocation(&mut self, Force: Vector3, Location: Vector3, BoneName: UName){
		unsafe{ UPrimitiveComponent_AddForceAtLocationInvokerHandler.as_ref().unwrap()(self.inner, Force, Location, BoneName) }
	}
	#[inline]
	pub fn AddForceAtLocationLocal(&mut self, Force: Vector3, Location: Vector3, BoneName: UName){
		unsafe{ UPrimitiveComponent_AddForceAtLocationLocalInvokerHandler.as_ref().unwrap()(self.inner, Force, Location, BoneName) }
	}
	#[inline]
	pub fn AddImpulse(&mut self, Impulse: Vector3, BoneName: UName, bVelChange: bool){
		unsafe{ UPrimitiveComponent_AddImpulseInvokerHandler.as_ref().unwrap()(self.inner, Impulse, BoneName, bVelChange) }
	}
	#[inline]
	pub fn AddImpulseAtLocation(&mut self, Impulse: Vector3, Location: Vector3, BoneName: UName){
		unsafe{ UPrimitiveComponent_AddImpulseAtLocationInvokerHandler.as_ref().unwrap()(self.inner, Impulse, Location, BoneName) }
	}
	#[inline]
	pub fn AddTorqueInDegrees(&mut self, Torque: Vector3, BoneName: UName, bAccelChange: bool){
		unsafe{ UPrimitiveComponent_AddTorqueInDegreesInvokerHandler.as_ref().unwrap()(self.inner, Torque, BoneName, bAccelChange) }
	}
	#[inline]
	pub fn AddTorqueInRadians(&mut self, Torque: Vector3, BoneName: UName, bAccelChange: bool){
		unsafe{ UPrimitiveComponent_AddTorqueInRadiansInvokerHandler.as_ref().unwrap()(self.inner, Torque, BoneName, bAccelChange) }
	}
	#[inline]
	pub fn AddVelocityChangeImpulseAtLocation(&mut self, Impulse: Vector3, Location: Vector3, BoneName: UName){
		unsafe{ UPrimitiveComponent_AddVelocityChangeImpulseAtLocationInvokerHandler.as_ref().unwrap()(self.inner, Impulse, Location, BoneName) }
	}
	#[inline]
	pub fn BeginDestroy(&mut self){
		unsafe{ UPrimitiveComponent_BeginDestroyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn BeginPlay(&mut self){
		unsafe{ UPrimitiveComponent_BeginPlayInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CalculateMass(&mut self, BoneName: UName) -> f32{
		unsafe{ UPrimitiveComponent_CalculateMassInvokerHandler.as_ref().unwrap()(self.inner, BoneName) }
	}
	#[inline]
	pub fn CanCharacterStepUp(&self, Pawn: &mut APawn) -> bool{
		unsafe{ UPrimitiveComponent_CanCharacterStepUpInvokerHandler.as_ref().unwrap()(self.inner, Pawn.inner()) }
	}
	#[inline]
	pub fn CanEditChange(&self, InProperty: *mut FPropertyOpaque) -> bool{
		unsafe{ UPrimitiveComponent_CanEditChangeInvokerHandler.as_ref().unwrap()(self.inner, InProperty) }
	}
	#[inline]
	pub fn CanEditSimulatePhysics(&mut self) -> bool{
		unsafe{ UPrimitiveComponent_CanEditSimulatePhysicsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CanSkipGetTextureStreamingRenderAssetInfo(&self) -> bool{
		unsafe{ UPrimitiveComponent_CanSkipGetTextureStreamingRenderAssetInfoInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CheckForErrors(&mut self){
		unsafe{ UPrimitiveComponent_CheckForErrorsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearMoveIgnoreActors(&mut self){
		unsafe{ UPrimitiveComponent_ClearMoveIgnoreActorsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearMoveIgnoreComponents(&mut self){
		unsafe{ UPrimitiveComponent_ClearMoveIgnoreComponentsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ComputeHashTextureStreamingBuiltData(&self) -> u32{
		unsafe{ UPrimitiveComponent_ComputeHashTextureStreamingBuiltDataInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CreateRenderState_Concurrent(&mut self, Context: *mut FRegisterComponentContextOpaque){
		unsafe{ UPrimitiveComponent_CreateRenderState_ConcurrentInvokerHandler.as_ref().unwrap()(self.inner, Context) }
	}
	#[inline]
	pub fn CreateSceneProxy(&mut self) -> *mut FPrimitiveSceneProxyOpaque{
		unsafe{ UPrimitiveComponent_CreateSceneProxyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn DestroyRenderState_Concurrent(&mut self){
		unsafe{ UPrimitiveComponent_DestroyRenderState_ConcurrentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn DispatchMouseOverEvents(CurrentComponent: &mut UPrimitiveComponent, NewComponent: &mut UPrimitiveComponent){
		unsafe{ UPrimitiveComponent_DispatchMouseOverEventsInvokerHandler.as_ref().unwrap()(CurrentComponent.inner(), NewComponent.inner()) }
	}
	#[inline]
	pub fn FinishDestroy(&mut self){
		unsafe{ UPrimitiveComponent_FinishDestroyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetAngularDamping(&self) -> f32{
		unsafe{ UPrimitiveComponent_GetAngularDampingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetBodyInstance(&self, BoneName: UName, bGetWelded: bool, Index: i32) -> *mut FBodyInstanceOpaque{
		unsafe{ UPrimitiveComponent_GetBodyInstanceInvokerHandler.as_ref().unwrap()(self.inner, BoneName, bGetWelded, Index) }
	}
	#[inline]
	pub fn GetBodySetup(&mut self) -> *mut UBodySetupOpaque{
		unsafe{ UPrimitiveComponent_GetBodySetupInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetCenterOfMass(&self, BoneName: UName) -> Vector3{
		unsafe{ UPrimitiveComponent_GetCenterOfMassInvokerHandler.as_ref().unwrap()(self.inner, BoneName) }
	}
	#[inline]
	pub fn GetCollisionObjectType(&self) -> ECollisionChannel{
		unsafe{ UPrimitiveComponent_GetCollisionObjectTypeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetCollisionProfileName(&self) -> UName{
		unsafe{ UPrimitiveComponent_GetCollisionProfileNameInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetCollisionShape(&self, Inflation: f32) -> CollisionShape{
		unsafe{ UPrimitiveComponent_GetCollisionShapeInvokerHandler.as_ref().unwrap()(self.inner, Inflation) }
	}
	#[inline]
	pub fn GetComponentTransformFromBodyInstance(&mut self, UseBI: *mut FBodyInstanceOpaque) -> Transform{
		unsafe{ UPrimitiveComponent_GetComponentTransformFromBodyInstanceInvokerHandler.as_ref().unwrap()(self.inner, UseBI) }
	}
	#[inline]
	pub fn GetComponentVelocity(&self) -> Vector3{
		unsafe{ UPrimitiveComponent_GetComponentVelocityInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetCustomPrimitiveDataIndexForScalarParameter(&self, ParameterName: UName) -> i32{
		unsafe{ UPrimitiveComponent_GetCustomPrimitiveDataIndexForScalarParameterInvokerHandler.as_ref().unwrap()(self.inner, ParameterName) }
	}
	#[inline]
	pub fn GetCustomPrimitiveDataIndexForVectorParameter(&self, ParameterName: UName) -> i32{
		unsafe{ UPrimitiveComponent_GetCustomPrimitiveDataIndexForVectorParameterInvokerHandler.as_ref().unwrap()(self.inner, ParameterName) }
	}
	#[inline]
	pub fn GetDiffuseBoost(&self, ElementIndex: i32) -> f32{
		unsafe{ UPrimitiveComponent_GetDiffuseBoostInvokerHandler.as_ref().unwrap()(self.inner, ElementIndex) }
	}
	#[inline]
	pub fn GetEditorMaterial(&self, ElementIndex: i32) -> *mut UMaterialInterfaceOpaque{
		unsafe{ UPrimitiveComponent_GetEditorMaterialInvokerHandler.as_ref().unwrap()(self.inner, ElementIndex) }
	}
	#[inline]
	pub fn GetEmissiveBoost(&self, ElementIndex: i32) -> f32{
		unsafe{ UPrimitiveComponent_GetEmissiveBoostInvokerHandler.as_ref().unwrap()(self.inner, ElementIndex) }
	}
	#[inline]
	pub fn GetGenerateOverlapEvents(&self) -> bool{
		unsafe{ UPrimitiveComponent_GetGenerateOverlapEventsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetHiddenEditorViews(&self) -> u64{
		unsafe{ UPrimitiveComponent_GetHiddenEditorViewsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetInertiaTensor(&self, BoneName: UName) -> Vector3{
		unsafe{ UPrimitiveComponent_GetInertiaTensorInvokerHandler.as_ref().unwrap()(self.inner, BoneName) }
	}
	#[inline]
	pub fn GetLODParentPrimitive(&self) -> Option<UPrimitiveComponent>{
		unsafe{ UPrimitiveComponent::from_ptr(UPrimitiveComponent_GetLODParentPrimitiveInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetLastRenderTime(&self) -> f32{
		unsafe{ UPrimitiveComponent_GetLastRenderTimeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetLastRenderTimeOnScreen(&self) -> f32{
		unsafe{ UPrimitiveComponent_GetLastRenderTimeOnScreenInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetLevelInstanceEditingState(&self) -> bool{
		unsafe{ UPrimitiveComponent_GetLevelInstanceEditingStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetLightAndShadowMapMemoryUsage(&self, LightMapMemoryUsage: &mut i32, ShadowMapMemoryUsage: &mut i32){
		unsafe{ UPrimitiveComponent_GetLightAndShadowMapMemoryUsageInvokerHandler.as_ref().unwrap()(self.inner, LightMapMemoryUsage, ShadowMapMemoryUsage) }
	}
	#[inline]
	pub fn GetLightMapResolution(&self, Width: &mut i32, Height: &mut i32) -> bool{
		unsafe{ UPrimitiveComponent_GetLightMapResolutionInvokerHandler.as_ref().unwrap()(self.inner, Width, Height) }
	}
	#[inline]
	pub fn GetLightingAttachmentRoot(&self) -> Option<UPrimitiveComponent>{
		unsafe{ UPrimitiveComponent::from_ptr(UPrimitiveComponent_GetLightingAttachmentRootInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetLinearDamping(&self) -> f32{
		unsafe{ UPrimitiveComponent_GetLinearDampingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetMass(&self) -> f32{
		unsafe{ UPrimitiveComponent_GetMassInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetMassScale(&self, BoneName: UName) -> f32{
		unsafe{ UPrimitiveComponent_GetMassScaleInvokerHandler.as_ref().unwrap()(self.inner, BoneName) }
	}
	#[inline]
	pub fn GetMaterial(&self, ElementIndex: i32) -> *mut UMaterialInterfaceOpaque{
		unsafe{ UPrimitiveComponent_GetMaterialInvokerHandler.as_ref().unwrap()(self.inner, ElementIndex) }
	}
	#[inline]
	pub fn GetMaterialFromCollisionFaceIndex(&self, FaceIndex: i32, SectionIndex: &mut i32) -> *mut UMaterialInterfaceOpaque{
		unsafe{ UPrimitiveComponent_GetMaterialFromCollisionFaceIndexInvokerHandler.as_ref().unwrap()(self.inner, FaceIndex, SectionIndex) }
	}
	#[inline]
	pub fn GetNumMaterials(&self) -> i32{
		unsafe{ UPrimitiveComponent_GetNumMaterialsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetNumUncachedStaticLightingInteractions(&self) -> i32{
		unsafe{ UPrimitiveComponent_GetNumUncachedStaticLightingInteractionsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetPhysicsAngularVelocityInDegrees(&self, BoneName: UName) -> Vector3{
		unsafe{ UPrimitiveComponent_GetPhysicsAngularVelocityInDegreesInvokerHandler.as_ref().unwrap()(self.inner, BoneName) }
	}
	#[inline]
	pub fn GetPhysicsAngularVelocityInRadians(&self, BoneName: UName) -> Vector3{
		unsafe{ UPrimitiveComponent_GetPhysicsAngularVelocityInRadiansInvokerHandler.as_ref().unwrap()(self.inner, BoneName) }
	}
	#[inline]
	pub fn GetPhysicsLinearVelocity(&mut self, BoneName: UName) -> Vector3{
		unsafe{ UPrimitiveComponent_GetPhysicsLinearVelocityInvokerHandler.as_ref().unwrap()(self.inner, BoneName) }
	}
	#[inline]
	pub fn GetPhysicsLinearVelocityAtPoint(&mut self, Point: Vector3, BoneName: UName) -> Vector3{
		unsafe{ UPrimitiveComponent_GetPhysicsLinearVelocityAtPointInvokerHandler.as_ref().unwrap()(self.inner, Point, BoneName) }
	}
	#[inline]
	pub fn GetRayTracingGroupId(&self) -> i32{
		unsafe{ UPrimitiveComponent_GetRayTracingGroupIdInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetShadowIndirectOnly(&self) -> bool{
		unsafe{ UPrimitiveComponent_GetShadowIndirectOnlyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetStaticLightMapResolution(&self) -> i32{
		unsafe{ UPrimitiveComponent_GetStaticLightMapResolutionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetStreamingScale(&self) -> f32{
		unsafe{ UPrimitiveComponent_GetStreamingScaleInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetVirtualTextureMainPassMaxDrawDistance(&self) -> f32{
		unsafe{ UPrimitiveComponent_GetVirtualTextureMainPassMaxDrawDistanceInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasStaticLighting(&self) -> bool{
		unsafe{ UPrimitiveComponent_HasStaticLightingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasValidPhysicsState(&self) -> bool{
		unsafe{ UPrimitiveComponent_HasValidPhysicsStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasValidSettingsForStaticLighting(&self, bOverlookInvalidComponents: bool) -> bool{
		unsafe{ UPrimitiveComponent_HasValidSettingsForStaticLightingInvokerHandler.as_ref().unwrap()(self.inner, bOverlookInvalidComponents) }
	}
	#[inline]
	pub fn IgnoreActorWhenMoving(&mut self, Actor: &mut AActor, bShouldIgnore: bool){
		unsafe{ UPrimitiveComponent_IgnoreActorWhenMovingInvokerHandler.as_ref().unwrap()(self.inner, Actor.inner(), bShouldIgnore) }
	}
	#[inline]
	pub fn IgnoreBoundsForEditorFocus(&self) -> bool{
		unsafe{ UPrimitiveComponent_IgnoreBoundsForEditorFocusInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IgnoreComponentWhenMoving(&mut self, Component: &mut UPrimitiveComponent, bShouldIgnore: bool){
		unsafe{ UPrimitiveComponent_IgnoreComponentWhenMovingInvokerHandler.as_ref().unwrap()(self.inner, Component.inner(), bShouldIgnore) }
	}
	#[inline]
	pub fn InvalidateLightingCacheDetailed(&mut self, bInvalidateBuildEnqueuedLighting: bool, bTranslationOnly: bool){
		unsafe{ UPrimitiveComponent_InvalidateLightingCacheDetailedInvokerHandler.as_ref().unwrap()(self.inner, bInvalidateBuildEnqueuedLighting, bTranslationOnly) }
	}
	#[inline]
	pub fn InvalidateLumenSurfaceCache(&mut self){
		unsafe{ UPrimitiveComponent_InvalidateLumenSurfaceCacheInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsAnyRigidBodyAwake(&mut self) -> bool{
		unsafe{ UPrimitiveComponent_IsAnyRigidBodyAwakeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsAttachedToStreamingManager(&self) -> bool{
		unsafe{ UPrimitiveComponent_IsAttachedToStreamingManagerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsCompiling(&self) -> bool{
		unsafe{ UPrimitiveComponent_IsCompilingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsComponentIndividuallySelected(&self) -> bool{
		unsafe{ UPrimitiveComponent_IsComponentIndividuallySelectedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsEditorOnly(&self) -> bool{
		unsafe{ UPrimitiveComponent_IsEditorOnlyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsGravityEnabled(&self) -> bool{
		unsafe{ UPrimitiveComponent_IsGravityEnabledInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsNavigationRelevant(&self) -> bool{
		unsafe{ UPrimitiveComponent_IsNavigationRelevantInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsOverlappingActor(&self, Other: &AActor) -> bool{
		unsafe{ UPrimitiveComponent_IsOverlappingActorInvokerHandler.as_ref().unwrap()(self.inner, Other.inner()) }
	}
	#[inline]
	pub fn IsOverlappingComponent(&self, OtherComp: &UPrimitiveComponent) -> bool{
		unsafe{ UPrimitiveComponent_IsOverlappingComponentInvokerHandler.as_ref().unwrap()(self.inner, OtherComp.inner()) }
	}
	#[inline]
	pub fn IsReadyForFinishDestroy(&mut self) -> bool{
		unsafe{ UPrimitiveComponent_IsReadyForFinishDestroyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsSimulatingPhysics(&self, BoneName: UName) -> bool{
		unsafe{ UPrimitiveComponent_IsSimulatingPhysicsInvokerHandler.as_ref().unwrap()(self.inner, BoneName) }
	}
	#[inline]
	pub fn IsWelded(&self) -> bool{
		unsafe{ UPrimitiveComponent_IsWeldedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsWorldGeometry(&self) -> bool{
		unsafe{ UPrimitiveComponent_IsWorldGeometryInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsZeroExtent(&self) -> bool{
		unsafe{ UPrimitiveComponent_IsZeroExtentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn K2_IsCollisionEnabled(&self) -> bool{
		unsafe{ UPrimitiveComponent_K2_IsCollisionEnabledInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn K2_IsPhysicsCollisionEnabled(&self) -> bool{
		unsafe{ UPrimitiveComponent_K2_IsPhysicsCollisionEnabledInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn K2_IsQueryCollisionEnabled(&self) -> bool{
		unsafe{ UPrimitiveComponent_K2_IsQueryCollisionEnabledInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn NeedsLoadForClient(&self) -> bool{
		unsafe{ UPrimitiveComponent_NeedsLoadForClientInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn NeedsLoadForServer(&self) -> bool{
		unsafe{ UPrimitiveComponent_NeedsLoadForServerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnActorEnableCollisionChanged(&mut self){
		unsafe{ UPrimitiveComponent_OnActorEnableCollisionChangedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnAttachmentChanged(&mut self){
		unsafe{ UPrimitiveComponent_OnAttachmentChangedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnComponentDestroyed(&mut self, bDestroyingHierarchy: bool){
		unsafe{ UPrimitiveComponent_OnComponentDestroyedInvokerHandler.as_ref().unwrap()(self.inner, bDestroyingHierarchy) }
	}
	#[inline]
	pub fn OnCreatePhysicsState(&mut self){
		unsafe{ UPrimitiveComponent_OnCreatePhysicsStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnDestroyPhysicsState(&mut self){
		unsafe{ UPrimitiveComponent_OnDestroyPhysicsStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnRegister(&mut self){
		unsafe{ UPrimitiveComponent_OnRegisterInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnUnregister(&mut self){
		unsafe{ UPrimitiveComponent_OnUnregisterInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostDuplicate(&mut self, bDuplicateForPIE: bool){
		unsafe{ UPrimitiveComponent_PostDuplicateInvokerHandler.as_ref().unwrap()(self.inner, bDuplicateForPIE) }
	}
	#[inline]
	pub fn PostEditImport(&mut self){
		unsafe{ UPrimitiveComponent_PostEditImportInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostInitProperties(&mut self){
		unsafe{ UPrimitiveComponent_PostInitPropertiesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostLoad(&mut self){
		unsafe{ UPrimitiveComponent_PostLoadInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PushEditorVisibilityToProxy(&mut self, InVisibility: u64){
		unsafe{ UPrimitiveComponent_PushEditorVisibilityToProxyInvokerHandler.as_ref().unwrap()(self.inner, InVisibility) }
	}
	#[inline]
	pub fn PushHoveredToProxy(&mut self, bInHovered: bool){
		unsafe{ UPrimitiveComponent_PushHoveredToProxyInvokerHandler.as_ref().unwrap()(self.inner, bInHovered) }
	}
	#[inline]
	pub fn PushLevelInstanceEditingStateToProxy(&mut self, bInEditingState: bool){
		unsafe{ UPrimitiveComponent_PushLevelInstanceEditingStateToProxyInvokerHandler.as_ref().unwrap()(self.inner, bInEditingState) }
	}
	#[inline]
	pub fn PushSelectionToProxy(&mut self){
		unsafe{ UPrimitiveComponent_PushSelectionToProxyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PutAllRigidBodiesToSleep(&mut self){
		unsafe{ UPrimitiveComponent_PutAllRigidBodiesToSleepInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PutRigidBodyToSleep(&mut self, BoneName: UName){
		unsafe{ UPrimitiveComponent_PutRigidBodyToSleepInvokerHandler.as_ref().unwrap()(self.inner, BoneName) }
	}
	#[inline]
	pub fn RemapActorTextureStreamingBuiltDataToLevel(&mut self, InActorTextureBuildData: *mut UActorTextureStreamingBuildDataComponentOpaque) -> bool{
		unsafe{ UPrimitiveComponent_RemapActorTextureStreamingBuiltDataToLevelInvokerHandler.as_ref().unwrap()(self.inner, InActorTextureBuildData) }
	}
	#[inline]
	pub fn RigidBodyIsAwake(&self, BoneName: UName) -> bool{
		unsafe{ UPrimitiveComponent_RigidBodyIsAwakeInvokerHandler.as_ref().unwrap()(self.inner, BoneName) }
	}
	#[inline]
	pub fn ScaleByMomentOfInertia(&self, InputVector: Vector3, BoneName: UName) -> Vector3{
		unsafe{ UPrimitiveComponent_ScaleByMomentOfInertiaInvokerHandler.as_ref().unwrap()(self.inner, InputVector, BoneName) }
	}
	#[inline]
	pub fn SendRenderDebugPhysics(&mut self, OverrideSceneProxy: *mut FPrimitiveSceneProxyOpaque){
		unsafe{ UPrimitiveComponent_SendRenderDebugPhysicsInvokerHandler.as_ref().unwrap()(self.inner, OverrideSceneProxy) }
	}
	#[inline]
	pub fn SendRenderTransform_Concurrent(&mut self){
		unsafe{ UPrimitiveComponent_SendRenderTransform_ConcurrentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SetAllMassScale(&mut self, InMassScale: f32){
		unsafe{ UPrimitiveComponent_SetAllMassScaleInvokerHandler.as_ref().unwrap()(self.inner, InMassScale) }
	}
	#[inline]
	pub fn SetAllPhysicsLinearVelocity(&mut self, NewVel: Vector3, bAddToCurrent: bool){
		unsafe{ UPrimitiveComponent_SetAllPhysicsLinearVelocityInvokerHandler.as_ref().unwrap()(self.inner, NewVel, bAddToCurrent) }
	}
	#[inline]
	pub fn SetAllPhysicsPosition(&mut self, NewPos: Vector3){
		unsafe{ UPrimitiveComponent_SetAllPhysicsPositionInvokerHandler.as_ref().unwrap()(self.inner, NewPos) }
	}
	#[inline]
	pub fn SetAllPhysicsRotation(&mut self, NewRot: Rotator){
		unsafe{ UPrimitiveComponent_SetAllPhysicsRotationInvokerHandler.as_ref().unwrap()(self.inner, NewRot) }
	}
	#[inline]
	pub fn SetAllUseCCD(&mut self, InUseCCD: bool){
		unsafe{ UPrimitiveComponent_SetAllUseCCDInvokerHandler.as_ref().unwrap()(self.inner, InUseCCD) }
	}
	#[inline]
	pub fn SetAngularDamping(&mut self, InDamping: f32){
		unsafe{ UPrimitiveComponent_SetAngularDampingInvokerHandler.as_ref().unwrap()(self.inner, InDamping) }
	}
	#[inline]
	pub fn SetBoundsScale(&mut self, NewBoundsScale: f32){
		unsafe{ UPrimitiveComponent_SetBoundsScaleInvokerHandler.as_ref().unwrap()(self.inner, NewBoundsScale) }
	}
	#[inline]
	pub fn SetCachedMaxDrawDistance(&mut self, NewCachedMaxDrawDistance: f32){
		unsafe{ UPrimitiveComponent_SetCachedMaxDrawDistanceInvokerHandler.as_ref().unwrap()(self.inner, NewCachedMaxDrawDistance) }
	}
	#[inline]
	pub fn SetCastHiddenShadow(&mut self, NewCastHiddenShadow: bool){
		unsafe{ UPrimitiveComponent_SetCastHiddenShadowInvokerHandler.as_ref().unwrap()(self.inner, NewCastHiddenShadow) }
	}
	#[inline]
	pub fn SetCastShadow(&mut self, NewCastShadow: bool){
		unsafe{ UPrimitiveComponent_SetCastShadowInvokerHandler.as_ref().unwrap()(self.inner, NewCastShadow) }
	}
	#[inline]
	pub fn SetCenterOfMass(&mut self, CenterOfMassOffset: Vector3, BoneName: UName){
		unsafe{ UPrimitiveComponent_SetCenterOfMassInvokerHandler.as_ref().unwrap()(self.inner, CenterOfMassOffset, BoneName) }
	}
	#[inline]
	pub fn SetCollisionObjectType(&mut self, Channel: ECollisionChannel){
		unsafe{ UPrimitiveComponent_SetCollisionObjectTypeInvokerHandler.as_ref().unwrap()(self.inner, Channel) }
	}
	#[inline]
	pub fn SetCollisionProfileName(&mut self, InCollisionProfileName: UName, bUpdateOverlaps: bool){
		unsafe{ UPrimitiveComponent_SetCollisionProfileNameInvokerHandler.as_ref().unwrap()(self.inner, InCollisionProfileName, bUpdateOverlaps) }
	}
	#[inline]
	pub fn SetCullDistance(&mut self, NewCullDistance: f32){
		unsafe{ UPrimitiveComponent_SetCullDistanceInvokerHandler.as_ref().unwrap()(self.inner, NewCullDistance) }
	}
	#[inline]
	pub fn SetCustomDepthStencilValue(&mut self, Value: i32){
		unsafe{ UPrimitiveComponent_SetCustomDepthStencilValueInvokerHandler.as_ref().unwrap()(self.inner, Value) }
	}
	#[inline]
	pub fn SetCustomPrimitiveDataFloat(&mut self, DataIndex: i32, Value: f32){
		unsafe{ UPrimitiveComponent_SetCustomPrimitiveDataFloatInvokerHandler.as_ref().unwrap()(self.inner, DataIndex, Value) }
	}
	#[inline]
	pub fn SetCustomPrimitiveDataVector2(&mut self, DataIndex: i32, Value: Vector2){
		unsafe{ UPrimitiveComponent_SetCustomPrimitiveDataVector2InvokerHandler.as_ref().unwrap()(self.inner, DataIndex, Value) }
	}
	#[inline]
	pub fn SetCustomPrimitiveDataVector3(&mut self, DataIndex: i32, Value: Vector3){
		unsafe{ UPrimitiveComponent_SetCustomPrimitiveDataVector3InvokerHandler.as_ref().unwrap()(self.inner, DataIndex, Value) }
	}
	#[inline]
	pub fn SetCustomPrimitiveDataVector4(&mut self, DataIndex: i32, Value: Vector4){
		unsafe{ UPrimitiveComponent_SetCustomPrimitiveDataVector4InvokerHandler.as_ref().unwrap()(self.inner, DataIndex, Value) }
	}
	#[inline]
	pub fn SetDefaultCustomPrimitiveDataFloat(&mut self, DataIndex: i32, Value: f32){
		unsafe{ UPrimitiveComponent_SetDefaultCustomPrimitiveDataFloatInvokerHandler.as_ref().unwrap()(self.inner, DataIndex, Value) }
	}
	#[inline]
	pub fn SetDefaultCustomPrimitiveDataVector2(&mut self, DataIndex: i32, Value: Vector2){
		unsafe{ UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector2InvokerHandler.as_ref().unwrap()(self.inner, DataIndex, Value) }
	}
	#[inline]
	pub fn SetDefaultCustomPrimitiveDataVector3(&mut self, DataIndex: i32, Value: Vector3){
		unsafe{ UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector3InvokerHandler.as_ref().unwrap()(self.inner, DataIndex, Value) }
	}
	#[inline]
	pub fn SetDefaultCustomPrimitiveDataVector4(&mut self, DataIndex: i32, Value: Vector4){
		unsafe{ UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector4InvokerHandler.as_ref().unwrap()(self.inner, DataIndex, Value) }
	}
	#[inline]
	pub fn SetEmissiveLightSource(&mut self, NewEmissiveLightSource: bool){
		unsafe{ UPrimitiveComponent_SetEmissiveLightSourceInvokerHandler.as_ref().unwrap()(self.inner, NewEmissiveLightSource) }
	}
	#[inline]
	pub fn SetEnableGravity(&mut self, bGravityEnabled: bool){
		unsafe{ UPrimitiveComponent_SetEnableGravityInvokerHandler.as_ref().unwrap()(self.inner, bGravityEnabled) }
	}
	#[inline]
	pub fn SetGenerateOverlapEvents(&mut self, bInGenerateOverlapEvents: bool){
		unsafe{ UPrimitiveComponent_SetGenerateOverlapEventsInvokerHandler.as_ref().unwrap()(self.inner, bInGenerateOverlapEvents) }
	}
	#[inline]
	pub fn SetHiddenInSceneCapture(&mut self, bValue: bool){
		unsafe{ UPrimitiveComponent_SetHiddenInSceneCaptureInvokerHandler.as_ref().unwrap()(self.inner, bValue) }
	}
	#[inline]
	pub fn SetIgnoreBoundsForEditorFocus(&mut self, bIgnore: bool){
		unsafe{ UPrimitiveComponent_SetIgnoreBoundsForEditorFocusInvokerHandler.as_ref().unwrap()(self.inner, bIgnore) }
	}
	#[inline]
	pub fn SetIsBeingMovedByEditor(&mut self, bNewIsBeingMoved: bool){
		unsafe{ UPrimitiveComponent_SetIsBeingMovedByEditorInvokerHandler.as_ref().unwrap()(self.inner, bNewIsBeingMoved) }
	}
	#[inline]
	pub fn SetLODParentPrimitive(&mut self, InLODParentPrimitive: &mut UPrimitiveComponent){
		unsafe{ UPrimitiveComponent_SetLODParentPrimitiveInvokerHandler.as_ref().unwrap()(self.inner, InLODParentPrimitive.inner()) }
	}
	#[inline]
	pub fn SetLastRenderTime(&mut self, InLastRenderTime: f32){
		unsafe{ UPrimitiveComponent_SetLastRenderTimeInvokerHandler.as_ref().unwrap()(self.inner, InLastRenderTime) }
	}
	#[inline]
	pub fn SetLightingChannels(&mut self, bChannel0: bool, bChannel1: bool, bChannel2: bool){
		unsafe{ UPrimitiveComponent_SetLightingChannelsInvokerHandler.as_ref().unwrap()(self.inner, bChannel0, bChannel1, bChannel2) }
	}
	#[inline]
	pub fn SetLinearDamping(&mut self, InDamping: f32){
		unsafe{ UPrimitiveComponent_SetLinearDampingInvokerHandler.as_ref().unwrap()(self.inner, InDamping) }
	}
	#[inline]
	pub fn SetMassOverrideInKg(&mut self, BoneName: UName, MassInKg: f32, bOverrideMass: bool){
		unsafe{ UPrimitiveComponent_SetMassOverrideInKgInvokerHandler.as_ref().unwrap()(self.inner, BoneName, MassInKg, bOverrideMass) }
	}
	#[inline]
	pub fn SetMassScale(&mut self, BoneName: UName, InMassScale: f32){
		unsafe{ UPrimitiveComponent_SetMassScaleInvokerHandler.as_ref().unwrap()(self.inner, BoneName, InMassScale) }
	}
	#[inline]
	pub fn SetMaterial(&mut self, ElementIndex: i32, Material: *mut UMaterialInterfaceOpaque){
		unsafe{ UPrimitiveComponent_SetMaterialInvokerHandler.as_ref().unwrap()(self.inner, ElementIndex, Material) }
	}
	#[inline]
	pub fn SetMaterialByName(&mut self, MaterialSlotName: UName, Material: *mut UMaterialInterfaceOpaque){
		unsafe{ UPrimitiveComponent_SetMaterialByNameInvokerHandler.as_ref().unwrap()(self.inner, MaterialSlotName, Material) }
	}
	#[inline]
	pub fn SetNotifyRigidBodyCollision(&mut self, bNewNotifyRigidBodyCollision: bool){
		unsafe{ UPrimitiveComponent_SetNotifyRigidBodyCollisionInvokerHandler.as_ref().unwrap()(self.inner, bNewNotifyRigidBodyCollision) }
	}
	#[inline]
	pub fn SetOnlyOwnerSee(&mut self, bNewOnlyOwnerSee: bool){
		unsafe{ UPrimitiveComponent_SetOnlyOwnerSeeInvokerHandler.as_ref().unwrap()(self.inner, bNewOnlyOwnerSee) }
	}
	#[inline]
	pub fn SetOwnerNoSee(&mut self, bNewOwnerNoSee: bool){
		unsafe{ UPrimitiveComponent_SetOwnerNoSeeInvokerHandler.as_ref().unwrap()(self.inner, bNewOwnerNoSee) }
	}
	#[inline]
	pub fn SetPhysMaterialOverride(&mut self, NewPhysMaterial: *mut UPhysicalMaterialOpaque){
		unsafe{ UPrimitiveComponent_SetPhysMaterialOverrideInvokerHandler.as_ref().unwrap()(self.inner, NewPhysMaterial) }
	}
	#[inline]
	pub fn SetPhysicsAngularVelocityInDegrees(&mut self, NewAngVel: Vector3, bAddToCurrent: bool, BoneName: UName){
		unsafe{ UPrimitiveComponent_SetPhysicsAngularVelocityInDegreesInvokerHandler.as_ref().unwrap()(self.inner, NewAngVel, bAddToCurrent, BoneName) }
	}
	#[inline]
	pub fn SetPhysicsAngularVelocityInRadians(&mut self, NewAngVel: Vector3, bAddToCurrent: bool, BoneName: UName){
		unsafe{ UPrimitiveComponent_SetPhysicsAngularVelocityInRadiansInvokerHandler.as_ref().unwrap()(self.inner, NewAngVel, bAddToCurrent, BoneName) }
	}
	#[inline]
	pub fn SetPhysicsLinearVelocity(&mut self, NewVel: Vector3, bAddToCurrent: bool, BoneName: UName){
		unsafe{ UPrimitiveComponent_SetPhysicsLinearVelocityInvokerHandler.as_ref().unwrap()(self.inner, NewVel, bAddToCurrent, BoneName) }
	}
	#[inline]
	pub fn SetPhysicsMaxAngularVelocityInDegrees(&mut self, NewMaxAngVel: f32, bAddToCurrent: bool, BoneName: UName){
		unsafe{ UPrimitiveComponent_SetPhysicsMaxAngularVelocityInDegreesInvokerHandler.as_ref().unwrap()(self.inner, NewMaxAngVel, bAddToCurrent, BoneName) }
	}
	#[inline]
	pub fn SetPhysicsMaxAngularVelocityInRadians(&mut self, NewMaxAngVel: f32, bAddToCurrent: bool, BoneName: UName){
		unsafe{ UPrimitiveComponent_SetPhysicsMaxAngularVelocityInRadiansInvokerHandler.as_ref().unwrap()(self.inner, NewMaxAngVel, bAddToCurrent, BoneName) }
	}
	#[inline]
	pub fn SetReceivesDecals(&mut self, bNewReceivesDecals: bool){
		unsafe{ UPrimitiveComponent_SetReceivesDecalsInvokerHandler.as_ref().unwrap()(self.inner, bNewReceivesDecals) }
	}
	#[inline]
	pub fn SetRenderCustomDepth(&mut self, bValue: bool){
		unsafe{ UPrimitiveComponent_SetRenderCustomDepthInvokerHandler.as_ref().unwrap()(self.inner, bValue) }
	}
	#[inline]
	pub fn SetRenderInDepthPass(&mut self, bValue: bool){
		unsafe{ UPrimitiveComponent_SetRenderInDepthPassInvokerHandler.as_ref().unwrap()(self.inner, bValue) }
	}
	#[inline]
	pub fn SetRenderInMainPass(&mut self, bValue: bool){
		unsafe{ UPrimitiveComponent_SetRenderInMainPassInvokerHandler.as_ref().unwrap()(self.inner, bValue) }
	}
	#[inline]
	pub fn SetScalarParameterForCustomPrimitiveData(&mut self, ParameterName: UName, Value: f32){
		unsafe{ UPrimitiveComponent_SetScalarParameterForCustomPrimitiveDataInvokerHandler.as_ref().unwrap()(self.inner, ParameterName, Value) }
	}
	#[inline]
	pub fn SetScalarParameterForDefaultCustomPrimitiveData(&mut self, ParameterName: UName, Value: f32){
		unsafe{ UPrimitiveComponent_SetScalarParameterForDefaultCustomPrimitiveDataInvokerHandler.as_ref().unwrap()(self.inner, ParameterName, Value) }
	}
	#[inline]
	pub fn SetSimulatePhysics(&mut self, bSimulate: bool){
		unsafe{ UPrimitiveComponent_SetSimulatePhysicsInvokerHandler.as_ref().unwrap()(self.inner, bSimulate) }
	}
	#[inline]
	pub fn SetSingleSampleShadowFromStationaryLights(&mut self, bNewSingleSampleShadowFromStationaryLights: bool){
		unsafe{ UPrimitiveComponent_SetSingleSampleShadowFromStationaryLightsInvokerHandler.as_ref().unwrap()(self.inner, bNewSingleSampleShadowFromStationaryLights) }
	}
	#[inline]
	pub fn SetTranslucencySortDistanceOffset(&mut self, NewTranslucencySortDistanceOffset: f32){
		unsafe{ UPrimitiveComponent_SetTranslucencySortDistanceOffsetInvokerHandler.as_ref().unwrap()(self.inner, NewTranslucencySortDistanceOffset) }
	}
	#[inline]
	pub fn SetTranslucentSortPriority(&mut self, NewTranslucentSortPriority: i32){
		unsafe{ UPrimitiveComponent_SetTranslucentSortPriorityInvokerHandler.as_ref().unwrap()(self.inner, NewTranslucentSortPriority) }
	}
	#[inline]
	pub fn SetUseCCD(&mut self, InUseCCD: bool, BoneName: UName){
		unsafe{ UPrimitiveComponent_SetUseCCDInvokerHandler.as_ref().unwrap()(self.inner, InUseCCD, BoneName) }
	}
	#[inline]
	pub fn SetVectorParameterForCustomPrimitiveData(&mut self, ParameterName: UName, Value: Vector4){
		unsafe{ UPrimitiveComponent_SetVectorParameterForCustomPrimitiveDataInvokerHandler.as_ref().unwrap()(self.inner, ParameterName, Value) }
	}
	#[inline]
	pub fn SetVectorParameterForDefaultCustomPrimitiveData(&mut self, ParameterName: UName, Value: Vector4){
		unsafe{ UPrimitiveComponent_SetVectorParameterForDefaultCustomPrimitiveDataInvokerHandler.as_ref().unwrap()(self.inner, ParameterName, Value) }
	}
	#[inline]
	pub fn SetVisibleInRayTracing(&mut self, bNewVisibleInRayTracing: bool){
		unsafe{ UPrimitiveComponent_SetVisibleInRayTracingInvokerHandler.as_ref().unwrap()(self.inner, bNewVisibleInRayTracing) }
	}
	#[inline]
	pub fn SetVisibleInSceneCaptureOnly(&mut self, bValue: bool){
		unsafe{ UPrimitiveComponent_SetVisibleInSceneCaptureOnlyInvokerHandler.as_ref().unwrap()(self.inner, bValue) }
	}
	#[inline]
	pub fn ShouldComponentAddToScene(&self) -> bool{
		unsafe{ UPrimitiveComponent_ShouldComponentAddToSceneInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldCreatePhysicsState(&self) -> bool{
		unsafe{ UPrimitiveComponent_ShouldCreatePhysicsStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldGenerateAutoLOD(&self, HierarchicalLevelIndex: i32) -> bool{
		unsafe{ UPrimitiveComponent_ShouldGenerateAutoLODInvokerHandler.as_ref().unwrap()(self.inner, HierarchicalLevelIndex) }
	}
	#[inline]
	pub fn ShouldRecreateProxyOnUpdateTransform(&self) -> bool{
		unsafe{ UPrimitiveComponent_ShouldRecreateProxyOnUpdateTransformInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldRenderSelected(&self) -> bool{
		unsafe{ UPrimitiveComponent_ShouldRenderSelectedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SupportsWorldPositionOffsetVelocity(&self) -> bool{
		unsafe{ UPrimitiveComponent_SupportsWorldPositionOffsetVelocityInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SyncComponentToRBPhysics(&mut self){
		unsafe{ UPrimitiveComponent_SyncComponentToRBPhysicsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UnWeldChildren(&mut self){
		unsafe{ UPrimitiveComponent_UnWeldChildrenInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UnWeldFromParent(&mut self){
		unsafe{ UPrimitiveComponent_UnWeldFromParentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateBounds(&mut self){
		unsafe{ UPrimitiveComponent_UpdateBoundsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateCollisionProfile(&mut self){
		unsafe{ UPrimitiveComponent_UpdateCollisionProfileInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateOcclusionBoundsSlack(&mut self, NewSlack: f32){
		unsafe{ UPrimitiveComponent_UpdateOcclusionBoundsSlackInvokerHandler.as_ref().unwrap()(self.inner, NewSlack) }
	}
	#[inline]
	pub fn UpdateOverlapsImpl(&mut self, NewPendingOverlaps: *mut TOverlapArrayViewOpaque, bDoNotifies: bool, OverlapsAtEndLocation: *mut TOverlapArrayViewOpaque) -> bool{
		unsafe{ UPrimitiveComponent_UpdateOverlapsImplInvokerHandler.as_ref().unwrap()(self.inner, NewPendingOverlaps, bDoNotifies, OverlapsAtEndLocation) }
	}
	#[inline]
	pub fn UpdatePhysicsVolume(&mut self, bTriggerNotifiers: bool){
		unsafe{ UPrimitiveComponent_UpdatePhysicsVolumeInvokerHandler.as_ref().unwrap()(self.inner, bTriggerNotifiers) }
	}
	#[inline]
	pub fn UsesOnlyUnlitMaterials(&self) -> bool{
		unsafe{ UPrimitiveComponent_UsesOnlyUnlitMaterialsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn WakeAllRigidBodies(&mut self){
		unsafe{ UPrimitiveComponent_WakeAllRigidBodiesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn WakeRigidBody(&mut self, BoneName: UName){
		unsafe{ UPrimitiveComponent_WakeRigidBodyInvokerHandler.as_ref().unwrap()(self.inner, BoneName) }
	}
	#[inline]
	pub fn WasRecentlyRendered(&self, Tolerance: f32) -> bool{
		unsafe{ UPrimitiveComponent_WasRecentlyRenderedInvokerHandler.as_ref().unwrap()(self.inner, Tolerance) }
	}
	#[inline]
	pub fn WeldTo(&mut self, InParent: &mut USceneComponent, InSocketName: UName){
		unsafe{ UPrimitiveComponent_WeldToInvokerHandler.as_ref().unwrap()(self.inner, InParent.inner(), InSocketName) }
	}
	#[inline]
	pub fn WeldToImplementation(&mut self, InParent: &mut USceneComponent, ParentSocketName: UName, bWeldSimulatedChild: bool) -> bool{
		unsafe{ UPrimitiveComponent_WeldToImplementationInvokerHandler.as_ref().unwrap()(self.inner, InParent.inner(), ParentSocketName, bWeldSimulatedChild) }
	}
}
pub struct UAnimInstance{
    inner: *mut UAnimInstanceOpaque
}
impl IPtr for UAnimInstance{
    #[inline]
    fn inner(&self) -> *mut UAnimInstanceOpaque { self.inner }
    #[inline]
    fn from_ptr(ptr: *mut c_void) -> Option<Self>{
        if_else!(
            ptr.is_null(),
            None,
            Some(Self{inner: ptr})
        )        
    }
}
impl UAnimInstance{
    
	#[inline]
	pub fn AddExternalNotifyHandler(&mut self, ExternalHandlerObject: &mut UObject, NotifyEventName: UName){
		unsafe{ UAnimInstance_AddExternalNotifyHandlerInvokerHandler.as_ref().unwrap()(self.inner, ExternalHandlerObject.inner(), NotifyEventName) }
	}
	#[inline]
	pub fn BeginDestroy(&mut self){
		unsafe{ UAnimInstance_BeginDestroyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn BlueprintBeginPlay(&mut self){
		unsafe{ UAnimInstance_BlueprintBeginPlayInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn BlueprintInitializeAnimation(&mut self){
		unsafe{ UAnimInstance_BlueprintInitializeAnimationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn BlueprintLinkedAnimationLayersInitialized(&mut self){
		unsafe{ UAnimInstance_BlueprintLinkedAnimationLayersInitializedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn BlueprintPostEvaluateAnimation(&mut self){
		unsafe{ UAnimInstance_BlueprintPostEvaluateAnimationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn BlueprintThreadSafeUpdateAnimation(&mut self, DeltaTime: f32){
		unsafe{ UAnimInstance_BlueprintThreadSafeUpdateAnimationInvokerHandler.as_ref().unwrap()(self.inner, DeltaTime) }
	}
	#[inline]
	pub fn BlueprintUpdateAnimation(&mut self, DeltaTimeX: f32){
		unsafe{ UAnimInstance_BlueprintUpdateAnimationInvokerHandler.as_ref().unwrap()(self.inner, DeltaTimeX) }
	}
	#[inline]
	pub fn CanRunParallelWork(&self) -> bool{
		unsafe{ UAnimInstance_CanRunParallelWorkInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CanTransitionSignature(&self) -> bool{
		unsafe{ UAnimInstance_CanTransitionSignatureInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearAllTransitionEvents(&mut self){
		unsafe{ UAnimInstance_ClearAllTransitionEventsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearMorphTargets(&mut self){
		unsafe{ UAnimInstance_ClearMorphTargetsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearTransitionEvents(&mut self, EventName: UName){
		unsafe{ UAnimInstance_ClearTransitionEventsInvokerHandler.as_ref().unwrap()(self.inner, EventName) }
	}
	#[inline]
	pub fn CopyCurveValues(&mut self, InSourceInstance: &mut UAnimInstance){
		unsafe{ UAnimInstance_CopyCurveValuesInvokerHandler.as_ref().unwrap()(self.inner, InSourceInstance.inner()) }
	}
	#[inline]
	pub fn DispatchQueuedAnimEvents(&mut self){
		unsafe{ UAnimInstance_DispatchQueuedAnimEventsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn EndNotifyStates(&mut self){
		unsafe{ UAnimInstance_EndNotifyStatesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetActiveInstanceForMontage(&self, Montage: &UAnimMontage) -> *mut FAnimMontageInstanceOpaque{
		unsafe{ UAnimInstance_GetActiveInstanceForMontageInvokerHandler.as_ref().unwrap()(self.inner, Montage.inner()) }
	}
	#[inline]
	pub fn GetActiveMontageInstance(&self) -> *mut FAnimMontageInstanceOpaque{
		unsafe{ UAnimInstance_GetActiveMontageInstanceInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetCurrentActiveMontage(&self) -> Option<UAnimMontage>{
		unsafe{ UAnimMontage::from_ptr(UAnimInstance_GetCurrentActiveMontageInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetCurrentStateName(&mut self, MachineIndex: i32) -> UName{
		unsafe{ UAnimInstance_GetCurrentStateNameInvokerHandler.as_ref().unwrap()(self.inner, MachineIndex) }
	}
	#[inline]
	pub fn GetCurveValue(&self, CurveName: UName) -> f32{
		unsafe{ UAnimInstance_GetCurveValueInvokerHandler.as_ref().unwrap()(self.inner, CurveName) }
	}
	#[inline]
	pub fn GetCurveValue2(&self, CurveName: UName, OutValue: &mut f32) -> bool{
		unsafe{ UAnimInstance_GetCurveValue2InvokerHandler.as_ref().unwrap()(self.inner, CurveName, OutValue) }
	}
	#[inline]
	pub fn GetCurveValueWithDefault(&mut self, CurveName: UName, DefaultValue: f32, OutValue: &mut f32) -> bool{
		unsafe{ UAnimInstance_GetCurveValueWithDefaultInvokerHandler.as_ref().unwrap()(self.inner, CurveName, DefaultValue, OutValue) }
	}
	#[inline]
	pub fn GetDeltaSeconds(&self) -> f32{
		unsafe{ UAnimInstance_GetDeltaSecondsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetInstanceAssetPlayerIndex(&self, MachineName: UName, StateName: UName, InstanceName: UName) -> i32{
		unsafe{ UAnimInstance_GetInstanceAssetPlayerIndexInvokerHandler.as_ref().unwrap()(self.inner, MachineName, StateName, InstanceName) }
	}
	#[inline]
	pub fn GetInstanceAssetPlayerLength(&mut self, AssetPlayerIndex: i32) -> f32{
		unsafe{ UAnimInstance_GetInstanceAssetPlayerLengthInvokerHandler.as_ref().unwrap()(self.inner, AssetPlayerIndex) }
	}
	#[inline]
	pub fn GetInstanceAssetPlayerTime(&mut self, AssetPlayerIndex: i32) -> f32{
		unsafe{ UAnimInstance_GetInstanceAssetPlayerTimeInvokerHandler.as_ref().unwrap()(self.inner, AssetPlayerIndex) }
	}
	#[inline]
	pub fn GetInstanceAssetPlayerTimeFraction(&mut self, AssetPlayerIndex: i32) -> f32{
		unsafe{ UAnimInstance_GetInstanceAssetPlayerTimeFractionInvokerHandler.as_ref().unwrap()(self.inner, AssetPlayerIndex) }
	}
	#[inline]
	pub fn GetInstanceAssetPlayerTimeFromEnd(&mut self, AssetPlayerIndex: i32) -> f32{
		unsafe{ UAnimInstance_GetInstanceAssetPlayerTimeFromEndInvokerHandler.as_ref().unwrap()(self.inner, AssetPlayerIndex) }
	}
	#[inline]
	pub fn GetInstanceAssetPlayerTimeFromEndFraction(&mut self, AssetPlayerIndex: i32) -> f32{
		unsafe{ UAnimInstance_GetInstanceAssetPlayerTimeFromEndFractionInvokerHandler.as_ref().unwrap()(self.inner, AssetPlayerIndex) }
	}
	#[inline]
	pub fn GetInstanceCurrentStateElapsedTime(&mut self, MachineIndex: i32) -> f32{
		unsafe{ UAnimInstance_GetInstanceCurrentStateElapsedTimeInvokerHandler.as_ref().unwrap()(self.inner, MachineIndex) }
	}
	#[inline]
	pub fn GetInstanceMachineWeight(&mut self, MachineIndex: i32) -> f32{
		unsafe{ UAnimInstance_GetInstanceMachineWeightInvokerHandler.as_ref().unwrap()(self.inner, MachineIndex) }
	}
	#[inline]
	pub fn GetInstanceStateWeight(&mut self, MachineIndex: i32, StateIndex: i32) -> f32{
		unsafe{ UAnimInstance_GetInstanceStateWeightInvokerHandler.as_ref().unwrap()(self.inner, MachineIndex, StateIndex) }
	}
	#[inline]
	pub fn GetInstanceTransitionCrossfadeDuration(&mut self, MachineIndex: i32, TransitionIndex: i32) -> f32{
		unsafe{ UAnimInstance_GetInstanceTransitionCrossfadeDurationInvokerHandler.as_ref().unwrap()(self.inner, MachineIndex, TransitionIndex) }
	}
	#[inline]
	pub fn GetInstanceTransitionTimeElapsed(&mut self, MachineIndex: i32, TransitionIndex: i32) -> f32{
		unsafe{ UAnimInstance_GetInstanceTransitionTimeElapsedInvokerHandler.as_ref().unwrap()(self.inner, MachineIndex, TransitionIndex) }
	}
	#[inline]
	pub fn GetInstanceTransitionTimeElapsedFraction(&mut self, MachineIndex: i32, TransitionIndex: i32) -> f32{
		unsafe{ UAnimInstance_GetInstanceTransitionTimeElapsedFractionInvokerHandler.as_ref().unwrap()(self.inner, MachineIndex, TransitionIndex) }
	}
	#[inline]
	pub fn GetLODLevel(&self) -> i32{
		unsafe{ UAnimInstance_GetLODLevelInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetLinkedAnimGraphInstanceByTag(&self, InTag: UName) -> Option<UAnimInstance>{
		unsafe{ UAnimInstance::from_ptr(UAnimInstance_GetLinkedAnimGraphInstanceByTagInvokerHandler.as_ref().unwrap()(self.inner, InTag)) }
	}
	#[inline]
	pub fn GetLinkedAnimLayerInstanceByGroup(&self, InGroup: UName) -> Option<UAnimInstance>{
		unsafe{ UAnimInstance::from_ptr(UAnimInstance_GetLinkedAnimLayerInstanceByGroupInvokerHandler.as_ref().unwrap()(self.inner, InGroup)) }
	}
	#[inline]
	pub fn GetLinkedInputPoseNode(&mut self, InSubInput: UName, InGraph: UName) -> *mut FAnimNode_LinkedInputPoseOpaque{
		unsafe{ UAnimInstance_GetLinkedInputPoseNodeInvokerHandler.as_ref().unwrap()(self.inner, InSubInput, InGraph) }
	}
	#[inline]
	pub fn GetMachineDescription(&mut self, AnimBlueprintClass: *mut IAnimClassInterfaceOpaque, MachineInstance: *mut FAnimNode_StateMachineOpaque) -> *mut FBakedAnimationStateMachineOpaque{
		unsafe{ UAnimInstance_GetMachineDescriptionInvokerHandler.as_ref().unwrap()(self.inner, AnimBlueprintClass, MachineInstance) }
	}
	#[inline]
	pub fn GetMontageInstanceForID(&mut self, MontageInstanceID: i32) -> *mut FAnimMontageInstanceOpaque{
		unsafe{ UAnimInstance_GetMontageInstanceForIDInvokerHandler.as_ref().unwrap()(self.inner, MontageInstanceID) }
	}
	#[inline]
	pub fn GetOwningActor(&self) -> Option<AActor>{
		unsafe{ AActor::from_ptr(UAnimInstance_GetOwningActorInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetOwningComponent(&self) -> Option<USkeletalMeshComponent>{
		unsafe{ USkeletalMeshComponent::from_ptr(UAnimInstance_GetOwningComponentInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetPoseSnapshot(&self, SnapshotName: UName) -> *mut FPoseSnapshotOpaque{
		unsafe{ UAnimInstance_GetPoseSnapshotInvokerHandler.as_ref().unwrap()(self.inner, SnapshotName) }
	}
	#[inline]
	pub fn GetPropagateNotifiesToLinkedInstances(&self) -> bool{
		unsafe{ UAnimInstance_GetPropagateNotifiesToLinkedInstancesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetReceiveNotifiesFromLinkedInstances(&self) -> bool{
		unsafe{ UAnimInstance_GetReceiveNotifiesFromLinkedInstancesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetRelevantAnimLength(&mut self, MachineIndex: i32, StateIndex: i32) -> f32{
		unsafe{ UAnimInstance_GetRelevantAnimLengthInvokerHandler.as_ref().unwrap()(self.inner, MachineIndex, StateIndex) }
	}
	#[inline]
	pub fn GetRelevantAnimTime(&mut self, MachineIndex: i32, StateIndex: i32) -> f32{
		unsafe{ UAnimInstance_GetRelevantAnimTimeInvokerHandler.as_ref().unwrap()(self.inner, MachineIndex, StateIndex) }
	}
	#[inline]
	pub fn GetRelevantAnimTimeFraction(&mut self, MachineIndex: i32, StateIndex: i32) -> f32{
		unsafe{ UAnimInstance_GetRelevantAnimTimeFractionInvokerHandler.as_ref().unwrap()(self.inner, MachineIndex, StateIndex) }
	}
	#[inline]
	pub fn GetRelevantAnimTimeRemaining(&mut self, MachineIndex: i32, StateIndex: i32) -> f32{
		unsafe{ UAnimInstance_GetRelevantAnimTimeRemainingInvokerHandler.as_ref().unwrap()(self.inner, MachineIndex, StateIndex) }
	}
	#[inline]
	pub fn GetRelevantAnimTimeRemainingFraction(&mut self, MachineIndex: i32, StateIndex: i32) -> f32{
		unsafe{ UAnimInstance_GetRelevantAnimTimeRemainingFractionInvokerHandler.as_ref().unwrap()(self.inner, MachineIndex, StateIndex) }
	}
	#[inline]
	pub fn GetRootMotionMontageInstance(&self) -> *mut FAnimMontageInstanceOpaque{
		unsafe{ UAnimInstance_GetRootMotionMontageInstanceInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetSkelMeshComponent(&self) -> Option<USkeletalMeshComponent>{
		unsafe{ USkeletalMeshComponent::from_ptr(UAnimInstance_GetSkelMeshComponentInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetStateMachineIndex(&self, MachineName: UName) -> i32{
		unsafe{ UAnimInstance_GetStateMachineIndexInvokerHandler.as_ref().unwrap()(self.inner, MachineName) }
	}
	#[inline]
	pub fn GetStateMachineInstance(&self, MachineIndex: i32) -> *mut FAnimNode_StateMachineOpaque{
		unsafe{ UAnimInstance_GetStateMachineInstanceInvokerHandler.as_ref().unwrap()(self.inner, MachineIndex) }
	}
	#[inline]
	pub fn GetStateMachineInstanceDesc(&self, MachineName: UName) -> *mut FBakedAnimationStateMachineOpaque{
		unsafe{ UAnimInstance_GetStateMachineInstanceDescInvokerHandler.as_ref().unwrap()(self.inner, MachineName) }
	}
	#[inline]
	pub fn GetStateMachineInstanceFromName(&self, MachineName: UName) -> *mut FAnimNode_StateMachineOpaque{
		unsafe{ UAnimInstance_GetStateMachineInstanceFromNameInvokerHandler.as_ref().unwrap()(self.inner, MachineName) }
	}
	#[inline]
	pub fn GetSyncGroupIndexFromName(&self, SyncGroupName: UName) -> i32{
		unsafe{ UAnimInstance_GetSyncGroupIndexFromNameInvokerHandler.as_ref().unwrap()(self.inner, SyncGroupName) }
	}
	#[inline]
	pub fn GetTimeToClosestMarker(&self, SyncGroup: UName, MarkerName: UName, OutMarkerTime: &mut f32) -> bool{
		unsafe{ UAnimInstance_GetTimeToClosestMarkerInvokerHandler.as_ref().unwrap()(self.inner, SyncGroup, MarkerName, OutMarkerTime) }
	}
	#[inline]
	pub fn GetWorld(&self) -> Option<UWorld>{
		unsafe{ UWorld::from_ptr(UAnimInstance_GetWorldInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn HasActiveCurves(&self) -> bool{
		unsafe{ UAnimInstance_HasActiveCurvesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasMarkerBeenHitThisFrame(&self, SyncGroup: UName, MarkerName: UName) -> bool{
		unsafe{ UAnimInstance_HasMarkerBeenHitThisFrameInvokerHandler.as_ref().unwrap()(self.inner, SyncGroup, MarkerName) }
	}
	#[inline]
	pub fn HasMorphTargetCurves(&self) -> bool{
		unsafe{ UAnimInstance_HasMorphTargetCurvesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn InitializeAnimation(&mut self, bInDeferRootNodeInitialization: bool){
		unsafe{ UAnimInstance_InitializeAnimationInvokerHandler.as_ref().unwrap()(self.inner, bInDeferRootNodeInitialization) }
	}
	#[inline]
	pub fn InitializeGroupedLayers(&mut self, bInDeferSubGraphInitialization: bool){
		unsafe{ UAnimInstance_InitializeGroupedLayersInvokerHandler.as_ref().unwrap()(self.inner, bInDeferSubGraphInitialization) }
	}
	#[inline]
	pub fn IsAnyMontagePlaying(&self) -> bool{
		unsafe{ UAnimInstance_IsAnyMontagePlayingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsBeingDebugged(&self) -> bool{
		unsafe{ UAnimInstance_IsBeingDebuggedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPlayingSlotAnimation(&self, Asset: *mut UAnimSequenceBaseOpaque, SlotNodeName: UName) -> bool{
		unsafe{ UAnimInstance_IsPlayingSlotAnimationInvokerHandler.as_ref().unwrap()(self.inner, Asset, SlotNodeName) }
	}
	#[inline]
	pub fn IsPostUpdatingAnimation(&self) -> bool{
		unsafe{ UAnimInstance_IsPostUpdatingAnimationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsRunningParallelEvaluation(&self) -> bool{
		unsafe{ UAnimInstance_IsRunningParallelEvaluationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsSyncGroupBetweenMarkers(&self, InSyncGroupName: UName, PreviousMarker: UName, NextMarker: UName, bRespectMarkerOrder: bool) -> bool{
		unsafe{ UAnimInstance_IsSyncGroupBetweenMarkersInvokerHandler.as_ref().unwrap()(self.inner, InSyncGroupName, PreviousMarker, NextMarker, bRespectMarkerOrder) }
	}
	#[inline]
	pub fn IsUpdatingAnimation(&self) -> bool{
		unsafe{ UAnimInstance_IsUpdatingAnimationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsUsingMainInstanceMontageEvaluationData(&self) -> bool{
		unsafe{ UAnimInstance_IsUsingMainInstanceMontageEvaluationDataInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn LockAIResources(&mut self, bLockMovement: bool, LockAILogic: bool){
		unsafe{ UAnimInstance_LockAIResourcesInvokerHandler.as_ref().unwrap()(self.inner, bLockMovement, LockAILogic) }
	}
	#[inline]
	pub fn MontageSync_Follow(&mut self, MontageFollower: &UAnimMontage, OtherAnimInstance: &UAnimInstance, MontageLeader: &UAnimMontage){
		unsafe{ UAnimInstance_MontageSync_FollowInvokerHandler.as_ref().unwrap()(self.inner, MontageFollower.inner(), OtherAnimInstance.inner(), MontageLeader.inner()) }
	}
	#[inline]
	pub fn MontageSync_StopFollowing(&mut self, MontageFollower: &UAnimMontage){
		unsafe{ UAnimInstance_MontageSync_StopFollowingInvokerHandler.as_ref().unwrap()(self.inner, MontageFollower.inner()) }
	}
	#[inline]
	pub fn Montage_GetBlendTime(&self, Montage: &UAnimMontage) -> f32{
		unsafe{ UAnimInstance_Montage_GetBlendTimeInvokerHandler.as_ref().unwrap()(self.inner, Montage.inner()) }
	}
	#[inline]
	pub fn Montage_GetBlendingOutDelegate(&mut self, Montage: &mut UAnimMontage) -> *mut FOnMontageBlendingOutStartedOpaque{
		unsafe{ UAnimInstance_Montage_GetBlendingOutDelegateInvokerHandler.as_ref().unwrap()(self.inner, Montage.inner()) }
	}
	#[inline]
	pub fn Montage_GetCurrentSection(&self, Montage: &UAnimMontage) -> UName{
		unsafe{ UAnimInstance_Montage_GetCurrentSectionInvokerHandler.as_ref().unwrap()(self.inner, Montage.inner()) }
	}
	#[inline]
	pub fn Montage_GetIsStopped(&self, Montage: &UAnimMontage) -> bool{
		unsafe{ UAnimInstance_Montage_GetIsStoppedInvokerHandler.as_ref().unwrap()(self.inner, Montage.inner()) }
	}
	#[inline]
	pub fn Montage_GetPlayRate(&self, Montage: &UAnimMontage) -> f32{
		unsafe{ UAnimInstance_Montage_GetPlayRateInvokerHandler.as_ref().unwrap()(self.inner, Montage.inner()) }
	}
	#[inline]
	pub fn Montage_GetPosition(&self, Montage: &UAnimMontage) -> f32{
		unsafe{ UAnimInstance_Montage_GetPositionInvokerHandler.as_ref().unwrap()(self.inner, Montage.inner()) }
	}
	#[inline]
	pub fn Montage_IsActive(&self, Montage: &UAnimMontage) -> bool{
		unsafe{ UAnimInstance_Montage_IsActiveInvokerHandler.as_ref().unwrap()(self.inner, Montage.inner()) }
	}
	#[inline]
	pub fn Montage_IsPlaying(&self, Montage: &UAnimMontage) -> bool{
		unsafe{ UAnimInstance_Montage_IsPlayingInvokerHandler.as_ref().unwrap()(self.inner, Montage.inner()) }
	}
	#[inline]
	pub fn Montage_JumpToSection(&mut self, SectionName: UName, Montage: &UAnimMontage){
		unsafe{ UAnimInstance_Montage_JumpToSectionInvokerHandler.as_ref().unwrap()(self.inner, SectionName, Montage.inner()) }
	}
	#[inline]
	pub fn Montage_JumpToSectionsEnd(&mut self, SectionName: UName, Montage: &UAnimMontage){
		unsafe{ UAnimInstance_Montage_JumpToSectionsEndInvokerHandler.as_ref().unwrap()(self.inner, SectionName, Montage.inner()) }
	}
	#[inline]
	pub fn Montage_Pause(&mut self, Montage: &UAnimMontage){
		unsafe{ UAnimInstance_Montage_PauseInvokerHandler.as_ref().unwrap()(self.inner, Montage.inner()) }
	}
	#[inline]
	pub fn Montage_Play(&mut self, MontageToPlay: &mut UAnimMontage, InPlayRate: f32, ReturnValueType: EMontagePlayReturnType, InTimeToStartMontageAt: f32, bStopAllMontages: bool) -> f32{
		unsafe{ UAnimInstance_Montage_PlayInvokerHandler.as_ref().unwrap()(self.inner, MontageToPlay.inner(), InPlayRate, ReturnValueType, InTimeToStartMontageAt, bStopAllMontages) }
	}
	#[inline]
	pub fn Montage_Resume(&mut self, Montage: &UAnimMontage){
		unsafe{ UAnimInstance_Montage_ResumeInvokerHandler.as_ref().unwrap()(self.inner, Montage.inner()) }
	}
	#[inline]
	pub fn Montage_SetNextSection(&mut self, SectionNameToChange: UName, NextSection: UName, Montage: &UAnimMontage){
		unsafe{ UAnimInstance_Montage_SetNextSectionInvokerHandler.as_ref().unwrap()(self.inner, SectionNameToChange, NextSection, Montage.inner()) }
	}
	#[inline]
	pub fn Montage_SetPlayRate(&mut self, Montage: &UAnimMontage, NewPlayRate: f32){
		unsafe{ UAnimInstance_Montage_SetPlayRateInvokerHandler.as_ref().unwrap()(self.inner, Montage.inner(), NewPlayRate) }
	}
	#[inline]
	pub fn Montage_SetPosition(&mut self, Montage: &UAnimMontage, NewPosition: f32){
		unsafe{ UAnimInstance_Montage_SetPositionInvokerHandler.as_ref().unwrap()(self.inner, Montage.inner(), NewPosition) }
	}
	#[inline]
	pub fn Montage_Stop(&mut self, InBlendOutTime: f32, Montage: &UAnimMontage){
		unsafe{ UAnimInstance_Montage_StopInvokerHandler.as_ref().unwrap()(self.inner, InBlendOutTime, Montage.inner()) }
	}
	#[inline]
	pub fn Montage_StopGroupByName(&mut self, InBlendOutTime: f32, GroupName: UName){
		unsafe{ UAnimInstance_Montage_StopGroupByNameInvokerHandler.as_ref().unwrap()(self.inner, InBlendOutTime, GroupName) }
	}
	#[inline]
	pub fn NativeBeginPlay(&mut self){
		unsafe{ UAnimInstance_NativeBeginPlayInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn NativeInitializeAnimation(&mut self){
		unsafe{ UAnimInstance_NativeInitializeAnimationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn NativePostEvaluateAnimation(&mut self){
		unsafe{ UAnimInstance_NativePostEvaluateAnimationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn NativeThreadSafeUpdateAnimation(&mut self, DeltaSeconds: f32){
		unsafe{ UAnimInstance_NativeThreadSafeUpdateAnimationInvokerHandler.as_ref().unwrap()(self.inner, DeltaSeconds) }
	}
	#[inline]
	pub fn NativeUninitializeAnimation(&mut self){
		unsafe{ UAnimInstance_NativeUninitializeAnimationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn NativeUpdateAnimation(&mut self, DeltaSeconds: f32){
		unsafe{ UAnimInstance_NativeUpdateAnimationInvokerHandler.as_ref().unwrap()(self.inner, DeltaSeconds) }
	}
	#[inline]
	pub fn NeedsUpdate(&self) -> bool{
		unsafe{ UAnimInstance_NeedsUpdateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnUROSkipTickAnimation(&mut self){
		unsafe{ UAnimInstance_OnUROSkipTickAnimationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PCV_ShouldNotifyAboutNodesNotUsingFastPath(&self) -> bool{
		unsafe{ UAnimInstance_PCV_ShouldNotifyAboutNodesNotUsingFastPathInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PCV_ShouldWarnAboutNodesNotUsingFastPath(&self) -> bool{
		unsafe{ UAnimInstance_PCV_ShouldWarnAboutNodesNotUsingFastPathInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ParallelCanEvaluate(&self, InSkeletalMesh: *mut USkeletalMeshOpaque) -> bool{
		unsafe{ UAnimInstance_ParallelCanEvaluateInvokerHandler.as_ref().unwrap()(self.inner, InSkeletalMesh) }
	}
	#[inline]
	pub fn ParallelUpdateAnimation(&mut self){
		unsafe{ UAnimInstance_ParallelUpdateAnimationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PlaySlotAnimationAsDynamicMontage(&mut self, Asset: *mut UAnimSequenceBaseOpaque, SlotNodeName: UName, BlendInTime: f32, BlendOutTime: f32, InPlayRate: f32, LoopCount: i32, BlendOutTriggerTime: f32, InTimeToStartMontageAt: f32) -> Option<UAnimMontage>{
		unsafe{ UAnimMontage::from_ptr(UAnimInstance_PlaySlotAnimationAsDynamicMontageInvokerHandler.as_ref().unwrap()(self.inner, Asset, SlotNodeName, BlendInTime, BlendOutTime, InPlayRate, LoopCount, BlendOutTriggerTime, InTimeToStartMontageAt)) }
	}
	#[inline]
	pub fn PostEvaluateAnimation(&mut self){
		unsafe{ UAnimInstance_PostEvaluateAnimationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostInitProperties(&mut self){
		unsafe{ UAnimInstance_PostInitPropertiesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostUpdateAnimation(&mut self){
		unsafe{ UAnimInstance_PostUpdateAnimationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PreEvaluateAnimation(&mut self){
		unsafe{ UAnimInstance_PreEvaluateAnimationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PreUpdateLinkedInstances(&mut self, DeltaSeconds: f32){
		unsafe{ UAnimInstance_PreUpdateLinkedInstancesInvokerHandler.as_ref().unwrap()(self.inner, DeltaSeconds) }
	}
	#[inline]
	pub fn QueryAndMarkTransitionEvent(&mut self, MachineIndex: i32, TransitionIndex: i32, EventName: UName) -> bool{
		unsafe{ UAnimInstance_QueryAndMarkTransitionEventInvokerHandler.as_ref().unwrap()(self.inner, MachineIndex, TransitionIndex, EventName) }
	}
	#[inline]
	pub fn QueryTransitionEvent(&mut self, MachineIndex: i32, TransitionIndex: i32, EventName: UName) -> bool{
		unsafe{ UAnimInstance_QueryTransitionEventInvokerHandler.as_ref().unwrap()(self.inner, MachineIndex, TransitionIndex, EventName) }
	}
	#[inline]
	pub fn RecalcRequiredBones(&mut self){
		unsafe{ UAnimInstance_RecalcRequiredBonesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RecordMachineWeight(&mut self, InMachineClassIndex: i32, InMachineWeight: f32){
		unsafe{ UAnimInstance_RecordMachineWeightInvokerHandler.as_ref().unwrap()(self.inner, InMachineClassIndex, InMachineWeight) }
	}
	#[inline]
	pub fn RecordStateWeight(&mut self, InMachineClassIndex: i32, InStateIndex: i32, InStateWeight: f32, InElapsedTime: f32){
		unsafe{ UAnimInstance_RecordStateWeightInvokerHandler.as_ref().unwrap()(self.inner, InMachineClassIndex, InStateIndex, InStateWeight, InElapsedTime) }
	}
	#[inline]
	pub fn RefreshCurves(&mut self, Component: &mut USkeletalMeshComponent){
		unsafe{ UAnimInstance_RefreshCurvesInvokerHandler.as_ref().unwrap()(self.inner, Component.inner()) }
	}
	#[inline]
	pub fn RemoveExternalNotifyHandler(&mut self, ExternalHandlerObject: &mut UObject, NotifyEventName: UName){
		unsafe{ UAnimInstance_RemoveExternalNotifyHandlerInvokerHandler.as_ref().unwrap()(self.inner, ExternalHandlerObject.inner(), NotifyEventName) }
	}
	#[inline]
	pub fn RemovePoseSnapshot(&mut self, SnapshotName: UName){
		unsafe{ UAnimInstance_RemovePoseSnapshotInvokerHandler.as_ref().unwrap()(self.inner, SnapshotName) }
	}
	#[inline]
	pub fn RequestMontageInertialization(&mut self, Montage: &UAnimMontage, Duration: f32, BlendProfile: *mut UBlendProfileOpaque){
		unsafe{ UAnimInstance_RequestMontageInertializationInvokerHandler.as_ref().unwrap()(self.inner, Montage.inner(), Duration, BlendProfile) }
	}
	#[inline]
	pub fn RequestSlotGroupInertialization(&mut self, InSlotGroupName: UName, Duration: f32, BlendProfile: *mut UBlendProfileOpaque){
		unsafe{ UAnimInstance_RequestSlotGroupInertializationInvokerHandler.as_ref().unwrap()(self.inner, InSlotGroupName, Duration, BlendProfile) }
	}
	#[inline]
	pub fn SavePoseSnapshot(&mut self, SnapshotName: UName){
		unsafe{ UAnimInstance_SavePoseSnapshotInvokerHandler.as_ref().unwrap()(self.inner, SnapshotName) }
	}
	#[inline]
	pub fn SetMorphTarget(&mut self, MorphTargetName: UName, Value: f32){
		unsafe{ UAnimInstance_SetMorphTargetInvokerHandler.as_ref().unwrap()(self.inner, MorphTargetName, Value) }
	}
	#[inline]
	pub fn SetPropagateNotifiesToLinkedInstances(&mut self, bSet: bool){
		unsafe{ UAnimInstance_SetPropagateNotifiesToLinkedInstancesInvokerHandler.as_ref().unwrap()(self.inner, bSet) }
	}
	#[inline]
	pub fn SetReceiveNotifiesFromLinkedInstances(&mut self, bSet: bool){
		unsafe{ UAnimInstance_SetReceiveNotifiesFromLinkedInstancesInvokerHandler.as_ref().unwrap()(self.inner, bSet) }
	}
	#[inline]
	pub fn SetUseMainInstanceMontageEvaluationData(&mut self, bSet: bool){
		unsafe{ UAnimInstance_SetUseMainInstanceMontageEvaluationDataInvokerHandler.as_ref().unwrap()(self.inner, bSet) }
	}
	#[inline]
	pub fn ShouldExtractRootMotion(&self) -> bool{
		unsafe{ UAnimInstance_ShouldExtractRootMotionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldTriggerAnimNotifyState(&self, AnimNotifyState: *mut UAnimNotifyStateOpaque) -> bool{
		unsafe{ UAnimInstance_ShouldTriggerAnimNotifyStateInvokerHandler.as_ref().unwrap()(self.inner, AnimNotifyState) }
	}
	#[inline]
	pub fn StopAllMontages(&mut self, BlendOut: f32){
		unsafe{ UAnimInstance_StopAllMontagesInvokerHandler.as_ref().unwrap()(self.inner, BlendOut) }
	}
	#[inline]
	pub fn StopSlotAnimation(&mut self, InBlendOutTime: f32, SlotNodeName: UName){
		unsafe{ UAnimInstance_StopSlotAnimationInvokerHandler.as_ref().unwrap()(self.inner, InBlendOutTime, SlotNodeName) }
	}
	#[inline]
	pub fn TriggerAnimNotifies(&mut self, DeltaSeconds: f32){
		unsafe{ UAnimInstance_TriggerAnimNotifiesInvokerHandler.as_ref().unwrap()(self.inner, DeltaSeconds) }
	}
	#[inline]
	pub fn TriggerSingleAnimNotify(&mut self, AnimNotifyEvent: *mut FAnimNotifyEventOpaque){
		unsafe{ UAnimInstance_TriggerSingleAnimNotifyInvokerHandler.as_ref().unwrap()(self.inner, AnimNotifyEvent) }
	}
	#[inline]
	pub fn TryGetPawnOwner(&self) -> Option<APawn>{
		unsafe{ APawn::from_ptr(UAnimInstance_TryGetPawnOwnerInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn UninitializeAnimation(&mut self){
		unsafe{ UAnimInstance_UninitializeAnimationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UnlockAIResources(&mut self, bUnlockMovement: bool, UnlockAILogic: bool){
		unsafe{ UAnimInstance_UnlockAIResourcesInvokerHandler.as_ref().unwrap()(self.inner, bUnlockMovement, UnlockAILogic) }
	}
	#[inline]
	pub fn UpdateCurvesPostEvaluation(&mut self){
		unsafe{ UAnimInstance_UpdateCurvesPostEvaluationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn WasAnimNotifyNameTriggeredInAnyState(&mut self, NotifyName: UName) -> bool{
		unsafe{ UAnimInstance_WasAnimNotifyNameTriggeredInAnyStateInvokerHandler.as_ref().unwrap()(self.inner, NotifyName) }
	}
	#[inline]
	pub fn WasAnimNotifyNameTriggeredInSourceState(&mut self, MachineIndex: i32, StateIndex: i32, NotifyName: UName) -> bool{
		unsafe{ UAnimInstance_WasAnimNotifyNameTriggeredInSourceStateInvokerHandler.as_ref().unwrap()(self.inner, MachineIndex, StateIndex, NotifyName) }
	}
	#[inline]
	pub fn WasAnimNotifyNameTriggeredInStateMachine(&mut self, MachineIndex: i32, NotifyName: UName) -> bool{
		unsafe{ UAnimInstance_WasAnimNotifyNameTriggeredInStateMachineInvokerHandler.as_ref().unwrap()(self.inner, MachineIndex, NotifyName) }
	}
}
#[repr(C)]
pub struct UKismetSystemLibrary{

}
impl UKismetSystemLibrary{
	#[inline]
	pub fn CancelTransaction(Index: i32){
		unsafe{ UKismetSystemLibrary_CancelTransactionInvokerHandler.as_ref().unwrap()(Index) }
	}
	#[inline]
	pub fn CollectGarbage(){
		unsafe{ UKismetSystemLibrary_CollectGarbageInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn ControlScreensaver(bAllowScreenSaver: bool){
		unsafe{ UKismetSystemLibrary_ControlScreensaverInvokerHandler.as_ref().unwrap()(bAllowScreenSaver) }
	}
	#[inline]
	pub fn CreateCopyForUndoBuffer(ObjectToModify: &mut UObject){
		unsafe{ UKismetSystemLibrary_CreateCopyForUndoBufferInvokerHandler.as_ref().unwrap()(ObjectToModify.inner()) }
	}
	#[inline]
	pub fn DrawDebugCoordinateSystem(WorldContextObject: &UObject, AxisLoc: Vector3, AxisRot: Rotator, Scale: f32, Duration: f32, Thickness: f32){
		unsafe{ UKismetSystemLibrary_DrawDebugCoordinateSystemInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), AxisLoc, AxisRot, Scale, Duration, Thickness) }
	}
	#[inline]
	pub fn EndTransaction() -> i32{
		unsafe{ UKismetSystemLibrary_EndTransactionInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn FlushDebugStrings(WorldContextObject: &UObject){
		unsafe{ UKismetSystemLibrary_FlushDebugStringsInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn FlushPersistentDebugLines(WorldContextObject: &UObject){
		unsafe{ UKismetSystemLibrary_FlushPersistentDebugLinesInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn ForceCloseAdBanner(){
		unsafe{ UKismetSystemLibrary_ForceCloseAdBannerInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn Generic_GetEditorProperty(Object: &UObject, ObjectProp: *mut FPropertyOpaque, ValuePtr: *mut c_void, ValueProp: *mut FPropertyOpaque) -> bool{
		unsafe{ UKismetSystemLibrary_Generic_GetEditorPropertyInvokerHandler.as_ref().unwrap()(Object.inner(), ObjectProp, ValuePtr, ValueProp) }
	}
	#[inline]
	pub fn Generic_SetStructurePropertyByName(OwnerObject: &mut UObject, StructPropertyName: UName, SrcStructAddr: *mut c_void){
		unsafe{ UKismetSystemLibrary_Generic_SetStructurePropertyByNameInvokerHandler.as_ref().unwrap()(OwnerObject.inner(), StructPropertyName, SrcStructAddr) }
	}
	#[inline]
	pub fn GetAdIDCount() -> i32{
		unsafe{ UKismetSystemLibrary_GetAdIDCountInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetBuildConfiguration() -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetBuildConfigurationInvokerHandler.as_ref().unwrap()()) }
	}
	#[inline]
	pub fn GetBuildVersion() -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetBuildVersionInvokerHandler.as_ref().unwrap()()) }
	}
	#[inline]
	pub fn GetClassDisplayName(arg0: *mut UClassOpaque) -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetClassDisplayNameInvokerHandler.as_ref().unwrap()(arg0)) }
	}
	#[inline]
	pub fn GetCommandLine() -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetCommandLineInvokerHandler.as_ref().unwrap()()) }
	}
	#[inline]
	pub fn GetDefaultLanguage() -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetDefaultLanguageInvokerHandler.as_ref().unwrap()()) }
	}
	#[inline]
	pub fn GetDefaultLocale() -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetDefaultLocaleInvokerHandler.as_ref().unwrap()()) }
	}
	#[inline]
	pub fn GetDeviceId() -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetDeviceIdInvokerHandler.as_ref().unwrap()()) }
	}
	#[inline]
	pub fn GetDisplayName(Object: &UObject) -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetDisplayNameInvokerHandler.as_ref().unwrap()(Object.inner())) }
	}
	#[inline]
	pub fn GetEditorProperty(Object: &mut UObject, PropertyName: UName, PropertyValue: &mut i32) -> bool{
		unsafe{ UKismetSystemLibrary_GetEditorPropertyInvokerHandler.as_ref().unwrap()(Object.inner(), PropertyName, PropertyValue) }
	}
	#[inline]
	pub fn GetEngineVersion() -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetEngineVersionInvokerHandler.as_ref().unwrap()()) }
	}
	#[inline]
	pub fn GetFrameCount() -> i64{
		unsafe{ UKismetSystemLibrary_GetFrameCountInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetGameBundleId() -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetGameBundleIdInvokerHandler.as_ref().unwrap()()) }
	}
	#[inline]
	pub fn GetGameName() -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetGameNameInvokerHandler.as_ref().unwrap()()) }
	}
	#[inline]
	pub fn GetGameTimeInSeconds(WorldContextObject: &UObject) -> f64{
		unsafe{ UKismetSystemLibrary_GetGameTimeInSecondsInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn GetGamepadControllerName(ControllerId: i32) -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetGamepadControllerNameInvokerHandler.as_ref().unwrap()(ControllerId)) }
	}
	#[inline]
	pub fn GetLocalCurrencyCode() -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetLocalCurrencyCodeInvokerHandler.as_ref().unwrap()()) }
	}
	#[inline]
	pub fn GetLocalCurrencySymbol() -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetLocalCurrencySymbolInvokerHandler.as_ref().unwrap()()) }
	}
	#[inline]
	pub fn GetMinYResolutionFor3DView() -> i32{
		unsafe{ UKismetSystemLibrary_GetMinYResolutionFor3DViewInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetMinYResolutionForUI() -> i32{
		unsafe{ UKismetSystemLibrary_GetMinYResolutionForUIInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetObjectName(Object: &UObject) -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetObjectNameInvokerHandler.as_ref().unwrap()(Object.inner())) }
	}
	#[inline]
	pub fn GetOuterObject(Object: &UObject) -> Option<UObject>{
		unsafe{ UObject::from_ptr(UKismetSystemLibrary_GetOuterObjectInvokerHandler.as_ref().unwrap()(Object.inner())) }
	}
	#[inline]
	pub fn GetPathName(Object: &UObject) -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetPathNameInvokerHandler.as_ref().unwrap()(Object.inner())) }
	}
	#[inline]
	pub fn GetPlatformUserDir() -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetPlatformUserDirInvokerHandler.as_ref().unwrap()()) }
	}
	#[inline]
	pub fn GetPlatformUserName() -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetPlatformUserNameInvokerHandler.as_ref().unwrap()()) }
	}
	#[inline]
	pub fn GetProjectContentDirectory() -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetProjectContentDirectoryInvokerHandler.as_ref().unwrap()()) }
	}
	#[inline]
	pub fn GetProjectDirectory() -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetProjectDirectoryInvokerHandler.as_ref().unwrap()()) }
	}
	#[inline]
	pub fn GetProjectSavedDirectory() -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetProjectSavedDirectoryInvokerHandler.as_ref().unwrap()()) }
	}
	#[inline]
	pub fn GetRenderingDetailMode() -> i32{
		unsafe{ UKismetSystemLibrary_GetRenderingDetailModeInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetRenderingMaterialQualityLevel() -> i32{
		unsafe{ UKismetSystemLibrary_GetRenderingMaterialQualityLevelInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn GetSystemPath(Object: &UObject) -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetSystemPathInvokerHandler.as_ref().unwrap()(Object.inner())) }
	}
	#[inline]
	pub fn GetUniqueDeviceId() -> String{
		unsafe{ char_str_2_string(UKismetSystemLibrary_GetUniqueDeviceIdInvokerHandler.as_ref().unwrap()()) }
	}
	#[inline]
	pub fn GetVolumeButtonsHandledBySystem() -> bool{
		unsafe{ UKismetSystemLibrary_GetVolumeButtonsHandledBySystemInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn HasMultipleLocalPlayers(WorldContextObject: &UObject) -> bool{
		unsafe{ UKismetSystemLibrary_HasMultipleLocalPlayersInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn HideAdBanner(){
		unsafe{ UKismetSystemLibrary_HideAdBannerInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn IsControllerAssignedToGamepad(ControllerId: i32) -> bool{
		unsafe{ UKismetSystemLibrary_IsControllerAssignedToGamepadInvokerHandler.as_ref().unwrap()(ControllerId) }
	}
	#[inline]
	pub fn IsDedicatedServer(WorldContextObject: &UObject) -> bool{
		unsafe{ UKismetSystemLibrary_IsDedicatedServerInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn IsInterstitialAdAvailable() -> bool{
		unsafe{ UKismetSystemLibrary_IsInterstitialAdAvailableInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn IsInterstitialAdRequested() -> bool{
		unsafe{ UKismetSystemLibrary_IsInterstitialAdRequestedInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn IsLoggedIn(SpecificPlayer: &APlayerController) -> bool{
		unsafe{ UKismetSystemLibrary_IsLoggedInInvokerHandler.as_ref().unwrap()(SpecificPlayer.inner()) }
	}
	#[inline]
	pub fn IsPackagedForDistribution() -> bool{
		unsafe{ UKismetSystemLibrary_IsPackagedForDistributionInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn IsScreensaverEnabled() -> bool{
		unsafe{ UKismetSystemLibrary_IsScreensaverEnabledInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn IsServer(WorldContextObject: &UObject) -> bool{
		unsafe{ UKismetSystemLibrary_IsServerInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn IsStandalone(WorldContextObject: &UObject) -> bool{
		unsafe{ UKismetSystemLibrary_IsStandaloneInvokerHandler.as_ref().unwrap()(WorldContextObject.inner()) }
	}
	#[inline]
	pub fn IsUnattended() -> bool{
		unsafe{ UKismetSystemLibrary_IsUnattendedInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn K2_ClearTimer(Object: &mut UObject, FunctionName: &str){
		string_2_cstr!(FunctionName, FunctionName);
		unsafe{ UKismetSystemLibrary_K2_ClearTimerInvokerHandler.as_ref().unwrap()(Object.inner(), FunctionName) }
	}
	#[inline]
	pub fn K2_GetTimerElapsedTime(Object: &mut UObject, FunctionName: &str) -> f32{
		string_2_cstr!(FunctionName, FunctionName);
		unsafe{ UKismetSystemLibrary_K2_GetTimerElapsedTimeInvokerHandler.as_ref().unwrap()(Object.inner(), FunctionName) }
	}
	#[inline]
	pub fn K2_GetTimerRemainingTime(Object: &mut UObject, FunctionName: &str) -> f32{
		string_2_cstr!(FunctionName, FunctionName);
		unsafe{ UKismetSystemLibrary_K2_GetTimerRemainingTimeInvokerHandler.as_ref().unwrap()(Object.inner(), FunctionName) }
	}
	#[inline]
	pub fn K2_IsTimerActive(Object: &mut UObject, FunctionName: &str) -> bool{
		string_2_cstr!(FunctionName, FunctionName);
		unsafe{ UKismetSystemLibrary_K2_IsTimerActiveInvokerHandler.as_ref().unwrap()(Object.inner(), FunctionName) }
	}
	#[inline]
	pub fn K2_IsTimerPaused(Object: &mut UObject, FunctionName: &str) -> bool{
		string_2_cstr!(FunctionName, FunctionName);
		unsafe{ UKismetSystemLibrary_K2_IsTimerPausedInvokerHandler.as_ref().unwrap()(Object.inner(), FunctionName) }
	}
	#[inline]
	pub fn K2_PauseTimer(Object: &mut UObject, FunctionName: &str){
		string_2_cstr!(FunctionName, FunctionName);
		unsafe{ UKismetSystemLibrary_K2_PauseTimerInvokerHandler.as_ref().unwrap()(Object.inner(), FunctionName) }
	}
	#[inline]
	pub fn K2_TimerExists(Object: &mut UObject, FunctionName: &str) -> bool{
		string_2_cstr!(FunctionName, FunctionName);
		unsafe{ UKismetSystemLibrary_K2_TimerExistsInvokerHandler.as_ref().unwrap()(Object.inner(), FunctionName) }
	}
	#[inline]
	pub fn K2_UnPauseTimer(Object: &mut UObject, FunctionName: &str){
		string_2_cstr!(FunctionName, FunctionName);
		unsafe{ UKismetSystemLibrary_K2_UnPauseTimerInvokerHandler.as_ref().unwrap()(Object.inner(), FunctionName) }
	}
	#[inline]
	pub fn LoadInterstitialAd(AdIdIndex: i32){
		unsafe{ UKismetSystemLibrary_LoadInterstitialAdInvokerHandler.as_ref().unwrap()(AdIdIndex) }
	}
	#[inline]
	pub fn MakeLiteralBool(Value: bool) -> bool{
		unsafe{ UKismetSystemLibrary_MakeLiteralBoolInvokerHandler.as_ref().unwrap()(Value) }
	}
	#[inline]
	pub fn MakeLiteralByte(Value: u8) -> u8{
		unsafe{ UKismetSystemLibrary_MakeLiteralByteInvokerHandler.as_ref().unwrap()(Value) }
	}
	#[inline]
	pub fn MakeLiteralDouble(Value: f64) -> f64{
		unsafe{ UKismetSystemLibrary_MakeLiteralDoubleInvokerHandler.as_ref().unwrap()(Value) }
	}
	#[inline]
	pub fn MakeLiteralInt(Value: i32) -> i32{
		unsafe{ UKismetSystemLibrary_MakeLiteralIntInvokerHandler.as_ref().unwrap()(Value) }
	}
	#[inline]
	pub fn MakeLiteralInt64(Value: i64) -> i64{
		unsafe{ UKismetSystemLibrary_MakeLiteralInt64InvokerHandler.as_ref().unwrap()(Value) }
	}
	#[inline]
	pub fn MakeLiteralName(Value: UName) -> UName{
		unsafe{ UKismetSystemLibrary_MakeLiteralNameInvokerHandler.as_ref().unwrap()(Value) }
	}
	#[inline]
	pub fn MakeLiteralString(Value: &str) -> String{
		string_2_cstr!(Value, Value);
		unsafe{ char_str_2_string(UKismetSystemLibrary_MakeLiteralStringInvokerHandler.as_ref().unwrap()(Value)) }
	}
	#[inline]
	pub fn MakeLiteralText(Value: &str) -> String{
		string_2_cstr!(Value, Value);
		unsafe{ char_str_2_string(UKismetSystemLibrary_MakeLiteralTextInvokerHandler.as_ref().unwrap()(Value)) }
	}
	#[inline]
	pub fn QuitEditor(){
		unsafe{ UKismetSystemLibrary_QuitEditorInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn RegisterForRemoteNotifications(){
		unsafe{ UKismetSystemLibrary_RegisterForRemoteNotificationsInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn ResetGamepadAssignmentToController(ControllerId: i32){
		unsafe{ UKismetSystemLibrary_ResetGamepadAssignmentToControllerInvokerHandler.as_ref().unwrap()(ControllerId) }
	}
	#[inline]
	pub fn ResetGamepadAssignments(){
		unsafe{ UKismetSystemLibrary_ResetGamepadAssignmentsInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn SetBoolPropertyByName(Object: &mut UObject, PropertyName: UName, Value: bool){
		unsafe{ UKismetSystemLibrary_SetBoolPropertyByNameInvokerHandler.as_ref().unwrap()(Object.inner(), PropertyName, Value) }
	}
	#[inline]
	pub fn SetBytePropertyByName(Object: &mut UObject, PropertyName: UName, Value: u8){
		unsafe{ UKismetSystemLibrary_SetBytePropertyByNameInvokerHandler.as_ref().unwrap()(Object.inner(), PropertyName, Value) }
	}
	#[inline]
	pub fn SetDoublePropertyByName(Object: &mut UObject, PropertyName: UName, Value: f64){
		unsafe{ UKismetSystemLibrary_SetDoublePropertyByNameInvokerHandler.as_ref().unwrap()(Object.inner(), PropertyName, Value) }
	}
	#[inline]
	pub fn SetGamepadsBlockDeviceFeedback(bBlock: bool){
		unsafe{ UKismetSystemLibrary_SetGamepadsBlockDeviceFeedbackInvokerHandler.as_ref().unwrap()(bBlock) }
	}
	#[inline]
	pub fn SetInt64PropertyByName(Object: &mut UObject, PropertyName: UName, Value: i64){
		unsafe{ UKismetSystemLibrary_SetInt64PropertyByNameInvokerHandler.as_ref().unwrap()(Object.inner(), PropertyName, Value) }
	}
	#[inline]
	pub fn SetIntPropertyByName(Object: &mut UObject, PropertyName: UName, Value: i32){
		unsafe{ UKismetSystemLibrary_SetIntPropertyByNameInvokerHandler.as_ref().unwrap()(Object.inner(), PropertyName, Value) }
	}
	#[inline]
	pub fn SetObjectPropertyByName(Object: &mut UObject, PropertyName: UName, Value: &mut UObject){
		unsafe{ UKismetSystemLibrary_SetObjectPropertyByNameInvokerHandler.as_ref().unwrap()(Object.inner(), PropertyName, Value.inner()) }
	}
	#[inline]
	pub fn SetSuppressViewportTransitionMessage(WorldContextObject: &UObject, bState: bool){
		unsafe{ UKismetSystemLibrary_SetSuppressViewportTransitionMessageInvokerHandler.as_ref().unwrap()(WorldContextObject.inner(), bState) }
	}
	#[inline]
	pub fn SetVolumeButtonsHandledBySystem(bEnabled: bool){
		unsafe{ UKismetSystemLibrary_SetVolumeButtonsHandledBySystemInvokerHandler.as_ref().unwrap()(bEnabled) }
	}
	#[inline]
	pub fn ShowAdBanner(AdIdIndex: i32, bShowOnBottomOfScreen: bool){
		unsafe{ UKismetSystemLibrary_ShowAdBannerInvokerHandler.as_ref().unwrap()(AdIdIndex, bShowOnBottomOfScreen) }
	}
	#[inline]
	pub fn ShowInterstitialAd(){
		unsafe{ UKismetSystemLibrary_ShowInterstitialAdInvokerHandler.as_ref().unwrap()() }
	}
	#[inline]
	pub fn ShowPlatformSpecificAchievementsScreen(SpecificPlayer: &APlayerController){
		unsafe{ UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreenInvokerHandler.as_ref().unwrap()(SpecificPlayer.inner()) }
	}
	#[inline]
	pub fn SnapshotObject(Object: &mut UObject){
		unsafe{ UKismetSystemLibrary_SnapshotObjectInvokerHandler.as_ref().unwrap()(Object.inner()) }
	}
	#[inline]
	pub fn TransactObject(Object: &mut UObject){
		unsafe{ UKismetSystemLibrary_TransactObjectInvokerHandler.as_ref().unwrap()(Object.inner()) }
	}
	#[inline]
	pub fn UnregisterForRemoteNotifications(){
		unsafe{ UKismetSystemLibrary_UnregisterForRemoteNotificationsInvokerHandler.as_ref().unwrap()() }
	}
}
pub struct UAnimMontage{
    inner: *mut UAnimMontageOpaque
}
impl IPtr for UAnimMontage{
    #[inline]
    fn inner(&self) -> *mut UAnimMontageOpaque { self.inner }
    #[inline]
    fn from_ptr(ptr: *mut c_void) -> Option<Self>{
        if_else!(
            ptr.is_null(),
            None,
            Some(Self{inner: ptr})
        )        
    }
}
impl UAnimMontage{
    
	#[inline]
	pub fn AddAnimCompositeSection(&mut self, InSectionName: UName, StartPos: f32) -> i32{
		unsafe{ UAnimMontage_AddAnimCompositeSectionInvokerHandler.as_ref().unwrap()(self.inner, InSectionName, StartPos) }
	}
	#[inline]
	pub fn CalculateSequenceLength(&mut self) -> f32{
		unsafe{ UAnimMontage_CalculateSequenceLengthInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CanBeUsedInComposition(&self) -> bool{
		unsafe{ UAnimMontage_CanBeUsedInCompositionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CanUseMarkerSync(&self) -> bool{
		unsafe{ UAnimMontage_CanUseMarkerSyncInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CreateSlotAnimationAsDynamicMontage(Asset: *mut UAnimSequenceBaseOpaque, SlotNodeName: UName, BlendInTime: f32, BlendOutTime: f32, InPlayRate: f32, LoopCount: i32, BlendOutTriggerTime: f32, InTimeToStartMontageAt: f32) -> Option<UAnimMontage>{
		unsafe{ UAnimMontage::from_ptr(UAnimMontage_CreateSlotAnimationAsDynamicMontageInvokerHandler.as_ref().unwrap()(Asset, SlotNodeName, BlendInTime, BlendOutTime, InPlayRate, LoopCount, BlendOutTriggerTime, InTimeToStartMontageAt)) }
	}
	#[inline]
	pub fn DeleteAnimCompositeSection(&mut self, SectionIndex: i32) -> bool{
		unsafe{ UAnimMontage_DeleteAnimCompositeSectionInvokerHandler.as_ref().unwrap()(self.inner, SectionIndex) }
	}
	#[inline]
	pub fn ExtractRootMotionFromTrackRange(&self, StartTrackPosition: f32, EndTrackPosition: f32) -> Transform{
		unsafe{ UAnimMontage_ExtractRootMotionFromTrackRangeInvokerHandler.as_ref().unwrap()(self.inner, StartTrackPosition, EndTrackPosition) }
	}
	#[inline]
	pub fn GetAnimCompositeSectionIndexFromPos(&self, CurrentTime: f32, PosWithinCompositeSection: &mut f32) -> i32{
		unsafe{ UAnimMontage_GetAnimCompositeSectionIndexFromPosInvokerHandler.as_ref().unwrap()(self.inner, CurrentTime, PosWithinCompositeSection) }
	}
	#[inline]
	pub fn GetAnimationData(&self, SlotName: UName) -> *mut FAnimTrackOpaque{
		unsafe{ UAnimMontage_GetAnimationDataInvokerHandler.as_ref().unwrap()(self.inner, SlotName) }
	}
	#[inline]
	pub fn GetDefaultBlendInTime(&self) -> f32{
		unsafe{ UAnimMontage_GetDefaultBlendInTimeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetDefaultBlendOutTime(&self) -> f32{
		unsafe{ UAnimMontage_GetDefaultBlendOutTimeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetGroupName(&self) -> UName{
		unsafe{ UAnimMontage_GetGroupNameInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetNumSections(&self) -> i32{
		unsafe{ UAnimMontage_GetNumSectionsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetSectionIndex(&self, InSectionName: UName) -> i32{
		unsafe{ UAnimMontage_GetSectionIndexInvokerHandler.as_ref().unwrap()(self.inner, InSectionName) }
	}
	#[inline]
	pub fn GetSectionIndexFromPosition(&self, Position: f32) -> i32{
		unsafe{ UAnimMontage_GetSectionIndexFromPositionInvokerHandler.as_ref().unwrap()(self.inner, Position) }
	}
	#[inline]
	pub fn GetSectionLength(&self, SectionIndex: i32) -> f32{
		unsafe{ UAnimMontage_GetSectionLengthInvokerHandler.as_ref().unwrap()(self.inner, SectionIndex) }
	}
	#[inline]
	pub fn GetSectionName(&self, SectionIndex: i32) -> UName{
		unsafe{ UAnimMontage_GetSectionNameInvokerHandler.as_ref().unwrap()(self.inner, SectionIndex) }
	}
	#[inline]
	pub fn GetSectionStartAndEndTime(&self, SectionIndex: i32, OutStartTime: &mut f32, OutEndTime: &mut f32){
		unsafe{ UAnimMontage_GetSectionStartAndEndTimeInvokerHandler.as_ref().unwrap()(self.inner, SectionIndex, OutStartTime, OutEndTime) }
	}
	#[inline]
	pub fn GetSectionTimeLeftFromPos(&mut self, Position: f32) -> f32{
		unsafe{ UAnimMontage_GetSectionTimeLeftFromPosInvokerHandler.as_ref().unwrap()(self.inner, Position) }
	}
	#[inline]
	pub fn HasRootMotion(&self) -> bool{
		unsafe{ UAnimMontage_HasRootMotionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn InvalidateRecursiveAsset(&mut self){
		unsafe{ UAnimMontage_InvalidateRecursiveAssetInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsValidAdditive(&self) -> bool{
		unsafe{ UAnimMontage_IsValidAdditiveInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsValidSectionIndex(&self, SectionIndex: i32) -> bool{
		unsafe{ UAnimMontage_IsValidSectionIndexInvokerHandler.as_ref().unwrap()(self.inner, SectionIndex) }
	}
	#[inline]
	pub fn IsValidSectionName(&self, InSectionName: UName) -> bool{
		unsafe{ UAnimMontage_IsValidSectionNameInvokerHandler.as_ref().unwrap()(self.inner, InSectionName) }
	}
	#[inline]
	pub fn IsValidSlot(&self, InSlotName: UName) -> bool{
		unsafe{ UAnimMontage_IsValidSlotInvokerHandler.as_ref().unwrap()(self.inner, InSlotName) }
	}
	#[inline]
	pub fn PostLoad(&mut self){
		unsafe{ UAnimMontage_PostLoadInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RefreshCacheData(&mut self){
		unsafe{ UAnimMontage_RefreshCacheDataInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SetCompositeLength(&mut self, InLength: f32){
		unsafe{ UAnimMontage_SetCompositeLengthInvokerHandler.as_ref().unwrap()(self.inner, InLength) }
	}
	#[inline]
	pub fn UnregisterOnMontageChanged(&mut self, Unregister: *mut c_void){
		unsafe{ UAnimMontage_UnregisterOnMontageChangedInvokerHandler.as_ref().unwrap()(self.inner, Unregister) }
	}
	#[inline]
	pub fn UpdateLinkableElements(&mut self){
		unsafe{ UAnimMontage_UpdateLinkableElementsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateLinkableElements2(&mut self, SlotIdx: i32, SegmentIdx: i32){
		unsafe{ UAnimMontage_UpdateLinkableElements2InvokerHandler.as_ref().unwrap()(self.inner, SlotIdx, SegmentIdx) }
	}
}
pub struct USkeletalMeshComponent{
    inner: *mut USkeletalMeshComponentOpaque
}
impl IPtr for USkeletalMeshComponent{
    #[inline]
    fn inner(&self) -> *mut USkeletalMeshComponentOpaque { self.inner }
    #[inline]
    fn from_ptr(ptr: *mut c_void) -> Option<Self>{
        if_else!(
            ptr.is_null(),
            None,
            Some(Self{inner: ptr})
        )        
    }
}
impl USkeletalMeshComponent{
    
	#[inline]
	pub fn AddClothCollisionSource(&mut self, InSourceComponent: &mut USkeletalMeshComponent, InSourcePhysicsAsset: *mut UPhysicsAssetOpaque){
		unsafe{ USkeletalMeshComponent_AddClothCollisionSourceInvokerHandler.as_ref().unwrap()(self.inner, InSourceComponent.inner(), InSourcePhysicsAsset) }
	}
	#[inline]
	pub fn AddForceToAllBodiesBelow(&mut self, Force: Vector3, BoneName: UName, bAccelChange: bool, bIncludeSelf: bool){
		unsafe{ USkeletalMeshComponent_AddForceToAllBodiesBelowInvokerHandler.as_ref().unwrap()(self.inner, Force, BoneName, bAccelChange, bIncludeSelf) }
	}
	#[inline]
	pub fn AddImpulseToAllBodiesBelow(&mut self, Impulse: Vector3, BoneName: UName, bVelChange: bool, bIncludeSelf: bool){
		unsafe{ USkeletalMeshComponent_AddImpulseToAllBodiesBelowInvokerHandler.as_ref().unwrap()(self.inner, Impulse, BoneName, bVelChange, bIncludeSelf) }
	}
	#[inline]
	pub fn AllocateTransformData(&mut self) -> bool{
		unsafe{ USkeletalMeshComponent_AllocateTransformDataInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn AllowAnimCurveEvaluation(&mut self, NameOfCurve: UName, bAllow: bool){
		unsafe{ USkeletalMeshComponent_AllowAnimCurveEvaluationInvokerHandler.as_ref().unwrap()(self.inner, NameOfCurve, bAllow) }
	}
	#[inline]
	pub fn ApplyEditedComponentSpaceTransforms(&mut self){
		unsafe{ USkeletalMeshComponent_ApplyEditedComponentSpaceTransformsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn BeginPlay(&mut self){
		unsafe{ USkeletalMeshComponent_BeginPlayInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn BindClothToLeaderPoseComponent(&mut self){
		unsafe{ USkeletalMeshComponent_BindClothToLeaderPoseComponentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn BreakConstraint(&mut self, Impulse: Vector3, HitLocation: Vector3, InBoneName: UName){
		unsafe{ USkeletalMeshComponent_BreakConstraintInvokerHandler.as_ref().unwrap()(self.inner, Impulse, HitLocation, InBoneName) }
	}
	#[inline]
	pub fn CalculateMass(&mut self, BoneName: UName) -> f32{
		unsafe{ USkeletalMeshComponent_CalculateMassInvokerHandler.as_ref().unwrap()(self.inner, BoneName) }
	}
	#[inline]
	pub fn CanEditSimulatePhysics(&mut self) -> bool{
		unsafe{ USkeletalMeshComponent_CanEditSimulatePhysicsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CanHaveStaticMobility(&self) -> bool{
		unsafe{ USkeletalMeshComponent_CanHaveStaticMobilityInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CanSimulateClothing(&self) -> bool{
		unsafe{ USkeletalMeshComponent_CanSimulateClothingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CheckClothTeleport(&mut self){
		unsafe{ USkeletalMeshComponent_CheckClothTeleportInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearAnimNotifyErrors(&mut self, InSourceNotify: &mut UObject){
		unsafe{ USkeletalMeshComponent_ClearAnimNotifyErrorsInvokerHandler.as_ref().unwrap()(self.inner, InSourceNotify.inner()) }
	}
	#[inline]
	pub fn ClearAnimScriptInstance(&mut self){
		unsafe{ USkeletalMeshComponent_ClearAnimScriptInstanceInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearCachedAnimProperties(&mut self){
		unsafe{ USkeletalMeshComponent_ClearCachedAnimPropertiesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearMorphTargets(&mut self){
		unsafe{ USkeletalMeshComponent_ClearMorphTargetsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearRefPoseOverride(&mut self){
		unsafe{ USkeletalMeshComponent_ClearRefPoseOverrideInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CompleteParallelAnimationEvaluation(&mut self, bDoPostAnimEvaluation: bool){
		unsafe{ USkeletalMeshComponent_CompleteParallelAnimationEvaluationInvokerHandler.as_ref().unwrap()(self.inner, bDoPostAnimEvaluation) }
	}
	#[inline]
	pub fn CompleteParallelClothSimulation(&mut self){
		unsafe{ USkeletalMeshComponent_CompleteParallelClothSimulationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ConditionallyDispatchQueuedAnimEvents(&mut self){
		unsafe{ USkeletalMeshComponent_ConditionallyDispatchQueuedAnimEventsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn DeallocateTransformData(&mut self){
		unsafe{ USkeletalMeshComponent_DeallocateTransformDataInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn DebugDrawClothing(&mut self, PDI: *mut FPrimitiveDrawInterfaceOpaque){
		unsafe{ USkeletalMeshComponent_DebugDrawClothingInvokerHandler.as_ref().unwrap()(self.inner, PDI) }
	}
	#[inline]
	pub fn DebugDrawClothingTexts(&mut self, Canvas: *mut FCanvasOpaque, SceneView: *mut FSceneViewOpaque){
		unsafe{ USkeletalMeshComponent_DebugDrawClothingTextsInvokerHandler.as_ref().unwrap()(self.inner, Canvas, SceneView) }
	}
	#[inline]
	pub fn FinalizeBoneTransform(&mut self){
		unsafe{ USkeletalMeshComponent_FinalizeBoneTransformInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn FindConstraintBoneName(&mut self, ConstraintIndex: i32) -> UName{
		unsafe{ USkeletalMeshComponent_FindConstraintBoneNameInvokerHandler.as_ref().unwrap()(self.inner, ConstraintIndex) }
	}
	#[inline]
	pub fn FindConstraintIndex(&mut self, ConstraintName: UName) -> i32{
		unsafe{ USkeletalMeshComponent_FindConstraintIndexInvokerHandler.as_ref().unwrap()(self.inner, ConstraintName) }
	}
	#[inline]
	pub fn FindConstraintInstance(&mut self, ConName: UName) -> *mut FConstraintInstanceOpaque{
		unsafe{ USkeletalMeshComponent_FindConstraintInstanceInvokerHandler.as_ref().unwrap()(self.inner, ConName) }
	}
	#[inline]
	pub fn FindRootBodyIndex(&self) -> i32{
		unsafe{ USkeletalMeshComponent_FindRootBodyIndexInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ForceClothNextUpdateTeleport(&mut self){
		unsafe{ USkeletalMeshComponent_ForceClothNextUpdateTeleportInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ForceClothNextUpdateTeleportAndReset(&mut self){
		unsafe{ USkeletalMeshComponent_ForceClothNextUpdateTeleportAndResetInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetAllowClothActors(&self) -> bool{
		unsafe{ USkeletalMeshComponent_GetAllowClothActorsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetAllowRigidBodyAnimNode(&self) -> bool{
		unsafe{ USkeletalMeshComponent_GetAllowRigidBodyAnimNodeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetAllowedAnimCurveEvaluate(&self) -> bool{
		unsafe{ USkeletalMeshComponent_GetAllowedAnimCurveEvaluateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetBodyInstance(&self, BoneName: UName, bGetWelded: bool, Index: i32) -> *mut FBodyInstanceOpaque{
		unsafe{ USkeletalMeshComponent_GetBodyInstanceInvokerHandler.as_ref().unwrap()(self.inner, BoneName, bGetWelded, Index) }
	}
	#[inline]
	pub fn GetBodySetup(&mut self) -> *mut UBodySetupOpaque{
		unsafe{ USkeletalMeshComponent_GetBodySetupInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetBoneMass(&self, BoneName: UName, bScaleMass: bool) -> f32{
		unsafe{ USkeletalMeshComponent_GetBoneMassInvokerHandler.as_ref().unwrap()(self.inner, BoneName, bScaleMass) }
	}
	#[inline]
	pub fn GetClothMaxDistanceScale(&self) -> f32{
		unsafe{ USkeletalMeshComponent_GetClothMaxDistanceScaleInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetClothingSimulation(&self) -> *mut IClothingSimulationOpaque{
		unsafe{ USkeletalMeshComponent_GetClothingSimulationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetClothingSimulationContext(&self) -> *mut IClothingSimulationContextOpaque{
		unsafe{ USkeletalMeshComponent_GetClothingSimulationContextInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetClothingSimulationInteractor(&self) -> *mut UClothingSimulationInteractorOpaque{
		unsafe{ USkeletalMeshComponent_GetClothingSimulationInteractorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetConstraintInstanceByIndex(&mut self, Index: u32) -> *mut FConstraintInstanceOpaque{
		unsafe{ USkeletalMeshComponent_GetConstraintInstanceByIndexInvokerHandler.as_ref().unwrap()(self.inner, Index) }
	}
	#[inline]
	pub fn GetCurrentJointAngles(&mut self, InBoneName: UName, Swing1Angle: &mut f32, TwistAngle: &mut f32, Swing2Angle: &mut f32){
		unsafe{ USkeletalMeshComponent_GetCurrentJointAnglesInvokerHandler.as_ref().unwrap()(self.inner, InBoneName, Swing1Angle, TwistAngle, Swing2Angle) }
	}
	#[inline]
	pub fn GetDisablePostProcessBlueprint(&self) -> bool{
		unsafe{ USkeletalMeshComponent_GetDisablePostProcessBlueprintInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetLinkedAnimGraphInstanceByTag(&self, InTag: UName) -> Option<UAnimInstance>{
		unsafe{ UAnimInstance::from_ptr(USkeletalMeshComponent_GetLinkedAnimGraphInstanceByTagInvokerHandler.as_ref().unwrap()(self.inner, InTag)) }
	}
	#[inline]
	pub fn GetLinkedAnimLayerInstanceByGroup(&self, InGroup: UName) -> Option<UAnimInstance>{
		unsafe{ UAnimInstance::from_ptr(USkeletalMeshComponent_GetLinkedAnimLayerInstanceByGroupInvokerHandler.as_ref().unwrap()(self.inner, InGroup)) }
	}
	#[inline]
	pub fn GetMass(&self) -> f32{
		unsafe{ USkeletalMeshComponent_GetMassInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetMorphTarget(&self, MorphTargetName: UName) -> f32{
		unsafe{ USkeletalMeshComponent_GetMorphTargetInvokerHandler.as_ref().unwrap()(self.inner, MorphTargetName) }
	}
	#[inline]
	pub fn GetPlayRate(&self) -> f32{
		unsafe{ USkeletalMeshComponent_GetPlayRateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetPosition(&self) -> f32{
		unsafe{ USkeletalMeshComponent_GetPositionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetSingleNodeInstance(&self) -> *mut UAnimSingleNodeInstanceOpaque{
		unsafe{ USkeletalMeshComponent_GetSingleNodeInstanceInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetSkeletalCenterOfMass(&self) -> Vector3{
		unsafe{ USkeletalMeshComponent_GetSkeletalCenterOfMassInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetSkeletalMeshAsset(&self) -> *mut USkeletalMeshOpaque{
		unsafe{ USkeletalMeshComponent_GetSkeletalMeshAssetInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetTeleportDistanceThreshold(&self) -> f32{
		unsafe{ USkeletalMeshComponent_GetTeleportDistanceThresholdInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetTeleportRotationThreshold(&self) -> f32{
		unsafe{ USkeletalMeshComponent_GetTeleportRotationThresholdInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetTotalMassBelowBone(&mut self, InBoneName: UName) -> f32{
		unsafe{ USkeletalMeshComponent_GetTotalMassBelowBoneInvokerHandler.as_ref().unwrap()(self.inner, InBoneName) }
	}
	#[inline]
	pub fn GetUpdateAnimationInEditor(&self) -> bool{
		unsafe{ USkeletalMeshComponent_GetUpdateAnimationInEditorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetUpdateClothInEditor(&self) -> bool{
		unsafe{ USkeletalMeshComponent_GetUpdateClothInEditorInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HandleExistingParallelEvaluationTask(&mut self, bBlockOnTask: bool, bPerformPostAnimEvaluation: bool) -> bool{
		unsafe{ USkeletalMeshComponent_HandleExistingParallelEvaluationTaskInvokerHandler.as_ref().unwrap()(self.inner, bBlockOnTask, bPerformPostAnimEvaluation) }
	}
	#[inline]
	pub fn HasValidAnimationInstance(&self) -> bool{
		unsafe{ USkeletalMeshComponent_HasValidAnimationInstanceInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn InitAnim(&mut self, bForceReinit: bool){
		unsafe{ USkeletalMeshComponent_InitAnimInvokerHandler.as_ref().unwrap()(self.inner, bForceReinit) }
	}
	#[inline]
	pub fn InitArticulated(&mut self, PhysScene: *mut FPhysSceneOpaque){
		unsafe{ USkeletalMeshComponent_InitArticulatedInvokerHandler.as_ref().unwrap()(self.inner, PhysScene) }
	}
	#[inline]
	pub fn InitCollisionRelationships(&mut self){
		unsafe{ USkeletalMeshComponent_InitCollisionRelationshipsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn InitializeAnimScriptInstance(&mut self, bForceReinit: bool, bInDeferRootNodeInitialization: bool) -> bool{
		unsafe{ USkeletalMeshComponent_InitializeAnimScriptInstanceInvokerHandler.as_ref().unwrap()(self.inner, bForceReinit, bInDeferRootNodeInitialization) }
	}
	#[inline]
	pub fn InitializeComponent(&mut self){
		unsafe{ USkeletalMeshComponent_InitializeComponentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsAnimBlueprintInstanced(&self) -> bool{
		unsafe{ USkeletalMeshComponent_IsAnimBlueprintInstancedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsAnyRigidBodyAwake(&mut self) -> bool{
		unsafe{ USkeletalMeshComponent_IsAnyRigidBodyAwakeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsAnySimulatingPhysics(&self) -> bool{
		unsafe{ USkeletalMeshComponent_IsAnySimulatingPhysicsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsBodyGravityEnabled(&mut self, BoneName: UName) -> bool{
		unsafe{ USkeletalMeshComponent_IsBodyGravityEnabledInvokerHandler.as_ref().unwrap()(self.inner, BoneName) }
	}
	#[inline]
	pub fn IsClothBoundToLeaderComponent(&self) -> bool{
		unsafe{ USkeletalMeshComponent_IsClothBoundToLeaderComponentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsClothingSimulationSuspended(&self) -> bool{
		unsafe{ USkeletalMeshComponent_IsClothingSimulationSuspendedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsGravityEnabled(&self) -> bool{
		unsafe{ USkeletalMeshComponent_IsGravityEnabledInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPlaying(&self) -> bool{
		unsafe{ USkeletalMeshComponent_IsPlayingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPlayingNetworkedRootMotionMontage(&self) -> bool{
		unsafe{ USkeletalMeshComponent_IsPlayingNetworkedRootMotionMontageInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPlayingRootMotion(&self) -> bool{
		unsafe{ USkeletalMeshComponent_IsPlayingRootMotionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPlayingRootMotionFromEverything(&self) -> bool{
		unsafe{ USkeletalMeshComponent_IsPlayingRootMotionFromEverythingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsPostEvaluatingAnimation(&self) -> bool{
		unsafe{ USkeletalMeshComponent_IsPostEvaluatingAnimationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsRunningParallelEvaluation(&self) -> bool{
		unsafe{ USkeletalMeshComponent_IsRunningParallelEvaluationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsWindEnabled(&self) -> bool{
		unsafe{ USkeletalMeshComponent_IsWindEnabledInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn NotifySkelControlBeyondLimit(&mut self, LookAt: *mut USkelControlLookAtOpaque){
		unsafe{ USkeletalMeshComponent_NotifySkelControlBeyondLimitInvokerHandler.as_ref().unwrap()(self.inner, LookAt) }
	}
	#[inline]
	pub fn OnComponentCollisionSettingsChanged(&mut self, bUpdateOverlaps: bool){
		unsafe{ USkeletalMeshComponent_OnComponentCollisionSettingsChangedInvokerHandler.as_ref().unwrap()(self.inner, bUpdateOverlaps) }
	}
	#[inline]
	pub fn OnPreEndOfFrameSync(&mut self){
		unsafe{ USkeletalMeshComponent_OnPreEndOfFrameSyncInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OverrideAnimationData(&mut self, InAnimToPlay: *mut UAnimationAssetOpaque, bIsLooping: bool, bIsPlaying: bool, Position: f32, PlayRate: f32){
		unsafe{ USkeletalMeshComponent_OverrideAnimationDataInvokerHandler.as_ref().unwrap()(self.inner, InAnimToPlay, bIsLooping, bIsPlaying, Position, PlayRate) }
	}
	#[inline]
	pub fn ParallelAnimationEvaluation(&mut self){
		unsafe{ USkeletalMeshComponent_ParallelAnimationEvaluationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn Play(&mut self, bLooping: bool){
		unsafe{ USkeletalMeshComponent_PlayInvokerHandler.as_ref().unwrap()(self.inner, bLooping) }
	}
	#[inline]
	pub fn PlayAnimation(&mut self, NewAnimToPlay: *mut UAnimationAssetOpaque, bLooping: bool){
		unsafe{ USkeletalMeshComponent_PlayAnimationInvokerHandler.as_ref().unwrap()(self.inner, NewAnimToPlay, bLooping) }
	}
	#[inline]
	pub fn PoseTickedThisFrame(&self) -> bool{
		unsafe{ USkeletalMeshComponent_PoseTickedThisFrameInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostLoad(&mut self){
		unsafe{ USkeletalMeshComponent_PostLoadInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PutAllRigidBodiesToSleep(&mut self){
		unsafe{ USkeletalMeshComponent_PutAllRigidBodiesToSleepInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RecalcRequiredBones(&mut self, LODIndex: i32){
		unsafe{ USkeletalMeshComponent_RecalcRequiredBonesInvokerHandler.as_ref().unwrap()(self.inner, LODIndex) }
	}
	#[inline]
	pub fn RecalcRequiredCurves(&mut self){
		unsafe{ USkeletalMeshComponent_RecalcRequiredCurvesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RecreateClothingActors(&mut self){
		unsafe{ USkeletalMeshComponent_RecreateClothingActorsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RefreshBoneTransforms(&mut self, TickFunction: *mut FActorComponentTickFunctionOpaque){
		unsafe{ USkeletalMeshComponent_RefreshBoneTransformsInvokerHandler.as_ref().unwrap()(self.inner, TickFunction) }
	}
	#[inline]
	pub fn RegisterClothTick(&mut self, bRegister: bool){
		unsafe{ USkeletalMeshComponent_RegisterClothTickInvokerHandler.as_ref().unwrap()(self.inner, bRegister) }
	}
	#[inline]
	pub fn RegisterEndPhysicsTick(&mut self, bRegister: bool){
		unsafe{ USkeletalMeshComponent_RegisterEndPhysicsTickInvokerHandler.as_ref().unwrap()(self.inner, bRegister) }
	}
	#[inline]
	pub fn ReleaseAllClothingResources(&mut self){
		unsafe{ USkeletalMeshComponent_ReleaseAllClothingResourcesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RemoveAllClothingActors(&mut self){
		unsafe{ USkeletalMeshComponent_RemoveAllClothingActorsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RemoveClothCollisionSource(&mut self, InSourceComponent: &mut USkeletalMeshComponent){
		unsafe{ USkeletalMeshComponent_RemoveClothCollisionSourceInvokerHandler.as_ref().unwrap()(self.inner, InSourceComponent.inner()) }
	}
	#[inline]
	pub fn RemoveClothCollisionSource2(&mut self, InSourceComponent: &mut USkeletalMeshComponent, InSourcePhysicsAsset: *mut UPhysicsAssetOpaque){
		unsafe{ USkeletalMeshComponent_RemoveClothCollisionSource2InvokerHandler.as_ref().unwrap()(self.inner, InSourceComponent.inner(), InSourcePhysicsAsset) }
	}
	#[inline]
	pub fn RequiresPreEndOfFrameSync(&self) -> bool{
		unsafe{ USkeletalMeshComponent_RequiresPreEndOfFrameSyncInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ResetAllBodiesSimulatePhysics(&mut self){
		unsafe{ USkeletalMeshComponent_ResetAllBodiesSimulatePhysicsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ResetAllowedAnimCurveEvaluation(&mut self){
		unsafe{ USkeletalMeshComponent_ResetAllowedAnimCurveEvaluationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ResetClothCollisionSources(&mut self){
		unsafe{ USkeletalMeshComponent_ResetClothCollisionSourcesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ResetClothTeleportMode(&mut self){
		unsafe{ USkeletalMeshComponent_ResetClothTeleportModeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ResetRootBodyIndex(&mut self){
		unsafe{ USkeletalMeshComponent_ResetRootBodyIndexInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ResumeClothingSimulation(&mut self){
		unsafe{ USkeletalMeshComponent_ResumeClothingSimulationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SetAllBodiesCollisionObjectType(&mut self, NewChannel: ECollisionChannel){
		unsafe{ USkeletalMeshComponent_SetAllBodiesCollisionObjectTypeInvokerHandler.as_ref().unwrap()(self.inner, NewChannel) }
	}
	#[inline]
	pub fn SetAllBodiesNotifyRigidBodyCollision(&mut self, bNewNotifyRigidBodyCollision: bool){
		unsafe{ USkeletalMeshComponent_SetAllBodiesNotifyRigidBodyCollisionInvokerHandler.as_ref().unwrap()(self.inner, bNewNotifyRigidBodyCollision) }
	}
	#[inline]
	pub fn SetAllBodiesPhysicsBlendWeight(&mut self, PhysicsBlendWeight: f32, bSkipCustomPhysicsType: bool){
		unsafe{ USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeightInvokerHandler.as_ref().unwrap()(self.inner, PhysicsBlendWeight, bSkipCustomPhysicsType) }
	}
	#[inline]
	pub fn SetAllBodiesSimulatePhysics(&mut self, bNewSimulate: bool){
		unsafe{ USkeletalMeshComponent_SetAllBodiesSimulatePhysicsInvokerHandler.as_ref().unwrap()(self.inner, bNewSimulate) }
	}
	#[inline]
	pub fn SetAllMassScale(&mut self, InMassScale: f32){
		unsafe{ USkeletalMeshComponent_SetAllMassScaleInvokerHandler.as_ref().unwrap()(self.inner, InMassScale) }
	}
	#[inline]
	pub fn SetAllMotorsAngularDriveParams(&mut self, InSpring: f32, InDamping: f32, InForceLimit: f32, bSkipCustomPhysicsType: bool){
		unsafe{ USkeletalMeshComponent_SetAllMotorsAngularDriveParamsInvokerHandler.as_ref().unwrap()(self.inner, InSpring, InDamping, InForceLimit, bSkipCustomPhysicsType) }
	}
	#[inline]
	pub fn SetAllMotorsAngularPositionDrive(&mut self, bEnableSwingDrive: bool, bEnableTwistDrive: bool, bSkipCustomPhysicsType: bool){
		unsafe{ USkeletalMeshComponent_SetAllMotorsAngularPositionDriveInvokerHandler.as_ref().unwrap()(self.inner, bEnableSwingDrive, bEnableTwistDrive, bSkipCustomPhysicsType) }
	}
	#[inline]
	pub fn SetAllMotorsAngularVelocityDrive(&mut self, bEnableSwingDrive: bool, bEnableTwistDrive: bool, bSkipCustomPhysicsType: bool){
		unsafe{ USkeletalMeshComponent_SetAllMotorsAngularVelocityDriveInvokerHandler.as_ref().unwrap()(self.inner, bEnableSwingDrive, bEnableTwistDrive, bSkipCustomPhysicsType) }
	}
	#[inline]
	pub fn SetAllPhysicsLinearVelocity(&mut self, NewVel: Vector3, bAddToCurrent: bool){
		unsafe{ USkeletalMeshComponent_SetAllPhysicsLinearVelocityInvokerHandler.as_ref().unwrap()(self.inner, NewVel, bAddToCurrent) }
	}
	#[inline]
	pub fn SetAllPhysicsPosition(&mut self, NewPos: Vector3){
		unsafe{ USkeletalMeshComponent_SetAllPhysicsPositionInvokerHandler.as_ref().unwrap()(self.inner, NewPos) }
	}
	#[inline]
	pub fn SetAllPhysicsRotation(&mut self, NewRot: Rotator){
		unsafe{ USkeletalMeshComponent_SetAllPhysicsRotationInvokerHandler.as_ref().unwrap()(self.inner, NewRot) }
	}
	#[inline]
	pub fn SetAllUseCCD(&mut self, InUseCCD: bool){
		unsafe{ USkeletalMeshComponent_SetAllUseCCDInvokerHandler.as_ref().unwrap()(self.inner, InUseCCD) }
	}
	#[inline]
	pub fn SetAllowAnimCurveEvaluation(&mut self, bInAllow: bool){
		unsafe{ USkeletalMeshComponent_SetAllowAnimCurveEvaluationInvokerHandler.as_ref().unwrap()(self.inner, bInAllow) }
	}
	#[inline]
	pub fn SetAllowClothActors(&mut self, bInAllow: bool){
		unsafe{ USkeletalMeshComponent_SetAllowClothActorsInvokerHandler.as_ref().unwrap()(self.inner, bInAllow) }
	}
	#[inline]
	pub fn SetAllowRigidBodyAnimNode(&mut self, bInAllow: bool, bReinitAnim: bool){
		unsafe{ USkeletalMeshComponent_SetAllowRigidBodyAnimNodeInvokerHandler.as_ref().unwrap()(self.inner, bInAllow, bReinitAnim) }
	}
	#[inline]
	pub fn SetAngularLimits(&mut self, InBoneName: UName, Swing1LimitAngle: f32, TwistLimitAngle: f32, Swing2LimitAngle: f32){
		unsafe{ USkeletalMeshComponent_SetAngularLimitsInvokerHandler.as_ref().unwrap()(self.inner, InBoneName, Swing1LimitAngle, TwistLimitAngle, Swing2LimitAngle) }
	}
	#[inline]
	pub fn SetAnimation(&mut self, NewAnimToPlay: *mut UAnimationAssetOpaque){
		unsafe{ USkeletalMeshComponent_SetAnimationInvokerHandler.as_ref().unwrap()(self.inner, NewAnimToPlay) }
	}
	#[inline]
	pub fn SetBodyNotifyRigidBodyCollision(&mut self, bNewNotifyRigidBodyCollision: bool, BoneName: UName){
		unsafe{ USkeletalMeshComponent_SetBodyNotifyRigidBodyCollisionInvokerHandler.as_ref().unwrap()(self.inner, bNewNotifyRigidBodyCollision, BoneName) }
	}
	#[inline]
	pub fn SetClothMaxDistanceScale(&mut self, Scale: f32){
		unsafe{ USkeletalMeshComponent_SetClothMaxDistanceScaleInvokerHandler.as_ref().unwrap()(self.inner, Scale) }
	}
	#[inline]
	pub fn SetCollisionObjectType(&mut self, Channel: ECollisionChannel){
		unsafe{ USkeletalMeshComponent_SetCollisionObjectTypeInvokerHandler.as_ref().unwrap()(self.inner, Channel) }
	}
	#[inline]
	pub fn SetComponentTickEnabled(&mut self, bEnabled: bool){
		unsafe{ USkeletalMeshComponent_SetComponentTickEnabledInvokerHandler.as_ref().unwrap()(self.inner, bEnabled) }
	}
	#[inline]
	pub fn SetConstraintProfile(&mut self, JointName: UName, ProfileName: UName, bDefaultIfNotFound: bool){
		unsafe{ USkeletalMeshComponent_SetConstraintProfileInvokerHandler.as_ref().unwrap()(self.inner, JointName, ProfileName, bDefaultIfNotFound) }
	}
	#[inline]
	pub fn SetConstraintProfileForAll(&mut self, ProfileName: UName, bDefaultIfNotFound: bool){
		unsafe{ USkeletalMeshComponent_SetConstraintProfileForAllInvokerHandler.as_ref().unwrap()(self.inner, ProfileName, bDefaultIfNotFound) }
	}
	#[inline]
	pub fn SetDisablePostProcessBlueprint(&mut self, bInDisablePostProcess: bool){
		unsafe{ USkeletalMeshComponent_SetDisablePostProcessBlueprintInvokerHandler.as_ref().unwrap()(self.inner, bInDisablePostProcess) }
	}
	#[inline]
	pub fn SetEnableBodyGravity(&mut self, bEnableGravity: bool, BoneName: UName){
		unsafe{ USkeletalMeshComponent_SetEnableBodyGravityInvokerHandler.as_ref().unwrap()(self.inner, bEnableGravity, BoneName) }
	}
	#[inline]
	pub fn SetEnableGravity(&mut self, bGravityEnabled: bool){
		unsafe{ USkeletalMeshComponent_SetEnableGravityInvokerHandler.as_ref().unwrap()(self.inner, bGravityEnabled) }
	}
	#[inline]
	pub fn SetEnableGravityOnAllBodiesBelow(&mut self, bEnableGravity: bool, BoneName: UName, bIncludeSelf: bool){
		unsafe{ USkeletalMeshComponent_SetEnableGravityOnAllBodiesBelowInvokerHandler.as_ref().unwrap()(self.inner, bEnableGravity, BoneName, bIncludeSelf) }
	}
	#[inline]
	pub fn SetEnablePhysicsBlending(&mut self, bNewBlendPhysics: bool){
		unsafe{ USkeletalMeshComponent_SetEnablePhysicsBlendingInvokerHandler.as_ref().unwrap()(self.inner, bNewBlendPhysics) }
	}
	#[inline]
	pub fn SetForceRefPose(&mut self, bNewForceRefPose: bool){
		unsafe{ USkeletalMeshComponent_SetForceRefPoseInvokerHandler.as_ref().unwrap()(self.inner, bNewForceRefPose) }
	}
	#[inline]
	pub fn SetMorphTarget(&mut self, MorphTargetName: UName, Value: f32, bRemoveZeroWeight: bool){
		unsafe{ USkeletalMeshComponent_SetMorphTargetInvokerHandler.as_ref().unwrap()(self.inner, MorphTargetName, Value, bRemoveZeroWeight) }
	}
	#[inline]
	pub fn SetNotifyRigidBodyCollision(&mut self, bNewNotifyRigidBodyCollision: bool){
		unsafe{ USkeletalMeshComponent_SetNotifyRigidBodyCollisionInvokerHandler.as_ref().unwrap()(self.inner, bNewNotifyRigidBodyCollision) }
	}
	#[inline]
	pub fn SetNotifyRigidBodyCollisionBelow(&mut self, bNewNotifyRigidBodyCollision: bool, BoneName: UName, bIncludeSelf: bool){
		unsafe{ USkeletalMeshComponent_SetNotifyRigidBodyCollisionBelowInvokerHandler.as_ref().unwrap()(self.inner, bNewNotifyRigidBodyCollision, BoneName, bIncludeSelf) }
	}
	#[inline]
	pub fn SetPhysMaterialOverride(&mut self, NewPhysMaterial: *mut UPhysicalMaterialOpaque){
		unsafe{ USkeletalMeshComponent_SetPhysMaterialOverrideInvokerHandler.as_ref().unwrap()(self.inner, NewPhysMaterial) }
	}
	#[inline]
	pub fn SetPhysicsAsset(&mut self, NewPhysicsAsset: *mut UPhysicsAssetOpaque, bForceReInit: bool){
		unsafe{ USkeletalMeshComponent_SetPhysicsAssetInvokerHandler.as_ref().unwrap()(self.inner, NewPhysicsAsset, bForceReInit) }
	}
	#[inline]
	pub fn SetPhysicsBlendWeight(&mut self, PhysicsBlendWeight: f32){
		unsafe{ USkeletalMeshComponent_SetPhysicsBlendWeightInvokerHandler.as_ref().unwrap()(self.inner, PhysicsBlendWeight) }
	}
	#[inline]
	pub fn SetPlayRate(&mut self, Rate: f32){
		unsafe{ USkeletalMeshComponent_SetPlayRateInvokerHandler.as_ref().unwrap()(self.inner, Rate) }
	}
	#[inline]
	pub fn SetPosition(&mut self, InPos: f32, bFireNotifies: bool){
		unsafe{ USkeletalMeshComponent_SetPositionInvokerHandler.as_ref().unwrap()(self.inner, InPos, bFireNotifies) }
	}
	#[inline]
	pub fn SetPredictedLODLevel(&mut self, InPredictedLODLevel: i32){
		unsafe{ USkeletalMeshComponent_SetPredictedLODLevelInvokerHandler.as_ref().unwrap()(self.inner, InPredictedLODLevel) }
	}
	#[inline]
	pub fn SetRootBodyIndex(&mut self, InBodyIndex: i32){
		unsafe{ USkeletalMeshComponent_SetRootBodyIndexInvokerHandler.as_ref().unwrap()(self.inner, InBodyIndex) }
	}
	#[inline]
	pub fn SetSimulatePhysics(&mut self, bEnabled: bool){
		unsafe{ USkeletalMeshComponent_SetSimulatePhysicsInvokerHandler.as_ref().unwrap()(self.inner, bEnabled) }
	}
	#[inline]
	pub fn SetSkeletalMeshAsset(&mut self, NewMesh: *mut USkeletalMeshOpaque){
		unsafe{ USkeletalMeshComponent_SetSkeletalMeshAssetInvokerHandler.as_ref().unwrap()(self.inner, NewMesh) }
	}
	#[inline]
	pub fn SetSkinnedAssetAndUpdate(&mut self, InSkinnedAsset: *mut USkinnedAssetOpaque, bReinitPose: bool){
		unsafe{ USkeletalMeshComponent_SetSkinnedAssetAndUpdateInvokerHandler.as_ref().unwrap()(self.inner, InSkinnedAsset, bReinitPose) }
	}
	#[inline]
	pub fn SetTeleportDistanceThreshold(&mut self, Threshold: f32){
		unsafe{ USkeletalMeshComponent_SetTeleportDistanceThresholdInvokerHandler.as_ref().unwrap()(self.inner, Threshold) }
	}
	#[inline]
	pub fn SetTeleportRotationThreshold(&mut self, Threshold: f32){
		unsafe{ USkeletalMeshComponent_SetTeleportRotationThresholdInvokerHandler.as_ref().unwrap()(self.inner, Threshold) }
	}
	#[inline]
	pub fn SetUpdateAnimationInEditor(&mut self, NewUpdateState: bool){
		unsafe{ USkeletalMeshComponent_SetUpdateAnimationInEditorInvokerHandler.as_ref().unwrap()(self.inner, NewUpdateState) }
	}
	#[inline]
	pub fn SetUpdateClothInEditor(&mut self, NewUpdateState: bool){
		unsafe{ USkeletalMeshComponent_SetUpdateClothInEditorInvokerHandler.as_ref().unwrap()(self.inner, NewUpdateState) }
	}
	#[inline]
	pub fn ShouldEvaluatePostProcessInstance(&self) -> bool{
		unsafe{ USkeletalMeshComponent_ShouldEvaluatePostProcessInstanceInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldOnlyTickMontages(&self, DeltaTime: f32) -> bool{
		unsafe{ USkeletalMeshComponent_ShouldOnlyTickMontagesInvokerHandler.as_ref().unwrap()(self.inner, DeltaTime) }
	}
	#[inline]
	pub fn ShouldPostUpdatePostProcessInstance(&self) -> bool{
		unsafe{ USkeletalMeshComponent_ShouldPostUpdatePostProcessInstanceInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldTickAnimation(&self) -> bool{
		unsafe{ USkeletalMeshComponent_ShouldTickAnimationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldTickPose(&self) -> bool{
		unsafe{ USkeletalMeshComponent_ShouldTickPoseInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldUpdatePostProcessInstance(&self) -> bool{
		unsafe{ USkeletalMeshComponent_ShouldUpdatePostProcessInstanceInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldUpdateTransform(&self, bLODHasChanged: bool) -> bool{
		unsafe{ USkeletalMeshComponent_ShouldUpdateTransformInvokerHandler.as_ref().unwrap()(self.inner, bLODHasChanged) }
	}
	#[inline]
	pub fn SkelMeshCompOnParticleSystemFinished(&mut self, PSC: *mut UParticleSystemComponentOpaque){
		unsafe{ USkeletalMeshComponent_SkelMeshCompOnParticleSystemFinishedInvokerHandler.as_ref().unwrap()(self.inner, PSC) }
	}
	#[inline]
	pub fn Stop(&mut self){
		unsafe{ USkeletalMeshComponent_StopInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SuspendClothingSimulation(&mut self){
		unsafe{ USkeletalMeshComponent_SuspendClothingSimulationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn TermArticulated(&mut self){
		unsafe{ USkeletalMeshComponent_TermArticulatedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn TermBodiesBelow(&mut self, ParentBoneName: UName){
		unsafe{ USkeletalMeshComponent_TermBodiesBelowInvokerHandler.as_ref().unwrap()(self.inner, ParentBoneName) }
	}
	#[inline]
	pub fn TermCollisionRelationships(&mut self){
		unsafe{ USkeletalMeshComponent_TermCollisionRelationshipsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn TickAnimInstances(&mut self, DeltaTime: f32, bNeedsValidRootMotion: bool){
		unsafe{ USkeletalMeshComponent_TickAnimInstancesInvokerHandler.as_ref().unwrap()(self.inner, DeltaTime, bNeedsValidRootMotion) }
	}
	#[inline]
	pub fn TickAnimation(&mut self, DeltaTime: f32, bNeedsValidRootMotion: bool){
		unsafe{ USkeletalMeshComponent_TickAnimationInvokerHandler.as_ref().unwrap()(self.inner, DeltaTime, bNeedsValidRootMotion) }
	}
	#[inline]
	pub fn TickPose(&mut self, DeltaTime: f32, bNeedsValidRootMotion: bool){
		unsafe{ USkeletalMeshComponent_TickPoseInvokerHandler.as_ref().unwrap()(self.inner, DeltaTime, bNeedsValidRootMotion) }
	}
	#[inline]
	pub fn ToggleDisablePostProcessBlueprint(&mut self){
		unsafe{ USkeletalMeshComponent_ToggleDisablePostProcessBlueprintInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UnHideBone(&mut self, BoneIndex: i32){
		unsafe{ USkeletalMeshComponent_UnHideBoneInvokerHandler.as_ref().unwrap()(self.inner, BoneIndex) }
	}
	#[inline]
	pub fn UnbindClothFromLeaderPoseComponent(&mut self, bRestoreSimulationSpace: bool){
		unsafe{ USkeletalMeshComponent_UnbindClothFromLeaderPoseComponentInvokerHandler.as_ref().unwrap()(self.inner, bRestoreSimulationSpace) }
	}
	#[inline]
	pub fn UpdateBoneBodyMapping(&mut self){
		unsafe{ USkeletalMeshComponent_UpdateBoneBodyMappingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateClothTransform(&mut self){
		unsafe{ USkeletalMeshComponent_UpdateClothTransformInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateCollisionProfile(&mut self){
		unsafe{ USkeletalMeshComponent_UpdateCollisionProfileInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateFollowerComponent(&mut self){
		unsafe{ USkeletalMeshComponent_UpdateFollowerComponentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateHasValidBodies(&mut self){
		unsafe{ USkeletalMeshComponent_UpdateHasValidBodiesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateLODStatus(&mut self) -> bool{
		unsafe{ USkeletalMeshComponent_UpdateLODStatusInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateMeshForBrokenConstraints(&mut self){
		unsafe{ USkeletalMeshComponent_UpdateMeshForBrokenConstraintsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateOverlapsImpl(&mut self, PendingOverlaps: *mut TOverlapArrayViewOpaque, bDoNotifies: bool, OverlapsAtEndLocation: *mut TOverlapArrayViewOpaque) -> bool{
		unsafe{ USkeletalMeshComponent_UpdateOverlapsImplInvokerHandler.as_ref().unwrap()(self.inner, PendingOverlaps, bDoNotifies, OverlapsAtEndLocation) }
	}
	#[inline]
	pub fn UpdatePhysicsToRBChannels(&mut self){
		unsafe{ USkeletalMeshComponent_UpdatePhysicsToRBChannelsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdatePoseWatches(&mut self){
		unsafe{ USkeletalMeshComponent_UpdatePoseWatchesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateRBJointMotors(&mut self){
		unsafe{ USkeletalMeshComponent_UpdateRBJointMotorsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ValidateAnimation(&mut self){
		unsafe{ USkeletalMeshComponent_ValidateAnimationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn WakeAllRigidBodies(&mut self){
		unsafe{ USkeletalMeshComponent_WakeAllRigidBodiesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
}
pub struct UCapsuleComponent{
    inner: *mut UCapsuleComponentOpaque
}
impl IPtr for UCapsuleComponent{
    #[inline]
    fn inner(&self) -> *mut UCapsuleComponentOpaque { self.inner }
    #[inline]
    fn from_ptr(ptr: *mut c_void) -> Option<Self>{
        if_else!(
            ptr.is_null(),
            None,
            Some(Self{inner: ptr})
        )        
    }
}
impl UCapsuleComponent{
    
	#[inline]
	pub fn CalcBoundingCylinder(&self, CylinderRadius: &mut f32, CylinderHalfHeight: &mut f32){
		unsafe{ UCapsuleComponent_CalcBoundingCylinderInvokerHandler.as_ref().unwrap()(self.inner, CylinderRadius, CylinderHalfHeight) }
	}
	#[inline]
	pub fn CreateSceneProxy(&mut self) -> *mut FPrimitiveSceneProxyOpaque{
		unsafe{ UCapsuleComponent_CreateSceneProxyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetCollisionShape(&self, Inflation: f32) -> CollisionShape{
		unsafe{ UCapsuleComponent_GetCollisionShapeInvokerHandler.as_ref().unwrap()(self.inner, Inflation) }
	}
	#[inline]
	pub fn GetScaledCapsuleHalfHeight(&self) -> f32{
		unsafe{ UCapsuleComponent_GetScaledCapsuleHalfHeightInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetScaledCapsuleHalfHeight_WithoutHemisphere(&self) -> f32{
		unsafe{ UCapsuleComponent_GetScaledCapsuleHalfHeight_WithoutHemisphereInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetScaledCapsuleRadius(&self) -> f32{
		unsafe{ UCapsuleComponent_GetScaledCapsuleRadiusInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetScaledCapsuleSize(&self, OutRadius: &mut f32, OutHalfHeight: &mut f32){
		unsafe{ UCapsuleComponent_GetScaledCapsuleSizeInvokerHandler.as_ref().unwrap()(self.inner, OutRadius, OutHalfHeight) }
	}
	#[inline]
	pub fn GetScaledCapsuleSize_WithoutHemisphere(&self, OutRadius: &mut f32, OutHalfHeightWithoutHemisphere: &mut f32){
		unsafe{ UCapsuleComponent_GetScaledCapsuleSize_WithoutHemisphereInvokerHandler.as_ref().unwrap()(self.inner, OutRadius, OutHalfHeightWithoutHemisphere) }
	}
	#[inline]
	pub fn GetShapeScale(&self) -> f32{
		unsafe{ UCapsuleComponent_GetShapeScaleInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetUnscaledCapsuleHalfHeight(&self) -> f32{
		unsafe{ UCapsuleComponent_GetUnscaledCapsuleHalfHeightInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetUnscaledCapsuleHalfHeight_WithoutHemisphere(&self) -> f32{
		unsafe{ UCapsuleComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphereInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetUnscaledCapsuleRadius(&self) -> f32{
		unsafe{ UCapsuleComponent_GetUnscaledCapsuleRadiusInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetUnscaledCapsuleSize(&self, OutRadius: &mut f32, OutHalfHeight: &mut f32){
		unsafe{ UCapsuleComponent_GetUnscaledCapsuleSizeInvokerHandler.as_ref().unwrap()(self.inner, OutRadius, OutHalfHeight) }
	}
	#[inline]
	pub fn GetUnscaledCapsuleSize_WithoutHemisphere(&self, OutRadius: &mut f32, OutHalfHeightWithoutHemisphere: &mut f32){
		unsafe{ UCapsuleComponent_GetUnscaledCapsuleSize_WithoutHemisphereInvokerHandler.as_ref().unwrap()(self.inner, OutRadius, OutHalfHeightWithoutHemisphere) }
	}
	#[inline]
	pub fn InitCapsuleSize(&mut self, InRadius: f32, InHalfHeight: f32){
		unsafe{ UCapsuleComponent_InitCapsuleSizeInvokerHandler.as_ref().unwrap()(self.inner, InRadius, InHalfHeight) }
	}
	#[inline]
	pub fn IsZeroExtent(&self) -> bool{
		unsafe{ UCapsuleComponent_IsZeroExtentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PostLoad(&mut self){
		unsafe{ UCapsuleComponent_PostLoadInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SetCapsuleHalfHeight(&mut self, HalfHeight: f32, bUpdateOverlaps: bool){
		unsafe{ UCapsuleComponent_SetCapsuleHalfHeightInvokerHandler.as_ref().unwrap()(self.inner, HalfHeight, bUpdateOverlaps) }
	}
	#[inline]
	pub fn SetCapsuleRadius(&mut self, Radius: f32, bUpdateOverlaps: bool){
		unsafe{ UCapsuleComponent_SetCapsuleRadiusInvokerHandler.as_ref().unwrap()(self.inner, Radius, bUpdateOverlaps) }
	}
	#[inline]
	pub fn SetCapsuleSize(&mut self, InRadius: f32, InHalfHeight: f32, bUpdateOverlaps: bool){
		unsafe{ UCapsuleComponent_SetCapsuleSizeInvokerHandler.as_ref().unwrap()(self.inner, InRadius, InHalfHeight, bUpdateOverlaps) }
	}
	#[inline]
	pub fn UpdateBodySetup(&mut self){
		unsafe{ UCapsuleComponent_UpdateBodySetupInvokerHandler.as_ref().unwrap()(self.inner) }
	}
}
pub struct UCharacterMovementComponent{
    inner: *mut UCharacterMovementComponentOpaque
}
impl IPtr for UCharacterMovementComponent{
    #[inline]
    fn inner(&self) -> *mut UCharacterMovementComponentOpaque { self.inner }
    #[inline]
    fn from_ptr(ptr: *mut c_void) -> Option<Self>{
        if_else!(
            ptr.is_null(),
            None,
            Some(Self{inner: ptr})
        )        
    }
}
impl UCharacterMovementComponent{
    
	#[inline]
	pub fn AddForce(&mut self, Force: Vector3){
		unsafe{ UCharacterMovementComponent_AddForceInvokerHandler.as_ref().unwrap()(self.inner, Force) }
	}
	#[inline]
	pub fn AddImpulse(&mut self, Impulse: Vector3, bVelocityChange: bool){
		unsafe{ UCharacterMovementComponent_AddImpulseInvokerHandler.as_ref().unwrap()(self.inner, Impulse, bVelocityChange) }
	}
	#[inline]
	pub fn AdjustFloorHeight(&mut self){
		unsafe{ UCharacterMovementComponent_AdjustFloorHeightInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ApplyAccumulatedForces(&mut self, DeltaSeconds: f32){
		unsafe{ UCharacterMovementComponent_ApplyAccumulatedForcesInvokerHandler.as_ref().unwrap()(self.inner, DeltaSeconds) }
	}
	#[inline]
	pub fn ApplyDownwardForce(&mut self, DeltaSeconds: f32){
		unsafe{ UCharacterMovementComponent_ApplyDownwardForceInvokerHandler.as_ref().unwrap()(self.inner, DeltaSeconds) }
	}
	#[inline]
	pub fn ApplyNetworkMovementMode(&mut self, ReceivedMode: u8){
		unsafe{ UCharacterMovementComponent_ApplyNetworkMovementModeInvokerHandler.as_ref().unwrap()(self.inner, ReceivedMode) }
	}
	#[inline]
	pub fn ApplyRepulsionForce(&mut self, DeltaSeconds: f32){
		unsafe{ UCharacterMovementComponent_ApplyRepulsionForceInvokerHandler.as_ref().unwrap()(self.inner, DeltaSeconds) }
	}
	#[inline]
	pub fn BeginDestroy(&mut self){
		unsafe{ UCharacterMovementComponent_BeginDestroyInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn BeginPlay(&mut self){
		unsafe{ UCharacterMovementComponent_BeginPlayInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CalcAvoidanceVelocity(&mut self, DeltaTime: f32){
		unsafe{ UCharacterMovementComponent_CalcAvoidanceVelocityInvokerHandler.as_ref().unwrap()(self.inner, DeltaTime) }
	}
	#[inline]
	pub fn CalcVelocity(&mut self, DeltaTime: f32, Friction: f32, bFluid: bool, BrakingDeceleration: f32){
		unsafe{ UCharacterMovementComponent_CalcVelocityInvokerHandler.as_ref().unwrap()(self.inner, DeltaTime, Friction, bFluid, BrakingDeceleration) }
	}
	#[inline]
	pub fn CanAttemptJump(&self) -> bool{
		unsafe{ UCharacterMovementComponent_CanAttemptJumpInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CanCrouchInCurrentState(&self) -> bool{
		unsafe{ UCharacterMovementComponent_CanCrouchInCurrentStateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CanStartPathFollowing(&self) -> bool{
		unsafe{ UCharacterMovementComponent_CanStartPathFollowingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CanStopPathFollowing(&self) -> bool{
		unsafe{ UCharacterMovementComponent_CanStopPathFollowingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn CanWalkOffLedges(&self) -> bool{
		unsafe{ UCharacterMovementComponent_CanWalkOffLedgesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClearAccumulatedForces(&mut self){
		unsafe{ UCharacterMovementComponent_ClearAccumulatedForcesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ClientAckGoodMove(&mut self, TimeStamp: f32){
		unsafe{ UCharacterMovementComponent_ClientAckGoodMoveInvokerHandler.as_ref().unwrap()(self.inner, TimeStamp) }
	}
	#[inline]
	pub fn ClientAckGoodMove_Implementation(&mut self, TimeStamp: f32){
		unsafe{ UCharacterMovementComponent_ClientAckGoodMove_ImplementationInvokerHandler.as_ref().unwrap()(self.inner, TimeStamp) }
	}
	#[inline]
	pub fn ClientAdjustPosition(&mut self, TimeStamp: f32, NewLoc: Vector3, NewVel: Vector3, NewBase: &mut UPrimitiveComponent, NewBaseBoneName: UName, bHasBase: bool, bBaseRelativePosition: bool, ServerMovementMode: u8){
		unsafe{ UCharacterMovementComponent_ClientAdjustPositionInvokerHandler.as_ref().unwrap()(self.inner, TimeStamp, NewLoc, NewVel, NewBase.inner(), NewBaseBoneName, bHasBase, bBaseRelativePosition, ServerMovementMode) }
	}
	#[inline]
	pub fn ClientVeryShortAdjustPosition(&mut self, TimeStamp: f32, NewLoc: Vector3, NewBase: &mut UPrimitiveComponent, NewBaseBoneName: UName, bHasBase: bool, bBaseRelativePosition: bool, ServerMovementMode: u8){
		unsafe{ UCharacterMovementComponent_ClientVeryShortAdjustPositionInvokerHandler.as_ref().unwrap()(self.inner, TimeStamp, NewLoc, NewBase.inner(), NewBaseBoneName, bHasBase, bBaseRelativePosition, ServerMovementMode) }
	}
	#[inline]
	pub fn ClientVeryShortAdjustPosition_Implementation(&mut self, TimeStamp: f32, NewLoc: Vector3, NewBase: &mut UPrimitiveComponent, NewBaseBoneName: UName, bHasBase: bool, bBaseRelativePosition: bool, ServerMovementMode: u8){
		unsafe{ UCharacterMovementComponent_ClientVeryShortAdjustPosition_ImplementationInvokerHandler.as_ref().unwrap()(self.inner, TimeStamp, NewLoc, NewBase.inner(), NewBaseBoneName, bHasBase, bBaseRelativePosition, ServerMovementMode) }
	}
	#[inline]
	pub fn Crouch(&mut self, bClientSimulation: bool){
		unsafe{ UCharacterMovementComponent_CrouchInvokerHandler.as_ref().unwrap()(self.inner, bClientSimulation) }
	}
	#[inline]
	pub fn Deactivate(&mut self){
		unsafe{ UCharacterMovementComponent_DeactivateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn DisableMovement(&mut self){
		unsafe{ UCharacterMovementComponent_DisableMovementInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn DoJump(&mut self, bReplayingMoves: bool) -> bool{
		unsafe{ UCharacterMovementComponent_DoJumpInvokerHandler.as_ref().unwrap()(self.inner, bReplayingMoves) }
	}
	#[inline]
	pub fn FindWaterLine(&mut self, Start: Vector3, End: Vector3) -> Vector3{
		unsafe{ UCharacterMovementComponent_FindWaterLineInvokerHandler.as_ref().unwrap()(self.inner, Start, End) }
	}
	#[inline]
	pub fn FlushServerMoves(&mut self){
		unsafe{ UCharacterMovementComponent_FlushServerMovesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ForceClientAdjustment(&mut self){
		unsafe{ UCharacterMovementComponent_ForceClientAdjustmentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ForcePositionUpdate(&mut self, DeltaTime: f32) -> bool{
		unsafe{ UCharacterMovementComponent_ForcePositionUpdateInvokerHandler.as_ref().unwrap()(self.inner, DeltaTime) }
	}
	#[inline]
	pub fn ForceReplicationUpdate(&mut self){
		unsafe{ UCharacterMovementComponent_ForceReplicationUpdateInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetAnalogInputModifier(&self) -> f32{
		unsafe{ UCharacterMovementComponent_GetAnalogInputModifierInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetAvoidanceGroupMask(&mut self) -> i32{
		unsafe{ UCharacterMovementComponent_GetAvoidanceGroupMaskInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetBestDirectionOffActor(&self, BaseActor: &mut AActor) -> Vector3{
		unsafe{ UCharacterMovementComponent_GetBestDirectionOffActorInvokerHandler.as_ref().unwrap()(self.inner, BaseActor.inner()) }
	}
	#[inline]
	pub fn GetCharacterOwner(&self) -> Option<ACharacter>{
		unsafe{ ACharacter::from_ptr(UCharacterMovementComponent_GetCharacterOwnerInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetCrouchedHalfHeight(&self) -> f32{
		unsafe{ UCharacterMovementComponent_GetCrouchedHalfHeightInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetCurrentAcceleration(&self) -> Vector3{
		unsafe{ UCharacterMovementComponent_GetCurrentAccelerationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetCurrentReplayedSavedMove(&self) -> *mut FSavedMove_CharacterOpaque{
		unsafe{ UCharacterMovementComponent_GetCurrentReplayedSavedMoveInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetDeltaRotation(&self, DeltaTime: f32) -> Rotator{
		unsafe{ UCharacterMovementComponent_GetDeltaRotationInvokerHandler.as_ref().unwrap()(self.inner, DeltaTime) }
	}
	#[inline]
	pub fn GetFallingLateralAcceleration(&mut self, DeltaTime: f32) -> Vector3{
		unsafe{ UCharacterMovementComponent_GetFallingLateralAccelerationInvokerHandler.as_ref().unwrap()(self.inner, DeltaTime) }
	}
	#[inline]
	pub fn GetGravityZ(&self) -> f32{
		unsafe{ UCharacterMovementComponent_GetGravityZInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetGroupsToAvoidMask(&mut self) -> i32{
		unsafe{ UCharacterMovementComponent_GetGroupsToAvoidMaskInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetGroupsToIgnoreMask(&mut self) -> i32{
		unsafe{ UCharacterMovementComponent_GetGroupsToIgnoreMaskInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetImpartedMovementBaseVelocity(&self) -> Vector3{
		unsafe{ UCharacterMovementComponent_GetImpartedMovementBaseVelocityInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetLastUpdateLocation(&self) -> Vector3{
		unsafe{ UCharacterMovementComponent_GetLastUpdateLocationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetLastUpdateQuat(&self) -> Quaternion{
		unsafe{ UCharacterMovementComponent_GetLastUpdateQuatInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetLastUpdateRequestedVelocity(&self) -> Vector3{
		unsafe{ UCharacterMovementComponent_GetLastUpdateRequestedVelocityInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetLastUpdateRotation(&self) -> Rotator{
		unsafe{ UCharacterMovementComponent_GetLastUpdateRotationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetLastUpdateVelocity(&self) -> Vector3{
		unsafe{ UCharacterMovementComponent_GetLastUpdateVelocityInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetMaxAcceleration(&self) -> f32{
		unsafe{ UCharacterMovementComponent_GetMaxAccelerationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetMaxBrakingDeceleration(&self) -> f32{
		unsafe{ UCharacterMovementComponent_GetMaxBrakingDecelerationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetMaxJumpHeight(&self) -> f32{
		unsafe{ UCharacterMovementComponent_GetMaxJumpHeightInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetMaxJumpHeightWithJumpTime(&self) -> f32{
		unsafe{ UCharacterMovementComponent_GetMaxJumpHeightWithJumpTimeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetMaxSpeed(&self) -> f32{
		unsafe{ UCharacterMovementComponent_GetMaxSpeedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetMinAnalogSpeed(&self) -> f32{
		unsafe{ UCharacterMovementComponent_GetMinAnalogSpeedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetMovementBase(&self) -> Option<UPrimitiveComponent>{
		unsafe{ UPrimitiveComponent::from_ptr(UCharacterMovementComponent_GetMovementBaseInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetMovementName(&self) -> String{
		unsafe{ char_str_2_string(UCharacterMovementComponent_GetMovementNameInvokerHandler.as_ref().unwrap()(self.inner)) }
	}
	#[inline]
	pub fn GetNetworkSafeRandomAngleDegrees(&self) -> f32{
		unsafe{ UCharacterMovementComponent_GetNetworkSafeRandomAngleDegreesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetPathFollowingBrakingDistance(&self, MaxSpeed: f32) -> f32{
		unsafe{ UCharacterMovementComponent_GetPathFollowingBrakingDistanceInvokerHandler.as_ref().unwrap()(self.inner, MaxSpeed) }
	}
	#[inline]
	pub fn GetPerchRadiusThreshold(&self) -> f32{
		unsafe{ UCharacterMovementComponent_GetPerchRadiusThresholdInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetPredictionData_Client(&self) -> *mut FNetworkPredictionData_ClientOpaque{
		unsafe{ UCharacterMovementComponent_GetPredictionData_ClientInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetPredictionData_Client_Character(&self) -> *mut FNetworkPredictionData_Client_CharacterOpaque{
		unsafe{ UCharacterMovementComponent_GetPredictionData_Client_CharacterInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetPredictionData_Server(&self) -> *mut FNetworkPredictionData_ServerOpaque{
		unsafe{ UCharacterMovementComponent_GetPredictionData_ServerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetPredictionData_Server_Character(&self) -> *mut FNetworkPredictionData_Server_CharacterOpaque{
		unsafe{ UCharacterMovementComponent_GetPredictionData_Server_CharacterInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetRVOAvoidanceConsiderationRadius(&mut self) -> f32{
		unsafe{ UCharacterMovementComponent_GetRVOAvoidanceConsiderationRadiusInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetRVOAvoidanceHeight(&mut self) -> f32{
		unsafe{ UCharacterMovementComponent_GetRVOAvoidanceHeightInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetRVOAvoidanceOrigin(&mut self) -> Vector3{
		unsafe{ UCharacterMovementComponent_GetRVOAvoidanceOriginInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetRVOAvoidanceRadius(&mut self) -> f32{
		unsafe{ UCharacterMovementComponent_GetRVOAvoidanceRadiusInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetRVOAvoidanceUID(&mut self) -> i32{
		unsafe{ UCharacterMovementComponent_GetRVOAvoidanceUIDInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetRVOAvoidanceUIDFast(&self) -> i32{
		unsafe{ UCharacterMovementComponent_GetRVOAvoidanceUIDFastInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetRVOAvoidanceWeight(&mut self) -> f32{
		unsafe{ UCharacterMovementComponent_GetRVOAvoidanceWeightInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetServerLastTransformUpdateTimeStamp(&self) -> f32{
		unsafe{ UCharacterMovementComponent_GetServerLastTransformUpdateTimeStampInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetSimulationTimeStep(&self, RemainingTime: f32, Iterations: i32) -> f32{
		unsafe{ UCharacterMovementComponent_GetSimulationTimeStepInvokerHandler.as_ref().unwrap()(self.inner, RemainingTime, Iterations) }
	}
	#[inline]
	pub fn GetValidPerchRadius(&self) -> f32{
		unsafe{ UCharacterMovementComponent_GetValidPerchRadiusInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetVelocityForRVOConsideration(&mut self) -> Vector3{
		unsafe{ UCharacterMovementComponent_GetVelocityForRVOConsiderationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetWalkableFloorAngle(&self) -> f32{
		unsafe{ UCharacterMovementComponent_GetWalkableFloorAngleInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn GetWalkableFloorZ(&self) -> f32{
		unsafe{ UCharacterMovementComponent_GetWalkableFloorZInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HandlePendingLaunch(&mut self) -> bool{
		unsafe{ UCharacterMovementComponent_HandlePendingLaunchInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasAnimRootMotion(&self) -> bool{
		unsafe{ UCharacterMovementComponent_HasAnimRootMotionInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasPredictionData_Client(&self) -> bool{
		unsafe{ UCharacterMovementComponent_HasPredictionData_ClientInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasPredictionData_Server(&self) -> bool{
		unsafe{ UCharacterMovementComponent_HasPredictionData_ServerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasRootMotionSources(&self) -> bool{
		unsafe{ UCharacterMovementComponent_HasRootMotionSourcesInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn HasValidData(&self) -> bool{
		unsafe{ UCharacterMovementComponent_HasValidDataInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ImmersionDepth(&self) -> f32{
		unsafe{ UCharacterMovementComponent_ImmersionDepthInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsCrouching(&self) -> bool{
		unsafe{ UCharacterMovementComponent_IsCrouchingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsFalling(&self) -> bool{
		unsafe{ UCharacterMovementComponent_IsFallingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsFlying(&self) -> bool{
		unsafe{ UCharacterMovementComponent_IsFlyingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsMovementInProgress(&self) -> bool{
		unsafe{ UCharacterMovementComponent_IsMovementInProgressInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsMovingOnGround(&self) -> bool{
		unsafe{ UCharacterMovementComponent_IsMovingOnGroundInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsSwimming(&self) -> bool{
		unsafe{ UCharacterMovementComponent_IsSwimmingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn IsWalking(&self) -> bool{
		unsafe{ UCharacterMovementComponent_IsWalkingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn JumpOff(&mut self, MovementBaseActor: &mut AActor){
		unsafe{ UCharacterMovementComponent_JumpOffInvokerHandler.as_ref().unwrap()(self.inner, MovementBaseActor.inner()) }
	}
	#[inline]
	pub fn JumpOutOfWater(&mut self, WallNormal: Vector3){
		unsafe{ UCharacterMovementComponent_JumpOutOfWaterInvokerHandler.as_ref().unwrap()(self.inner, WallNormal) }
	}
	#[inline]
	pub fn K2_GetWalkableFloorAngle(&self) -> f32{
		unsafe{ UCharacterMovementComponent_K2_GetWalkableFloorAngleInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn K2_GetWalkableFloorZ(&self) -> f32{
		unsafe{ UCharacterMovementComponent_K2_GetWalkableFloorZInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn MaybeSaveBaseLocation(&mut self){
		unsafe{ UCharacterMovementComponent_MaybeSaveBaseLocationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn MaybeUpdateBasedMovement(&mut self, DeltaSeconds: f32){
		unsafe{ UCharacterMovementComponent_MaybeUpdateBasedMovementInvokerHandler.as_ref().unwrap()(self.inner, DeltaSeconds) }
	}
	#[inline]
	pub fn NotifyBumpedPawn(&mut self, BumpedPawn: &mut APawn){
		unsafe{ UCharacterMovementComponent_NotifyBumpedPawnInvokerHandler.as_ref().unwrap()(self.inner, BumpedPawn.inner()) }
	}
	#[inline]
	pub fn NotifyJumpApex(&mut self){
		unsafe{ UCharacterMovementComponent_NotifyJumpApexInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnRegister(&mut self){
		unsafe{ UCharacterMovementComponent_OnRegisterInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn OnRootMotionSourceBeingApplied(&mut self, Source: *mut FRootMotionSourceOpaque){
		unsafe{ UCharacterMovementComponent_OnRootMotionSourceBeingAppliedInvokerHandler.as_ref().unwrap()(self.inner, Source) }
	}
	#[inline]
	pub fn OnTeleported(&mut self){
		unsafe{ UCharacterMovementComponent_OnTeleportedInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PackNetworkMovementMode(&self) -> u8{
		unsafe{ UCharacterMovementComponent_PackNetworkMovementModeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn PackYawAndPitchTo32(Yaw: f32, Pitch: f32) -> u32{
		unsafe{ UCharacterMovementComponent_PackYawAndPitchTo32InvokerHandler.as_ref().unwrap()(Yaw, Pitch) }
	}
	#[inline]
	pub fn PerformAirControlForPathFollowing(&mut self, Direction: Vector3, ZDiff: f32){
		unsafe{ UCharacterMovementComponent_PerformAirControlForPathFollowingInvokerHandler.as_ref().unwrap()(self.inner, Direction, ZDiff) }
	}
	#[inline]
	pub fn PhysFalling(&mut self, deltaTime: f32, Iterations: i32){
		unsafe{ UCharacterMovementComponent_PhysFallingInvokerHandler.as_ref().unwrap()(self.inner, deltaTime, Iterations) }
	}
	#[inline]
	pub fn PhysicsRotation(&mut self, DeltaTime: f32){
		unsafe{ UCharacterMovementComponent_PhysicsRotationInvokerHandler.as_ref().unwrap()(self.inner, DeltaTime) }
	}
	#[inline]
	pub fn PhysicsVolumeChanged(&mut self, NewVolume: *mut APhysicsVolumeOpaque){
		unsafe{ UCharacterMovementComponent_PhysicsVolumeChangedInvokerHandler.as_ref().unwrap()(self.inner, NewVolume) }
	}
	#[inline]
	pub fn PostLoad(&mut self){
		unsafe{ UCharacterMovementComponent_PostLoadInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RegisterComponentTickFunctions(&mut self, bRegister: bool){
		unsafe{ UCharacterMovementComponent_RegisterComponentTickFunctionsInvokerHandler.as_ref().unwrap()(self.inner, bRegister) }
	}
	#[inline]
	pub fn RemoveRootMotionSource(&mut self, InstanceName: UName){
		unsafe{ UCharacterMovementComponent_RemoveRootMotionSourceInvokerHandler.as_ref().unwrap()(self.inner, InstanceName) }
	}
	#[inline]
	pub fn RemoveRootMotionSourceByID(&mut self, RootMotionSourceID: u16){
		unsafe{ UCharacterMovementComponent_RemoveRootMotionSourceByIDInvokerHandler.as_ref().unwrap()(self.inner, RootMotionSourceID) }
	}
	#[inline]
	pub fn ResetPredictionData_Client(&mut self){
		unsafe{ UCharacterMovementComponent_ResetPredictionData_ClientInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ResetPredictionData_Server(&mut self){
		unsafe{ UCharacterMovementComponent_ResetPredictionData_ServerInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn RoundAcceleration(&self, InAccel: Vector3) -> Vector3{
		unsafe{ UCharacterMovementComponent_RoundAccelerationInvokerHandler.as_ref().unwrap()(self.inner, InAccel) }
	}
	#[inline]
	pub fn SaveBaseLocation(&mut self){
		unsafe{ UCharacterMovementComponent_SaveBaseLocationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SendClientAdjustment(&mut self){
		unsafe{ UCharacterMovementComponent_SendClientAdjustmentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SetAvoidanceEnabled(&mut self, bEnable: bool){
		unsafe{ UCharacterMovementComponent_SetAvoidanceEnabledInvokerHandler.as_ref().unwrap()(self.inner, bEnable) }
	}
	#[inline]
	pub fn SetAvoidanceGroup(&mut self, GroupFlags: i32){
		unsafe{ UCharacterMovementComponent_SetAvoidanceGroupInvokerHandler.as_ref().unwrap()(self.inner, GroupFlags) }
	}
	#[inline]
	pub fn SetAvoidanceVelocityLock(&mut self, Avoidance: *mut UAvoidanceManagerOpaque, Duration: f32){
		unsafe{ UCharacterMovementComponent_SetAvoidanceVelocityLockInvokerHandler.as_ref().unwrap()(self.inner, Avoidance, Duration) }
	}
	#[inline]
	pub fn SetBase(&mut self, NewBase: &mut UPrimitiveComponent, BoneName: UName, bNotifyActor: bool){
		unsafe{ UCharacterMovementComponent_SetBaseInvokerHandler.as_ref().unwrap()(self.inner, NewBase.inner(), BoneName, bNotifyActor) }
	}
	#[inline]
	pub fn SetCrouchedHalfHeight(&mut self, NewValue: f32){
		unsafe{ UCharacterMovementComponent_SetCrouchedHalfHeightInvokerHandler.as_ref().unwrap()(self.inner, NewValue) }
	}
	#[inline]
	pub fn SetDefaultMovementMode(&mut self){
		unsafe{ UCharacterMovementComponent_SetDefaultMovementModeInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn SetGroupsToAvoid(&mut self, GroupFlags: i32){
		unsafe{ UCharacterMovementComponent_SetGroupsToAvoidInvokerHandler.as_ref().unwrap()(self.inner, GroupFlags) }
	}
	#[inline]
	pub fn SetGroupsToIgnore(&mut self, GroupFlags: i32){
		unsafe{ UCharacterMovementComponent_SetGroupsToIgnoreInvokerHandler.as_ref().unwrap()(self.inner, GroupFlags) }
	}
	#[inline]
	pub fn SetRVOAvoidanceUID(&mut self, UID: i32){
		unsafe{ UCharacterMovementComponent_SetRVOAvoidanceUIDInvokerHandler.as_ref().unwrap()(self.inner, UID) }
	}
	#[inline]
	pub fn SetRVOAvoidanceWeight(&mut self, Weight: f32){
		unsafe{ UCharacterMovementComponent_SetRVOAvoidanceWeightInvokerHandler.as_ref().unwrap()(self.inner, Weight) }
	}
	#[inline]
	pub fn SetUpdatedComponent(&mut self, NewUpdatedComponent: &mut USceneComponent){
		unsafe{ UCharacterMovementComponent_SetUpdatedComponentInvokerHandler.as_ref().unwrap()(self.inner, NewUpdatedComponent.inner()) }
	}
	#[inline]
	pub fn SetWalkableFloorAngle(&mut self, InWalkableFloorAngle: f32){
		unsafe{ UCharacterMovementComponent_SetWalkableFloorAngleInvokerHandler.as_ref().unwrap()(self.inner, InWalkableFloorAngle) }
	}
	#[inline]
	pub fn SetWalkableFloorZ(&mut self, InWalkableFloorZ: f32){
		unsafe{ UCharacterMovementComponent_SetWalkableFloorZInvokerHandler.as_ref().unwrap()(self.inner, InWalkableFloorZ) }
	}
	#[inline]
	pub fn ShouldCorrectRotation(&self) -> bool{
		unsafe{ UCharacterMovementComponent_ShouldCorrectRotationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldPerformAirControlForPathFollowing(&self) -> bool{
		unsafe{ UCharacterMovementComponent_ShouldPerformAirControlForPathFollowingInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldRemainVertical(&self) -> bool{
		unsafe{ UCharacterMovementComponent_ShouldRemainVerticalInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn ShouldUsePackedMovementRPCs(&self) -> bool{
		unsafe{ UCharacterMovementComponent_ShouldUsePackedMovementRPCsInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn StartNewPhysics(&mut self, deltaTime: f32, Iterations: i32){
		unsafe{ UCharacterMovementComponent_StartNewPhysicsInvokerHandler.as_ref().unwrap()(self.inner, deltaTime, Iterations) }
	}
	#[inline]
	pub fn StartSwimming(&mut self, OldLocation: Vector3, OldVelocity: Vector3, timeTick: f32, remainingTime: f32, Iterations: i32){
		unsafe{ UCharacterMovementComponent_StartSwimmingInvokerHandler.as_ref().unwrap()(self.inner, OldLocation, OldVelocity, timeTick, remainingTime, Iterations) }
	}
	#[inline]
	pub fn StopActiveMovement(&mut self){
		unsafe{ UCharacterMovementComponent_StopActiveMovementInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UnCrouch(&mut self, bClientSimulation: bool){
		unsafe{ UCharacterMovementComponent_UnCrouchInvokerHandler.as_ref().unwrap()(self.inner, bClientSimulation) }
	}
	#[inline]
	pub fn UpdateBasedMovement(&mut self, DeltaSeconds: f32){
		unsafe{ UCharacterMovementComponent_UpdateBasedMovementInvokerHandler.as_ref().unwrap()(self.inner, DeltaSeconds) }
	}
	#[inline]
	pub fn UpdateCharacterStateAfterMovement(&mut self, DeltaSeconds: f32){
		unsafe{ UCharacterMovementComponent_UpdateCharacterStateAfterMovementInvokerHandler.as_ref().unwrap()(self.inner, DeltaSeconds) }
	}
	#[inline]
	pub fn UpdateCharacterStateBeforeMovement(&mut self, DeltaSeconds: f32){
		unsafe{ UCharacterMovementComponent_UpdateCharacterStateBeforeMovementInvokerHandler.as_ref().unwrap()(self.inner, DeltaSeconds) }
	}
	#[inline]
	pub fn UpdateFloorFromAdjustment(&mut self){
		unsafe{ UCharacterMovementComponent_UpdateFloorFromAdjustmentInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn UpdateProxyAcceleration(&mut self){
		unsafe{ UCharacterMovementComponent_UpdateProxyAccelerationInvokerHandler.as_ref().unwrap()(self.inner) }
	}
	#[inline]
	pub fn VisualizeMovement(&self) -> f32{
		unsafe{ UCharacterMovementComponent_VisualizeMovementInvokerHandler.as_ref().unwrap()(self.inner) }
	}
}
mod ffis{
	use super::*;

    type UObject_AbortInsideMemberFunctionInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_AbortInsideMemberFunctionInvokerHandler: Option<UObject_AbortInsideMemberFunctionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_AbortInsideMemberFunction_handler(handler: UObject_AbortInsideMemberFunctionInvoker){
        unsafe{ UObject_AbortInsideMemberFunctionInvokerHandler = Some(handler) };
    }

    type UObject_AreNativePropertiesIdenticalToInvoker = unsafe extern "C" fn(*mut c_void, *mut UObjectOpaque) -> bool;
    pub(super) static mut UObject_AreNativePropertiesIdenticalToInvokerHandler: Option<UObject_AreNativePropertiesIdenticalToInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_AreNativePropertiesIdenticalTo_handler(handler: UObject_AreNativePropertiesIdenticalToInvoker){
        unsafe{ UObject_AreNativePropertiesIdenticalToInvokerHandler = Some(handler) };
    }

    type UObject_BeginCacheForCookedPlatformDataInvoker = unsafe extern "C" fn(*mut c_void, *mut ITargetPlatformOpaque);
    pub(super) static mut UObject_BeginCacheForCookedPlatformDataInvokerHandler: Option<UObject_BeginCacheForCookedPlatformDataInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_BeginCacheForCookedPlatformData_handler(handler: UObject_BeginCacheForCookedPlatformDataInvoker){
        unsafe{ UObject_BeginCacheForCookedPlatformDataInvokerHandler = Some(handler) };
    }

    type UObject_BeginDestroyInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_BeginDestroyInvokerHandler: Option<UObject_BeginDestroyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_BeginDestroy_handler(handler: UObject_BeginDestroyInvoker){
        unsafe{ UObject_BeginDestroyInvokerHandler = Some(handler) };
    }

    type UObject_CallRemoteFunctionInvoker = unsafe extern "C" fn(*mut c_void, *mut UFunctionOpaque, *mut c_void, *mut FOutParmRecOpaque, *mut FFrameOpaque) -> bool;
    pub(super) static mut UObject_CallRemoteFunctionInvokerHandler: Option<UObject_CallRemoteFunctionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_CallRemoteFunction_handler(handler: UObject_CallRemoteFunctionInvoker){
        unsafe{ UObject_CallRemoteFunctionInvokerHandler = Some(handler) };
    }

    type UObject_CanCreateInCurrentContextInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> bool;
    pub(super) static mut UObject_CanCreateInCurrentContextInvokerHandler: Option<UObject_CanCreateInCurrentContextInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_CanCreateInCurrentContext_handler(handler: UObject_CanCreateInCurrentContextInvoker){
        unsafe{ UObject_CanCreateInCurrentContextInvokerHandler = Some(handler) };
    }

    type UObject_CanEditChangeInvoker = unsafe extern "C" fn(*mut c_void, *mut FPropertyOpaque) -> bool;
    pub(super) static mut UObject_CanEditChangeInvokerHandler: Option<UObject_CanEditChangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_CanEditChange_handler(handler: UObject_CanEditChangeInvoker){
        unsafe{ UObject_CanEditChangeInvokerHandler = Some(handler) };
    }

    type UObject_CanModifyInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UObject_CanModifyInvokerHandler: Option<UObject_CanModifyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_CanModify_handler(handler: UObject_CanModifyInvoker){
        unsafe{ UObject_CanModifyInvokerHandler = Some(handler) };
    }

    type UObject_CheckDefaultSubobjectsInvoker = unsafe extern "C" fn(*mut c_void, bool) -> bool;
    pub(super) static mut UObject_CheckDefaultSubobjectsInvokerHandler: Option<UObject_CheckDefaultSubobjectsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_CheckDefaultSubobjects_handler(handler: UObject_CheckDefaultSubobjectsInvoker){
        unsafe{ UObject_CheckDefaultSubobjectsInvokerHandler = Some(handler) };
    }

    type UObject_ClearAllCachedCookedPlatformDataInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_ClearAllCachedCookedPlatformDataInvokerHandler: Option<UObject_ClearAllCachedCookedPlatformDataInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_ClearAllCachedCookedPlatformData_handler(handler: UObject_ClearAllCachedCookedPlatformDataInvoker){
        unsafe{ UObject_ClearAllCachedCookedPlatformDataInvokerHandler = Some(handler) };
    }

    type UObject_ClearCachedCookedPlatformDataInvoker = unsafe extern "C" fn(*mut c_void, *mut ITargetPlatformOpaque);
    pub(super) static mut UObject_ClearCachedCookedPlatformDataInvokerHandler: Option<UObject_ClearCachedCookedPlatformDataInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_ClearCachedCookedPlatformData_handler(handler: UObject_ClearCachedCookedPlatformDataInvoker){
        unsafe{ UObject_ClearCachedCookedPlatformDataInvokerHandler = Some(handler) };
    }

    type UObject_ConditionalBeginDestroyInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UObject_ConditionalBeginDestroyInvokerHandler: Option<UObject_ConditionalBeginDestroyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_ConditionalBeginDestroy_handler(handler: UObject_ConditionalBeginDestroyInvoker){
        unsafe{ UObject_ConditionalBeginDestroyInvokerHandler = Some(handler) };
    }

    type UObject_ConditionalFinishDestroyInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UObject_ConditionalFinishDestroyInvokerHandler: Option<UObject_ConditionalFinishDestroyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_ConditionalFinishDestroy_handler(handler: UObject_ConditionalFinishDestroyInvoker){
        unsafe{ UObject_ConditionalFinishDestroyInvokerHandler = Some(handler) };
    }

    type UObject_ConditionalPostLoadInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_ConditionalPostLoadInvokerHandler: Option<UObject_ConditionalPostLoadInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_ConditionalPostLoad_handler(handler: UObject_ConditionalPostLoadInvoker){
        unsafe{ UObject_ConditionalPostLoadInvokerHandler = Some(handler) };
    }

    type UObject_ConditionalPostLoadSubobjectsInvoker = unsafe extern "C" fn(*mut c_void, *mut FObjectInstancingGraphOpaque);
    pub(super) static mut UObject_ConditionalPostLoadSubobjectsInvokerHandler: Option<UObject_ConditionalPostLoadSubobjectsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_ConditionalPostLoadSubobjects_handler(handler: UObject_ConditionalPostLoadSubobjectsInvoker){
        unsafe{ UObject_ConditionalPostLoadSubobjectsInvokerHandler = Some(handler) };
    }

    type UObject_DestroyNonNativePropertiesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_DestroyNonNativePropertiesInvokerHandler: Option<UObject_DestroyNonNativePropertiesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_DestroyNonNativeProperties_handler(handler: UObject_DestroyNonNativePropertiesInvoker){
        unsafe{ UObject_DestroyNonNativePropertiesInvokerHandler = Some(handler) };
    }

    type UObject_ExecuteUbergraphInvoker = unsafe extern "C" fn(*mut c_void, i32);
    pub(super) static mut UObject_ExecuteUbergraphInvokerHandler: Option<UObject_ExecuteUbergraphInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_ExecuteUbergraph_handler(handler: UObject_ExecuteUbergraphInvoker){
        unsafe{ UObject_ExecuteUbergraphInvokerHandler = Some(handler) };
    }

    type UObject_FindFunctionInvoker = unsafe extern "C" fn(*mut c_void, UName) -> *mut UFunctionOpaque;
    pub(super) static mut UObject_FindFunctionInvokerHandler: Option<UObject_FindFunctionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_FindFunction_handler(handler: UObject_FindFunctionInvoker){
        unsafe{ UObject_FindFunctionInvokerHandler = Some(handler) };
    }

    type UObject_FindFunctionCheckedInvoker = unsafe extern "C" fn(*mut c_void, UName) -> *mut UFunctionOpaque;
    pub(super) static mut UObject_FindFunctionCheckedInvokerHandler: Option<UObject_FindFunctionCheckedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_FindFunctionChecked_handler(handler: UObject_FindFunctionCheckedInvoker){
        unsafe{ UObject_FindFunctionCheckedInvokerHandler = Some(handler) };
    }

    type UObject_FinishDestroyInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_FinishDestroyInvokerHandler: Option<UObject_FinishDestroyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_FinishDestroy_handler(handler: UObject_FinishDestroyInvoker){
        unsafe{ UObject_FinishDestroyInvokerHandler = Some(handler) };
    }

    type UObject_GetArchetypeInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UObjectOpaque;
    pub(super) static mut UObject_GetArchetypeInvokerHandler: Option<UObject_GetArchetypeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_GetArchetype_handler(handler: UObject_GetArchetypeInvoker){
        unsafe{ UObject_GetArchetypeInvokerHandler = Some(handler) };
    }

    type UObject_GetConfigOverridePlatformInvoker = unsafe extern "C" fn(*mut c_void) -> *mut TCHAROpaque;
    pub(super) static mut UObject_GetConfigOverridePlatformInvokerHandler: Option<UObject_GetConfigOverridePlatformInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_GetConfigOverridePlatform_handler(handler: UObject_GetConfigOverridePlatformInvoker){
        unsafe{ UObject_GetConfigOverridePlatformInvokerHandler = Some(handler) };
    }

    type UObject_GetDefaultConfigFilenameInvoker = unsafe extern "C" fn(*mut c_void) -> *const std::os::raw::c_char;
    pub(super) static mut UObject_GetDefaultConfigFilenameInvokerHandler: Option<UObject_GetDefaultConfigFilenameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_GetDefaultConfigFilename_handler(handler: UObject_GetDefaultConfigFilenameInvoker){
        unsafe{ UObject_GetDefaultConfigFilenameInvokerHandler = Some(handler) };
    }

    type UObject_GetDescInvoker = unsafe extern "C" fn(*mut c_void) -> *const std::os::raw::c_char;
    pub(super) static mut UObject_GetDescInvokerHandler: Option<UObject_GetDescInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_GetDesc_handler(handler: UObject_GetDescInvoker){
        unsafe{ UObject_GetDescInvokerHandler = Some(handler) };
    }

    type UObject_GetDetailedInfoInvoker = unsafe extern "C" fn(*mut c_void) -> *const std::os::raw::c_char;
    pub(super) static mut UObject_GetDetailedInfoInvokerHandler: Option<UObject_GetDetailedInfoInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_GetDetailedInfo_handler(handler: UObject_GetDetailedInfoInvoker){
        unsafe{ UObject_GetDetailedInfoInvokerHandler = Some(handler) };
    }

    type UObject_GetExporterNameInvoker = unsafe extern "C" fn(*mut c_void) -> UName;
    pub(super) static mut UObject_GetExporterNameInvokerHandler: Option<UObject_GetExporterNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_GetExporterName_handler(handler: UObject_GetExporterNameInvoker){
        unsafe{ UObject_GetExporterNameInvokerHandler = Some(handler) };
    }

    type UObject_GetGlobalUserConfigFilenameInvoker = unsafe extern "C" fn(*mut c_void) -> *const std::os::raw::c_char;
    pub(super) static mut UObject_GetGlobalUserConfigFilenameInvokerHandler: Option<UObject_GetGlobalUserConfigFilenameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_GetGlobalUserConfigFilename_handler(handler: UObject_GetGlobalUserConfigFilenameInvoker){
        unsafe{ UObject_GetGlobalUserConfigFilenameInvokerHandler = Some(handler) };
    }

    type UObject_GetNetPushIdDynamicInvoker = unsafe extern "C" fn(*mut c_void) -> u64;
    pub(super) static mut UObject_GetNetPushIdDynamicInvokerHandler: Option<UObject_GetNetPushIdDynamicInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_GetNetPushIdDynamic_handler(handler: UObject_GetNetPushIdDynamicInvoker){
        unsafe{ UObject_GetNetPushIdDynamicInvokerHandler = Some(handler) };
    }

    type UObject_GetProjectUserConfigFilenameInvoker = unsafe extern "C" fn(*mut c_void) -> *const std::os::raw::c_char;
    pub(super) static mut UObject_GetProjectUserConfigFilenameInvokerHandler: Option<UObject_GetProjectUserConfigFilenameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_GetProjectUserConfigFilename_handler(handler: UObject_GetProjectUserConfigFilenameInvoker){
        unsafe{ UObject_GetProjectUserConfigFilenameInvokerHandler = Some(handler) };
    }

    type UObject_GetSparseClassDataStructInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UScriptStructOpaque;
    pub(super) static mut UObject_GetSparseClassDataStructInvokerHandler: Option<UObject_GetSparseClassDataStructInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_GetSparseClassDataStruct_handler(handler: UObject_GetSparseClassDataStructInvoker){
        unsafe{ UObject_GetSparseClassDataStructInvokerHandler = Some(handler) };
    }

    type UObject_GetWorldInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UWorldOpaque;
    pub(super) static mut UObject_GetWorldInvokerHandler: Option<UObject_GetWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_GetWorld_handler(handler: UObject_GetWorldInvoker){
        unsafe{ UObject_GetWorldInvokerHandler = Some(handler) };
    }

    type UObject_GetWorldCheckedInvoker = unsafe extern "C" fn(*mut c_void, &mut bool) -> *mut UWorldOpaque;
    pub(super) static mut UObject_GetWorldCheckedInvokerHandler: Option<UObject_GetWorldCheckedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_GetWorldChecked_handler(handler: UObject_GetWorldCheckedInvoker){
        unsafe{ UObject_GetWorldCheckedInvokerHandler = Some(handler) };
    }

    type UObject_HasNonEditorOnlyReferencesInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UObject_HasNonEditorOnlyReferencesInvokerHandler: Option<UObject_HasNonEditorOnlyReferencesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_HasNonEditorOnlyReferences_handler(handler: UObject_HasNonEditorOnlyReferencesInvoker){
        unsafe{ UObject_HasNonEditorOnlyReferencesInvokerHandler = Some(handler) };
    }

    type UObject_ImplementsGetWorldInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UObject_ImplementsGetWorldInvokerHandler: Option<UObject_ImplementsGetWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_ImplementsGetWorld_handler(handler: UObject_ImplementsGetWorldInvoker){
        unsafe{ UObject_ImplementsGetWorldInvokerHandler = Some(handler) };
    }

    type UObject_ImportCustomPropertiesInvoker = unsafe extern "C" fn(*mut c_void, *mut TCHAROpaque, *mut FFeedbackContextOpaque);
    pub(super) static mut UObject_ImportCustomPropertiesInvokerHandler: Option<UObject_ImportCustomPropertiesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_ImportCustomProperties_handler(handler: UObject_ImportCustomPropertiesInvoker){
        unsafe{ UObject_ImportCustomPropertiesInvokerHandler = Some(handler) };
    }

    type UObject_InstanceSubobjectTemplatesInvoker = unsafe extern "C" fn(*mut c_void, *mut FObjectInstancingGraphOpaque);
    pub(super) static mut UObject_InstanceSubobjectTemplatesInvokerHandler: Option<UObject_InstanceSubobjectTemplatesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_InstanceSubobjectTemplates_handler(handler: UObject_InstanceSubobjectTemplatesInvoker){
        unsafe{ UObject_InstanceSubobjectTemplatesInvokerHandler = Some(handler) };
    }

    type UObject_IsAssetInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UObject_IsAssetInvokerHandler: Option<UObject_IsAssetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_IsAsset_handler(handler: UObject_IsAssetInvoker){
        unsafe{ UObject_IsAssetInvokerHandler = Some(handler) };
    }

    type UObject_IsBasedOnArchetypeInvoker = unsafe extern "C" fn(*mut c_void, *mut UObjectOpaque) -> bool;
    pub(super) static mut UObject_IsBasedOnArchetypeInvokerHandler: Option<UObject_IsBasedOnArchetypeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_IsBasedOnArchetype_handler(handler: UObject_IsBasedOnArchetypeInvoker){
        unsafe{ UObject_IsBasedOnArchetypeInvokerHandler = Some(handler) };
    }

    type UObject_IsCachedCookedPlatformDataLoadedInvoker = unsafe extern "C" fn(*mut c_void, *mut ITargetPlatformOpaque) -> bool;
    pub(super) static mut UObject_IsCachedCookedPlatformDataLoadedInvokerHandler: Option<UObject_IsCachedCookedPlatformDataLoadedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_IsCachedCookedPlatformDataLoaded_handler(handler: UObject_IsCachedCookedPlatformDataLoadedInvoker){
        unsafe{ UObject_IsCachedCookedPlatformDataLoadedInvokerHandler = Some(handler) };
    }

    type UObject_IsDestructionThreadSafeInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UObject_IsDestructionThreadSafeInvokerHandler: Option<UObject_IsDestructionThreadSafeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_IsDestructionThreadSafe_handler(handler: UObject_IsDestructionThreadSafeInvoker){
        unsafe{ UObject_IsDestructionThreadSafeInvokerHandler = Some(handler) };
    }

    type UObject_IsEditorOnlyInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UObject_IsEditorOnlyInvokerHandler: Option<UObject_IsEditorOnlyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_IsEditorOnly_handler(handler: UObject_IsEditorOnlyInvoker){
        unsafe{ UObject_IsEditorOnlyInvokerHandler = Some(handler) };
    }

    type UObject_IsFullNameStableForNetworkingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UObject_IsFullNameStableForNetworkingInvokerHandler: Option<UObject_IsFullNameStableForNetworkingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_IsFullNameStableForNetworking_handler(handler: UObject_IsFullNameStableForNetworkingInvoker){
        unsafe{ UObject_IsFullNameStableForNetworkingInvokerHandler = Some(handler) };
    }

    type UObject_IsInBlueprintInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UObject_IsInBlueprintInvokerHandler: Option<UObject_IsInBlueprintInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_IsInBlueprint_handler(handler: UObject_IsInBlueprintInvoker){
        unsafe{ UObject_IsInBlueprintInvokerHandler = Some(handler) };
    }

    type UObject_IsLocalizedResourceInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UObject_IsLocalizedResourceInvokerHandler: Option<UObject_IsLocalizedResourceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_IsLocalizedResource_handler(handler: UObject_IsLocalizedResourceInvoker){
        unsafe{ UObject_IsLocalizedResourceInvokerHandler = Some(handler) };
    }

    type UObject_IsNameStableForNetworkingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UObject_IsNameStableForNetworkingInvokerHandler: Option<UObject_IsNameStableForNetworkingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_IsNameStableForNetworking_handler(handler: UObject_IsNameStableForNetworkingInvoker){
        unsafe{ UObject_IsNameStableForNetworkingInvokerHandler = Some(handler) };
    }

    type UObject_IsPostLoadThreadSafeInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UObject_IsPostLoadThreadSafeInvokerHandler: Option<UObject_IsPostLoadThreadSafeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_IsPostLoadThreadSafe_handler(handler: UObject_IsPostLoadThreadSafeInvoker){
        unsafe{ UObject_IsPostLoadThreadSafeInvokerHandler = Some(handler) };
    }

    type UObject_IsReadyForAsyncPostLoadInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UObject_IsReadyForAsyncPostLoadInvokerHandler: Option<UObject_IsReadyForAsyncPostLoadInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_IsReadyForAsyncPostLoad_handler(handler: UObject_IsReadyForAsyncPostLoadInvoker){
        unsafe{ UObject_IsReadyForAsyncPostLoadInvokerHandler = Some(handler) };
    }

    type UObject_IsReadyForFinishDestroyInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UObject_IsReadyForFinishDestroyInvokerHandler: Option<UObject_IsReadyForFinishDestroyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_IsReadyForFinishDestroy_handler(handler: UObject_IsReadyForFinishDestroyInvoker){
        unsafe{ UObject_IsReadyForFinishDestroyInvokerHandler = Some(handler) };
    }

    type UObject_IsSafeForRootSetInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UObject_IsSafeForRootSetInvokerHandler: Option<UObject_IsSafeForRootSetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_IsSafeForRootSet_handler(handler: UObject_IsSafeForRootSetInvoker){
        unsafe{ UObject_IsSafeForRootSetInvokerHandler = Some(handler) };
    }

    type UObject_IsSelectedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UObject_IsSelectedInvokerHandler: Option<UObject_IsSelectedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_IsSelected_handler(handler: UObject_IsSelectedInvoker){
        unsafe{ UObject_IsSelectedInvokerHandler = Some(handler) };
    }

    type UObject_IsSupportedForNetworkingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UObject_IsSupportedForNetworkingInvokerHandler: Option<UObject_IsSupportedForNetworkingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_IsSupportedForNetworking_handler(handler: UObject_IsSupportedForNetworkingInvoker){
        unsafe{ UObject_IsSupportedForNetworkingInvokerHandler = Some(handler) };
    }

    type UObject_LoadConfigInvoker = unsafe extern "C" fn(*mut c_void, *mut UClassOpaque, *mut TCHAROpaque, u32, *mut FPropertyOpaque);
    pub(super) static mut UObject_LoadConfigInvokerHandler: Option<UObject_LoadConfigInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_LoadConfig_handler(handler: UObject_LoadConfigInvoker){
        unsafe{ UObject_LoadConfigInvokerHandler = Some(handler) };
    }

    type UObject_MarkAsEditorOnlySubobjectInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_MarkAsEditorOnlySubobjectInvokerHandler: Option<UObject_MarkAsEditorOnlySubobjectInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_MarkAsEditorOnlySubobject_handler(handler: UObject_MarkAsEditorOnlySubobjectInvoker){
        unsafe{ UObject_MarkAsEditorOnlySubobjectInvokerHandler = Some(handler) };
    }

    type UObject_ModifyInvoker = unsafe extern "C" fn(*mut c_void, bool) -> bool;
    pub(super) static mut UObject_ModifyInvokerHandler: Option<UObject_ModifyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_Modify_handler(handler: UObject_ModifyInvoker){
        unsafe{ UObject_ModifyInvokerHandler = Some(handler) };
    }

    type UObject_MoveDataToSparseClassDataStructInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_MoveDataToSparseClassDataStructInvokerHandler: Option<UObject_MoveDataToSparseClassDataStructInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_MoveDataToSparseClassDataStruct_handler(handler: UObject_MoveDataToSparseClassDataStructInvoker){
        unsafe{ UObject_MoveDataToSparseClassDataStructInvokerHandler = Some(handler) };
    }

    type UObject_NeedsLoadForClientInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UObject_NeedsLoadForClientInvokerHandler: Option<UObject_NeedsLoadForClientInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_NeedsLoadForClient_handler(handler: UObject_NeedsLoadForClientInvoker){
        unsafe{ UObject_NeedsLoadForClientInvokerHandler = Some(handler) };
    }

    type UObject_NeedsLoadForEditorGameInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UObject_NeedsLoadForEditorGameInvokerHandler: Option<UObject_NeedsLoadForEditorGameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_NeedsLoadForEditorGame_handler(handler: UObject_NeedsLoadForEditorGameInvoker){
        unsafe{ UObject_NeedsLoadForEditorGameInvokerHandler = Some(handler) };
    }

    type UObject_NeedsLoadForServerInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UObject_NeedsLoadForServerInvokerHandler: Option<UObject_NeedsLoadForServerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_NeedsLoadForServer_handler(handler: UObject_NeedsLoadForServerInvoker){
        unsafe{ UObject_NeedsLoadForServerInvokerHandler = Some(handler) };
    }

    type UObject_NeedsLoadForTargetPlatformInvoker = unsafe extern "C" fn(*mut c_void, *mut ITargetPlatformOpaque) -> bool;
    pub(super) static mut UObject_NeedsLoadForTargetPlatformInvokerHandler: Option<UObject_NeedsLoadForTargetPlatformInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_NeedsLoadForTargetPlatform_handler(handler: UObject_NeedsLoadForTargetPlatformInvoker){
        unsafe{ UObject_NeedsLoadForTargetPlatformInvokerHandler = Some(handler) };
    }

    type UObject_ParseParmsInvoker = unsafe extern "C" fn(*mut c_void, *mut TCHAROpaque);
    pub(super) static mut UObject_ParseParmsInvokerHandler: Option<UObject_ParseParmsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_ParseParms_handler(handler: UObject_ParseParmsInvoker){
        unsafe{ UObject_ParseParmsInvokerHandler = Some(handler) };
    }

    type UObject_PostCDOContructInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_PostCDOContructInvokerHandler: Option<UObject_PostCDOContructInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_PostCDOContruct_handler(handler: UObject_PostCDOContructInvoker){
        unsafe{ UObject_PostCDOContructInvokerHandler = Some(handler) };
    }

    type UObject_PostDuplicateInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UObject_PostDuplicateInvokerHandler: Option<UObject_PostDuplicateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_PostDuplicate_handler(handler: UObject_PostDuplicateInvoker){
        unsafe{ UObject_PostDuplicateInvokerHandler = Some(handler) };
    }

    type UObject_PostEditChangeInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_PostEditChangeInvokerHandler: Option<UObject_PostEditChangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_PostEditChange_handler(handler: UObject_PostEditChangeInvoker){
        unsafe{ UObject_PostEditChangeInvokerHandler = Some(handler) };
    }

    type UObject_PostEditImportInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_PostEditImportInvokerHandler: Option<UObject_PostEditImportInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_PostEditImport_handler(handler: UObject_PostEditImportInvoker){
        unsafe{ UObject_PostEditImportInvokerHandler = Some(handler) };
    }

    type UObject_PostEditUndoInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_PostEditUndoInvokerHandler: Option<UObject_PostEditUndoInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_PostEditUndo_handler(handler: UObject_PostEditUndoInvoker){
        unsafe{ UObject_PostEditUndoInvokerHandler = Some(handler) };
    }

    type UObject_PostInitPropertiesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_PostInitPropertiesInvokerHandler: Option<UObject_PostInitPropertiesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_PostInitProperties_handler(handler: UObject_PostInitPropertiesInvoker){
        unsafe{ UObject_PostInitPropertiesInvokerHandler = Some(handler) };
    }

    type UObject_PostInterpChangeInvoker = unsafe extern "C" fn(*mut c_void, *mut FPropertyOpaque);
    pub(super) static mut UObject_PostInterpChangeInvokerHandler: Option<UObject_PostInterpChangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_PostInterpChange_handler(handler: UObject_PostInterpChangeInvoker){
        unsafe{ UObject_PostInterpChangeInvokerHandler = Some(handler) };
    }

    type UObject_PostLinkerChangeInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_PostLinkerChangeInvokerHandler: Option<UObject_PostLinkerChangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_PostLinkerChange_handler(handler: UObject_PostLinkerChangeInvoker){
        unsafe{ UObject_PostLinkerChangeInvokerHandler = Some(handler) };
    }

    type UObject_PostLoadInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_PostLoadInvokerHandler: Option<UObject_PostLoadInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_PostLoad_handler(handler: UObject_PostLoadInvoker){
        unsafe{ UObject_PostLoadInvokerHandler = Some(handler) };
    }

    type UObject_PostLoadSubobjectsInvoker = unsafe extern "C" fn(*mut c_void, *mut FObjectInstancingGraphOpaque);
    pub(super) static mut UObject_PostLoadSubobjectsInvokerHandler: Option<UObject_PostLoadSubobjectsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_PostLoadSubobjects_handler(handler: UObject_PostLoadSubobjectsInvoker){
        unsafe{ UObject_PostLoadSubobjectsInvokerHandler = Some(handler) };
    }

    type UObject_PostNetReceiveInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_PostNetReceiveInvokerHandler: Option<UObject_PostNetReceiveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_PostNetReceive_handler(handler: UObject_PostNetReceiveInvoker){
        unsafe{ UObject_PostNetReceiveInvokerHandler = Some(handler) };
    }

    type UObject_PostReinitPropertiesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_PostReinitPropertiesInvokerHandler: Option<UObject_PostReinitPropertiesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_PostReinitProperties_handler(handler: UObject_PostReinitPropertiesInvoker){
        unsafe{ UObject_PostReinitPropertiesInvokerHandler = Some(handler) };
    }

    type UObject_PostReloadConfigInvoker = unsafe extern "C" fn(*mut c_void, *mut FPropertyOpaque);
    pub(super) static mut UObject_PostReloadConfigInvokerHandler: Option<UObject_PostReloadConfigInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_PostReloadConfig_handler(handler: UObject_PostReloadConfigInvoker){
        unsafe{ UObject_PostReloadConfigInvokerHandler = Some(handler) };
    }

    type UObject_PostRenameInvoker = unsafe extern "C" fn(*mut c_void, *mut UObjectOpaque, UName);
    pub(super) static mut UObject_PostRenameInvokerHandler: Option<UObject_PostRenameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_PostRename_handler(handler: UObject_PostRenameInvoker){
        unsafe{ UObject_PostRenameInvokerHandler = Some(handler) };
    }

    type UObject_PostRepNotifiesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_PostRepNotifiesInvokerHandler: Option<UObject_PostRepNotifiesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_PostRepNotifies_handler(handler: UObject_PostRepNotifiesInvoker){
        unsafe{ UObject_PostRepNotifiesInvokerHandler = Some(handler) };
    }

    type UObject_PreDestroyFromReplicationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_PreDestroyFromReplicationInvokerHandler: Option<UObject_PreDestroyFromReplicationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_PreDestroyFromReplication_handler(handler: UObject_PreDestroyFromReplicationInvoker){
        unsafe{ UObject_PreDestroyFromReplicationInvokerHandler = Some(handler) };
    }

    type UObject_PreEditChangeInvoker = unsafe extern "C" fn(*mut c_void, *mut FPropertyOpaque);
    pub(super) static mut UObject_PreEditChangeInvokerHandler: Option<UObject_PreEditChangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_PreEditChange_handler(handler: UObject_PreEditChangeInvoker){
        unsafe{ UObject_PreEditChangeInvokerHandler = Some(handler) };
    }

    type UObject_PreEditUndoInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_PreEditUndoInvokerHandler: Option<UObject_PreEditUndoInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_PreEditUndo_handler(handler: UObject_PreEditUndoInvoker){
        unsafe{ UObject_PreEditUndoInvokerHandler = Some(handler) };
    }

    type UObject_PreNetReceiveInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_PreNetReceiveInvokerHandler: Option<UObject_PreNetReceiveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_PreNetReceive_handler(handler: UObject_PreNetReceiveInvoker){
        unsafe{ UObject_PreNetReceiveInvokerHandler = Some(handler) };
    }

    type UObject_RegenerateClassInvoker = unsafe extern "C" fn(*mut c_void, *mut UClassOpaque, *mut UObjectOpaque) -> *mut UClassOpaque;
    pub(super) static mut UObject_RegenerateClassInvokerHandler: Option<UObject_RegenerateClassInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_RegenerateClass_handler(handler: UObject_RegenerateClassInvoker){
        unsafe{ UObject_RegenerateClassInvokerHandler = Some(handler) };
    }

    type UObject_ReinitializePropertiesInvoker = unsafe extern "C" fn(*mut c_void, *mut UObjectOpaque, *mut FObjectInstancingGraphOpaque);
    pub(super) static mut UObject_ReinitializePropertiesInvokerHandler: Option<UObject_ReinitializePropertiesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_ReinitializeProperties_handler(handler: UObject_ReinitializePropertiesInvoker){
        unsafe{ UObject_ReinitializePropertiesInvokerHandler = Some(handler) };
    }

    type UObject_ReloadConfigInvoker = unsafe extern "C" fn(*mut c_void, *mut UClassOpaque, *mut TCHAROpaque, u32, *mut FPropertyOpaque);
    pub(super) static mut UObject_ReloadConfigInvokerHandler: Option<UObject_ReloadConfigInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_ReloadConfig_handler(handler: UObject_ReloadConfigInvoker){
        unsafe{ UObject_ReloadConfigInvokerHandler = Some(handler) };
    }

    type UObject_SaveConfigInvoker = unsafe extern "C" fn(*mut c_void, u64, *mut TCHAROpaque, *mut FConfigCacheIniOpaque, bool);
    pub(super) static mut UObject_SaveConfigInvokerHandler: Option<UObject_SaveConfigInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_SaveConfig_handler(handler: UObject_SaveConfigInvoker){
        unsafe{ UObject_SaveConfigInvokerHandler = Some(handler) };
    }

    type UObject_SetLinkerInvoker = unsafe extern "C" fn(*mut c_void, *mut FLinkerLoadOpaque, i32, bool);
    pub(super) static mut UObject_SetLinkerInvokerHandler: Option<UObject_SetLinkerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_SetLinker_handler(handler: UObject_SetLinkerInvoker){
        unsafe{ UObject_SetLinkerInvokerHandler = Some(handler) };
    }

    type UObject_ShutdownAfterErrorInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_ShutdownAfterErrorInvokerHandler: Option<UObject_ShutdownAfterErrorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_ShutdownAfterError_handler(handler: UObject_ShutdownAfterErrorInvoker){
        unsafe{ UObject_ShutdownAfterErrorInvokerHandler = Some(handler) };
    }

    type UObject_UpdateGlobalUserConfigFileInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_UpdateGlobalUserConfigFileInvokerHandler: Option<UObject_UpdateGlobalUserConfigFileInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_UpdateGlobalUserConfigFile_handler(handler: UObject_UpdateGlobalUserConfigFileInvoker){
        unsafe{ UObject_UpdateGlobalUserConfigFileInvokerHandler = Some(handler) };
    }

    type UObject_UpdateProjectUserConfigFileInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_UpdateProjectUserConfigFileInvokerHandler: Option<UObject_UpdateProjectUserConfigFileInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_UpdateProjectUserConfigFile_handler(handler: UObject_UpdateProjectUserConfigFileInvoker){
        unsafe{ UObject_UpdateProjectUserConfigFileInvokerHandler = Some(handler) };
    }

    type UObject_WillNeverCacheCookedPlatformDataAgainInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UObject_WillNeverCacheCookedPlatformDataAgainInvokerHandler: Option<UObject_WillNeverCacheCookedPlatformDataAgainInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UObject_WillNeverCacheCookedPlatformDataAgain_handler(handler: UObject_WillNeverCacheCookedPlatformDataAgainInvoker){
        unsafe{ UObject_WillNeverCacheCookedPlatformDataAgainInvokerHandler = Some(handler) };
    }

    type AActor_ActorHasTagInvoker = unsafe extern "C" fn(*mut c_void, UName) -> bool;
    pub(super) static mut AActor_ActorHasTagInvokerHandler: Option<AActor_ActorHasTagInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ActorHasTag_handler(handler: AActor_ActorHasTagInvoker){
        unsafe{ AActor_ActorHasTagInvokerHandler = Some(handler) };
    }

    type AActor_ActorToWorldInvoker = unsafe extern "C" fn(*mut c_void) -> Transform;
    pub(super) static mut AActor_ActorToWorldInvokerHandler: Option<AActor_ActorToWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ActorToWorld_handler(handler: AActor_ActorToWorldInvoker){
        unsafe{ AActor_ActorToWorldInvokerHandler = Some(handler) };
    }

    type AActor_AddDataLayerInvoker = unsafe extern "C" fn(*mut c_void, *mut UDataLayerAssetOpaque) -> bool;
    pub(super) static mut AActor_AddDataLayerInvokerHandler: Option<AActor_AddDataLayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_AddDataLayer_handler(handler: AActor_AddDataLayerInvoker){
        unsafe{ AActor_AddDataLayerInvokerHandler = Some(handler) };
    }

    type AActor_AddInstanceComponentInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorComponentOpaque);
    pub(super) static mut AActor_AddInstanceComponentInvokerHandler: Option<AActor_AddInstanceComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_AddInstanceComponent_handler(handler: AActor_AddInstanceComponentInvoker){
        unsafe{ AActor_AddInstanceComponentInvokerHandler = Some(handler) };
    }

    type AActor_AddOwnedComponentInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorComponentOpaque);
    pub(super) static mut AActor_AddOwnedComponentInvokerHandler: Option<AActor_AddOwnedComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_AddOwnedComponent_handler(handler: AActor_AddOwnedComponentInvoker){
        unsafe{ AActor_AddOwnedComponentInvokerHandler = Some(handler) };
    }

    type AActor_AddTickPrerequisiteActorInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque);
    pub(super) static mut AActor_AddTickPrerequisiteActorInvokerHandler: Option<AActor_AddTickPrerequisiteActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_AddTickPrerequisiteActor_handler(handler: AActor_AddTickPrerequisiteActorInvoker){
        unsafe{ AActor_AddTickPrerequisiteActorInvokerHandler = Some(handler) };
    }

    type AActor_AddTickPrerequisiteComponentInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorComponentOpaque);
    pub(super) static mut AActor_AddTickPrerequisiteComponentInvokerHandler: Option<AActor_AddTickPrerequisiteComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_AddTickPrerequisiteComponent_handler(handler: AActor_AddTickPrerequisiteComponentInvoker){
        unsafe{ AActor_AddTickPrerequisiteComponentInvokerHandler = Some(handler) };
    }

    type AActor_AllowReceiveTickEventOnDedicatedServerInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_AllowReceiveTickEventOnDedicatedServerInvokerHandler: Option<AActor_AllowReceiveTickEventOnDedicatedServerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_AllowReceiveTickEventOnDedicatedServer_handler(handler: AActor_AllowReceiveTickEventOnDedicatedServerInvoker){
        unsafe{ AActor_AllowReceiveTickEventOnDedicatedServerInvokerHandler = Some(handler) };
    }

    type AActor_AsyncPhysicsTickActorInvoker = unsafe extern "C" fn(*mut c_void, f32, f32);
    pub(super) static mut AActor_AsyncPhysicsTickActorInvokerHandler: Option<AActor_AsyncPhysicsTickActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_AsyncPhysicsTickActor_handler(handler: AActor_AsyncPhysicsTickActorInvoker){
        unsafe{ AActor_AsyncPhysicsTickActorInvokerHandler = Some(handler) };
    }

    type AActor_BecomeViewTargetInvoker = unsafe extern "C" fn(*mut c_void, *mut APlayerControllerOpaque);
    pub(super) static mut AActor_BecomeViewTargetInvokerHandler: Option<AActor_BecomeViewTargetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_BecomeViewTarget_handler(handler: AActor_BecomeViewTargetInvoker){
        unsafe{ AActor_BecomeViewTargetInvokerHandler = Some(handler) };
    }

    type AActor_CallPreReplicationInvoker = unsafe extern "C" fn(*mut c_void, *mut UNetDriverOpaque);
    pub(super) static mut AActor_CallPreReplicationInvokerHandler: Option<AActor_CallPreReplicationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_CallPreReplication_handler(handler: AActor_CallPreReplicationInvoker){
        unsafe{ AActor_CallPreReplicationInvokerHandler = Some(handler) };
    }

    type AActor_CallRemoteFunctionInvoker = unsafe extern "C" fn(*mut c_void, *mut UFunctionOpaque, *mut c_void, *mut FOutParmRecOpaque, *mut FFrameOpaque) -> bool;
    pub(super) static mut AActor_CallRemoteFunctionInvokerHandler: Option<AActor_CallRemoteFunctionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_CallRemoteFunction_handler(handler: AActor_CallRemoteFunctionInvoker){
        unsafe{ AActor_CallRemoteFunctionInvokerHandler = Some(handler) };
    }

    type AActor_CanBeBaseForCharacterInvoker = unsafe extern "C" fn(*mut c_void, *mut APawnOpaque) -> bool;
    pub(super) static mut AActor_CanBeBaseForCharacterInvokerHandler: Option<AActor_CanBeBaseForCharacterInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_CanBeBaseForCharacter_handler(handler: AActor_CanBeBaseForCharacterInvoker){
        unsafe{ AActor_CanBeBaseForCharacterInvokerHandler = Some(handler) };
    }

    type AActor_CanBeDamagedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_CanBeDamagedInvokerHandler: Option<AActor_CanBeDamagedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_CanBeDamaged_handler(handler: AActor_CanBeDamagedInvoker){
        unsafe{ AActor_CanBeDamagedInvokerHandler = Some(handler) };
    }

    type AActor_CanBeInClusterInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_CanBeInClusterInvokerHandler: Option<AActor_CanBeInClusterInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_CanBeInCluster_handler(handler: AActor_CanBeInClusterInvoker){
        unsafe{ AActor_CanBeInClusterInvokerHandler = Some(handler) };
    }

    type AActor_CanChangeIsSpatiallyLoadedFlagInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_CanChangeIsSpatiallyLoadedFlagInvokerHandler: Option<AActor_CanChangeIsSpatiallyLoadedFlagInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_CanChangeIsSpatiallyLoadedFlag_handler(handler: AActor_CanChangeIsSpatiallyLoadedFlagInvoker){
        unsafe{ AActor_CanChangeIsSpatiallyLoadedFlagInvokerHandler = Some(handler) };
    }

    type AActor_CanEditChangeInvoker = unsafe extern "C" fn(*mut c_void, *mut FPropertyOpaque) -> bool;
    pub(super) static mut AActor_CanEditChangeInvokerHandler: Option<AActor_CanEditChangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_CanEditChange_handler(handler: AActor_CanEditChangeInvoker){
        unsafe{ AActor_CanEditChangeInvokerHandler = Some(handler) };
    }

    type AActor_CanEditChangeComponentInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorComponentOpaque, *mut FPropertyOpaque) -> bool;
    pub(super) static mut AActor_CanEditChangeComponentInvokerHandler: Option<AActor_CanEditChangeComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_CanEditChangeComponent_handler(handler: AActor_CanEditChangeComponentInvoker){
        unsafe{ AActor_CanEditChangeComponentInvokerHandler = Some(handler) };
    }

    type AActor_CanEverTickInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_CanEverTickInvokerHandler: Option<AActor_CanEverTickInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_CanEverTick_handler(handler: AActor_CanEverTickInvoker){
        unsafe{ AActor_CanEverTickInvokerHandler = Some(handler) };
    }

    type AActor_CanPlayFromHereInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_CanPlayFromHereInvokerHandler: Option<AActor_CanPlayFromHereInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_CanPlayFromHere_handler(handler: AActor_CanPlayFromHereInvoker){
        unsafe{ AActor_CanPlayFromHereInvokerHandler = Some(handler) };
    }

    type AActor_CheckComponentInstanceNameInvoker = unsafe extern "C" fn(*mut c_void, UName);
    pub(super) static mut AActor_CheckComponentInstanceNameInvokerHandler: Option<AActor_CheckComponentInstanceNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_CheckComponentInstanceName_handler(handler: AActor_CheckComponentInstanceNameInvoker){
        unsafe{ AActor_CheckComponentInstanceNameInvokerHandler = Some(handler) };
    }

    type AActor_CheckDefaultSubobjectsInternalInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_CheckDefaultSubobjectsInternalInvokerHandler: Option<AActor_CheckDefaultSubobjectsInternalInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_CheckDefaultSubobjectsInternal_handler(handler: AActor_CheckDefaultSubobjectsInternalInvoker){
        unsafe{ AActor_CheckDefaultSubobjectsInternalInvokerHandler = Some(handler) };
    }

    type AActor_CheckForDeprecatedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_CheckForDeprecatedInvokerHandler: Option<AActor_CheckForDeprecatedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_CheckForDeprecated_handler(handler: AActor_CheckForDeprecatedInvoker){
        unsafe{ AActor_CheckForDeprecatedInvokerHandler = Some(handler) };
    }

    type AActor_CheckForErrorsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_CheckForErrorsInvokerHandler: Option<AActor_CheckForErrorsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_CheckForErrors_handler(handler: AActor_CheckForErrorsInvoker){
        unsafe{ AActor_CheckForErrorsInvokerHandler = Some(handler) };
    }

    type AActor_CheckStillInWorldInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_CheckStillInWorldInvokerHandler: Option<AActor_CheckStillInWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_CheckStillInWorld_handler(handler: AActor_CheckStillInWorldInvoker){
        unsafe{ AActor_CheckStillInWorldInvokerHandler = Some(handler) };
    }

    type AActor_ClearActorLabelInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_ClearActorLabelInvokerHandler: Option<AActor_ClearActorLabelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ClearActorLabel_handler(handler: AActor_ClearActorLabelInvoker){
        unsafe{ AActor_ClearActorLabelInvokerHandler = Some(handler) };
    }

    type AActor_ClearComponentOverlapsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_ClearComponentOverlapsInvokerHandler: Option<AActor_ClearComponentOverlapsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ClearComponentOverlaps_handler(handler: AActor_ClearComponentOverlapsInvoker){
        unsafe{ AActor_ClearComponentOverlapsInvokerHandler = Some(handler) };
    }

    type AActor_ClearCrossLevelReferencesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_ClearCrossLevelReferencesInvokerHandler: Option<AActor_ClearCrossLevelReferencesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ClearCrossLevelReferences_handler(handler: AActor_ClearCrossLevelReferencesInvoker){
        unsafe{ AActor_ClearCrossLevelReferencesInvokerHandler = Some(handler) };
    }

    type AActor_ClearInstanceComponentsInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_ClearInstanceComponentsInvokerHandler: Option<AActor_ClearInstanceComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ClearInstanceComponents_handler(handler: AActor_ClearInstanceComponentsInvoker){
        unsafe{ AActor_ClearInstanceComponentsInvokerHandler = Some(handler) };
    }

    type AActor_ContainsDataLayerInvoker = unsafe extern "C" fn(*mut c_void, *mut UDataLayerAssetOpaque) -> bool;
    pub(super) static mut AActor_ContainsDataLayerInvokerHandler: Option<AActor_ContainsDataLayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ContainsDataLayer_handler(handler: AActor_ContainsDataLayerInvoker){
        unsafe{ AActor_ContainsDataLayerInvokerHandler = Some(handler) };
    }

    type AActor_CopyRemoteRoleFromInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque);
    pub(super) static mut AActor_CopyRemoteRoleFromInvokerHandler: Option<AActor_CopyRemoteRoleFromInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_CopyRemoteRoleFrom_handler(handler: AActor_CopyRemoteRoleFromInvoker){
        unsafe{ AActor_CopyRemoteRoleFromInvokerHandler = Some(handler) };
    }

    type AActor_CreateComponentFromTemplateInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorComponentOpaque, UName) -> *mut UActorComponentOpaque;
    pub(super) static mut AActor_CreateComponentFromTemplateInvokerHandler: Option<AActor_CreateComponentFromTemplateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_CreateComponentFromTemplate_handler(handler: AActor_CreateComponentFromTemplateInvoker){
        unsafe{ AActor_CreateComponentFromTemplateInvokerHandler = Some(handler) };
    }

    type AActor_CreateComponentFromTemplateDataInvoker = unsafe extern "C" fn(*mut c_void, *mut FBlueprintCookedComponentInstancingDataOpaque, UName) -> *mut UActorComponentOpaque;
    pub(super) static mut AActor_CreateComponentFromTemplateDataInvokerHandler: Option<AActor_CreateComponentFromTemplateDataInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_CreateComponentFromTemplateData_handler(handler: AActor_CreateComponentFromTemplateDataInvoker){
        unsafe{ AActor_CreateComponentFromTemplateDataInvokerHandler = Some(handler) };
    }

    type AActor_CreateOrUpdateActorFolderInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_CreateOrUpdateActorFolderInvokerHandler: Option<AActor_CreateOrUpdateActorFolderInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_CreateOrUpdateActorFolder_handler(handler: AActor_CreateOrUpdateActorFolderInvoker){
        unsafe{ AActor_CreateOrUpdateActorFolderInvokerHandler = Some(handler) };
    }

    type AActor_DebugShowComponentHierarchyInvoker = unsafe extern "C" fn(*mut c_void, *mut TCHAROpaque, bool);
    pub(super) static mut AActor_DebugShowComponentHierarchyInvokerHandler: Option<AActor_DebugShowComponentHierarchyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_DebugShowComponentHierarchy_handler(handler: AActor_DebugShowComponentHierarchyInvoker){
        unsafe{ AActor_DebugShowComponentHierarchyInvokerHandler = Some(handler) };
    }

    type AActor_DebugShowOneComponentHierarchyInvoker = unsafe extern "C" fn(*mut c_void, *mut USceneComponentOpaque, &mut i32, bool);
    pub(super) static mut AActor_DebugShowOneComponentHierarchyInvokerHandler: Option<AActor_DebugShowOneComponentHierarchyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_DebugShowOneComponentHierarchy_handler(handler: AActor_DebugShowOneComponentHierarchyInvoker){
        unsafe{ AActor_DebugShowOneComponentHierarchyInvokerHandler = Some(handler) };
    }

    type AActor_DestroyInvoker = unsafe extern "C" fn(*mut c_void, bool, bool) -> bool;
    pub(super) static mut AActor_DestroyInvokerHandler: Option<AActor_DestroyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_Destroy_handler(handler: AActor_DestroyInvoker){
        unsafe{ AActor_DestroyInvokerHandler = Some(handler) };
    }

    type AActor_DestroyConstructedComponentsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_DestroyConstructedComponentsInvokerHandler: Option<AActor_DestroyConstructedComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_DestroyConstructedComponents_handler(handler: AActor_DestroyConstructedComponentsInvoker){
        unsafe{ AActor_DestroyConstructedComponentsInvokerHandler = Some(handler) };
    }

    type AActor_DestroyNetworkActorHandledInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_DestroyNetworkActorHandledInvokerHandler: Option<AActor_DestroyNetworkActorHandledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_DestroyNetworkActorHandled_handler(handler: AActor_DestroyNetworkActorHandledInvoker){
        unsafe{ AActor_DestroyNetworkActorHandledInvokerHandler = Some(handler) };
    }

    type AActor_DestroyedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_DestroyedInvokerHandler: Option<AActor_DestroyedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_Destroyed_handler(handler: AActor_DestroyedInvoker){
        unsafe{ AActor_DestroyedInvokerHandler = Some(handler) };
    }

    type AActor_DisableComponentsSimulatePhysicsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_DisableComponentsSimulatePhysicsInvokerHandler: Option<AActor_DisableComponentsSimulatePhysicsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_DisableComponentsSimulatePhysics_handler(handler: AActor_DisableComponentsSimulatePhysicsInvoker){
        unsafe{ AActor_DisableComponentsSimulatePhysicsInvokerHandler = Some(handler) };
    }

    type AActor_DisableInputInvoker = unsafe extern "C" fn(*mut c_void, *mut APlayerControllerOpaque);
    pub(super) static mut AActor_DisableInputInvokerHandler: Option<AActor_DisableInputInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_DisableInput_handler(handler: AActor_DisableInputInvoker){
        unsafe{ AActor_DisableInputInvokerHandler = Some(handler) };
    }

    type AActor_DispatchBeginPlayInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_DispatchBeginPlayInvokerHandler: Option<AActor_DispatchBeginPlayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_DispatchBeginPlay_handler(handler: AActor_DispatchBeginPlayInvoker){
        unsafe{ AActor_DispatchBeginPlayInvokerHandler = Some(handler) };
    }

    type AActor_EditorReplacedActorInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque);
    pub(super) static mut AActor_EditorReplacedActorInvokerHandler: Option<AActor_EditorReplacedActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_EditorReplacedActor_handler(handler: AActor_EditorReplacedActorInvoker){
        unsafe{ AActor_EditorReplacedActorInvokerHandler = Some(handler) };
    }

    type AActor_EnableInputInvoker = unsafe extern "C" fn(*mut c_void, *mut APlayerControllerOpaque);
    pub(super) static mut AActor_EnableInputInvokerHandler: Option<AActor_EnableInputInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_EnableInput_handler(handler: AActor_EnableInputInvoker){
        unsafe{ AActor_EnableInputInvokerHandler = Some(handler) };
    }

    type AActor_EndViewTargetInvoker = unsafe extern "C" fn(*mut c_void, *mut APlayerControllerOpaque);
    pub(super) static mut AActor_EndViewTargetInvokerHandler: Option<AActor_EndViewTargetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_EndViewTarget_handler(handler: AActor_EndViewTargetInvoker){
        unsafe{ AActor_EndViewTargetInvokerHandler = Some(handler) };
    }

    type AActor_ExchangeNetRolesInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_ExchangeNetRolesInvokerHandler: Option<AActor_ExchangeNetRolesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ExchangeNetRoles_handler(handler: AActor_ExchangeNetRolesInvoker){
        unsafe{ AActor_ExchangeNetRolesInvokerHandler = Some(handler) };
    }

    type AActor_FindActorInPackageInvoker = unsafe extern "C" fn(*mut UPackageOpaque) -> *mut AActorOpaque;
    pub(super) static mut AActor_FindActorInPackageInvokerHandler: Option<AActor_FindActorInPackageInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_FindActorInPackage_handler(handler: AActor_FindActorInPackageInvoker){
        unsafe{ AActor_FindActorInPackageInvokerHandler = Some(handler) };
    }

    type AActor_FinishAndRegisterComponentInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorComponentOpaque);
    pub(super) static mut AActor_FinishAndRegisterComponentInvokerHandler: Option<AActor_FinishAndRegisterComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_FinishAndRegisterComponent_handler(handler: AActor_FinishAndRegisterComponentInvoker){
        unsafe{ AActor_FinishAndRegisterComponentInvokerHandler = Some(handler) };
    }

    type AActor_FixupActorFolderInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_FixupActorFolderInvokerHandler: Option<AActor_FixupActorFolderInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_FixupActorFolder_handler(handler: AActor_FixupActorFolderInvoker){
        unsafe{ AActor_FixupActorFolderInvokerHandler = Some(handler) };
    }

    type AActor_FixupDataLayersInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_FixupDataLayersInvokerHandler: Option<AActor_FixupDataLayersInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_FixupDataLayers_handler(handler: AActor_FixupDataLayersInvoker){
        unsafe{ AActor_FixupDataLayersInvokerHandler = Some(handler) };
    }

    type AActor_FlushNetDormancyInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_FlushNetDormancyInvokerHandler: Option<AActor_FlushNetDormancyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_FlushNetDormancy_handler(handler: AActor_FlushNetDormancyInvoker){
        unsafe{ AActor_FlushNetDormancyInvokerHandler = Some(handler) };
    }

    type AActor_ForceNetRelevantInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_ForceNetRelevantInvokerHandler: Option<AActor_ForceNetRelevantInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ForceNetRelevant_handler(handler: AActor_ForceNetRelevantInvoker){
        unsafe{ AActor_ForceNetRelevantInvokerHandler = Some(handler) };
    }

    type AActor_ForceNetUpdateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_ForceNetUpdateInvokerHandler: Option<AActor_ForceNetUpdateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ForceNetUpdate_handler(handler: AActor_ForceNetUpdateInvoker){
        unsafe{ AActor_ForceNetUpdateInvokerHandler = Some(handler) };
    }

    type AActor_ForcePropertyCompareInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_ForcePropertyCompareInvokerHandler: Option<AActor_ForcePropertyCompareInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ForcePropertyCompare_handler(handler: AActor_ForcePropertyCompareInvoker){
        unsafe{ AActor_ForcePropertyCompareInvokerHandler = Some(handler) };
    }

    type AActor_GatherCurrentMovementInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_GatherCurrentMovementInvokerHandler: Option<AActor_GatherCurrentMovementInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GatherCurrentMovement_handler(handler: AActor_GatherCurrentMovementInvoker){
        unsafe{ AActor_GatherCurrentMovementInvokerHandler = Some(handler) };
    }

    type AActor_GetActorEnableCollisionInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_GetActorEnableCollisionInvokerHandler: Option<AActor_GetActorEnableCollisionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetActorEnableCollision_handler(handler: AActor_GetActorEnableCollisionInvoker){
        unsafe{ AActor_GetActorEnableCollisionInvokerHandler = Some(handler) };
    }

    type AActor_GetActorForwardVectorInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut AActor_GetActorForwardVectorInvokerHandler: Option<AActor_GetActorForwardVectorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetActorForwardVector_handler(handler: AActor_GetActorForwardVectorInvoker){
        unsafe{ AActor_GetActorForwardVectorInvokerHandler = Some(handler) };
    }

    type AActor_GetActorGuidInvoker = unsafe extern "C" fn(*mut c_void) -> Uuid;
    pub(super) static mut AActor_GetActorGuidInvokerHandler: Option<AActor_GetActorGuidInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetActorGuid_handler(handler: AActor_GetActorGuidInvoker){
        unsafe{ AActor_GetActorGuidInvokerHandler = Some(handler) };
    }

    type AActor_GetActorLocationInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut AActor_GetActorLocationInvokerHandler: Option<AActor_GetActorLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetActorLocation_handler(handler: AActor_GetActorLocationInvoker){
        unsafe{ AActor_GetActorLocationInvokerHandler = Some(handler) };
    }

    type AActor_GetActorNameOrLabelInvoker = unsafe extern "C" fn(*mut c_void) -> *const std::os::raw::c_char;
    pub(super) static mut AActor_GetActorNameOrLabelInvokerHandler: Option<AActor_GetActorNameOrLabelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetActorNameOrLabel_handler(handler: AActor_GetActorNameOrLabelInvoker){
        unsafe{ AActor_GetActorNameOrLabelInvokerHandler = Some(handler) };
    }

    type AActor_GetActorQuatInvoker = unsafe extern "C" fn(*mut c_void) -> Quaternion;
    pub(super) static mut AActor_GetActorQuatInvokerHandler: Option<AActor_GetActorQuatInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetActorQuat_handler(handler: AActor_GetActorQuatInvoker){
        unsafe{ AActor_GetActorQuatInvokerHandler = Some(handler) };
    }

    type AActor_GetActorRelativeScale3DInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut AActor_GetActorRelativeScale3DInvokerHandler: Option<AActor_GetActorRelativeScale3DInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetActorRelativeScale3D_handler(handler: AActor_GetActorRelativeScale3DInvoker){
        unsafe{ AActor_GetActorRelativeScale3DInvokerHandler = Some(handler) };
    }

    type AActor_GetActorRightVectorInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut AActor_GetActorRightVectorInvokerHandler: Option<AActor_GetActorRightVectorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetActorRightVector_handler(handler: AActor_GetActorRightVectorInvoker){
        unsafe{ AActor_GetActorRightVectorInvokerHandler = Some(handler) };
    }

    type AActor_GetActorRotationInvoker = unsafe extern "C" fn(*mut c_void) -> Rotator;
    pub(super) static mut AActor_GetActorRotationInvokerHandler: Option<AActor_GetActorRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetActorRotation_handler(handler: AActor_GetActorRotationInvoker){
        unsafe{ AActor_GetActorRotationInvokerHandler = Some(handler) };
    }

    type AActor_GetActorScaleInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut AActor_GetActorScaleInvokerHandler: Option<AActor_GetActorScaleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetActorScale_handler(handler: AActor_GetActorScaleInvoker){
        unsafe{ AActor_GetActorScaleInvokerHandler = Some(handler) };
    }

    type AActor_GetActorScale3DInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut AActor_GetActorScale3DInvokerHandler: Option<AActor_GetActorScale3DInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetActorScale3D_handler(handler: AActor_GetActorScale3DInvoker){
        unsafe{ AActor_GetActorScale3DInvokerHandler = Some(handler) };
    }

    type AActor_GetActorTickIntervalInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut AActor_GetActorTickIntervalInvokerHandler: Option<AActor_GetActorTickIntervalInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetActorTickInterval_handler(handler: AActor_GetActorTickIntervalInvoker){
        unsafe{ AActor_GetActorTickIntervalInvokerHandler = Some(handler) };
    }

    type AActor_GetActorTimeDilationInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut AActor_GetActorTimeDilationInvokerHandler: Option<AActor_GetActorTimeDilationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetActorTimeDilation_handler(handler: AActor_GetActorTimeDilationInvoker){
        unsafe{ AActor_GetActorTimeDilationInvokerHandler = Some(handler) };
    }

    type AActor_GetActorTimeDilation2Invoker = unsafe extern "C" fn(*mut c_void, *mut UWorldOpaque) -> f32;
    pub(super) static mut AActor_GetActorTimeDilation2InvokerHandler: Option<AActor_GetActorTimeDilation2Invoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetActorTimeDilation2_handler(handler: AActor_GetActorTimeDilation2Invoker){
        unsafe{ AActor_GetActorTimeDilation2InvokerHandler = Some(handler) };
    }

    type AActor_GetActorTransformInvoker = unsafe extern "C" fn(*mut c_void) -> Transform;
    pub(super) static mut AActor_GetActorTransformInvokerHandler: Option<AActor_GetActorTransformInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetActorTransform_handler(handler: AActor_GetActorTransformInvoker){
        unsafe{ AActor_GetActorTransformInvokerHandler = Some(handler) };
    }

    type AActor_GetActorUpVectorInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut AActor_GetActorUpVectorInvokerHandler: Option<AActor_GetActorUpVectorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetActorUpVector_handler(handler: AActor_GetActorUpVectorInvoker){
        unsafe{ AActor_GetActorUpVectorInvokerHandler = Some(handler) };
    }

    type AActor_GetAttachParentActorInvoker = unsafe extern "C" fn(*mut c_void) -> *mut AActorOpaque;
    pub(super) static mut AActor_GetAttachParentActorInvokerHandler: Option<AActor_GetAttachParentActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetAttachParentActor_handler(handler: AActor_GetAttachParentActorInvoker){
        unsafe{ AActor_GetAttachParentActorInvokerHandler = Some(handler) };
    }

    type AActor_GetAttachParentSocketNameInvoker = unsafe extern "C" fn(*mut c_void) -> UName;
    pub(super) static mut AActor_GetAttachParentSocketNameInvokerHandler: Option<AActor_GetAttachParentSocketNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetAttachParentSocketName_handler(handler: AActor_GetAttachParentSocketNameInvoker){
        unsafe{ AActor_GetAttachParentSocketNameInvokerHandler = Some(handler) };
    }

    type AActor_GetAutoDestroyWhenFinishedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_GetAutoDestroyWhenFinishedInvokerHandler: Option<AActor_GetAutoDestroyWhenFinishedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetAutoDestroyWhenFinished_handler(handler: AActor_GetAutoDestroyWhenFinishedInvoker){
        unsafe{ AActor_GetAutoDestroyWhenFinishedInvokerHandler = Some(handler) };
    }

    type AActor_GetCanBeDamagedPropertyNameInvoker = unsafe extern "C" fn() -> UName;
    pub(super) static mut AActor_GetCanBeDamagedPropertyNameInvokerHandler: Option<AActor_GetCanBeDamagedPropertyNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetCanBeDamagedPropertyName_handler(handler: AActor_GetCanBeDamagedPropertyNameInvoker){
        unsafe{ AActor_GetCanBeDamagedPropertyNameInvokerHandler = Some(handler) };
    }

    type AActor_GetComponentsBoundingCylinderInvoker = unsafe extern "C" fn(*mut c_void, &mut f32, &mut f32, bool, bool);
    pub(super) static mut AActor_GetComponentsBoundingCylinderInvokerHandler: Option<AActor_GetComponentsBoundingCylinderInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetComponentsBoundingCylinder_handler(handler: AActor_GetComponentsBoundingCylinderInvoker){
        unsafe{ AActor_GetComponentsBoundingCylinderInvokerHandler = Some(handler) };
    }

    type AActor_GetContentBundleGuidInvoker = unsafe extern "C" fn(*mut c_void) -> Uuid;
    pub(super) static mut AActor_GetContentBundleGuidInvokerHandler: Option<AActor_GetContentBundleGuidInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetContentBundleGuid_handler(handler: AActor_GetContentBundleGuidInvoker){
        unsafe{ AActor_GetContentBundleGuidInvokerHandler = Some(handler) };
    }

    type AActor_GetCustomIconNameInvoker = unsafe extern "C" fn(*mut c_void) -> UName;
    pub(super) static mut AActor_GetCustomIconNameInvokerHandler: Option<AActor_GetCustomIconNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetCustomIconName_handler(handler: AActor_GetCustomIconNameInvoker){
        unsafe{ AActor_GetCustomIconNameInvokerHandler = Some(handler) };
    }

    type AActor_GetDataLayerAssetsPropertyNameInvoker = unsafe extern "C" fn() -> UName;
    pub(super) static mut AActor_GetDataLayerAssetsPropertyNameInvokerHandler: Option<AActor_GetDataLayerAssetsPropertyNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetDataLayerAssetsPropertyName_handler(handler: AActor_GetDataLayerAssetsPropertyNameInvoker){
        unsafe{ AActor_GetDataLayerAssetsPropertyNameInvokerHandler = Some(handler) };
    }

    type AActor_GetDefaultActorLabelInvoker = unsafe extern "C" fn(*mut c_void) -> *const std::os::raw::c_char;
    pub(super) static mut AActor_GetDefaultActorLabelInvokerHandler: Option<AActor_GetDefaultActorLabelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetDefaultActorLabel_handler(handler: AActor_GetDefaultActorLabelInvoker){
        unsafe{ AActor_GetDefaultActorLabelInvokerHandler = Some(handler) };
    }

    type AActor_GetDefaultAttachComponentInvoker = unsafe extern "C" fn(*mut c_void) -> *mut USceneComponentOpaque;
    pub(super) static mut AActor_GetDefaultAttachComponentInvokerHandler: Option<AActor_GetDefaultAttachComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetDefaultAttachComponent_handler(handler: AActor_GetDefaultAttachComponentInvoker){
        unsafe{ AActor_GetDefaultAttachComponentInvokerHandler = Some(handler) };
    }

    type AActor_GetDistanceToInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque) -> f32;
    pub(super) static mut AActor_GetDistanceToInvokerHandler: Option<AActor_GetDistanceToInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetDistanceTo_handler(handler: AActor_GetDistanceToInvoker){
        unsafe{ AActor_GetDistanceToInvokerHandler = Some(handler) };
    }

    type AActor_GetDotProductToInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque) -> f32;
    pub(super) static mut AActor_GetDotProductToInvokerHandler: Option<AActor_GetDotProductToInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetDotProductTo_handler(handler: AActor_GetDotProductToInvoker){
        unsafe{ AActor_GetDotProductToInvokerHandler = Some(handler) };
    }

    type AActor_GetFolderGuidInvoker = unsafe extern "C" fn(*mut c_void, bool) -> Uuid;
    pub(super) static mut AActor_GetFolderGuidInvokerHandler: Option<AActor_GetFolderGuidInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetFolderGuid_handler(handler: AActor_GetFolderGuidInvoker){
        unsafe{ AActor_GetFolderGuidInvokerHandler = Some(handler) };
    }

    type AActor_GetFolderPathInvoker = unsafe extern "C" fn(*mut c_void) -> UName;
    pub(super) static mut AActor_GetFolderPathInvokerHandler: Option<AActor_GetFolderPathInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetFolderPath_handler(handler: AActor_GetFolderPathInvoker){
        unsafe{ AActor_GetFolderPathInvokerHandler = Some(handler) };
    }

    type AActor_GetFunctionCallspaceInvoker = unsafe extern "C" fn(*mut c_void, *mut UFunctionOpaque, *mut FFrameOpaque) -> i32;
    pub(super) static mut AActor_GetFunctionCallspaceInvokerHandler: Option<AActor_GetFunctionCallspaceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetFunctionCallspace_handler(handler: AActor_GetFunctionCallspaceInvoker){
        unsafe{ AActor_GetFunctionCallspaceInvokerHandler = Some(handler) };
    }

    type AActor_GetGameInstanceInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UGameInstanceOpaque;
    pub(super) static mut AActor_GetGameInstanceInvokerHandler: Option<AActor_GetGameInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetGameInstance_handler(handler: AActor_GetGameInstanceInvoker){
        unsafe{ AActor_GetGameInstanceInvokerHandler = Some(handler) };
    }

    type AActor_GetGameTimeSinceCreationInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut AActor_GetGameTimeSinceCreationInvokerHandler: Option<AActor_GetGameTimeSinceCreationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetGameTimeSinceCreation_handler(handler: AActor_GetGameTimeSinceCreationInvoker){
        unsafe{ AActor_GetGameTimeSinceCreationInvokerHandler = Some(handler) };
    }

    type AActor_GetHLODLayerInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UHLODLayerOpaque;
    pub(super) static mut AActor_GetHLODLayerInvokerHandler: Option<AActor_GetHLODLayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetHLODLayer_handler(handler: AActor_GetHLODLayerInvoker){
        unsafe{ AActor_GetHLODLayerInvokerHandler = Some(handler) };
    }

    type AActor_GetHLODLayerPropertyNameInvoker = unsafe extern "C" fn() -> UName;
    pub(super) static mut AActor_GetHLODLayerPropertyNameInvokerHandler: Option<AActor_GetHLODLayerPropertyNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetHLODLayerPropertyName_handler(handler: AActor_GetHLODLayerPropertyNameInvoker){
        unsafe{ AActor_GetHLODLayerPropertyNameInvokerHandler = Some(handler) };
    }

    type AActor_GetHiddenPropertyNameInvoker = unsafe extern "C" fn() -> UName;
    pub(super) static mut AActor_GetHiddenPropertyNameInvokerHandler: Option<AActor_GetHiddenPropertyNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetHiddenPropertyName_handler(handler: AActor_GetHiddenPropertyNameInvoker){
        unsafe{ AActor_GetHiddenPropertyNameInvokerHandler = Some(handler) };
    }

    type AActor_GetHorizontalDistanceToInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque) -> f32;
    pub(super) static mut AActor_GetHorizontalDistanceToInvokerHandler: Option<AActor_GetHorizontalDistanceToInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetHorizontalDistanceTo_handler(handler: AActor_GetHorizontalDistanceToInvoker){
        unsafe{ AActor_GetHorizontalDistanceToInvokerHandler = Some(handler) };
    }

    type AActor_GetHorizontalDotProductToInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque) -> f32;
    pub(super) static mut AActor_GetHorizontalDotProductToInvokerHandler: Option<AActor_GetHorizontalDotProductToInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetHorizontalDotProductTo_handler(handler: AActor_GetHorizontalDotProductToInvoker){
        unsafe{ AActor_GetHorizontalDotProductToInvokerHandler = Some(handler) };
    }

    type AActor_GetHumanReadableNameInvoker = unsafe extern "C" fn(*mut c_void) -> *const std::os::raw::c_char;
    pub(super) static mut AActor_GetHumanReadableNameInvokerHandler: Option<AActor_GetHumanReadableNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetHumanReadableName_handler(handler: AActor_GetHumanReadableNameInvoker){
        unsafe{ AActor_GetHumanReadableNameInvokerHandler = Some(handler) };
    }

    type AActor_GetInputAxisValueInvoker = unsafe extern "C" fn(*mut c_void, UName) -> f32;
    pub(super) static mut AActor_GetInputAxisValueInvokerHandler: Option<AActor_GetInputAxisValueInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetInputAxisValue_handler(handler: AActor_GetInputAxisValueInvoker){
        unsafe{ AActor_GetInputAxisValueInvokerHandler = Some(handler) };
    }

    type AActor_GetInstigatorInvoker = unsafe extern "C" fn(*mut c_void) -> *mut APawnOpaque;
    pub(super) static mut AActor_GetInstigatorInvokerHandler: Option<AActor_GetInstigatorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetInstigator_handler(handler: AActor_GetInstigatorInvoker){
        unsafe{ AActor_GetInstigatorInvokerHandler = Some(handler) };
    }

    type AActor_GetInstigatorControllerInvoker = unsafe extern "C" fn(*mut c_void) -> *mut AControllerOpaque;
    pub(super) static mut AActor_GetInstigatorControllerInvokerHandler: Option<AActor_GetInstigatorControllerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetInstigatorController_handler(handler: AActor_GetInstigatorControllerInvoker){
        unsafe{ AActor_GetInstigatorControllerInvokerHandler = Some(handler) };
    }

    type AActor_GetInstigatorPropertyNameInvoker = unsafe extern "C" fn() -> UName;
    pub(super) static mut AActor_GetInstigatorPropertyNameInvokerHandler: Option<AActor_GetInstigatorPropertyNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetInstigatorPropertyName_handler(handler: AActor_GetInstigatorPropertyNameInvoker){
        unsafe{ AActor_GetInstigatorPropertyNameInvokerHandler = Some(handler) };
    }

    type AActor_GetIsReplicatedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_GetIsReplicatedInvokerHandler: Option<AActor_GetIsReplicatedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetIsReplicated_handler(handler: AActor_GetIsReplicatedInvoker){
        unsafe{ AActor_GetIsReplicatedInvokerHandler = Some(handler) };
    }

    type AActor_GetIsSpatiallyLoadedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_GetIsSpatiallyLoadedInvokerHandler: Option<AActor_GetIsSpatiallyLoadedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetIsSpatiallyLoaded_handler(handler: AActor_GetIsSpatiallyLoadedInvoker){
        unsafe{ AActor_GetIsSpatiallyLoadedInvokerHandler = Some(handler) };
    }

    type AActor_GetIsSpatiallyLoadedPropertyNameInvoker = unsafe extern "C" fn() -> UName;
    pub(super) static mut AActor_GetIsSpatiallyLoadedPropertyNameInvokerHandler: Option<AActor_GetIsSpatiallyLoadedPropertyNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetIsSpatiallyLoadedPropertyName_handler(handler: AActor_GetIsSpatiallyLoadedPropertyNameInvoker){
        unsafe{ AActor_GetIsSpatiallyLoadedPropertyNameInvokerHandler = Some(handler) };
    }

    type AActor_GetLastRenderTimeInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut AActor_GetLastRenderTimeInvokerHandler: Option<AActor_GetLastRenderTimeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetLastRenderTime_handler(handler: AActor_GetLastRenderTimeInvoker){
        unsafe{ AActor_GetLastRenderTimeInvokerHandler = Some(handler) };
    }

    type AActor_GetLevelInvoker = unsafe extern "C" fn(*mut c_void) -> *mut ULevelOpaque;
    pub(super) static mut AActor_GetLevelInvokerHandler: Option<AActor_GetLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetLevel_handler(handler: AActor_GetLevelInvoker){
        unsafe{ AActor_GetLevelInvokerHandler = Some(handler) };
    }

    type AActor_GetLevelTransformInvoker = unsafe extern "C" fn(*mut c_void) -> Transform;
    pub(super) static mut AActor_GetLevelTransformInvokerHandler: Option<AActor_GetLevelTransformInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetLevelTransform_handler(handler: AActor_GetLevelTransformInvoker){
        unsafe{ AActor_GetLevelTransformInvokerHandler = Some(handler) };
    }

    type AActor_GetLifeSpanInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut AActor_GetLifeSpanInvokerHandler: Option<AActor_GetLifeSpanInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetLifeSpan_handler(handler: AActor_GetLifeSpanInvoker){
        unsafe{ AActor_GetLifeSpanInvokerHandler = Some(handler) };
    }

    type AActor_GetNetConnectionInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UNetConnectionOpaque;
    pub(super) static mut AActor_GetNetConnectionInvokerHandler: Option<AActor_GetNetConnectionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetNetConnection_handler(handler: AActor_GetNetConnectionInvoker){
        unsafe{ AActor_GetNetConnectionInvokerHandler = Some(handler) };
    }

    type AActor_GetNetDriverInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UNetDriverOpaque;
    pub(super) static mut AActor_GetNetDriverInvokerHandler: Option<AActor_GetNetDriverInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetNetDriver_handler(handler: AActor_GetNetDriverInvoker){
        unsafe{ AActor_GetNetDriverInvokerHandler = Some(handler) };
    }

    type AActor_GetNetDriverNameInvoker = unsafe extern "C" fn(*mut c_void) -> UName;
    pub(super) static mut AActor_GetNetDriverNameInvokerHandler: Option<AActor_GetNetDriverNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetNetDriverName_handler(handler: AActor_GetNetDriverNameInvoker){
        unsafe{ AActor_GetNetDriverNameInvokerHandler = Some(handler) };
    }

    type AActor_GetNetOwnerInvoker = unsafe extern "C" fn(*mut c_void) -> *mut AActorOpaque;
    pub(super) static mut AActor_GetNetOwnerInvokerHandler: Option<AActor_GetNetOwnerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetNetOwner_handler(handler: AActor_GetNetOwnerInvoker){
        unsafe{ AActor_GetNetOwnerInvokerHandler = Some(handler) };
    }

    type AActor_GetNetOwningPlayerInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UPlayerOpaque;
    pub(super) static mut AActor_GetNetOwningPlayerInvokerHandler: Option<AActor_GetNetOwningPlayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetNetOwningPlayer_handler(handler: AActor_GetNetOwningPlayerInvoker){
        unsafe{ AActor_GetNetOwningPlayerInvokerHandler = Some(handler) };
    }

    type AActor_GetNumUncachedStaticLightingInteractionsInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut AActor_GetNumUncachedStaticLightingInteractionsInvokerHandler: Option<AActor_GetNumUncachedStaticLightingInteractionsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetNumUncachedStaticLightingInteractions_handler(handler: AActor_GetNumUncachedStaticLightingInteractionsInvoker){
        unsafe{ AActor_GetNumUncachedStaticLightingInteractionsInvokerHandler = Some(handler) };
    }

    type AActor_GetOwnerInvoker = unsafe extern "C" fn(*mut c_void) -> *mut AActorOpaque;
    pub(super) static mut AActor_GetOwnerInvokerHandler: Option<AActor_GetOwnerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetOwner_handler(handler: AActor_GetOwnerInvoker){
        unsafe{ AActor_GetOwnerInvokerHandler = Some(handler) };
    }

    type AActor_GetParentActorInvoker = unsafe extern "C" fn(*mut c_void) -> *mut AActorOpaque;
    pub(super) static mut AActor_GetParentActorInvokerHandler: Option<AActor_GetParentActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetParentActor_handler(handler: AActor_GetParentActorInvoker){
        unsafe{ AActor_GetParentActorInvokerHandler = Some(handler) };
    }

    type AActor_GetParentComponentInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UChildActorComponentOpaque;
    pub(super) static mut AActor_GetParentComponentInvokerHandler: Option<AActor_GetParentComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetParentComponent_handler(handler: AActor_GetParentComponentInvoker){
        unsafe{ AActor_GetParentComponentInvokerHandler = Some(handler) };
    }

    type AActor_GetPhysicsVolumeInvoker = unsafe extern "C" fn(*mut c_void) -> *mut APhysicsVolumeOpaque;
    pub(super) static mut AActor_GetPhysicsVolumeInvokerHandler: Option<AActor_GetPhysicsVolumeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetPhysicsVolume_handler(handler: AActor_GetPhysicsVolumeInvoker){
        unsafe{ AActor_GetPhysicsVolumeInvokerHandler = Some(handler) };
    }

    type AActor_GetPivotOffsetInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut AActor_GetPivotOffsetInvokerHandler: Option<AActor_GetPivotOffsetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetPivotOffset_handler(handler: AActor_GetPivotOffsetInvoker){
        unsafe{ AActor_GetPivotOffsetInvokerHandler = Some(handler) };
    }

    type AActor_GetPlacementExtentInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut AActor_GetPlacementExtentInvokerHandler: Option<AActor_GetPlacementExtentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetPlacementExtent_handler(handler: AActor_GetPlacementExtentInvoker){
        unsafe{ AActor_GetPlacementExtentInvokerHandler = Some(handler) };
    }

    type AActor_GetRayTracingGroupIdInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut AActor_GetRayTracingGroupIdInvokerHandler: Option<AActor_GetRayTracingGroupIdInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetRayTracingGroupId_handler(handler: AActor_GetRayTracingGroupIdInvoker){
        unsafe{ AActor_GetRayTracingGroupIdInvokerHandler = Some(handler) };
    }

    type AActor_GetReplicateMovementPropertyNameInvoker = unsafe extern "C" fn() -> UName;
    pub(super) static mut AActor_GetReplicateMovementPropertyNameInvokerHandler: Option<AActor_GetReplicateMovementPropertyNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetReplicateMovementPropertyName_handler(handler: AActor_GetReplicateMovementPropertyNameInvoker){
        unsafe{ AActor_GetReplicateMovementPropertyNameInvokerHandler = Some(handler) };
    }

    type AActor_GetRolePropertyNameInvoker = unsafe extern "C" fn() -> UName;
    pub(super) static mut AActor_GetRolePropertyNameInvokerHandler: Option<AActor_GetRolePropertyNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetRolePropertyName_handler(handler: AActor_GetRolePropertyNameInvoker){
        unsafe{ AActor_GetRolePropertyNameInvokerHandler = Some(handler) };
    }

    type AActor_GetRootComponentInvoker = unsafe extern "C" fn(*mut c_void) -> *mut USceneComponentOpaque;
    pub(super) static mut AActor_GetRootComponentInvokerHandler: Option<AActor_GetRootComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetRootComponent_handler(handler: AActor_GetRootComponentInvoker){
        unsafe{ AActor_GetRootComponentInvokerHandler = Some(handler) };
    }

    type AActor_GetRootSelectionParentInvoker = unsafe extern "C" fn(*mut c_void) -> *mut AActorOpaque;
    pub(super) static mut AActor_GetRootSelectionParentInvokerHandler: Option<AActor_GetRootSelectionParentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetRootSelectionParent_handler(handler: AActor_GetRootSelectionParentInvoker){
        unsafe{ AActor_GetRootSelectionParentInvokerHandler = Some(handler) };
    }

    type AActor_GetRuntimeGridInvoker = unsafe extern "C" fn(*mut c_void) -> UName;
    pub(super) static mut AActor_GetRuntimeGridInvokerHandler: Option<AActor_GetRuntimeGridInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetRuntimeGrid_handler(handler: AActor_GetRuntimeGridInvoker){
        unsafe{ AActor_GetRuntimeGridInvokerHandler = Some(handler) };
    }

    type AActor_GetRuntimeGridPropertyNameInvoker = unsafe extern "C" fn() -> UName;
    pub(super) static mut AActor_GetRuntimeGridPropertyNameInvokerHandler: Option<AActor_GetRuntimeGridPropertyNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetRuntimeGridPropertyName_handler(handler: AActor_GetRuntimeGridPropertyNameInvoker){
        unsafe{ AActor_GetRuntimeGridPropertyNameInvokerHandler = Some(handler) };
    }

    type AActor_GetSceneOutlinerParentInvoker = unsafe extern "C" fn(*mut c_void) -> *mut AActorOpaque;
    pub(super) static mut AActor_GetSceneOutlinerParentInvokerHandler: Option<AActor_GetSceneOutlinerParentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetSceneOutlinerParent_handler(handler: AActor_GetSceneOutlinerParentInvoker){
        unsafe{ AActor_GetSceneOutlinerParentInvokerHandler = Some(handler) };
    }

    type AActor_GetSelectionParentInvoker = unsafe extern "C" fn(*mut c_void) -> *mut AActorOpaque;
    pub(super) static mut AActor_GetSelectionParentInvokerHandler: Option<AActor_GetSelectionParentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetSelectionParent_handler(handler: AActor_GetSelectionParentInvoker){
        unsafe{ AActor_GetSelectionParentInvokerHandler = Some(handler) };
    }

    type AActor_GetSimpleCollisionCylinderInvoker = unsafe extern "C" fn(*mut c_void, &mut f32, &mut f32);
    pub(super) static mut AActor_GetSimpleCollisionCylinderInvokerHandler: Option<AActor_GetSimpleCollisionCylinderInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetSimpleCollisionCylinder_handler(handler: AActor_GetSimpleCollisionCylinderInvoker){
        unsafe{ AActor_GetSimpleCollisionCylinderInvokerHandler = Some(handler) };
    }

    type AActor_GetSimpleCollisionCylinderExtentInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut AActor_GetSimpleCollisionCylinderExtentInvokerHandler: Option<AActor_GetSimpleCollisionCylinderExtentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetSimpleCollisionCylinderExtent_handler(handler: AActor_GetSimpleCollisionCylinderExtentInvoker){
        unsafe{ AActor_GetSimpleCollisionCylinderExtentInvokerHandler = Some(handler) };
    }

    type AActor_GetSimpleCollisionHalfHeightInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut AActor_GetSimpleCollisionHalfHeightInvokerHandler: Option<AActor_GetSimpleCollisionHalfHeightInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetSimpleCollisionHalfHeight_handler(handler: AActor_GetSimpleCollisionHalfHeightInvoker){
        unsafe{ AActor_GetSimpleCollisionHalfHeightInvokerHandler = Some(handler) };
    }

    type AActor_GetSimpleCollisionRadiusInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut AActor_GetSimpleCollisionRadiusInvokerHandler: Option<AActor_GetSimpleCollisionRadiusInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetSimpleCollisionRadius_handler(handler: AActor_GetSimpleCollisionRadiusInvoker){
        unsafe{ AActor_GetSimpleCollisionRadiusInvokerHandler = Some(handler) };
    }

    type AActor_GetSquaredDistanceToInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque) -> f32;
    pub(super) static mut AActor_GetSquaredDistanceToInvokerHandler: Option<AActor_GetSquaredDistanceToInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetSquaredDistanceTo_handler(handler: AActor_GetSquaredDistanceToInvoker){
        unsafe{ AActor_GetSquaredDistanceToInvokerHandler = Some(handler) };
    }

    type AActor_GetSquaredHorizontalDistanceToInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque) -> f32;
    pub(super) static mut AActor_GetSquaredHorizontalDistanceToInvokerHandler: Option<AActor_GetSquaredHorizontalDistanceToInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetSquaredHorizontalDistanceTo_handler(handler: AActor_GetSquaredHorizontalDistanceToInvoker){
        unsafe{ AActor_GetSquaredHorizontalDistanceToInvokerHandler = Some(handler) };
    }

    type AActor_GetTargetLocationInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque) -> Vector3;
    pub(super) static mut AActor_GetTargetLocationInvokerHandler: Option<AActor_GetTargetLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetTargetLocation_handler(handler: AActor_GetTargetLocationInvoker){
        unsafe{ AActor_GetTargetLocationInvokerHandler = Some(handler) };
    }

    type AActor_GetTearOffInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_GetTearOffInvokerHandler: Option<AActor_GetTearOffInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetTearOff_handler(handler: AActor_GetTearOffInvoker){
        unsafe{ AActor_GetTearOffInvokerHandler = Some(handler) };
    }

    type AActor_GetTickableWhenPausedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_GetTickableWhenPausedInvokerHandler: Option<AActor_GetTickableWhenPausedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetTickableWhenPaused_handler(handler: AActor_GetTickableWhenPausedInvoker){
        unsafe{ AActor_GetTickableWhenPausedInvokerHandler = Some(handler) };
    }

    type AActor_GetTransformInvoker = unsafe extern "C" fn(*mut c_void) -> Transform;
    pub(super) static mut AActor_GetTransformInvokerHandler: Option<AActor_GetTransformInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetTransform_handler(handler: AActor_GetTransformInvoker){
        unsafe{ AActor_GetTransformInvokerHandler = Some(handler) };
    }

    type AActor_GetVelocityInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut AActor_GetVelocityInvokerHandler: Option<AActor_GetVelocityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetVelocity_handler(handler: AActor_GetVelocityInvoker){
        unsafe{ AActor_GetVelocityInvokerHandler = Some(handler) };
    }

    type AActor_GetVerticalDistanceToInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque) -> f32;
    pub(super) static mut AActor_GetVerticalDistanceToInvokerHandler: Option<AActor_GetVerticalDistanceToInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetVerticalDistanceTo_handler(handler: AActor_GetVerticalDistanceToInvoker){
        unsafe{ AActor_GetVerticalDistanceToInvokerHandler = Some(handler) };
    }

    type AActor_GetWorldInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UWorldOpaque;
    pub(super) static mut AActor_GetWorldInvokerHandler: Option<AActor_GetWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetWorld_handler(handler: AActor_GetWorldInvoker){
        unsafe{ AActor_GetWorldInvokerHandler = Some(handler) };
    }

    type AActor_GetWorldSettingsInvoker = unsafe extern "C" fn(*mut c_void) -> *mut AWorldSettingsOpaque;
    pub(super) static mut AActor_GetWorldSettingsInvokerHandler: Option<AActor_GetWorldSettingsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_GetWorldSettings_handler(handler: AActor_GetWorldSettingsInvoker){
        unsafe{ AActor_GetWorldSettingsInvokerHandler = Some(handler) };
    }

    type AActor_HandleRegisterComponentWithWorldInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorComponentOpaque);
    pub(super) static mut AActor_HandleRegisterComponentWithWorldInvokerHandler: Option<AActor_HandleRegisterComponentWithWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_HandleRegisterComponentWithWorld_handler(handler: AActor_HandleRegisterComponentWithWorldInvoker){
        unsafe{ AActor_HandleRegisterComponentWithWorldInvokerHandler = Some(handler) };
    }

    type AActor_HasActiveCameraComponentInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_HasActiveCameraComponentInvokerHandler: Option<AActor_HasActiveCameraComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_HasActiveCameraComponent_handler(handler: AActor_HasActiveCameraComponentInvoker){
        unsafe{ AActor_HasActiveCameraComponentInvokerHandler = Some(handler) };
    }

    type AActor_HasActivePawnControlCameraComponentInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_HasActivePawnControlCameraComponentInvokerHandler: Option<AActor_HasActivePawnControlCameraComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_HasActivePawnControlCameraComponent_handler(handler: AActor_HasActivePawnControlCameraComponentInvoker){
        unsafe{ AActor_HasActivePawnControlCameraComponentInvokerHandler = Some(handler) };
    }

    type AActor_HasActorBegunPlayInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_HasActorBegunPlayInvokerHandler: Option<AActor_HasActorBegunPlayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_HasActorBegunPlay_handler(handler: AActor_HasActorBegunPlayInvoker){
        unsafe{ AActor_HasActorBegunPlayInvokerHandler = Some(handler) };
    }

    type AActor_HasActorRegisteredAllComponentsInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_HasActorRegisteredAllComponentsInvokerHandler: Option<AActor_HasActorRegisteredAllComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_HasActorRegisteredAllComponents_handler(handler: AActor_HasActorRegisteredAllComponentsInvoker){
        unsafe{ AActor_HasActorRegisteredAllComponentsInvokerHandler = Some(handler) };
    }

    type AActor_HasAuthorityInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_HasAuthorityInvokerHandler: Option<AActor_HasAuthorityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_HasAuthority_handler(handler: AActor_HasAuthorityInvoker){
        unsafe{ AActor_HasAuthorityInvokerHandler = Some(handler) };
    }

    type AActor_HasDataLayersInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_HasDataLayersInvokerHandler: Option<AActor_HasDataLayersInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_HasDataLayers_handler(handler: AActor_HasDataLayersInvoker){
        unsafe{ AActor_HasDataLayersInvokerHandler = Some(handler) };
    }

    type AActor_HasDeferredComponentRegistrationInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_HasDeferredComponentRegistrationInvokerHandler: Option<AActor_HasDeferredComponentRegistrationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_HasDeferredComponentRegistration_handler(handler: AActor_HasDeferredComponentRegistrationInvoker){
        unsafe{ AActor_HasDeferredComponentRegistrationInvokerHandler = Some(handler) };
    }

    type AActor_HasLocalNetOwnerInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_HasLocalNetOwnerInvokerHandler: Option<AActor_HasLocalNetOwnerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_HasLocalNetOwner_handler(handler: AActor_HasLocalNetOwnerInvoker){
        unsafe{ AActor_HasLocalNetOwnerInvokerHandler = Some(handler) };
    }

    type AActor_HasNetOwnerInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_HasNetOwnerInvokerHandler: Option<AActor_HasNetOwnerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_HasNetOwner_handler(handler: AActor_HasNetOwnerInvoker){
        unsafe{ AActor_HasNetOwnerInvokerHandler = Some(handler) };
    }

    type AActor_HasNonTrivialUserConstructionScriptInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_HasNonTrivialUserConstructionScriptInvokerHandler: Option<AActor_HasNonTrivialUserConstructionScriptInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_HasNonTrivialUserConstructionScript_handler(handler: AActor_HasNonTrivialUserConstructionScriptInvoker){
        unsafe{ AActor_HasNonTrivialUserConstructionScriptInvokerHandler = Some(handler) };
    }

    type AActor_HasValidRootComponentInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_HasValidRootComponentInvokerHandler: Option<AActor_HasValidRootComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_HasValidRootComponent_handler(handler: AActor_HasValidRootComponentInvoker){
        unsafe{ AActor_HasValidRootComponentInvokerHandler = Some(handler) };
    }

    type AActor_IncrementalRegisterComponentsInvoker = unsafe extern "C" fn(*mut c_void, i32, *mut FRegisterComponentContextOpaque) -> bool;
    pub(super) static mut AActor_IncrementalRegisterComponentsInvokerHandler: Option<AActor_IncrementalRegisterComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IncrementalRegisterComponents_handler(handler: AActor_IncrementalRegisterComponentsInvoker){
        unsafe{ AActor_IncrementalRegisterComponentsInvokerHandler = Some(handler) };
    }

    type AActor_InitializeComponentsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_InitializeComponentsInvokerHandler: Option<AActor_InitializeComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_InitializeComponents_handler(handler: AActor_InitializeComponentsInvoker){
        unsafe{ AActor_InitializeComponentsInvokerHandler = Some(handler) };
    }

    type AActor_InvalidateLightingCacheInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_InvalidateLightingCacheInvokerHandler: Option<AActor_InvalidateLightingCacheInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_InvalidateLightingCache_handler(handler: AActor_InvalidateLightingCacheInvoker){
        unsafe{ AActor_InvalidateLightingCacheInvokerHandler = Some(handler) };
    }

    type AActor_InvalidateLightingCacheDetailedInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_InvalidateLightingCacheDetailedInvokerHandler: Option<AActor_InvalidateLightingCacheDetailedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_InvalidateLightingCacheDetailed_handler(handler: AActor_InvalidateLightingCacheDetailedInvoker){
        unsafe{ AActor_InvalidateLightingCacheDetailedInvokerHandler = Some(handler) };
    }

    type AActor_IsActorBeginningPlayInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsActorBeginningPlayInvokerHandler: Option<AActor_IsActorBeginningPlayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsActorBeginningPlay_handler(handler: AActor_IsActorBeginningPlayInvoker){
        unsafe{ AActor_IsActorBeginningPlayInvokerHandler = Some(handler) };
    }

    type AActor_IsActorBeginningPlayFromLevelStreamingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsActorBeginningPlayFromLevelStreamingInvokerHandler: Option<AActor_IsActorBeginningPlayFromLevelStreamingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsActorBeginningPlayFromLevelStreaming_handler(handler: AActor_IsActorBeginningPlayFromLevelStreamingInvoker){
        unsafe{ AActor_IsActorBeginningPlayFromLevelStreamingInvokerHandler = Some(handler) };
    }

    type AActor_IsActorBeingDestroyedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsActorBeingDestroyedInvokerHandler: Option<AActor_IsActorBeingDestroyedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsActorBeingDestroyed_handler(handler: AActor_IsActorBeingDestroyedInvoker){
        unsafe{ AActor_IsActorBeingDestroyedInvokerHandler = Some(handler) };
    }

    type AActor_IsActorComponentReplicatedSubObjectRegisteredInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorComponentOpaque, *mut UObjectOpaque) -> bool;
    pub(super) static mut AActor_IsActorComponentReplicatedSubObjectRegisteredInvokerHandler: Option<AActor_IsActorComponentReplicatedSubObjectRegisteredInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsActorComponentReplicatedSubObjectRegistered_handler(handler: AActor_IsActorComponentReplicatedSubObjectRegisteredInvoker){
        unsafe{ AActor_IsActorComponentReplicatedSubObjectRegisteredInvokerHandler = Some(handler) };
    }

    type AActor_IsActorInitializedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsActorInitializedInvokerHandler: Option<AActor_IsActorInitializedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsActorInitialized_handler(handler: AActor_IsActorInitializedInvoker){
        unsafe{ AActor_IsActorInitializedInvokerHandler = Some(handler) };
    }

    type AActor_IsActorLabelEditableInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsActorLabelEditableInvokerHandler: Option<AActor_IsActorLabelEditableInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsActorLabelEditable_handler(handler: AActor_IsActorLabelEditableInvoker){
        unsafe{ AActor_IsActorLabelEditableInvokerHandler = Some(handler) };
    }

    type AActor_IsActorOrSelectionParentSelectedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsActorOrSelectionParentSelectedInvokerHandler: Option<AActor_IsActorOrSelectionParentSelectedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsActorOrSelectionParentSelected_handler(handler: AActor_IsActorOrSelectionParentSelectedInvoker){
        unsafe{ AActor_IsActorOrSelectionParentSelectedInvokerHandler = Some(handler) };
    }

    type AActor_IsActorTickEnabledInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsActorTickEnabledInvokerHandler: Option<AActor_IsActorTickEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsActorTickEnabled_handler(handler: AActor_IsActorTickEnabledInvoker){
        unsafe{ AActor_IsActorTickEnabledInvokerHandler = Some(handler) };
    }

    type AActor_IsAssetInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsAssetInvokerHandler: Option<AActor_IsAssetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsAsset_handler(handler: AActor_IsAssetInvoker){
        unsafe{ AActor_IsAssetInvokerHandler = Some(handler) };
    }

    type AActor_IsAttachedToInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque) -> bool;
    pub(super) static mut AActor_IsAttachedToInvokerHandler: Option<AActor_IsAttachedToInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsAttachedTo_handler(handler: AActor_IsAttachedToInvoker){
        unsafe{ AActor_IsAttachedToInvokerHandler = Some(handler) };
    }

    type AActor_IsBasedOnActorInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque) -> bool;
    pub(super) static mut AActor_IsBasedOnActorInvokerHandler: Option<AActor_IsBasedOnActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsBasedOnActor_handler(handler: AActor_IsBasedOnActorInvoker){
        unsafe{ AActor_IsBasedOnActorInvokerHandler = Some(handler) };
    }

    type AActor_IsChildActorInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsChildActorInvokerHandler: Option<AActor_IsChildActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsChildActor_handler(handler: AActor_IsChildActorInvoker){
        unsafe{ AActor_IsChildActorInvokerHandler = Some(handler) };
    }

    type AActor_IsComponentRelevantForNavigationInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorComponentOpaque) -> bool;
    pub(super) static mut AActor_IsComponentRelevantForNavigationInvokerHandler: Option<AActor_IsComponentRelevantForNavigationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsComponentRelevantForNavigation_handler(handler: AActor_IsComponentRelevantForNavigationInvoker){
        unsafe{ AActor_IsComponentRelevantForNavigationInvokerHandler = Some(handler) };
    }

    type AActor_IsDefaultPreviewEnabledInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsDefaultPreviewEnabledInvokerHandler: Option<AActor_IsDefaultPreviewEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsDefaultPreviewEnabled_handler(handler: AActor_IsDefaultPreviewEnabledInvoker){
        unsafe{ AActor_IsDefaultPreviewEnabledInvokerHandler = Some(handler) };
    }

    type AActor_IsEditableInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsEditableInvokerHandler: Option<AActor_IsEditableInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsEditable_handler(handler: AActor_IsEditableInvoker){
        unsafe{ AActor_IsEditableInvokerHandler = Some(handler) };
    }

    type AActor_IsEditorOnlyInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsEditorOnlyInvokerHandler: Option<AActor_IsEditorOnlyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsEditorOnly_handler(handler: AActor_IsEditorOnlyInvoker){
        unsafe{ AActor_IsEditorOnlyInvokerHandler = Some(handler) };
    }

    type AActor_IsForceExternalActorLevelReferenceForPIEInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsForceExternalActorLevelReferenceForPIEInvokerHandler: Option<AActor_IsForceExternalActorLevelReferenceForPIEInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsForceExternalActorLevelReferenceForPIE_handler(handler: AActor_IsForceExternalActorLevelReferenceForPIEInvoker){
        unsafe{ AActor_IsForceExternalActorLevelReferenceForPIEInvokerHandler = Some(handler) };
    }

    type AActor_IsHLODRelevantInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsHLODRelevantInvokerHandler: Option<AActor_IsHLODRelevantInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsHLODRelevant_handler(handler: AActor_IsHLODRelevantInvoker){
        unsafe{ AActor_IsHLODRelevantInvokerHandler = Some(handler) };
    }

    type AActor_IsHiddenInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsHiddenInvokerHandler: Option<AActor_IsHiddenInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsHidden_handler(handler: AActor_IsHiddenInvoker){
        unsafe{ AActor_IsHiddenInvokerHandler = Some(handler) };
    }

    type AActor_IsHiddenEdInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsHiddenEdInvokerHandler: Option<AActor_IsHiddenEdInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsHiddenEd_handler(handler: AActor_IsHiddenEdInvoker){
        unsafe{ AActor_IsHiddenEdInvokerHandler = Some(handler) };
    }

    type AActor_IsHiddenEdAtStartupInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsHiddenEdAtStartupInvokerHandler: Option<AActor_IsHiddenEdAtStartupInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsHiddenEdAtStartup_handler(handler: AActor_IsHiddenEdAtStartupInvoker){
        unsafe{ AActor_IsHiddenEdAtStartupInvokerHandler = Some(handler) };
    }

    type AActor_IsInEditingLevelInstanceInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsInEditingLevelInstanceInvokerHandler: Option<AActor_IsInEditingLevelInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsInEditingLevelInstance_handler(handler: AActor_IsInEditingLevelInstanceInvoker){
        unsafe{ AActor_IsInEditingLevelInstanceInvokerHandler = Some(handler) };
    }

    type AActor_IsInLevelInvoker = unsafe extern "C" fn(*mut c_void, *mut ULevelOpaque) -> bool;
    pub(super) static mut AActor_IsInLevelInvokerHandler: Option<AActor_IsInLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsInLevel_handler(handler: AActor_IsInLevelInvoker){
        unsafe{ AActor_IsInLevelInvokerHandler = Some(handler) };
    }

    type AActor_IsInPersistentLevelInvoker = unsafe extern "C" fn(*mut c_void, bool) -> bool;
    pub(super) static mut AActor_IsInPersistentLevelInvokerHandler: Option<AActor_IsInPersistentLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsInPersistentLevel_handler(handler: AActor_IsInPersistentLevelInvoker){
        unsafe{ AActor_IsInPersistentLevelInvokerHandler = Some(handler) };
    }

    type AActor_IsLevelBoundsRelevantInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsLevelBoundsRelevantInvokerHandler: Option<AActor_IsLevelBoundsRelevantInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsLevelBoundsRelevant_handler(handler: AActor_IsLevelBoundsRelevantInvoker){
        unsafe{ AActor_IsLevelBoundsRelevantInvokerHandler = Some(handler) };
    }

    type AActor_IsListedInSceneOutlinerInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsListedInSceneOutlinerInvokerHandler: Option<AActor_IsListedInSceneOutlinerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsListedInSceneOutliner_handler(handler: AActor_IsListedInSceneOutlinerInvoker){
        unsafe{ AActor_IsListedInSceneOutlinerInvokerHandler = Some(handler) };
    }

    type AActor_IsLockLocationInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsLockLocationInvokerHandler: Option<AActor_IsLockLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsLockLocation_handler(handler: AActor_IsLockLocationInvoker){
        unsafe{ AActor_IsLockLocationInvokerHandler = Some(handler) };
    }

    type AActor_IsMainPackageActorInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsMainPackageActorInvokerHandler: Option<AActor_IsMainPackageActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsMainPackageActor_handler(handler: AActor_IsMainPackageActorInvoker){
        unsafe{ AActor_IsMainPackageActorInvokerHandler = Some(handler) };
    }

    type AActor_IsNameStableForNetworkingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsNameStableForNetworkingInvokerHandler: Option<AActor_IsNameStableForNetworkingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsNameStableForNetworking_handler(handler: AActor_IsNameStableForNetworkingInvoker){
        unsafe{ AActor_IsNameStableForNetworkingInvokerHandler = Some(handler) };
    }

    type AActor_IsNetStartupActorInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsNetStartupActorInvokerHandler: Option<AActor_IsNetStartupActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsNetStartupActor_handler(handler: AActor_IsNetStartupActorInvoker){
        unsafe{ AActor_IsNetStartupActorInvokerHandler = Some(handler) };
    }

    type AActor_IsOverlappingActorInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque) -> bool;
    pub(super) static mut AActor_IsOverlappingActorInvokerHandler: Option<AActor_IsOverlappingActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsOverlappingActor_handler(handler: AActor_IsOverlappingActorInvoker){
        unsafe{ AActor_IsOverlappingActorInvokerHandler = Some(handler) };
    }

    type AActor_IsOwnedByInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque) -> bool;
    pub(super) static mut AActor_IsOwnedByInvokerHandler: Option<AActor_IsOwnedByInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsOwnedBy_handler(handler: AActor_IsOwnedByInvoker){
        unsafe{ AActor_IsOwnedByInvokerHandler = Some(handler) };
    }

    type AActor_IsPendingKillPendingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsPendingKillPendingInvokerHandler: Option<AActor_IsPendingKillPendingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsPendingKillPending_handler(handler: AActor_IsPendingKillPendingInvoker){
        unsafe{ AActor_IsPendingKillPendingInvokerHandler = Some(handler) };
    }

    type AActor_IsReadyForFinishDestroyInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsReadyForFinishDestroyInvokerHandler: Option<AActor_IsReadyForFinishDestroyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsReadyForFinishDestroy_handler(handler: AActor_IsReadyForFinishDestroyInvoker){
        unsafe{ AActor_IsReadyForFinishDestroyInvokerHandler = Some(handler) };
    }

    type AActor_IsRelevancyOwnerForInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque, *mut AActorOpaque, *mut AActorOpaque) -> bool;
    pub(super) static mut AActor_IsRelevancyOwnerForInvokerHandler: Option<AActor_IsRelevancyOwnerForInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsRelevancyOwnerFor_handler(handler: AActor_IsRelevancyOwnerForInvoker){
        unsafe{ AActor_IsRelevancyOwnerForInvokerHandler = Some(handler) };
    }

    type AActor_IsReplicatedActorComponentRegisteredInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorComponentOpaque) -> bool;
    pub(super) static mut AActor_IsReplicatedActorComponentRegisteredInvokerHandler: Option<AActor_IsReplicatedActorComponentRegisteredInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsReplicatedActorComponentRegistered_handler(handler: AActor_IsReplicatedActorComponentRegisteredInvoker){
        unsafe{ AActor_IsReplicatedActorComponentRegisteredInvokerHandler = Some(handler) };
    }

    type AActor_IsReplicatedSubObjectRegisteredInvoker = unsafe extern "C" fn(*mut c_void, *mut UObjectOpaque) -> bool;
    pub(super) static mut AActor_IsReplicatedSubObjectRegisteredInvokerHandler: Option<AActor_IsReplicatedSubObjectRegisteredInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsReplicatedSubObjectRegistered_handler(handler: AActor_IsReplicatedSubObjectRegisteredInvoker){
        unsafe{ AActor_IsReplicatedSubObjectRegisteredInvokerHandler = Some(handler) };
    }

    type AActor_IsReplicatingMovementInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsReplicatingMovementInvokerHandler: Option<AActor_IsReplicatingMovementInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsReplicatingMovement_handler(handler: AActor_IsReplicatingMovementInvoker){
        unsafe{ AActor_IsReplicatingMovementInvokerHandler = Some(handler) };
    }

    type AActor_IsRootComponentCollisionRegisteredInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsRootComponentCollisionRegisteredInvokerHandler: Option<AActor_IsRootComponentCollisionRegisteredInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsRootComponentCollisionRegistered_handler(handler: AActor_IsRootComponentCollisionRegisteredInvoker){
        unsafe{ AActor_IsRootComponentCollisionRegisteredInvokerHandler = Some(handler) };
    }

    type AActor_IsRootComponentMovableInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsRootComponentMovableInvokerHandler: Option<AActor_IsRootComponentMovableInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsRootComponentMovable_handler(handler: AActor_IsRootComponentMovableInvoker){
        unsafe{ AActor_IsRootComponentMovableInvokerHandler = Some(handler) };
    }

    type AActor_IsRootComponentStaticInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsRootComponentStaticInvokerHandler: Option<AActor_IsRootComponentStaticInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsRootComponentStatic_handler(handler: AActor_IsRootComponentStaticInvoker){
        unsafe{ AActor_IsRootComponentStaticInvokerHandler = Some(handler) };
    }

    type AActor_IsRootComponentStationaryInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsRootComponentStationaryInvokerHandler: Option<AActor_IsRootComponentStationaryInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsRootComponentStationary_handler(handler: AActor_IsRootComponentStationaryInvoker){
        unsafe{ AActor_IsRootComponentStationaryInvokerHandler = Some(handler) };
    }

    type AActor_IsRunningUserConstructionScriptInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsRunningUserConstructionScriptInvokerHandler: Option<AActor_IsRunningUserConstructionScriptInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsRunningUserConstructionScript_handler(handler: AActor_IsRunningUserConstructionScriptInvoker){
        unsafe{ AActor_IsRunningUserConstructionScriptInvokerHandler = Some(handler) };
    }

    type AActor_IsRuntimeOnlyInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsRuntimeOnlyInvokerHandler: Option<AActor_IsRuntimeOnlyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsRuntimeOnly_handler(handler: AActor_IsRuntimeOnlyInvoker){
        unsafe{ AActor_IsRuntimeOnlyInvokerHandler = Some(handler) };
    }

    type AActor_IsSelectableInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsSelectableInvokerHandler: Option<AActor_IsSelectableInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsSelectable_handler(handler: AActor_IsSelectableInvoker){
        unsafe{ AActor_IsSelectableInvokerHandler = Some(handler) };
    }

    type AActor_IsSelectedInEditorInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsSelectedInEditorInvokerHandler: Option<AActor_IsSelectedInEditorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsSelectedInEditor_handler(handler: AActor_IsSelectedInEditorInvoker){
        unsafe{ AActor_IsSelectedInEditorInvokerHandler = Some(handler) };
    }

    type AActor_IsSelectionChildInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsSelectionChildInvokerHandler: Option<AActor_IsSelectionChildInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsSelectionChild_handler(handler: AActor_IsSelectionChildInvoker){
        unsafe{ AActor_IsSelectionChildInvokerHandler = Some(handler) };
    }

    type AActor_IsSelectionParentOfAttachedActorsInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsSelectionParentOfAttachedActorsInvokerHandler: Option<AActor_IsSelectionParentOfAttachedActorsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsSelectionParentOfAttachedActors_handler(handler: AActor_IsSelectionParentOfAttachedActorsInvoker){
        unsafe{ AActor_IsSelectionParentOfAttachedActorsInvokerHandler = Some(handler) };
    }

    type AActor_IsSupportedForNetworkingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsSupportedForNetworkingInvokerHandler: Option<AActor_IsSupportedForNetworkingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsSupportedForNetworking_handler(handler: AActor_IsSupportedForNetworkingInvoker){
        unsafe{ AActor_IsSupportedForNetworkingInvokerHandler = Some(handler) };
    }

    type AActor_IsTemporarilyHiddenInEditorInvoker = unsafe extern "C" fn(*mut c_void, bool) -> bool;
    pub(super) static mut AActor_IsTemporarilyHiddenInEditorInvokerHandler: Option<AActor_IsTemporarilyHiddenInEditorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsTemporarilyHiddenInEditor_handler(handler: AActor_IsTemporarilyHiddenInEditorInvoker){
        unsafe{ AActor_IsTemporarilyHiddenInEditorInvokerHandler = Some(handler) };
    }

    type AActor_IsUserManagedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsUserManagedInvokerHandler: Option<AActor_IsUserManagedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsUserManaged_handler(handler: AActor_IsUserManagedInvoker){
        unsafe{ AActor_IsUserManagedInvokerHandler = Some(handler) };
    }

    type AActor_IsUsingRegisteredSubObjectListInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_IsUsingRegisteredSubObjectListInvokerHandler: Option<AActor_IsUsingRegisteredSubObjectListInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_IsUsingRegisteredSubObjectList_handler(handler: AActor_IsUsingRegisteredSubObjectListInvoker){
        unsafe{ AActor_IsUsingRegisteredSubObjectListInvokerHandler = Some(handler) };
    }

    type AActor_K2_DestroyActorInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_K2_DestroyActorInvokerHandler: Option<AActor_K2_DestroyActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_K2_DestroyActor_handler(handler: AActor_K2_DestroyActorInvoker){
        unsafe{ AActor_K2_DestroyActorInvokerHandler = Some(handler) };
    }

    type AActor_K2_GetActorLocationInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut AActor_K2_GetActorLocationInvokerHandler: Option<AActor_K2_GetActorLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_K2_GetActorLocation_handler(handler: AActor_K2_GetActorLocationInvoker){
        unsafe{ AActor_K2_GetActorLocationInvokerHandler = Some(handler) };
    }

    type AActor_K2_GetActorRotationInvoker = unsafe extern "C" fn(*mut c_void) -> Rotator;
    pub(super) static mut AActor_K2_GetActorRotationInvokerHandler: Option<AActor_K2_GetActorRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_K2_GetActorRotation_handler(handler: AActor_K2_GetActorRotationInvoker){
        unsafe{ AActor_K2_GetActorRotationInvokerHandler = Some(handler) };
    }

    type AActor_K2_GetRootComponentInvoker = unsafe extern "C" fn(*mut c_void) -> *mut USceneComponentOpaque;
    pub(super) static mut AActor_K2_GetRootComponentInvokerHandler: Option<AActor_K2_GetRootComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_K2_GetRootComponent_handler(handler: AActor_K2_GetRootComponentInvoker){
        unsafe{ AActor_K2_GetRootComponentInvokerHandler = Some(handler) };
    }

    type AActor_K2_OnBecomeViewTargetInvoker = unsafe extern "C" fn(*mut c_void, *mut APlayerControllerOpaque);
    pub(super) static mut AActor_K2_OnBecomeViewTargetInvokerHandler: Option<AActor_K2_OnBecomeViewTargetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_K2_OnBecomeViewTarget_handler(handler: AActor_K2_OnBecomeViewTargetInvoker){
        unsafe{ AActor_K2_OnBecomeViewTargetInvokerHandler = Some(handler) };
    }

    type AActor_K2_OnEndViewTargetInvoker = unsafe extern "C" fn(*mut c_void, *mut APlayerControllerOpaque);
    pub(super) static mut AActor_K2_OnEndViewTargetInvokerHandler: Option<AActor_K2_OnEndViewTargetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_K2_OnEndViewTarget_handler(handler: AActor_K2_OnEndViewTargetInvoker){
        unsafe{ AActor_K2_OnEndViewTargetInvokerHandler = Some(handler) };
    }

    type AActor_K2_OnResetInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_K2_OnResetInvokerHandler: Option<AActor_K2_OnResetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_K2_OnReset_handler(handler: AActor_K2_OnResetInvoker){
        unsafe{ AActor_K2_OnResetInvokerHandler = Some(handler) };
    }

    type AActor_K2_SetActorRotationInvoker = unsafe extern "C" fn(*mut c_void, Rotator, bool) -> bool;
    pub(super) static mut AActor_K2_SetActorRotationInvokerHandler: Option<AActor_K2_SetActorRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_K2_SetActorRotation_handler(handler: AActor_K2_SetActorRotationInvoker){
        unsafe{ AActor_K2_SetActorRotationInvokerHandler = Some(handler) };
    }

    type AActor_K2_TeleportToInvoker = unsafe extern "C" fn(*mut c_void, Vector3, Rotator) -> bool;
    pub(super) static mut AActor_K2_TeleportToInvokerHandler: Option<AActor_K2_TeleportToInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_K2_TeleportTo_handler(handler: AActor_K2_TeleportToInvoker){
        unsafe{ AActor_K2_TeleportToInvokerHandler = Some(handler) };
    }

    type AActor_LifeSpanExpiredInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_LifeSpanExpiredInvokerHandler: Option<AActor_LifeSpanExpiredInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_LifeSpanExpired_handler(handler: AActor_LifeSpanExpiredInvoker){
        unsafe{ AActor_LifeSpanExpiredInvokerHandler = Some(handler) };
    }

    type AActor_MakeNoiseInvoker = unsafe extern "C" fn(*mut c_void, f32, *mut APawnOpaque, Vector3, f32, UName);
    pub(super) static mut AActor_MakeNoiseInvokerHandler: Option<AActor_MakeNoiseInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_MakeNoise_handler(handler: AActor_MakeNoiseInvoker){
        unsafe{ AActor_MakeNoiseInvokerHandler = Some(handler) };
    }

    type AActor_MarkComponentsAsPendingKillInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_MarkComponentsAsPendingKillInvokerHandler: Option<AActor_MarkComponentsAsPendingKillInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_MarkComponentsAsPendingKill_handler(handler: AActor_MarkComponentsAsPendingKillInvoker){
        unsafe{ AActor_MarkComponentsAsPendingKillInvokerHandler = Some(handler) };
    }

    type AActor_MarkComponentsRenderStateDirtyInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_MarkComponentsRenderStateDirtyInvokerHandler: Option<AActor_MarkComponentsRenderStateDirtyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_MarkComponentsRenderStateDirty_handler(handler: AActor_MarkComponentsRenderStateDirtyInvoker){
        unsafe{ AActor_MarkComponentsRenderStateDirtyInvokerHandler = Some(handler) };
    }

    type AActor_ModifyInvoker = unsafe extern "C" fn(*mut c_void, bool) -> bool;
    pub(super) static mut AActor_ModifyInvokerHandler: Option<AActor_ModifyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_Modify_handler(handler: AActor_ModifyInvoker){
        unsafe{ AActor_ModifyInvokerHandler = Some(handler) };
    }

    type AActor_NeedsLoadForTargetPlatformInvoker = unsafe extern "C" fn(*mut c_void, *mut ITargetPlatformOpaque) -> bool;
    pub(super) static mut AActor_NeedsLoadForTargetPlatformInvokerHandler: Option<AActor_NeedsLoadForTargetPlatformInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_NeedsLoadForTargetPlatform_handler(handler: AActor_NeedsLoadForTargetPlatformInvoker){
        unsafe{ AActor_NeedsLoadForTargetPlatformInvokerHandler = Some(handler) };
    }

    type AActor_NotifyActorBeginCursorOverInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_NotifyActorBeginCursorOverInvokerHandler: Option<AActor_NotifyActorBeginCursorOverInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_NotifyActorBeginCursorOver_handler(handler: AActor_NotifyActorBeginCursorOverInvoker){
        unsafe{ AActor_NotifyActorBeginCursorOverInvokerHandler = Some(handler) };
    }

    type AActor_NotifyActorBeginOverlapInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque);
    pub(super) static mut AActor_NotifyActorBeginOverlapInvokerHandler: Option<AActor_NotifyActorBeginOverlapInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_NotifyActorBeginOverlap_handler(handler: AActor_NotifyActorBeginOverlapInvoker){
        unsafe{ AActor_NotifyActorBeginOverlapInvokerHandler = Some(handler) };
    }

    type AActor_NotifyActorEndCursorOverInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_NotifyActorEndCursorOverInvokerHandler: Option<AActor_NotifyActorEndCursorOverInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_NotifyActorEndCursorOver_handler(handler: AActor_NotifyActorEndCursorOverInvoker){
        unsafe{ AActor_NotifyActorEndCursorOverInvokerHandler = Some(handler) };
    }

    type AActor_NotifyActorEndOverlapInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque);
    pub(super) static mut AActor_NotifyActorEndOverlapInvokerHandler: Option<AActor_NotifyActorEndOverlapInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_NotifyActorEndOverlap_handler(handler: AActor_NotifyActorEndOverlapInvoker){
        unsafe{ AActor_NotifyActorEndOverlapInvokerHandler = Some(handler) };
    }

    type AActor_OnNetCleanupInvoker = unsafe extern "C" fn(*mut c_void, *mut UNetConnectionOpaque);
    pub(super) static mut AActor_OnNetCleanupInvokerHandler: Option<AActor_OnNetCleanupInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_OnNetCleanup_handler(handler: AActor_OnNetCleanupInvoker){
        unsafe{ AActor_OnNetCleanupInvokerHandler = Some(handler) };
    }

    type AActor_OnPlayFromHereInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_OnPlayFromHereInvokerHandler: Option<AActor_OnPlayFromHereInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_OnPlayFromHere_handler(handler: AActor_OnPlayFromHereInvoker){
        unsafe{ AActor_OnPlayFromHereInvokerHandler = Some(handler) };
    }

    type AActor_OnRep_AttachmentReplicationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_OnRep_AttachmentReplicationInvokerHandler: Option<AActor_OnRep_AttachmentReplicationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_OnRep_AttachmentReplication_handler(handler: AActor_OnRep_AttachmentReplicationInvoker){
        unsafe{ AActor_OnRep_AttachmentReplicationInvokerHandler = Some(handler) };
    }

    type AActor_OnRep_InstigatorInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_OnRep_InstigatorInvokerHandler: Option<AActor_OnRep_InstigatorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_OnRep_Instigator_handler(handler: AActor_OnRep_InstigatorInvoker){
        unsafe{ AActor_OnRep_InstigatorInvokerHandler = Some(handler) };
    }

    type AActor_OnRep_ReplicateMovementInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_OnRep_ReplicateMovementInvokerHandler: Option<AActor_OnRep_ReplicateMovementInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_OnRep_ReplicateMovement_handler(handler: AActor_OnRep_ReplicateMovementInvoker){
        unsafe{ AActor_OnRep_ReplicateMovementInvokerHandler = Some(handler) };
    }

    type AActor_OnRep_ReplicatedMovementInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_OnRep_ReplicatedMovementInvokerHandler: Option<AActor_OnRep_ReplicatedMovementInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_OnRep_ReplicatedMovement_handler(handler: AActor_OnRep_ReplicatedMovementInvoker){
        unsafe{ AActor_OnRep_ReplicatedMovementInvokerHandler = Some(handler) };
    }

    type AActor_OnReplicationPausedChangedInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_OnReplicationPausedChangedInvokerHandler: Option<AActor_OnReplicationPausedChangedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_OnReplicationPausedChanged_handler(handler: AActor_OnReplicationPausedChangedInvoker){
        unsafe{ AActor_OnReplicationPausedChangedInvokerHandler = Some(handler) };
    }

    type AActor_OnSubobjectCreatedFromReplicationInvoker = unsafe extern "C" fn(*mut c_void, *mut UObjectOpaque);
    pub(super) static mut AActor_OnSubobjectCreatedFromReplicationInvokerHandler: Option<AActor_OnSubobjectCreatedFromReplicationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_OnSubobjectCreatedFromReplication_handler(handler: AActor_OnSubobjectCreatedFromReplicationInvoker){
        unsafe{ AActor_OnSubobjectCreatedFromReplicationInvokerHandler = Some(handler) };
    }

    type AActor_OnSubobjectDestroyFromReplicationInvoker = unsafe extern "C" fn(*mut c_void, *mut UObjectOpaque);
    pub(super) static mut AActor_OnSubobjectDestroyFromReplicationInvokerHandler: Option<AActor_OnSubobjectDestroyFromReplicationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_OnSubobjectDestroyFromReplication_handler(handler: AActor_OnSubobjectDestroyFromReplicationInvoker){
        unsafe{ AActor_OnSubobjectDestroyFromReplicationInvokerHandler = Some(handler) };
    }

    type AActor_OpenAssetEditorInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_OpenAssetEditorInvokerHandler: Option<AActor_OpenAssetEditorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_OpenAssetEditor_handler(handler: AActor_OpenAssetEditorInvoker){
        unsafe{ AActor_OpenAssetEditorInvokerHandler = Some(handler) };
    }

    type AActor_OutsideWorldBoundsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_OutsideWorldBoundsInvokerHandler: Option<AActor_OutsideWorldBoundsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_OutsideWorldBounds_handler(handler: AActor_OutsideWorldBoundsInvoker){
        unsafe{ AActor_OutsideWorldBoundsInvokerHandler = Some(handler) };
    }

    type AActor_OwnsComponentInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorComponentOpaque) -> bool;
    pub(super) static mut AActor_OwnsComponentInvokerHandler: Option<AActor_OwnsComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_OwnsComponent_handler(handler: AActor_OwnsComponentInvoker){
        unsafe{ AActor_OwnsComponentInvokerHandler = Some(handler) };
    }

    type AActor_PostActorConstructionInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_PostActorConstructionInvokerHandler: Option<AActor_PostActorConstructionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PostActorConstruction_handler(handler: AActor_PostActorConstructionInvoker){
        unsafe{ AActor_PostActorConstructionInvokerHandler = Some(handler) };
    }

    type AActor_PostActorCreatedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_PostActorCreatedInvokerHandler: Option<AActor_PostActorCreatedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PostActorCreated_handler(handler: AActor_PostActorCreatedInvoker){
        unsafe{ AActor_PostActorCreatedInvokerHandler = Some(handler) };
    }

    type AActor_PostEditImportInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_PostEditImportInvokerHandler: Option<AActor_PostEditImportInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PostEditImport_handler(handler: AActor_PostEditImportInvoker){
        unsafe{ AActor_PostEditImportInvokerHandler = Some(handler) };
    }

    type AActor_PostEditMoveInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_PostEditMoveInvokerHandler: Option<AActor_PostEditMoveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PostEditMove_handler(handler: AActor_PostEditMoveInvoker){
        unsafe{ AActor_PostEditMoveInvokerHandler = Some(handler) };
    }

    type AActor_PostEditUndoInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_PostEditUndoInvokerHandler: Option<AActor_PostEditUndoInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PostEditUndo_handler(handler: AActor_PostEditUndoInvoker){
        unsafe{ AActor_PostEditUndoInvokerHandler = Some(handler) };
    }

    type AActor_PostInitPropertiesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_PostInitPropertiesInvokerHandler: Option<AActor_PostInitPropertiesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PostInitProperties_handler(handler: AActor_PostInitPropertiesInvoker){
        unsafe{ AActor_PostInitPropertiesInvokerHandler = Some(handler) };
    }

    type AActor_PostInitializeComponentsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_PostInitializeComponentsInvokerHandler: Option<AActor_PostInitializeComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PostInitializeComponents_handler(handler: AActor_PostInitializeComponentsInvoker){
        unsafe{ AActor_PostInitializeComponentsInvokerHandler = Some(handler) };
    }

    type AActor_PostLoadInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_PostLoadInvokerHandler: Option<AActor_PostLoadInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PostLoad_handler(handler: AActor_PostLoadInvoker){
        unsafe{ AActor_PostLoadInvokerHandler = Some(handler) };
    }

    type AActor_PostLoadSubobjectsInvoker = unsafe extern "C" fn(*mut c_void, *mut FObjectInstancingGraphOpaque);
    pub(super) static mut AActor_PostLoadSubobjectsInvokerHandler: Option<AActor_PostLoadSubobjectsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PostLoadSubobjects_handler(handler: AActor_PostLoadSubobjectsInvoker){
        unsafe{ AActor_PostLoadSubobjectsInvokerHandler = Some(handler) };
    }

    type AActor_PostNetInitInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_PostNetInitInvokerHandler: Option<AActor_PostNetInitInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PostNetInit_handler(handler: AActor_PostNetInitInvoker){
        unsafe{ AActor_PostNetInitInvokerHandler = Some(handler) };
    }

    type AActor_PostNetReceiveInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_PostNetReceiveInvokerHandler: Option<AActor_PostNetReceiveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PostNetReceive_handler(handler: AActor_PostNetReceiveInvoker){
        unsafe{ AActor_PostNetReceiveInvokerHandler = Some(handler) };
    }

    type AActor_PostNetReceiveLocationAndRotationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_PostNetReceiveLocationAndRotationInvokerHandler: Option<AActor_PostNetReceiveLocationAndRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PostNetReceiveLocationAndRotation_handler(handler: AActor_PostNetReceiveLocationAndRotationInvoker){
        unsafe{ AActor_PostNetReceiveLocationAndRotationInvokerHandler = Some(handler) };
    }

    type AActor_PostNetReceivePhysicStateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_PostNetReceivePhysicStateInvokerHandler: Option<AActor_PostNetReceivePhysicStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PostNetReceivePhysicState_handler(handler: AActor_PostNetReceivePhysicStateInvoker){
        unsafe{ AActor_PostNetReceivePhysicStateInvokerHandler = Some(handler) };
    }

    type AActor_PostNetReceiveRoleInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_PostNetReceiveRoleInvokerHandler: Option<AActor_PostNetReceiveRoleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PostNetReceiveRole_handler(handler: AActor_PostNetReceiveRoleInvoker){
        unsafe{ AActor_PostNetReceiveRoleInvokerHandler = Some(handler) };
    }

    type AActor_PostRegisterAllComponentsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_PostRegisterAllComponentsInvokerHandler: Option<AActor_PostRegisterAllComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PostRegisterAllComponents_handler(handler: AActor_PostRegisterAllComponentsInvoker){
        unsafe{ AActor_PostRegisterAllComponentsInvokerHandler = Some(handler) };
    }

    type AActor_PostRenameInvoker = unsafe extern "C" fn(*mut c_void, *mut UObjectOpaque, UName);
    pub(super) static mut AActor_PostRenameInvokerHandler: Option<AActor_PostRenameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PostRename_handler(handler: AActor_PostRenameInvoker){
        unsafe{ AActor_PostRenameInvokerHandler = Some(handler) };
    }

    type AActor_PostRenderForInvoker = unsafe extern "C" fn(*mut c_void, *mut APlayerControllerOpaque, *mut UCanvasOpaque, Vector3, Vector3);
    pub(super) static mut AActor_PostRenderForInvokerHandler: Option<AActor_PostRenderForInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PostRenderFor_handler(handler: AActor_PostRenderForInvoker){
        unsafe{ AActor_PostRenderForInvokerHandler = Some(handler) };
    }

    type AActor_PostUnregisterAllComponentsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_PostUnregisterAllComponentsInvokerHandler: Option<AActor_PostUnregisterAllComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PostUnregisterAllComponents_handler(handler: AActor_PostUnregisterAllComponentsInvoker){
        unsafe{ AActor_PostUnregisterAllComponentsInvokerHandler = Some(handler) };
    }

    type AActor_PreEditChangeInvoker = unsafe extern "C" fn(*mut c_void, *mut FPropertyOpaque);
    pub(super) static mut AActor_PreEditChangeInvokerHandler: Option<AActor_PreEditChangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PreEditChange_handler(handler: AActor_PreEditChangeInvoker){
        unsafe{ AActor_PreEditChangeInvokerHandler = Some(handler) };
    }

    type AActor_PreEditUndoInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_PreEditUndoInvokerHandler: Option<AActor_PreEditUndoInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PreEditUndo_handler(handler: AActor_PreEditUndoInvoker){
        unsafe{ AActor_PreEditUndoInvokerHandler = Some(handler) };
    }

    type AActor_PreInitializeComponentsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_PreInitializeComponentsInvokerHandler: Option<AActor_PreInitializeComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PreInitializeComponents_handler(handler: AActor_PreInitializeComponentsInvoker){
        unsafe{ AActor_PreInitializeComponentsInvokerHandler = Some(handler) };
    }

    type AActor_PreNetReceiveInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_PreNetReceiveInvokerHandler: Option<AActor_PreNetReceiveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PreNetReceive_handler(handler: AActor_PreNetReceiveInvoker){
        unsafe{ AActor_PreNetReceiveInvokerHandler = Some(handler) };
    }

    type AActor_PreRegisterAllComponentsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_PreRegisterAllComponentsInvokerHandler: Option<AActor_PreRegisterAllComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PreRegisterAllComponents_handler(handler: AActor_PreRegisterAllComponentsInvoker){
        unsafe{ AActor_PreRegisterAllComponentsInvokerHandler = Some(handler) };
    }

    type AActor_PrestreamTexturesInvoker = unsafe extern "C" fn(*mut c_void, f32, bool, i32);
    pub(super) static mut AActor_PrestreamTexturesInvokerHandler: Option<AActor_PrestreamTexturesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PrestreamTextures_handler(handler: AActor_PrestreamTexturesInvoker){
        unsafe{ AActor_PrestreamTexturesInvokerHandler = Some(handler) };
    }

    type AActor_ProcessEventInvoker = unsafe extern "C" fn(*mut c_void, *mut UFunctionOpaque, *mut c_void);
    pub(super) static mut AActor_ProcessEventInvokerHandler: Option<AActor_ProcessEventInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ProcessEvent_handler(handler: AActor_ProcessEventInvoker){
        unsafe{ AActor_ProcessEventInvokerHandler = Some(handler) };
    }

    type AActor_PushLevelInstanceEditingStateToProxiesInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_PushLevelInstanceEditingStateToProxiesInvokerHandler: Option<AActor_PushLevelInstanceEditingStateToProxiesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PushLevelInstanceEditingStateToProxies_handler(handler: AActor_PushLevelInstanceEditingStateToProxiesInvoker){
        unsafe{ AActor_PushLevelInstanceEditingStateToProxiesInvokerHandler = Some(handler) };
    }

    type AActor_PushSelectionToProxiesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_PushSelectionToProxiesInvokerHandler: Option<AActor_PushSelectionToProxiesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_PushSelectionToProxies_handler(handler: AActor_PushSelectionToProxiesInvoker){
        unsafe{ AActor_PushSelectionToProxiesInvokerHandler = Some(handler) };
    }

    type AActor_ReceiveActorBeginCursorOverInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_ReceiveActorBeginCursorOverInvokerHandler: Option<AActor_ReceiveActorBeginCursorOverInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ReceiveActorBeginCursorOver_handler(handler: AActor_ReceiveActorBeginCursorOverInvoker){
        unsafe{ AActor_ReceiveActorBeginCursorOverInvokerHandler = Some(handler) };
    }

    type AActor_ReceiveActorBeginOverlapInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque);
    pub(super) static mut AActor_ReceiveActorBeginOverlapInvokerHandler: Option<AActor_ReceiveActorBeginOverlapInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ReceiveActorBeginOverlap_handler(handler: AActor_ReceiveActorBeginOverlapInvoker){
        unsafe{ AActor_ReceiveActorBeginOverlapInvokerHandler = Some(handler) };
    }

    type AActor_ReceiveActorEndCursorOverInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_ReceiveActorEndCursorOverInvokerHandler: Option<AActor_ReceiveActorEndCursorOverInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ReceiveActorEndCursorOver_handler(handler: AActor_ReceiveActorEndCursorOverInvoker){
        unsafe{ AActor_ReceiveActorEndCursorOverInvokerHandler = Some(handler) };
    }

    type AActor_ReceiveActorEndOverlapInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque);
    pub(super) static mut AActor_ReceiveActorEndOverlapInvokerHandler: Option<AActor_ReceiveActorEndOverlapInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ReceiveActorEndOverlap_handler(handler: AActor_ReceiveActorEndOverlapInvoker){
        unsafe{ AActor_ReceiveActorEndOverlapInvokerHandler = Some(handler) };
    }

    type AActor_ReceiveAnyDamageInvoker = unsafe extern "C" fn(*mut c_void, f32, *mut UDamageTypeOpaque, *mut AControllerOpaque, *mut AActorOpaque);
    pub(super) static mut AActor_ReceiveAnyDamageInvokerHandler: Option<AActor_ReceiveAnyDamageInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ReceiveAnyDamage_handler(handler: AActor_ReceiveAnyDamageInvoker){
        unsafe{ AActor_ReceiveAnyDamageInvokerHandler = Some(handler) };
    }

    type AActor_ReceiveAsyncPhysicsTickInvoker = unsafe extern "C" fn(*mut c_void, f32, f32);
    pub(super) static mut AActor_ReceiveAsyncPhysicsTickInvokerHandler: Option<AActor_ReceiveAsyncPhysicsTickInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ReceiveAsyncPhysicsTick_handler(handler: AActor_ReceiveAsyncPhysicsTickInvoker){
        unsafe{ AActor_ReceiveAsyncPhysicsTickInvokerHandler = Some(handler) };
    }

    type AActor_ReceiveDestroyedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_ReceiveDestroyedInvokerHandler: Option<AActor_ReceiveDestroyedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ReceiveDestroyed_handler(handler: AActor_ReceiveDestroyedInvoker){
        unsafe{ AActor_ReceiveDestroyedInvokerHandler = Some(handler) };
    }

    type AActor_ReceiveTickInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut AActor_ReceiveTickInvokerHandler: Option<AActor_ReceiveTickInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ReceiveTick_handler(handler: AActor_ReceiveTickInvoker){
        unsafe{ AActor_ReceiveTickInvokerHandler = Some(handler) };
    }

    type AActor_RegisterAllActorTickFunctionsInvoker = unsafe extern "C" fn(*mut c_void, bool, bool);
    pub(super) static mut AActor_RegisterAllActorTickFunctionsInvokerHandler: Option<AActor_RegisterAllActorTickFunctionsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_RegisterAllActorTickFunctions_handler(handler: AActor_RegisterAllActorTickFunctionsInvoker){
        unsafe{ AActor_RegisterAllActorTickFunctionsInvokerHandler = Some(handler) };
    }

    type AActor_RegisterAllComponentsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_RegisterAllComponentsInvokerHandler: Option<AActor_RegisterAllComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_RegisterAllComponents_handler(handler: AActor_RegisterAllComponentsInvoker){
        unsafe{ AActor_RegisterAllComponentsInvokerHandler = Some(handler) };
    }

    type AActor_RemoveActorComponentReplicatedSubObjectInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorComponentOpaque, *mut UObjectOpaque);
    pub(super) static mut AActor_RemoveActorComponentReplicatedSubObjectInvokerHandler: Option<AActor_RemoveActorComponentReplicatedSubObjectInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_RemoveActorComponentReplicatedSubObject_handler(handler: AActor_RemoveActorComponentReplicatedSubObjectInvoker){
        unsafe{ AActor_RemoveActorComponentReplicatedSubObjectInvokerHandler = Some(handler) };
    }

    type AActor_RemoveAllDataLayersInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_RemoveAllDataLayersInvokerHandler: Option<AActor_RemoveAllDataLayersInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_RemoveAllDataLayers_handler(handler: AActor_RemoveAllDataLayersInvoker){
        unsafe{ AActor_RemoveAllDataLayersInvokerHandler = Some(handler) };
    }

    type AActor_RemoveDataLayerInvoker = unsafe extern "C" fn(*mut c_void, *mut UDataLayerAssetOpaque) -> bool;
    pub(super) static mut AActor_RemoveDataLayerInvokerHandler: Option<AActor_RemoveDataLayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_RemoveDataLayer_handler(handler: AActor_RemoveDataLayerInvoker){
        unsafe{ AActor_RemoveDataLayerInvokerHandler = Some(handler) };
    }

    type AActor_RemoveInstanceComponentInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorComponentOpaque);
    pub(super) static mut AActor_RemoveInstanceComponentInvokerHandler: Option<AActor_RemoveInstanceComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_RemoveInstanceComponent_handler(handler: AActor_RemoveInstanceComponentInvoker){
        unsafe{ AActor_RemoveInstanceComponentInvokerHandler = Some(handler) };
    }

    type AActor_RemoveOwnedComponentInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorComponentOpaque);
    pub(super) static mut AActor_RemoveOwnedComponentInvokerHandler: Option<AActor_RemoveOwnedComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_RemoveOwnedComponent_handler(handler: AActor_RemoveOwnedComponentInvoker){
        unsafe{ AActor_RemoveOwnedComponentInvokerHandler = Some(handler) };
    }

    type AActor_RemoveReplicatedSubObjectInvoker = unsafe extern "C" fn(*mut c_void, *mut UObjectOpaque);
    pub(super) static mut AActor_RemoveReplicatedSubObjectInvokerHandler: Option<AActor_RemoveReplicatedSubObjectInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_RemoveReplicatedSubObject_handler(handler: AActor_RemoveReplicatedSubObjectInvoker){
        unsafe{ AActor_RemoveReplicatedSubObjectInvokerHandler = Some(handler) };
    }

    type AActor_RemoveTickPrerequisiteActorInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque);
    pub(super) static mut AActor_RemoveTickPrerequisiteActorInvokerHandler: Option<AActor_RemoveTickPrerequisiteActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_RemoveTickPrerequisiteActor_handler(handler: AActor_RemoveTickPrerequisiteActorInvoker){
        unsafe{ AActor_RemoveTickPrerequisiteActorInvokerHandler = Some(handler) };
    }

    type AActor_RemoveTickPrerequisiteComponentInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorComponentOpaque);
    pub(super) static mut AActor_RemoveTickPrerequisiteComponentInvokerHandler: Option<AActor_RemoveTickPrerequisiteComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_RemoveTickPrerequisiteComponent_handler(handler: AActor_RemoveTickPrerequisiteComponentInvoker){
        unsafe{ AActor_RemoveTickPrerequisiteComponentInvokerHandler = Some(handler) };
    }

    type AActor_ReplicateSubobjectsInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorChannelOpaque, *mut FOutBunchOpaque, *mut FReplicationFlagsOpaque) -> bool;
    pub(super) static mut AActor_ReplicateSubobjectsInvokerHandler: Option<AActor_ReplicateSubobjectsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ReplicateSubobjects_handler(handler: AActor_ReplicateSubobjectsInvoker){
        unsafe{ AActor_ReplicateSubobjectsInvokerHandler = Some(handler) };
    }

    type AActor_ReregisterAllComponentsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_ReregisterAllComponentsInvokerHandler: Option<AActor_ReregisterAllComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ReregisterAllComponents_handler(handler: AActor_ReregisterAllComponentsInvoker){
        unsafe{ AActor_ReregisterAllComponentsInvokerHandler = Some(handler) };
    }

    type AActor_ReregisterComponentsWhenModifiedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_ReregisterComponentsWhenModifiedInvokerHandler: Option<AActor_ReregisterComponentsWhenModifiedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ReregisterComponentsWhenModified_handler(handler: AActor_ReregisterComponentsWhenModifiedInvoker){
        unsafe{ AActor_ReregisterComponentsWhenModifiedInvokerHandler = Some(handler) };
    }

    type AActor_RerunConstructionScriptsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_RerunConstructionScriptsInvokerHandler: Option<AActor_RerunConstructionScriptsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_RerunConstructionScripts_handler(handler: AActor_RerunConstructionScriptsInvoker){
        unsafe{ AActor_RerunConstructionScriptsInvokerHandler = Some(handler) };
    }

    type AActor_ResetInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_ResetInvokerHandler: Option<AActor_ResetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_Reset_handler(handler: AActor_ResetInvoker){
        unsafe{ AActor_ResetInvokerHandler = Some(handler) };
    }

    type AActor_ResetOwnedComponentsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_ResetOwnedComponentsInvokerHandler: Option<AActor_ResetOwnedComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ResetOwnedComponents_handler(handler: AActor_ResetOwnedComponentsInvoker){
        unsafe{ AActor_ResetOwnedComponentsInvokerHandler = Some(handler) };
    }

    type AActor_ResetPropertiesForConstructionInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_ResetPropertiesForConstructionInvokerHandler: Option<AActor_ResetPropertiesForConstructionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ResetPropertiesForConstruction_handler(handler: AActor_ResetPropertiesForConstructionInvoker){
        unsafe{ AActor_ResetPropertiesForConstructionInvokerHandler = Some(handler) };
    }

    type AActor_RewindForReplayInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_RewindForReplayInvokerHandler: Option<AActor_RewindForReplayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_RewindForReplay_handler(handler: AActor_RewindForReplayInvoker){
        unsafe{ AActor_RewindForReplayInvokerHandler = Some(handler) };
    }

    type AActor_SeedAllRandomStreamsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_SeedAllRandomStreamsInvokerHandler: Option<AActor_SeedAllRandomStreamsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SeedAllRandomStreams_handler(handler: AActor_SeedAllRandomStreamsInvoker){
        unsafe{ AActor_SeedAllRandomStreamsInvokerHandler = Some(handler) };
    }

    type AActor_SetActorEnableCollisionInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_SetActorEnableCollisionInvokerHandler: Option<AActor_SetActorEnableCollisionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetActorEnableCollision_handler(handler: AActor_SetActorEnableCollisionInvoker){
        unsafe{ AActor_SetActorEnableCollisionInvokerHandler = Some(handler) };
    }

    type AActor_SetActorHiddenInGameInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_SetActorHiddenInGameInvokerHandler: Option<AActor_SetActorHiddenInGameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetActorHiddenInGame_handler(handler: AActor_SetActorHiddenInGameInvoker){
        unsafe{ AActor_SetActorHiddenInGameInvokerHandler = Some(handler) };
    }

    type AActor_SetActorRelativeScale3DInvoker = unsafe extern "C" fn(*mut c_void, Vector3);
    pub(super) static mut AActor_SetActorRelativeScale3DInvokerHandler: Option<AActor_SetActorRelativeScale3DInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetActorRelativeScale3D_handler(handler: AActor_SetActorRelativeScale3DInvoker){
        unsafe{ AActor_SetActorRelativeScale3DInvokerHandler = Some(handler) };
    }

    type AActor_SetActorScale3DInvoker = unsafe extern "C" fn(*mut c_void, Vector3);
    pub(super) static mut AActor_SetActorScale3DInvokerHandler: Option<AActor_SetActorScale3DInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetActorScale3D_handler(handler: AActor_SetActorScale3DInvoker){
        unsafe{ AActor_SetActorScale3DInvokerHandler = Some(handler) };
    }

    type AActor_SetActorTickEnabledInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_SetActorTickEnabledInvokerHandler: Option<AActor_SetActorTickEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetActorTickEnabled_handler(handler: AActor_SetActorTickEnabledInvoker){
        unsafe{ AActor_SetActorTickEnabledInvokerHandler = Some(handler) };
    }

    type AActor_SetActorTickIntervalInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut AActor_SetActorTickIntervalInvokerHandler: Option<AActor_SetActorTickIntervalInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetActorTickInterval_handler(handler: AActor_SetActorTickIntervalInvoker){
        unsafe{ AActor_SetActorTickIntervalInvokerHandler = Some(handler) };
    }

    type AActor_SetAutoDestroyWhenFinishedInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_SetAutoDestroyWhenFinishedInvokerHandler: Option<AActor_SetAutoDestroyWhenFinishedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetAutoDestroyWhenFinished_handler(handler: AActor_SetAutoDestroyWhenFinishedInvoker){
        unsafe{ AActor_SetAutoDestroyWhenFinishedInvokerHandler = Some(handler) };
    }

    type AActor_SetAutonomousProxyInvoker = unsafe extern "C" fn(*mut c_void, bool, bool);
    pub(super) static mut AActor_SetAutonomousProxyInvokerHandler: Option<AActor_SetAutonomousProxyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetAutonomousProxy_handler(handler: AActor_SetAutonomousProxyInvoker){
        unsafe{ AActor_SetAutonomousProxyInvokerHandler = Some(handler) };
    }

    type AActor_SetCallPreReplicationInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_SetCallPreReplicationInvokerHandler: Option<AActor_SetCallPreReplicationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetCallPreReplication_handler(handler: AActor_SetCallPreReplicationInvoker){
        unsafe{ AActor_SetCallPreReplicationInvokerHandler = Some(handler) };
    }

    type AActor_SetCallPreReplicationForReplayInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_SetCallPreReplicationForReplayInvokerHandler: Option<AActor_SetCallPreReplicationForReplayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetCallPreReplicationForReplay_handler(handler: AActor_SetCallPreReplicationForReplayInvoker){
        unsafe{ AActor_SetCallPreReplicationForReplayInvokerHandler = Some(handler) };
    }

    type AActor_SetCanBeDamagedInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_SetCanBeDamagedInvokerHandler: Option<AActor_SetCanBeDamagedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetCanBeDamaged_handler(handler: AActor_SetCanBeDamagedInvoker){
        unsafe{ AActor_SetCanBeDamagedInvokerHandler = Some(handler) };
    }

    type AActor_SetForceExternalActorLevelReferenceForPIEInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_SetForceExternalActorLevelReferenceForPIEInvokerHandler: Option<AActor_SetForceExternalActorLevelReferenceForPIEInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetForceExternalActorLevelReferenceForPIE_handler(handler: AActor_SetForceExternalActorLevelReferenceForPIEInvoker){
        unsafe{ AActor_SetForceExternalActorLevelReferenceForPIEInvokerHandler = Some(handler) };
    }

    type AActor_SetHLODLayerInvoker = unsafe extern "C" fn(*mut c_void, *mut UHLODLayerOpaque);
    pub(super) static mut AActor_SetHLODLayerInvokerHandler: Option<AActor_SetHLODLayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetHLODLayer_handler(handler: AActor_SetHLODLayerInvoker){
        unsafe{ AActor_SetHLODLayerInvokerHandler = Some(handler) };
    }

    type AActor_SetHasActorRegisteredAllComponentsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_SetHasActorRegisteredAllComponentsInvokerHandler: Option<AActor_SetHasActorRegisteredAllComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetHasActorRegisteredAllComponents_handler(handler: AActor_SetHasActorRegisteredAllComponentsInvoker){
        unsafe{ AActor_SetHasActorRegisteredAllComponentsInvokerHandler = Some(handler) };
    }

    type AActor_SetHiddenInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_SetHiddenInvokerHandler: Option<AActor_SetHiddenInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetHidden_handler(handler: AActor_SetHiddenInvoker){
        unsafe{ AActor_SetHiddenInvokerHandler = Some(handler) };
    }

    type AActor_SetInstigatorInvoker = unsafe extern "C" fn(*mut c_void, *mut APawnOpaque);
    pub(super) static mut AActor_SetInstigatorInvokerHandler: Option<AActor_SetInstigatorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetInstigator_handler(handler: AActor_SetInstigatorInvoker){
        unsafe{ AActor_SetInstigatorInvokerHandler = Some(handler) };
    }

    type AActor_SetIsHiddenEdLayerInvoker = unsafe extern "C" fn(*mut c_void, bool) -> bool;
    pub(super) static mut AActor_SetIsHiddenEdLayerInvokerHandler: Option<AActor_SetIsHiddenEdLayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetIsHiddenEdLayer_handler(handler: AActor_SetIsHiddenEdLayerInvoker){
        unsafe{ AActor_SetIsHiddenEdLayerInvokerHandler = Some(handler) };
    }

    type AActor_SetIsSpatiallyLoadedInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_SetIsSpatiallyLoadedInvokerHandler: Option<AActor_SetIsSpatiallyLoadedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetIsSpatiallyLoaded_handler(handler: AActor_SetIsSpatiallyLoadedInvoker){
        unsafe{ AActor_SetIsSpatiallyLoadedInvokerHandler = Some(handler) };
    }

    type AActor_SetIsTemporarilyHiddenInEditorInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_SetIsTemporarilyHiddenInEditorInvokerHandler: Option<AActor_SetIsTemporarilyHiddenInEditorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetIsTemporarilyHiddenInEditor_handler(handler: AActor_SetIsTemporarilyHiddenInEditorInvoker){
        unsafe{ AActor_SetIsTemporarilyHiddenInEditorInvokerHandler = Some(handler) };
    }

    type AActor_SetLODParentInvoker = unsafe extern "C" fn(*mut c_void, *mut UPrimitiveComponentOpaque, f32);
    pub(super) static mut AActor_SetLODParentInvokerHandler: Option<AActor_SetLODParentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetLODParent_handler(handler: AActor_SetLODParentInvoker){
        unsafe{ AActor_SetLODParentInvokerHandler = Some(handler) };
    }

    type AActor_SetLifeSpanInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut AActor_SetLifeSpanInvokerHandler: Option<AActor_SetLifeSpanInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetLifeSpan_handler(handler: AActor_SetLifeSpanInvoker){
        unsafe{ AActor_SetLifeSpanInvokerHandler = Some(handler) };
    }

    type AActor_SetLockLocationInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_SetLockLocationInvokerHandler: Option<AActor_SetLockLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetLockLocation_handler(handler: AActor_SetLockLocationInvoker){
        unsafe{ AActor_SetLockLocationInvokerHandler = Some(handler) };
    }

    type AActor_SetNetAddressableInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_SetNetAddressableInvokerHandler: Option<AActor_SetNetAddressableInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetNetAddressable_handler(handler: AActor_SetNetAddressableInvoker){
        unsafe{ AActor_SetNetAddressableInvokerHandler = Some(handler) };
    }

    type AActor_SetNetDriverNameInvoker = unsafe extern "C" fn(*mut c_void, UName);
    pub(super) static mut AActor_SetNetDriverNameInvokerHandler: Option<AActor_SetNetDriverNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetNetDriverName_handler(handler: AActor_SetNetDriverNameInvoker){
        unsafe{ AActor_SetNetDriverNameInvokerHandler = Some(handler) };
    }

    type AActor_SetOwnerInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque);
    pub(super) static mut AActor_SetOwnerInvokerHandler: Option<AActor_SetOwnerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetOwner_handler(handler: AActor_SetOwnerInvoker){
        unsafe{ AActor_SetOwnerInvokerHandler = Some(handler) };
    }

    type AActor_SetPackageExternalInvoker = unsafe extern "C" fn(*mut c_void, bool, bool);
    pub(super) static mut AActor_SetPackageExternalInvokerHandler: Option<AActor_SetPackageExternalInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetPackageExternal_handler(handler: AActor_SetPackageExternalInvoker){
        unsafe{ AActor_SetPackageExternalInvokerHandler = Some(handler) };
    }

    type AActor_SetRayTracingGroupIdInvoker = unsafe extern "C" fn(*mut c_void, i32);
    pub(super) static mut AActor_SetRayTracingGroupIdInvokerHandler: Option<AActor_SetRayTracingGroupIdInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetRayTracingGroupId_handler(handler: AActor_SetRayTracingGroupIdInvoker){
        unsafe{ AActor_SetRayTracingGroupIdInvokerHandler = Some(handler) };
    }

    type AActor_SetReplicateMovementInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_SetReplicateMovementInvokerHandler: Option<AActor_SetReplicateMovementInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetReplicateMovement_handler(handler: AActor_SetReplicateMovementInvoker){
        unsafe{ AActor_SetReplicateMovementInvokerHandler = Some(handler) };
    }

    type AActor_SetReplicatesInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_SetReplicatesInvokerHandler: Option<AActor_SetReplicatesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetReplicates_handler(handler: AActor_SetReplicatesInvoker){
        unsafe{ AActor_SetReplicatesInvokerHandler = Some(handler) };
    }

    type AActor_SetReplicatingMovementInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_SetReplicatingMovementInvokerHandler: Option<AActor_SetReplicatingMovementInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetReplicatingMovement_handler(handler: AActor_SetReplicatingMovementInvoker){
        unsafe{ AActor_SetReplicatingMovementInvokerHandler = Some(handler) };
    }

    type AActor_SetRootComponentInvoker = unsafe extern "C" fn(*mut c_void, *mut USceneComponentOpaque) -> bool;
    pub(super) static mut AActor_SetRootComponentInvokerHandler: Option<AActor_SetRootComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetRootComponent_handler(handler: AActor_SetRootComponentInvoker){
        unsafe{ AActor_SetRootComponentInvokerHandler = Some(handler) };
    }

    type AActor_SetRuntimeGridInvoker = unsafe extern "C" fn(*mut c_void, UName);
    pub(super) static mut AActor_SetRuntimeGridInvokerHandler: Option<AActor_SetRuntimeGridInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetRuntimeGrid_handler(handler: AActor_SetRuntimeGridInvoker){
        unsafe{ AActor_SetRuntimeGridInvokerHandler = Some(handler) };
    }

    type AActor_SetTickableWhenPausedInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_SetTickableWhenPausedInvokerHandler: Option<AActor_SetTickableWhenPausedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SetTickableWhenPaused_handler(handler: AActor_SetTickableWhenPausedInvoker){
        unsafe{ AActor_SetTickableWhenPausedInvokerHandler = Some(handler) };
    }

    type AActor_ShouldCookOptimizedBPComponentDataInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_ShouldCookOptimizedBPComponentDataInvokerHandler: Option<AActor_ShouldCookOptimizedBPComponentDataInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ShouldCookOptimizedBPComponentData_handler(handler: AActor_ShouldCookOptimizedBPComponentDataInvoker){
        unsafe{ AActor_ShouldCookOptimizedBPComponentDataInvokerHandler = Some(handler) };
    }

    type AActor_ShouldExportInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_ShouldExportInvokerHandler: Option<AActor_ShouldExportInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ShouldExport_handler(handler: AActor_ShouldExportInvoker){
        unsafe{ AActor_ShouldExportInvokerHandler = Some(handler) };
    }

    type AActor_ShouldImportInvoker = unsafe extern "C" fn(*mut c_void, NativeString, bool) -> bool;
    pub(super) static mut AActor_ShouldImportInvokerHandler: Option<AActor_ShouldImportInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ShouldImport_handler(handler: AActor_ShouldImportInvoker){
        unsafe{ AActor_ShouldImportInvokerHandler = Some(handler) };
    }

    type AActor_ShouldLevelKeepRefIfExternalInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_ShouldLevelKeepRefIfExternalInvokerHandler: Option<AActor_ShouldLevelKeepRefIfExternalInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ShouldLevelKeepRefIfExternal_handler(handler: AActor_ShouldLevelKeepRefIfExternalInvoker){
        unsafe{ AActor_ShouldLevelKeepRefIfExternalInvokerHandler = Some(handler) };
    }

    type AActor_ShouldTickIfViewportsOnlyInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_ShouldTickIfViewportsOnlyInvokerHandler: Option<AActor_ShouldTickIfViewportsOnlyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_ShouldTickIfViewportsOnly_handler(handler: AActor_ShouldTickIfViewportsOnlyInvoker){
        unsafe{ AActor_ShouldTickIfViewportsOnlyInvokerHandler = Some(handler) };
    }

    type AActor_SupportsDataLayerInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_SupportsDataLayerInvokerHandler: Option<AActor_SupportsDataLayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SupportsDataLayer_handler(handler: AActor_SupportsDataLayerInvoker){
        unsafe{ AActor_SupportsDataLayerInvokerHandler = Some(handler) };
    }

    type AActor_SupportsExternalPackagingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_SupportsExternalPackagingInvokerHandler: Option<AActor_SupportsExternalPackagingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SupportsExternalPackaging_handler(handler: AActor_SupportsExternalPackagingInvoker){
        unsafe{ AActor_SupportsExternalPackagingInvokerHandler = Some(handler) };
    }

    type AActor_SupportsLayersInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_SupportsLayersInvokerHandler: Option<AActor_SupportsLayersInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SupportsLayers_handler(handler: AActor_SupportsLayersInvoker){
        unsafe{ AActor_SupportsLayersInvokerHandler = Some(handler) };
    }

    type AActor_SwapRolesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_SwapRolesInvokerHandler: Option<AActor_SwapRolesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_SwapRoles_handler(handler: AActor_SwapRolesInvoker){
        unsafe{ AActor_SwapRolesInvokerHandler = Some(handler) };
    }

    type AActor_TearOffInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_TearOffInvokerHandler: Option<AActor_TearOffInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_TearOff_handler(handler: AActor_TearOffInvoker){
        unsafe{ AActor_TearOffInvokerHandler = Some(handler) };
    }

    type AActor_TeleportSucceededInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_TeleportSucceededInvokerHandler: Option<AActor_TeleportSucceededInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_TeleportSucceeded_handler(handler: AActor_TeleportSucceededInvoker){
        unsafe{ AActor_TeleportSucceededInvokerHandler = Some(handler) };
    }

    type AActor_TickInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut AActor_TickInvokerHandler: Option<AActor_TickInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_Tick_handler(handler: AActor_TickInvoker){
        unsafe{ AActor_TickInvokerHandler = Some(handler) };
    }

    type AActor_TornOffInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_TornOffInvokerHandler: Option<AActor_TornOffInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_TornOff_handler(handler: AActor_TornOffInvoker){
        unsafe{ AActor_TornOffInvokerHandler = Some(handler) };
    }

    type AActor_UninitializeComponentsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_UninitializeComponentsInvokerHandler: Option<AActor_UninitializeComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_UninitializeComponents_handler(handler: AActor_UninitializeComponentsInvoker){
        unsafe{ AActor_UninitializeComponentsInvokerHandler = Some(handler) };
    }

    type AActor_UnregisterAllComponentsInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_UnregisterAllComponentsInvokerHandler: Option<AActor_UnregisterAllComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_UnregisterAllComponents_handler(handler: AActor_UnregisterAllComponentsInvoker){
        unsafe{ AActor_UnregisterAllComponentsInvokerHandler = Some(handler) };
    }

    type AActor_UpdateAllReplicatedComponentsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_UpdateAllReplicatedComponentsInvokerHandler: Option<AActor_UpdateAllReplicatedComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_UpdateAllReplicatedComponents_handler(handler: AActor_UpdateAllReplicatedComponentsInvoker){
        unsafe{ AActor_UpdateAllReplicatedComponentsInvokerHandler = Some(handler) };
    }

    type AActor_UpdateComponentTransformsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_UpdateComponentTransformsInvokerHandler: Option<AActor_UpdateComponentTransformsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_UpdateComponentTransforms_handler(handler: AActor_UpdateComponentTransformsInvoker){
        unsafe{ AActor_UpdateComponentTransformsInvokerHandler = Some(handler) };
    }

    type AActor_UpdateOverlapsInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AActor_UpdateOverlapsInvokerHandler: Option<AActor_UpdateOverlapsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_UpdateOverlaps_handler(handler: AActor_UpdateOverlapsInvoker){
        unsafe{ AActor_UpdateOverlapsInvokerHandler = Some(handler) };
    }

    type AActor_UpdateReplicatedComponentInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorComponentOpaque);
    pub(super) static mut AActor_UpdateReplicatedComponentInvokerHandler: Option<AActor_UpdateReplicatedComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_UpdateReplicatedComponent_handler(handler: AActor_UpdateReplicatedComponentInvoker){
        unsafe{ AActor_UpdateReplicatedComponentInvokerHandler = Some(handler) };
    }

    type AActor_UseShortConnectTimeoutInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AActor_UseShortConnectTimeoutInvokerHandler: Option<AActor_UseShortConnectTimeoutInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_UseShortConnectTimeout_handler(handler: AActor_UseShortConnectTimeoutInvoker){
        unsafe{ AActor_UseShortConnectTimeoutInvokerHandler = Some(handler) };
    }

    type AActor_UserConstructionScriptInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AActor_UserConstructionScriptInvokerHandler: Option<AActor_UserConstructionScriptInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_UserConstructionScript_handler(handler: AActor_UserConstructionScriptInvoker){
        unsafe{ AActor_UserConstructionScriptInvokerHandler = Some(handler) };
    }

    type AActor_WasRecentlyRenderedInvoker = unsafe extern "C" fn(*mut c_void, f32) -> bool;
    pub(super) static mut AActor_WasRecentlyRenderedInvokerHandler: Option<AActor_WasRecentlyRenderedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AActor_WasRecentlyRendered_handler(handler: AActor_WasRecentlyRenderedInvoker){
        unsafe{ AActor_WasRecentlyRenderedInvokerHandler = Some(handler) };
    }

    type APawn_GetControllerInvoker = unsafe extern "C" fn(*mut c_void) -> *mut AControllerOpaque;
    pub(super) static mut APawn_GetControllerInvokerHandler: Option<APawn_GetControllerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APawn_GetController_handler(handler: APawn_GetControllerInvoker){
        unsafe{ APawn_GetControllerInvokerHandler = Some(handler) };
    }

    type APawn_GetLocalViewingPlayerControllerInvoker = unsafe extern "C" fn(*mut c_void) -> *mut APlayerControllerOpaque;
    pub(super) static mut APawn_GetLocalViewingPlayerControllerInvokerHandler: Option<APawn_GetLocalViewingPlayerControllerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APawn_GetLocalViewingPlayerController_handler(handler: APawn_GetLocalViewingPlayerControllerInvoker){
        unsafe{ APawn_GetLocalViewingPlayerControllerInvokerHandler = Some(handler) };
    }

    type APawn_GetMovementBaseInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UPrimitiveComponentOpaque;
    pub(super) static mut APawn_GetMovementBaseInvokerHandler: Option<APawn_GetMovementBaseInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APawn_GetMovementBase_handler(handler: APawn_GetMovementBaseInvoker){
        unsafe{ APawn_GetMovementBaseInvokerHandler = Some(handler) };
    }

    type APawn_GetMovementComponentInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UPawnMovementComponentOpaque;
    pub(super) static mut APawn_GetMovementComponentInvokerHandler: Option<APawn_GetMovementComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APawn_GetMovementComponent_handler(handler: APawn_GetMovementComponentInvoker){
        unsafe{ APawn_GetMovementComponentInvokerHandler = Some(handler) };
    }

    type APawn_GetPawnNoiseEmitterComponentInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UPawnNoiseEmitterComponentOpaque;
    pub(super) static mut APawn_GetPawnNoiseEmitterComponentInvokerHandler: Option<APawn_GetPawnNoiseEmitterComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APawn_GetPawnNoiseEmitterComponent_handler(handler: APawn_GetPawnNoiseEmitterComponentInvoker){
        unsafe{ APawn_GetPawnNoiseEmitterComponentInvokerHandler = Some(handler) };
    }

    type APawn_GetPlayerStateInvoker = unsafe extern "C" fn(*mut c_void) -> *mut APlayerStateOpaque;
    pub(super) static mut APawn_GetPlayerStateInvokerHandler: Option<APawn_GetPlayerStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APawn_GetPlayerState_handler(handler: APawn_GetPlayerStateInvoker){
        unsafe{ APawn_GetPlayerStateInvokerHandler = Some(handler) };
    }

    type APawn_IsLocalPlayerControllerViewingAPawnInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut APawn_IsLocalPlayerControllerViewingAPawnInvokerHandler: Option<APawn_IsLocalPlayerControllerViewingAPawnInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APawn_IsLocalPlayerControllerViewingAPawn_handler(handler: APawn_IsLocalPlayerControllerViewingAPawnInvoker){
        unsafe{ APawn_IsLocalPlayerControllerViewingAPawnInvokerHandler = Some(handler) };
    }

    type APawn_IsLocallyViewedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut APawn_IsLocallyViewedInvokerHandler: Option<APawn_IsLocallyViewedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APawn_IsLocallyViewed_handler(handler: APawn_IsLocallyViewedInvoker){
        unsafe{ APawn_IsLocallyViewedInvokerHandler = Some(handler) };
    }

    type APawn_PawnMakeNoiseInvoker = unsafe extern "C" fn(*mut c_void, f32, Vector3, bool, *mut AActorOpaque);
    pub(super) static mut APawn_PawnMakeNoiseInvokerHandler: Option<APawn_PawnMakeNoiseInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APawn_PawnMakeNoise_handler(handler: APawn_PawnMakeNoiseInvoker){
        unsafe{ APawn_PawnMakeNoiseInvokerHandler = Some(handler) };
    }

    type APawn_SetPlayerStateInvoker = unsafe extern "C" fn(*mut c_void, *mut APlayerStateOpaque);
    pub(super) static mut APawn_SetPlayerStateInvokerHandler: Option<APawn_SetPlayerStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APawn_SetPlayerState_handler(handler: APawn_SetPlayerStateInvoker){
        unsafe{ APawn_SetPlayerStateInvokerHandler = Some(handler) };
    }

    type AController_ChangeStateInvoker = unsafe extern "C" fn(*mut c_void, UName);
    pub(super) static mut AController_ChangeStateInvokerHandler: Option<AController_ChangeStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_ChangeState_handler(handler: AController_ChangeStateInvoker){
        unsafe{ AController_ChangeStateInvokerHandler = Some(handler) };
    }

    type AController_CleanupPlayerStateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AController_CleanupPlayerStateInvokerHandler: Option<AController_CleanupPlayerStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_CleanupPlayerState_handler(handler: AController_CleanupPlayerStateInvoker){
        unsafe{ AController_CleanupPlayerStateInvokerHandler = Some(handler) };
    }

    type AController_ClientSetLocationInvoker = unsafe extern "C" fn(*mut c_void, Vector3, Rotator);
    pub(super) static mut AController_ClientSetLocationInvokerHandler: Option<AController_ClientSetLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_ClientSetLocation_handler(handler: AController_ClientSetLocationInvoker){
        unsafe{ AController_ClientSetLocationInvokerHandler = Some(handler) };
    }

    type AController_ClientSetRotationInvoker = unsafe extern "C" fn(*mut c_void, Rotator, bool);
    pub(super) static mut AController_ClientSetRotationInvokerHandler: Option<AController_ClientSetRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_ClientSetRotation_handler(handler: AController_ClientSetRotationInvoker){
        unsafe{ AController_ClientSetRotationInvokerHandler = Some(handler) };
    }

    type AController_CurrentLevelUnloadedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AController_CurrentLevelUnloadedInvokerHandler: Option<AController_CurrentLevelUnloadedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_CurrentLevelUnloaded_handler(handler: AController_CurrentLevelUnloadedInvoker){
        unsafe{ AController_CurrentLevelUnloadedInvokerHandler = Some(handler) };
    }

    type AController_DestroyedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AController_DestroyedInvokerHandler: Option<AController_DestroyedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_Destroyed_handler(handler: AController_DestroyedInvoker){
        unsafe{ AController_DestroyedInvokerHandler = Some(handler) };
    }

    type AController_FailedToSpawnPawnInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AController_FailedToSpawnPawnInvokerHandler: Option<AController_FailedToSpawnPawnInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_FailedToSpawnPawn_handler(handler: AController_FailedToSpawnPawnInvoker){
        unsafe{ AController_FailedToSpawnPawnInvokerHandler = Some(handler) };
    }

    type AController_GameHasEndedInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque, bool);
    pub(super) static mut AController_GameHasEndedInvokerHandler: Option<AController_GameHasEndedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_GameHasEnded_handler(handler: AController_GameHasEndedInvoker){
        unsafe{ AController_GameHasEndedInvokerHandler = Some(handler) };
    }

    type AController_GetCharacterInvoker = unsafe extern "C" fn(*mut c_void) -> *mut ACharacterOpaque;
    pub(super) static mut AController_GetCharacterInvokerHandler: Option<AController_GetCharacterInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_GetCharacter_handler(handler: AController_GetCharacterInvoker){
        unsafe{ AController_GetCharacterInvokerHandler = Some(handler) };
    }

    type AController_GetControlRotationInvoker = unsafe extern "C" fn(*mut c_void) -> Rotator;
    pub(super) static mut AController_GetControlRotationInvokerHandler: Option<AController_GetControlRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_GetControlRotation_handler(handler: AController_GetControlRotationInvoker){
        unsafe{ AController_GetControlRotationInvokerHandler = Some(handler) };
    }

    type AController_GetDesiredRotationInvoker = unsafe extern "C" fn(*mut c_void) -> Rotator;
    pub(super) static mut AController_GetDesiredRotationInvokerHandler: Option<AController_GetDesiredRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_GetDesiredRotation_handler(handler: AController_GetDesiredRotationInvoker){
        unsafe{ AController_GetDesiredRotationInvokerHandler = Some(handler) };
    }

    type AController_GetHumanReadableNameInvoker = unsafe extern "C" fn(*mut c_void) -> *const std::os::raw::c_char;
    pub(super) static mut AController_GetHumanReadableNameInvokerHandler: Option<AController_GetHumanReadableNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_GetHumanReadableName_handler(handler: AController_GetHumanReadableNameInvoker){
        unsafe{ AController_GetHumanReadableNameInvokerHandler = Some(handler) };
    }

    type AController_GetNavAgentLocationInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut AController_GetNavAgentLocationInvokerHandler: Option<AController_GetNavAgentLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_GetNavAgentLocation_handler(handler: AController_GetNavAgentLocationInvoker){
        unsafe{ AController_GetNavAgentLocationInvokerHandler = Some(handler) };
    }

    type AController_GetPawnInvoker = unsafe extern "C" fn(*mut c_void) -> *mut APawnOpaque;
    pub(super) static mut AController_GetPawnInvokerHandler: Option<AController_GetPawnInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_GetPawn_handler(handler: AController_GetPawnInvoker){
        unsafe{ AController_GetPawnInvokerHandler = Some(handler) };
    }

    type AController_GetStateNameInvoker = unsafe extern "C" fn(*mut c_void) -> UName;
    pub(super) static mut AController_GetStateNameInvokerHandler: Option<AController_GetStateNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_GetStateName_handler(handler: AController_GetStateNameInvoker){
        unsafe{ AController_GetStateNameInvokerHandler = Some(handler) };
    }

    type AController_GetViewTargetInvoker = unsafe extern "C" fn(*mut c_void) -> *mut AActorOpaque;
    pub(super) static mut AController_GetViewTargetInvokerHandler: Option<AController_GetViewTargetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_GetViewTarget_handler(handler: AController_GetViewTargetInvoker){
        unsafe{ AController_GetViewTargetInvokerHandler = Some(handler) };
    }

    type AController_InitPlayerStateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AController_InitPlayerStateInvokerHandler: Option<AController_InitPlayerStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_InitPlayerState_handler(handler: AController_InitPlayerStateInvoker){
        unsafe{ AController_InitPlayerStateInvokerHandler = Some(handler) };
    }

    type AController_InstigatedAnyDamageInvoker = unsafe extern "C" fn(*mut c_void, f32, *mut UDamageTypeOpaque, *mut AActorOpaque, *mut AActorOpaque);
    pub(super) static mut AController_InstigatedAnyDamageInvokerHandler: Option<AController_InstigatedAnyDamageInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_InstigatedAnyDamage_handler(handler: AController_InstigatedAnyDamageInvoker){
        unsafe{ AController_InstigatedAnyDamageInvokerHandler = Some(handler) };
    }

    type AController_IsFollowingAPathInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AController_IsFollowingAPathInvokerHandler: Option<AController_IsFollowingAPathInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_IsFollowingAPath_handler(handler: AController_IsFollowingAPathInvoker){
        unsafe{ AController_IsFollowingAPathInvokerHandler = Some(handler) };
    }

    type AController_IsInStateInvoker = unsafe extern "C" fn(*mut c_void, UName) -> bool;
    pub(super) static mut AController_IsInStateInvokerHandler: Option<AController_IsInStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_IsInState_handler(handler: AController_IsInStateInvoker){
        unsafe{ AController_IsInStateInvokerHandler = Some(handler) };
    }

    type AController_IsLocalControllerInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AController_IsLocalControllerInvokerHandler: Option<AController_IsLocalControllerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_IsLocalController_handler(handler: AController_IsLocalControllerInvoker){
        unsafe{ AController_IsLocalControllerInvokerHandler = Some(handler) };
    }

    type AController_IsLocalPlayerControllerInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AController_IsLocalPlayerControllerInvokerHandler: Option<AController_IsLocalPlayerControllerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_IsLocalPlayerController_handler(handler: AController_IsLocalPlayerControllerInvoker){
        unsafe{ AController_IsLocalPlayerControllerInvokerHandler = Some(handler) };
    }

    type AController_IsLookInputIgnoredInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AController_IsLookInputIgnoredInvokerHandler: Option<AController_IsLookInputIgnoredInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_IsLookInputIgnored_handler(handler: AController_IsLookInputIgnoredInvoker){
        unsafe{ AController_IsLookInputIgnoredInvokerHandler = Some(handler) };
    }

    type AController_IsMoveInputIgnoredInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AController_IsMoveInputIgnoredInvokerHandler: Option<AController_IsMoveInputIgnoredInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_IsMoveInputIgnored_handler(handler: AController_IsMoveInputIgnoredInvoker){
        unsafe{ AController_IsMoveInputIgnoredInvokerHandler = Some(handler) };
    }

    type AController_IsPlayerControllerInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AController_IsPlayerControllerInvokerHandler: Option<AController_IsPlayerControllerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_IsPlayerController_handler(handler: AController_IsPlayerControllerInvoker){
        unsafe{ AController_IsPlayerControllerInvokerHandler = Some(handler) };
    }

    type AController_K2_DestroyActorInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AController_K2_DestroyActorInvokerHandler: Option<AController_K2_DestroyActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_K2_DestroyActor_handler(handler: AController_K2_DestroyActorInvoker){
        unsafe{ AController_K2_DestroyActorInvokerHandler = Some(handler) };
    }

    type AController_K2_GetPawnInvoker = unsafe extern "C" fn(*mut c_void) -> *mut APawnOpaque;
    pub(super) static mut AController_K2_GetPawnInvokerHandler: Option<AController_K2_GetPawnInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_K2_GetPawn_handler(handler: AController_K2_GetPawnInvoker){
        unsafe{ AController_K2_GetPawnInvokerHandler = Some(handler) };
    }

    type AController_LineOfSightToInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque, Vector3, bool) -> bool;
    pub(super) static mut AController_LineOfSightToInvokerHandler: Option<AController_LineOfSightToInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_LineOfSightTo_handler(handler: AController_LineOfSightToInvoker){
        unsafe{ AController_LineOfSightToInvokerHandler = Some(handler) };
    }

    type AController_OnRep_PawnInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AController_OnRep_PawnInvokerHandler: Option<AController_OnRep_PawnInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_OnRep_Pawn_handler(handler: AController_OnRep_PawnInvoker){
        unsafe{ AController_OnRep_PawnInvokerHandler = Some(handler) };
    }

    type AController_OnRep_PlayerStateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AController_OnRep_PlayerStateInvokerHandler: Option<AController_OnRep_PlayerStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_OnRep_PlayerState_handler(handler: AController_OnRep_PlayerStateInvoker){
        unsafe{ AController_OnRep_PlayerStateInvokerHandler = Some(handler) };
    }

    type AController_PawnPendingDestroyInvoker = unsafe extern "C" fn(*mut c_void, *mut APawnOpaque);
    pub(super) static mut AController_PawnPendingDestroyInvokerHandler: Option<AController_PawnPendingDestroyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_PawnPendingDestroy_handler(handler: AController_PawnPendingDestroyInvoker){
        unsafe{ AController_PawnPendingDestroyInvokerHandler = Some(handler) };
    }

    type AController_PossessInvoker = unsafe extern "C" fn(*mut c_void, *mut APawnOpaque);
    pub(super) static mut AController_PossessInvokerHandler: Option<AController_PossessInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_Possess_handler(handler: AController_PossessInvoker){
        unsafe{ AController_PossessInvokerHandler = Some(handler) };
    }

    type AController_PostInitializeComponentsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AController_PostInitializeComponentsInvokerHandler: Option<AController_PostInitializeComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_PostInitializeComponents_handler(handler: AController_PostInitializeComponentsInvoker){
        unsafe{ AController_PostInitializeComponentsInvokerHandler = Some(handler) };
    }

    type AController_ResetInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AController_ResetInvokerHandler: Option<AController_ResetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_Reset_handler(handler: AController_ResetInvoker){
        unsafe{ AController_ResetInvokerHandler = Some(handler) };
    }

    type AController_ResetIgnoreInputFlagsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AController_ResetIgnoreInputFlagsInvokerHandler: Option<AController_ResetIgnoreInputFlagsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_ResetIgnoreInputFlags_handler(handler: AController_ResetIgnoreInputFlagsInvoker){
        unsafe{ AController_ResetIgnoreInputFlagsInvokerHandler = Some(handler) };
    }

    type AController_ResetIgnoreLookInputInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AController_ResetIgnoreLookInputInvokerHandler: Option<AController_ResetIgnoreLookInputInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_ResetIgnoreLookInput_handler(handler: AController_ResetIgnoreLookInputInvoker){
        unsafe{ AController_ResetIgnoreLookInputInvokerHandler = Some(handler) };
    }

    type AController_ResetIgnoreMoveInputInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AController_ResetIgnoreMoveInputInvokerHandler: Option<AController_ResetIgnoreMoveInputInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_ResetIgnoreMoveInput_handler(handler: AController_ResetIgnoreMoveInputInvoker){
        unsafe{ AController_ResetIgnoreMoveInputInvokerHandler = Some(handler) };
    }

    type AController_SetIgnoreLookInputInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AController_SetIgnoreLookInputInvokerHandler: Option<AController_SetIgnoreLookInputInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_SetIgnoreLookInput_handler(handler: AController_SetIgnoreLookInputInvoker){
        unsafe{ AController_SetIgnoreLookInputInvokerHandler = Some(handler) };
    }

    type AController_SetIgnoreMoveInputInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut AController_SetIgnoreMoveInputInvokerHandler: Option<AController_SetIgnoreMoveInputInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_SetIgnoreMoveInput_handler(handler: AController_SetIgnoreMoveInputInvoker){
        unsafe{ AController_SetIgnoreMoveInputInvokerHandler = Some(handler) };
    }

    type AController_SetPawnInvoker = unsafe extern "C" fn(*mut c_void, *mut APawnOpaque);
    pub(super) static mut AController_SetPawnInvokerHandler: Option<AController_SetPawnInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_SetPawn_handler(handler: AController_SetPawnInvoker){
        unsafe{ AController_SetPawnInvokerHandler = Some(handler) };
    }

    type AController_SetPawnFromRepInvoker = unsafe extern "C" fn(*mut c_void, *mut APawnOpaque);
    pub(super) static mut AController_SetPawnFromRepInvokerHandler: Option<AController_SetPawnFromRepInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_SetPawnFromRep_handler(handler: AController_SetPawnFromRepInvoker){
        unsafe{ AController_SetPawnFromRepInvokerHandler = Some(handler) };
    }

    type AController_ShouldParticipateInSeamlessTravelInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AController_ShouldParticipateInSeamlessTravelInvokerHandler: Option<AController_ShouldParticipateInSeamlessTravelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_ShouldParticipateInSeamlessTravel_handler(handler: AController_ShouldParticipateInSeamlessTravelInvoker){
        unsafe{ AController_ShouldParticipateInSeamlessTravelInvokerHandler = Some(handler) };
    }

    type AController_ShouldPostponePathUpdatesInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AController_ShouldPostponePathUpdatesInvokerHandler: Option<AController_ShouldPostponePathUpdatesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_ShouldPostponePathUpdates_handler(handler: AController_ShouldPostponePathUpdatesInvoker){
        unsafe{ AController_ShouldPostponePathUpdatesInvokerHandler = Some(handler) };
    }

    type AController_StopMovementInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AController_StopMovementInvokerHandler: Option<AController_StopMovementInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_StopMovement_handler(handler: AController_StopMovementInvoker){
        unsafe{ AController_StopMovementInvokerHandler = Some(handler) };
    }

    type AController_UnPossessInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AController_UnPossessInvokerHandler: Option<AController_UnPossessInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AController_UnPossess_handler(handler: AController_UnPossessInvoker){
        unsafe{ AController_UnPossessInvokerHandler = Some(handler) };
    }

    type APlayerController_AcknowledgePossessionInvoker = unsafe extern "C" fn(*mut c_void, *mut APawnOpaque);
    pub(super) static mut APlayerController_AcknowledgePossessionInvokerHandler: Option<APlayerController_AcknowledgePossessionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_AcknowledgePossession_handler(handler: APlayerController_AcknowledgePossessionInvoker){
        unsafe{ APlayerController_AcknowledgePossessionInvokerHandler = Some(handler) };
    }

    type APlayerController_ActivateTouchInterfaceInvoker = unsafe extern "C" fn(*mut c_void, *mut UTouchInterfaceOpaque);
    pub(super) static mut APlayerController_ActivateTouchInterfaceInvokerHandler: Option<APlayerController_ActivateTouchInterfaceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ActivateTouchInterface_handler(handler: APlayerController_ActivateTouchInterfaceInvoker){
        unsafe{ APlayerController_ActivateTouchInterfaceInvokerHandler = Some(handler) };
    }

    type APlayerController_AddCheatsInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut APlayerController_AddCheatsInvokerHandler: Option<APlayerController_AddCheatsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_AddCheats_handler(handler: APlayerController_AddCheatsInvoker){
        unsafe{ APlayerController_AddCheatsInvokerHandler = Some(handler) };
    }

    type APlayerController_AddPitchInputInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut APlayerController_AddPitchInputInvokerHandler: Option<APlayerController_AddPitchInputInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_AddPitchInput_handler(handler: APlayerController_AddPitchInputInvoker){
        unsafe{ APlayerController_AddPitchInputInvokerHandler = Some(handler) };
    }

    type APlayerController_AddRollInputInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut APlayerController_AddRollInputInvokerHandler: Option<APlayerController_AddRollInputInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_AddRollInput_handler(handler: APlayerController_AddRollInputInvoker){
        unsafe{ APlayerController_AddRollInputInvokerHandler = Some(handler) };
    }

    type APlayerController_AddYawInputInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut APlayerController_AddYawInputInvokerHandler: Option<APlayerController_AddYawInputInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_AddYawInput_handler(handler: APlayerController_AddYawInputInvoker){
        unsafe{ APlayerController_AddYawInputInvokerHandler = Some(handler) };
    }

    type APlayerController_AutoManageActiveCameraTargetInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque);
    pub(super) static mut APlayerController_AutoManageActiveCameraTargetInvokerHandler: Option<APlayerController_AutoManageActiveCameraTargetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_AutoManageActiveCameraTarget_handler(handler: APlayerController_AutoManageActiveCameraTargetInvoker){
        unsafe{ APlayerController_AutoManageActiveCameraTargetInvokerHandler = Some(handler) };
    }

    type APlayerController_BeginInactiveStateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_BeginInactiveStateInvokerHandler: Option<APlayerController_BeginInactiveStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_BeginInactiveState_handler(handler: APlayerController_BeginInactiveStateInvoker){
        unsafe{ APlayerController_BeginInactiveStateInvokerHandler = Some(handler) };
    }

    type APlayerController_CameraInvoker = unsafe extern "C" fn(*mut c_void, UName);
    pub(super) static mut APlayerController_CameraInvokerHandler: Option<APlayerController_CameraInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_Camera_handler(handler: APlayerController_CameraInvoker){
        unsafe{ APlayerController_CameraInvokerHandler = Some(handler) };
    }

    type APlayerController_CanRestartPlayerInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut APlayerController_CanRestartPlayerInvokerHandler: Option<APlayerController_CanRestartPlayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_CanRestartPlayer_handler(handler: APlayerController_CanRestartPlayerInvoker){
        unsafe{ APlayerController_CanRestartPlayerInvokerHandler = Some(handler) };
    }

    type APlayerController_ChangeStateInvoker = unsafe extern "C" fn(*mut c_void, UName);
    pub(super) static mut APlayerController_ChangeStateInvokerHandler: Option<APlayerController_ChangeStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ChangeState_handler(handler: APlayerController_ChangeStateInvoker){
        unsafe{ APlayerController_ChangeStateInvokerHandler = Some(handler) };
    }

    type APlayerController_CleanUpAudioComponentsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_CleanUpAudioComponentsInvokerHandler: Option<APlayerController_CleanUpAudioComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_CleanUpAudioComponents_handler(handler: APlayerController_CleanUpAudioComponentsInvoker){
        unsafe{ APlayerController_CleanUpAudioComponentsInvokerHandler = Some(handler) };
    }

    type APlayerController_CleanupGameViewportInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_CleanupGameViewportInvokerHandler: Option<APlayerController_CleanupGameViewportInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_CleanupGameViewport_handler(handler: APlayerController_CleanupGameViewportInvoker){
        unsafe{ APlayerController_CleanupGameViewportInvokerHandler = Some(handler) };
    }

    type APlayerController_CleanupPlayerStateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_CleanupPlayerStateInvokerHandler: Option<APlayerController_CleanupPlayerStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_CleanupPlayerState_handler(handler: APlayerController_CleanupPlayerStateInvoker){
        unsafe{ APlayerController_CleanupPlayerStateInvokerHandler = Some(handler) };
    }

    type APlayerController_ClearAudioListenerAttenuationOverrideInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ClearAudioListenerAttenuationOverrideInvokerHandler: Option<APlayerController_ClearAudioListenerAttenuationOverrideInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClearAudioListenerAttenuationOverride_handler(handler: APlayerController_ClearAudioListenerAttenuationOverrideInvoker){
        unsafe{ APlayerController_ClearAudioListenerAttenuationOverrideInvokerHandler = Some(handler) };
    }

    type APlayerController_ClearAudioListenerOverrideInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ClearAudioListenerOverrideInvokerHandler: Option<APlayerController_ClearAudioListenerOverrideInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClearAudioListenerOverride_handler(handler: APlayerController_ClearAudioListenerOverrideInvoker){
        unsafe{ APlayerController_ClearAudioListenerOverrideInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientAddTextureStreamingLocInvoker = unsafe extern "C" fn(*mut c_void, Vector3, f32, bool);
    pub(super) static mut APlayerController_ClientAddTextureStreamingLocInvokerHandler: Option<APlayerController_ClientAddTextureStreamingLocInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientAddTextureStreamingLoc_handler(handler: APlayerController_ClientAddTextureStreamingLocInvoker){
        unsafe{ APlayerController_ClientAddTextureStreamingLocInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientCancelPendingMapChangeInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ClientCancelPendingMapChangeInvokerHandler: Option<APlayerController_ClientCancelPendingMapChangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientCancelPendingMapChange_handler(handler: APlayerController_ClientCancelPendingMapChangeInvoker){
        unsafe{ APlayerController_ClientCancelPendingMapChangeInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientCapBandwidthInvoker = unsafe extern "C" fn(*mut c_void, i32);
    pub(super) static mut APlayerController_ClientCapBandwidthInvokerHandler: Option<APlayerController_ClientCapBandwidthInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientCapBandwidth_handler(handler: APlayerController_ClientCapBandwidthInvoker){
        unsafe{ APlayerController_ClientCapBandwidthInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientClearCameraLensEffectsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ClientClearCameraLensEffectsInvokerHandler: Option<APlayerController_ClientClearCameraLensEffectsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientClearCameraLensEffects_handler(handler: APlayerController_ClientClearCameraLensEffectsInvoker){
        unsafe{ APlayerController_ClientClearCameraLensEffectsInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientCommitMapChangeInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ClientCommitMapChangeInvokerHandler: Option<APlayerController_ClientCommitMapChangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientCommitMapChange_handler(handler: APlayerController_ClientCommitMapChangeInvoker){
        unsafe{ APlayerController_ClientCommitMapChangeInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientEnableNetworkVoiceInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut APlayerController_ClientEnableNetworkVoiceInvokerHandler: Option<APlayerController_ClientEnableNetworkVoiceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientEnableNetworkVoice_handler(handler: APlayerController_ClientEnableNetworkVoiceInvoker){
        unsafe{ APlayerController_ClientEnableNetworkVoiceInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientEndOnlineSessionInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ClientEndOnlineSessionInvokerHandler: Option<APlayerController_ClientEndOnlineSessionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientEndOnlineSession_handler(handler: APlayerController_ClientEndOnlineSessionInvoker){
        unsafe{ APlayerController_ClientEndOnlineSessionInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientFlushLevelStreamingInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ClientFlushLevelStreamingInvokerHandler: Option<APlayerController_ClientFlushLevelStreamingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientFlushLevelStreaming_handler(handler: APlayerController_ClientFlushLevelStreamingInvoker){
        unsafe{ APlayerController_ClientFlushLevelStreamingInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientForceGarbageCollectionInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ClientForceGarbageCollectionInvokerHandler: Option<APlayerController_ClientForceGarbageCollectionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientForceGarbageCollection_handler(handler: APlayerController_ClientForceGarbageCollectionInvoker){
        unsafe{ APlayerController_ClientForceGarbageCollectionInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientGameEndedInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque, bool);
    pub(super) static mut APlayerController_ClientGameEndedInvokerHandler: Option<APlayerController_ClientGameEndedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientGameEnded_handler(handler: APlayerController_ClientGameEndedInvoker){
        unsafe{ APlayerController_ClientGameEndedInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientGotoStateInvoker = unsafe extern "C" fn(*mut c_void, UName);
    pub(super) static mut APlayerController_ClientGotoStateInvokerHandler: Option<APlayerController_ClientGotoStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientGotoState_handler(handler: APlayerController_ClientGotoStateInvoker){
        unsafe{ APlayerController_ClientGotoStateInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientIgnoreLookInputInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut APlayerController_ClientIgnoreLookInputInvokerHandler: Option<APlayerController_ClientIgnoreLookInputInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientIgnoreLookInput_handler(handler: APlayerController_ClientIgnoreLookInputInvoker){
        unsafe{ APlayerController_ClientIgnoreLookInputInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientIgnoreMoveInputInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut APlayerController_ClientIgnoreMoveInputInvokerHandler: Option<APlayerController_ClientIgnoreMoveInputInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientIgnoreMoveInput_handler(handler: APlayerController_ClientIgnoreMoveInputInvoker){
        unsafe{ APlayerController_ClientIgnoreMoveInputInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientPlaySoundInvoker = unsafe extern "C" fn(*mut c_void, *mut USoundBaseOpaque, f32, f32);
    pub(super) static mut APlayerController_ClientPlaySoundInvokerHandler: Option<APlayerController_ClientPlaySoundInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientPlaySound_handler(handler: APlayerController_ClientPlaySoundInvoker){
        unsafe{ APlayerController_ClientPlaySoundInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientPlaySoundAtLocationInvoker = unsafe extern "C" fn(*mut c_void, *mut USoundBaseOpaque, Vector3, f32, f32);
    pub(super) static mut APlayerController_ClientPlaySoundAtLocationInvokerHandler: Option<APlayerController_ClientPlaySoundAtLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientPlaySoundAtLocation_handler(handler: APlayerController_ClientPlaySoundAtLocationInvoker){
        unsafe{ APlayerController_ClientPlaySoundAtLocationInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientPrepareMapChangeInvoker = unsafe extern "C" fn(*mut c_void, UName, bool, bool);
    pub(super) static mut APlayerController_ClientPrepareMapChangeInvokerHandler: Option<APlayerController_ClientPrepareMapChangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientPrepareMapChange_handler(handler: APlayerController_ClientPrepareMapChangeInvoker){
        unsafe{ APlayerController_ClientPrepareMapChangeInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientPrestreamTexturesInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque, f32, bool, i32);
    pub(super) static mut APlayerController_ClientPrestreamTexturesInvokerHandler: Option<APlayerController_ClientPrestreamTexturesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientPrestreamTextures_handler(handler: APlayerController_ClientPrestreamTexturesInvoker){
        unsafe{ APlayerController_ClientPrestreamTexturesInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientRecvServerAckFrameInvoker = unsafe extern "C" fn(*mut c_void, i32, i32, i8);
    pub(super) static mut APlayerController_ClientRecvServerAckFrameInvokerHandler: Option<APlayerController_ClientRecvServerAckFrameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientRecvServerAckFrame_handler(handler: APlayerController_ClientRecvServerAckFrameInvoker){
        unsafe{ APlayerController_ClientRecvServerAckFrameInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientRecvServerAckFrameDebugInvoker = unsafe extern "C" fn(*mut c_void, u8, f32);
    pub(super) static mut APlayerController_ClientRecvServerAckFrameDebugInvokerHandler: Option<APlayerController_ClientRecvServerAckFrameDebugInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientRecvServerAckFrameDebug_handler(handler: APlayerController_ClientRecvServerAckFrameDebugInvoker){
        unsafe{ APlayerController_ClientRecvServerAckFrameDebugInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientRepObjRefInvoker = unsafe extern "C" fn(*mut c_void, *mut UObjectOpaque);
    pub(super) static mut APlayerController_ClientRepObjRefInvokerHandler: Option<APlayerController_ClientRepObjRefInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientRepObjRef_handler(handler: APlayerController_ClientRepObjRefInvoker){
        unsafe{ APlayerController_ClientRepObjRefInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientResetInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ClientResetInvokerHandler: Option<APlayerController_ClientResetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientReset_handler(handler: APlayerController_ClientResetInvoker){
        unsafe{ APlayerController_ClientResetInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientRestartInvoker = unsafe extern "C" fn(*mut c_void, *mut APawnOpaque);
    pub(super) static mut APlayerController_ClientRestartInvokerHandler: Option<APlayerController_ClientRestartInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientRestart_handler(handler: APlayerController_ClientRestartInvoker){
        unsafe{ APlayerController_ClientRestartInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientRetryClientRestartInvoker = unsafe extern "C" fn(*mut c_void, *mut APawnOpaque);
    pub(super) static mut APlayerController_ClientRetryClientRestartInvokerHandler: Option<APlayerController_ClientRetryClientRestartInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientRetryClientRestart_handler(handler: APlayerController_ClientRetryClientRestartInvoker){
        unsafe{ APlayerController_ClientRetryClientRestartInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientSetBlockOnAsyncLoadingInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ClientSetBlockOnAsyncLoadingInvokerHandler: Option<APlayerController_ClientSetBlockOnAsyncLoadingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientSetBlockOnAsyncLoading_handler(handler: APlayerController_ClientSetBlockOnAsyncLoadingInvoker){
        unsafe{ APlayerController_ClientSetBlockOnAsyncLoadingInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientSetCameraFadeInvoker = unsafe extern "C" fn(*mut c_void, bool, Color, Vector2, f32, bool, bool);
    pub(super) static mut APlayerController_ClientSetCameraFadeInvokerHandler: Option<APlayerController_ClientSetCameraFadeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientSetCameraFade_handler(handler: APlayerController_ClientSetCameraFadeInvoker){
        unsafe{ APlayerController_ClientSetCameraFadeInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientSetCameraModeInvoker = unsafe extern "C" fn(*mut c_void, UName);
    pub(super) static mut APlayerController_ClientSetCameraModeInvokerHandler: Option<APlayerController_ClientSetCameraModeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientSetCameraMode_handler(handler: APlayerController_ClientSetCameraModeInvoker){
        unsafe{ APlayerController_ClientSetCameraModeInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientSetCinematicModeInvoker = unsafe extern "C" fn(*mut c_void, bool, bool, bool, bool);
    pub(super) static mut APlayerController_ClientSetCinematicModeInvokerHandler: Option<APlayerController_ClientSetCinematicModeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientSetCinematicMode_handler(handler: APlayerController_ClientSetCinematicModeInvoker){
        unsafe{ APlayerController_ClientSetCinematicModeInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientSetForceMipLevelsToBeResidentInvoker = unsafe extern "C" fn(*mut c_void, *mut UMaterialInterfaceOpaque, f32, i32);
    pub(super) static mut APlayerController_ClientSetForceMipLevelsToBeResidentInvokerHandler: Option<APlayerController_ClientSetForceMipLevelsToBeResidentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientSetForceMipLevelsToBeResident_handler(handler: APlayerController_ClientSetForceMipLevelsToBeResidentInvoker){
        unsafe{ APlayerController_ClientSetForceMipLevelsToBeResidentInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientSetSpectatorWaitingInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut APlayerController_ClientSetSpectatorWaitingInvokerHandler: Option<APlayerController_ClientSetSpectatorWaitingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientSetSpectatorWaiting_handler(handler: APlayerController_ClientSetSpectatorWaitingInvoker){
        unsafe{ APlayerController_ClientSetSpectatorWaitingInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientStartOnlineSessionInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ClientStartOnlineSessionInvokerHandler: Option<APlayerController_ClientStartOnlineSessionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientStartOnlineSession_handler(handler: APlayerController_ClientStartOnlineSessionInvoker){
        unsafe{ APlayerController_ClientStartOnlineSessionInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientStopCameraShakesFromSourceInvoker = unsafe extern "C" fn(*mut c_void, *mut UCameraShakeSourceComponentOpaque, bool);
    pub(super) static mut APlayerController_ClientStopCameraShakesFromSourceInvokerHandler: Option<APlayerController_ClientStopCameraShakesFromSourceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientStopCameraShakesFromSource_handler(handler: APlayerController_ClientStopCameraShakesFromSourceInvoker){
        unsafe{ APlayerController_ClientStopCameraShakesFromSourceInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientStopForceFeedbackInvoker = unsafe extern "C" fn(*mut c_void, *mut UForceFeedbackEffectOpaque, UName);
    pub(super) static mut APlayerController_ClientStopForceFeedbackInvokerHandler: Option<APlayerController_ClientStopForceFeedbackInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientStopForceFeedback_handler(handler: APlayerController_ClientStopForceFeedbackInvoker){
        unsafe{ APlayerController_ClientStopForceFeedbackInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientUpdateLevelStreamingStatusInvoker = unsafe extern "C" fn(*mut c_void, UName, bool, bool, bool, i32);
    pub(super) static mut APlayerController_ClientUpdateLevelStreamingStatusInvokerHandler: Option<APlayerController_ClientUpdateLevelStreamingStatusInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientUpdateLevelStreamingStatus_handler(handler: APlayerController_ClientUpdateLevelStreamingStatusInvoker){
        unsafe{ APlayerController_ClientUpdateLevelStreamingStatusInvokerHandler = Some(handler) };
    }

    type APlayerController_ClientVoiceHandshakeCompleteInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ClientVoiceHandshakeCompleteInvokerHandler: Option<APlayerController_ClientVoiceHandshakeCompleteInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ClientVoiceHandshakeComplete_handler(handler: APlayerController_ClientVoiceHandshakeCompleteInvoker){
        unsafe{ APlayerController_ClientVoiceHandshakeCompleteInvokerHandler = Some(handler) };
    }

    type APlayerController_CreateTouchInterfaceInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_CreateTouchInterfaceInvokerHandler: Option<APlayerController_CreateTouchInterfaceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_CreateTouchInterface_handler(handler: APlayerController_CreateTouchInterfaceInvoker){
        unsafe{ APlayerController_CreateTouchInterfaceInvokerHandler = Some(handler) };
    }

    type APlayerController_DefaultCanUnpauseInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut APlayerController_DefaultCanUnpauseInvokerHandler: Option<APlayerController_DefaultCanUnpauseInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_DefaultCanUnpause_handler(handler: APlayerController_DefaultCanUnpauseInvoker){
        unsafe{ APlayerController_DefaultCanUnpauseInvokerHandler = Some(handler) };
    }

    type APlayerController_DelayedPrepareMapChangeInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_DelayedPrepareMapChangeInvokerHandler: Option<APlayerController_DelayedPrepareMapChangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_DelayedPrepareMapChange_handler(handler: APlayerController_DelayedPrepareMapChangeInvoker){
        unsafe{ APlayerController_DelayedPrepareMapChangeInvokerHandler = Some(handler) };
    }

    type APlayerController_DestroyNetworkActorHandledInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut APlayerController_DestroyNetworkActorHandledInvokerHandler: Option<APlayerController_DestroyNetworkActorHandledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_DestroyNetworkActorHandled_handler(handler: APlayerController_DestroyNetworkActorHandledInvoker){
        unsafe{ APlayerController_DestroyNetworkActorHandledInvokerHandler = Some(handler) };
    }

    type APlayerController_DestroyedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_DestroyedInvokerHandler: Option<APlayerController_DestroyedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_Destroyed_handler(handler: APlayerController_DestroyedInvoker){
        unsafe{ APlayerController_DestroyedInvokerHandler = Some(handler) };
    }

    type APlayerController_DisableInputInvoker = unsafe extern "C" fn(*mut c_void, *mut APlayerControllerOpaque);
    pub(super) static mut APlayerController_DisableInputInvokerHandler: Option<APlayerController_DisableInputInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_DisableInput_handler(handler: APlayerController_DisableInputInvoker){
        unsafe{ APlayerController_DisableInputInvokerHandler = Some(handler) };
    }

    type APlayerController_EnableCheatsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_EnableCheatsInvokerHandler: Option<APlayerController_EnableCheatsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_EnableCheats_handler(handler: APlayerController_EnableCheatsInvoker){
        unsafe{ APlayerController_EnableCheatsInvokerHandler = Some(handler) };
    }

    type APlayerController_EnableInputInvoker = unsafe extern "C" fn(*mut c_void, *mut APlayerControllerOpaque);
    pub(super) static mut APlayerController_EnableInputInvokerHandler: Option<APlayerController_EnableInputInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_EnableInput_handler(handler: APlayerController_EnableInputInvoker){
        unsafe{ APlayerController_EnableInputInvokerHandler = Some(handler) };
    }

    type APlayerController_EndInactiveStateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_EndInactiveStateInvokerHandler: Option<APlayerController_EndInactiveStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_EndInactiveState_handler(handler: APlayerController_EndInactiveStateInvoker){
        unsafe{ APlayerController_EndInactiveStateInvokerHandler = Some(handler) };
    }

    type APlayerController_FOVInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut APlayerController_FOVInvokerHandler: Option<APlayerController_FOVInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_FOV_handler(handler: APlayerController_FOVInvoker){
        unsafe{ APlayerController_FOVInvokerHandler = Some(handler) };
    }

    type APlayerController_FailedToSpawnPawnInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_FailedToSpawnPawnInvokerHandler: Option<APlayerController_FailedToSpawnPawnInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_FailedToSpawnPawn_handler(handler: APlayerController_FailedToSpawnPawnInvoker){
        unsafe{ APlayerController_FailedToSpawnPawnInvokerHandler = Some(handler) };
    }

    type APlayerController_FlushPressedKeysInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_FlushPressedKeysInvokerHandler: Option<APlayerController_FlushPressedKeysInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_FlushPressedKeys_handler(handler: APlayerController_FlushPressedKeysInvoker){
        unsafe{ APlayerController_FlushPressedKeysInvokerHandler = Some(handler) };
    }

    type APlayerController_ForceSingleNetUpdateForInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque);
    pub(super) static mut APlayerController_ForceSingleNetUpdateForInvokerHandler: Option<APlayerController_ForceSingleNetUpdateForInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ForceSingleNetUpdateFor_handler(handler: APlayerController_ForceSingleNetUpdateForInvoker){
        unsafe{ APlayerController_ForceSingleNetUpdateForInvokerHandler = Some(handler) };
    }

    type APlayerController_GameHasEndedInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque, bool);
    pub(super) static mut APlayerController_GameHasEndedInvokerHandler: Option<APlayerController_GameHasEndedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_GameHasEnded_handler(handler: APlayerController_GameHasEndedInvoker){
        unsafe{ APlayerController_GameHasEndedInvokerHandler = Some(handler) };
    }

    type APlayerController_GameplayUnmuteAllPlayersInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_GameplayUnmuteAllPlayersInvokerHandler: Option<APlayerController_GameplayUnmuteAllPlayersInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_GameplayUnmuteAllPlayers_handler(handler: APlayerController_GameplayUnmuteAllPlayersInvoker){
        unsafe{ APlayerController_GameplayUnmuteAllPlayersInvokerHandler = Some(handler) };
    }

    type APlayerController_GetFocalLocationInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut APlayerController_GetFocalLocationInvokerHandler: Option<APlayerController_GetFocalLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_GetFocalLocation_handler(handler: APlayerController_GetFocalLocationInvoker){
        unsafe{ APlayerController_GetFocalLocationInvokerHandler = Some(handler) };
    }

    type APlayerController_GetHUDInvoker = unsafe extern "C" fn(*mut c_void) -> *mut AHUDOpaque;
    pub(super) static mut APlayerController_GetHUDInvokerHandler: Option<APlayerController_GetHUDInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_GetHUD_handler(handler: APlayerController_GetHUDInvoker){
        unsafe{ APlayerController_GetHUDInvokerHandler = Some(handler) };
    }

    type APlayerController_GetInputMouseDeltaInvoker = unsafe extern "C" fn(*mut c_void, &mut f32, &mut f32);
    pub(super) static mut APlayerController_GetInputMouseDeltaInvokerHandler: Option<APlayerController_GetInputMouseDeltaInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_GetInputMouseDelta_handler(handler: APlayerController_GetInputMouseDeltaInvoker){
        unsafe{ APlayerController_GetInputMouseDeltaInvokerHandler = Some(handler) };
    }

    type APlayerController_GetLocalPlayerInvoker = unsafe extern "C" fn(*mut c_void) -> *mut ULocalPlayerOpaque;
    pub(super) static mut APlayerController_GetLocalPlayerInvokerHandler: Option<APlayerController_GetLocalPlayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_GetLocalPlayer_handler(handler: APlayerController_GetLocalPlayerInvoker){
        unsafe{ APlayerController_GetLocalPlayerInvokerHandler = Some(handler) };
    }

    type APlayerController_GetLocalToServerAsyncPhysicsTickOffsetInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut APlayerController_GetLocalToServerAsyncPhysicsTickOffsetInvokerHandler: Option<APlayerController_GetLocalToServerAsyncPhysicsTickOffsetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_GetLocalToServerAsyncPhysicsTickOffset_handler(handler: APlayerController_GetLocalToServerAsyncPhysicsTickOffsetInvoker){
        unsafe{ APlayerController_GetLocalToServerAsyncPhysicsTickOffsetInvokerHandler = Some(handler) };
    }

    type APlayerController_GetMinRespawnDelayInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut APlayerController_GetMinRespawnDelayInvokerHandler: Option<APlayerController_GetMinRespawnDelayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_GetMinRespawnDelay_handler(handler: APlayerController_GetMinRespawnDelayInvoker){
        unsafe{ APlayerController_GetMinRespawnDelayInvokerHandler = Some(handler) };
    }

    type APlayerController_GetMousePositionInvoker = unsafe extern "C" fn(*mut c_void, &mut f32, &mut f32) -> bool;
    pub(super) static mut APlayerController_GetMousePositionInvokerHandler: Option<APlayerController_GetMousePositionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_GetMousePosition_handler(handler: APlayerController_GetMousePositionInvoker){
        unsafe{ APlayerController_GetMousePositionInvokerHandler = Some(handler) };
    }

    type APlayerController_GetNetConnectionInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UNetConnectionOpaque;
    pub(super) static mut APlayerController_GetNetConnectionInvokerHandler: Option<APlayerController_GetNetConnectionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_GetNetConnection_handler(handler: APlayerController_GetNetConnectionInvoker){
        unsafe{ APlayerController_GetNetConnectionInvokerHandler = Some(handler) };
    }

    type APlayerController_GetNetOwnerInvoker = unsafe extern "C" fn(*mut c_void) -> *mut AActorOpaque;
    pub(super) static mut APlayerController_GetNetOwnerInvokerHandler: Option<APlayerController_GetNetOwnerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_GetNetOwner_handler(handler: APlayerController_GetNetOwnerInvoker){
        unsafe{ APlayerController_GetNetOwnerInvokerHandler = Some(handler) };
    }

    type APlayerController_GetNetOwningPlayerInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UPlayerOpaque;
    pub(super) static mut APlayerController_GetNetOwningPlayerInvokerHandler: Option<APlayerController_GetNetOwningPlayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_GetNetOwningPlayer_handler(handler: APlayerController_GetNetOwningPlayerInvoker){
        unsafe{ APlayerController_GetNetOwningPlayerInvokerHandler = Some(handler) };
    }

    type APlayerController_GetNextViewablePlayerInvoker = unsafe extern "C" fn(*mut c_void, i32) -> *mut APlayerStateOpaque;
    pub(super) static mut APlayerController_GetNextViewablePlayerInvokerHandler: Option<APlayerController_GetNextViewablePlayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_GetNextViewablePlayer_handler(handler: APlayerController_GetNextViewablePlayerInvoker){
        unsafe{ APlayerController_GetNextViewablePlayerInvokerHandler = Some(handler) };
    }

    type APlayerController_GetPawnOrSpectatorInvoker = unsafe extern "C" fn(*mut c_void) -> *mut APawnOpaque;
    pub(super) static mut APlayerController_GetPawnOrSpectatorInvokerHandler: Option<APlayerController_GetPawnOrSpectatorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_GetPawnOrSpectator_handler(handler: APlayerController_GetPawnOrSpectatorInvoker){
        unsafe{ APlayerController_GetPawnOrSpectatorInvokerHandler = Some(handler) };
    }

    type APlayerController_GetPlayerNetworkAddressInvoker = unsafe extern "C" fn(*mut c_void) -> *const std::os::raw::c_char;
    pub(super) static mut APlayerController_GetPlayerNetworkAddressInvokerHandler: Option<APlayerController_GetPlayerNetworkAddressInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_GetPlayerNetworkAddress_handler(handler: APlayerController_GetPlayerNetworkAddressInvoker){
        unsafe{ APlayerController_GetPlayerNetworkAddressInvokerHandler = Some(handler) };
    }

    type APlayerController_GetServerNetworkAddressInvoker = unsafe extern "C" fn(*mut c_void) -> *const std::os::raw::c_char;
    pub(super) static mut APlayerController_GetServerNetworkAddressInvokerHandler: Option<APlayerController_GetServerNetworkAddressInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_GetServerNetworkAddress_handler(handler: APlayerController_GetServerNetworkAddressInvoker){
        unsafe{ APlayerController_GetServerNetworkAddressInvokerHandler = Some(handler) };
    }

    type APlayerController_GetSpawnLocationInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut APlayerController_GetSpawnLocationInvokerHandler: Option<APlayerController_GetSpawnLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_GetSpawnLocation_handler(handler: APlayerController_GetSpawnLocationInvoker){
        unsafe{ APlayerController_GetSpawnLocationInvokerHandler = Some(handler) };
    }

    type APlayerController_GetSplitscreenPlayerByIndexInvoker = unsafe extern "C" fn(*mut c_void, i32) -> *mut APlayerStateOpaque;
    pub(super) static mut APlayerController_GetSplitscreenPlayerByIndexInvokerHandler: Option<APlayerController_GetSplitscreenPlayerByIndexInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_GetSplitscreenPlayerByIndex_handler(handler: APlayerController_GetSplitscreenPlayerByIndexInvoker){
        unsafe{ APlayerController_GetSplitscreenPlayerByIndexInvokerHandler = Some(handler) };
    }

    type APlayerController_GetSplitscreenPlayerCountInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut APlayerController_GetSplitscreenPlayerCountInvokerHandler: Option<APlayerController_GetSplitscreenPlayerCountInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_GetSplitscreenPlayerCount_handler(handler: APlayerController_GetSplitscreenPlayerCountInvoker){
        unsafe{ APlayerController_GetSplitscreenPlayerCountInvokerHandler = Some(handler) };
    }

    type APlayerController_GetViewTargetInvoker = unsafe extern "C" fn(*mut c_void) -> *mut AActorOpaque;
    pub(super) static mut APlayerController_GetViewTargetInvokerHandler: Option<APlayerController_GetViewTargetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_GetViewTarget_handler(handler: APlayerController_GetViewTargetInvoker){
        unsafe{ APlayerController_GetViewTargetInvokerHandler = Some(handler) };
    }

    type APlayerController_GetViewportSizeInvoker = unsafe extern "C" fn(*mut c_void, &mut i32, &mut i32);
    pub(super) static mut APlayerController_GetViewportSizeInvokerHandler: Option<APlayerController_GetViewportSizeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_GetViewportSize_handler(handler: APlayerController_GetViewportSizeInvoker){
        unsafe{ APlayerController_GetViewportSizeInvokerHandler = Some(handler) };
    }

    type APlayerController_HasClientLoadedCurrentWorldInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut APlayerController_HasClientLoadedCurrentWorldInvokerHandler: Option<APlayerController_HasClientLoadedCurrentWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_HasClientLoadedCurrentWorld_handler(handler: APlayerController_HasClientLoadedCurrentWorldInvoker){
        unsafe{ APlayerController_HasClientLoadedCurrentWorldInvokerHandler = Some(handler) };
    }

    type APlayerController_IncludeInNetConditionGroupInvoker = unsafe extern "C" fn(*mut c_void, UName);
    pub(super) static mut APlayerController_IncludeInNetConditionGroupInvokerHandler: Option<APlayerController_IncludeInNetConditionGroupInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_IncludeInNetConditionGroup_handler(handler: APlayerController_IncludeInNetConditionGroupInvoker){
        unsafe{ APlayerController_IncludeInNetConditionGroupInvokerHandler = Some(handler) };
    }

    type APlayerController_InitInputSystemInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_InitInputSystemInvokerHandler: Option<APlayerController_InitInputSystemInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_InitInputSystem_handler(handler: APlayerController_InitInputSystemInvoker){
        unsafe{ APlayerController_InitInputSystemInvokerHandler = Some(handler) };
    }

    type APlayerController_InputEnabledInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut APlayerController_InputEnabledInvokerHandler: Option<APlayerController_InputEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_InputEnabled_handler(handler: APlayerController_InputEnabledInvoker){
        unsafe{ APlayerController_InputEnabledInvokerHandler = Some(handler) };
    }

    type APlayerController_IsFrozenInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut APlayerController_IsFrozenInvokerHandler: Option<APlayerController_IsFrozenInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_IsFrozen_handler(handler: APlayerController_IsFrozenInvoker){
        unsafe{ APlayerController_IsFrozenInvokerHandler = Some(handler) };
    }

    type APlayerController_IsInputComponentInStackInvoker = unsafe extern "C" fn(*mut c_void, *mut UInputComponentOpaque) -> bool;
    pub(super) static mut APlayerController_IsInputComponentInStackInvokerHandler: Option<APlayerController_IsInputComponentInStackInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_IsInputComponentInStack_handler(handler: APlayerController_IsInputComponentInStackInvoker){
        unsafe{ APlayerController_IsInputComponentInStackInvokerHandler = Some(handler) };
    }

    type APlayerController_IsLocalControllerInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut APlayerController_IsLocalControllerInvokerHandler: Option<APlayerController_IsLocalControllerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_IsLocalController_handler(handler: APlayerController_IsLocalControllerInvoker){
        unsafe{ APlayerController_IsLocalControllerInvokerHandler = Some(handler) };
    }

    type APlayerController_IsMemberOfNetConditionGroupInvoker = unsafe extern "C" fn(*mut c_void, UName) -> bool;
    pub(super) static mut APlayerController_IsMemberOfNetConditionGroupInvokerHandler: Option<APlayerController_IsMemberOfNetConditionGroupInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_IsMemberOfNetConditionGroup_handler(handler: APlayerController_IsMemberOfNetConditionGroupInvoker){
        unsafe{ APlayerController_IsMemberOfNetConditionGroupInvokerHandler = Some(handler) };
    }

    type APlayerController_IsPausedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut APlayerController_IsPausedInvokerHandler: Option<APlayerController_IsPausedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_IsPaused_handler(handler: APlayerController_IsPausedInvoker){
        unsafe{ APlayerController_IsPausedInvokerHandler = Some(handler) };
    }

    type APlayerController_IsPrimaryPlayerInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut APlayerController_IsPrimaryPlayerInvokerHandler: Option<APlayerController_IsPrimaryPlayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_IsPrimaryPlayer_handler(handler: APlayerController_IsPrimaryPlayerInvoker){
        unsafe{ APlayerController_IsPrimaryPlayerInvokerHandler = Some(handler) };
    }

    type APlayerController_IsSplitscreenPlayerInvoker = unsafe extern "C" fn(*mut c_void, *mut i32) -> bool;
    pub(super) static mut APlayerController_IsSplitscreenPlayerInvokerHandler: Option<APlayerController_IsSplitscreenPlayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_IsSplitscreenPlayer_handler(handler: APlayerController_IsSplitscreenPlayerInvoker){
        unsafe{ APlayerController_IsSplitscreenPlayerInvokerHandler = Some(handler) };
    }

    type APlayerController_IsStreamingSourceEnabledInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut APlayerController_IsStreamingSourceEnabledInvokerHandler: Option<APlayerController_IsStreamingSourceEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_IsStreamingSourceEnabled_handler(handler: APlayerController_IsStreamingSourceEnabledInvoker){
        unsafe{ APlayerController_IsStreamingSourceEnabledInvokerHandler = Some(handler) };
    }

    type APlayerController_K2_ClientPlayForceFeedbackInvoker = unsafe extern "C" fn(*mut c_void, *mut UForceFeedbackEffectOpaque, UName, bool, bool, bool);
    pub(super) static mut APlayerController_K2_ClientPlayForceFeedbackInvokerHandler: Option<APlayerController_K2_ClientPlayForceFeedbackInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_K2_ClientPlayForceFeedback_handler(handler: APlayerController_K2_ClientPlayForceFeedbackInvoker){
        unsafe{ APlayerController_K2_ClientPlayForceFeedbackInvokerHandler = Some(handler) };
    }

    type APlayerController_LevelStreamingStatusChangedInvoker = unsafe extern "C" fn(*mut c_void, *mut ULevelStreamingOpaque, bool, bool, bool, i32);
    pub(super) static mut APlayerController_LevelStreamingStatusChangedInvokerHandler: Option<APlayerController_LevelStreamingStatusChangedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_LevelStreamingStatusChanged_handler(handler: APlayerController_LevelStreamingStatusChangedInvoker){
        unsafe{ APlayerController_LevelStreamingStatusChangedInvokerHandler = Some(handler) };
    }

    type APlayerController_NetworkRemapPathInvoker = unsafe extern "C" fn(*mut c_void, UName, bool) -> UName;
    pub(super) static mut APlayerController_NetworkRemapPathInvokerHandler: Option<APlayerController_NetworkRemapPathInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_NetworkRemapPath_handler(handler: APlayerController_NetworkRemapPathInvoker){
        unsafe{ APlayerController_NetworkRemapPathInvokerHandler = Some(handler) };
    }

    type APlayerController_NotifyActorChannelFailureInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorChannelOpaque);
    pub(super) static mut APlayerController_NotifyActorChannelFailureInvokerHandler: Option<APlayerController_NotifyActorChannelFailureInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_NotifyActorChannelFailure_handler(handler: APlayerController_NotifyActorChannelFailureInvoker){
        unsafe{ APlayerController_NotifyActorChannelFailureInvokerHandler = Some(handler) };
    }

    type APlayerController_NotifyLoadedWorldInvoker = unsafe extern "C" fn(*mut c_void, UName, bool);
    pub(super) static mut APlayerController_NotifyLoadedWorldInvokerHandler: Option<APlayerController_NotifyLoadedWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_NotifyLoadedWorld_handler(handler: APlayerController_NotifyLoadedWorldInvoker){
        unsafe{ APlayerController_NotifyLoadedWorldInvokerHandler = Some(handler) };
    }

    type APlayerController_NotifyServerReceivedClientDataInvoker = unsafe extern "C" fn(*mut c_void, *mut APawnOpaque, f32) -> bool;
    pub(super) static mut APlayerController_NotifyServerReceivedClientDataInvokerHandler: Option<APlayerController_NotifyServerReceivedClientDataInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_NotifyServerReceivedClientData_handler(handler: APlayerController_NotifyServerReceivedClientDataInvoker){
        unsafe{ APlayerController_NotifyServerReceivedClientDataInvokerHandler = Some(handler) };
    }

    type APlayerController_OnAddedToPlayerControllerListInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_OnAddedToPlayerControllerListInvokerHandler: Option<APlayerController_OnAddedToPlayerControllerListInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_OnAddedToPlayerControllerList_handler(handler: APlayerController_OnAddedToPlayerControllerListInvoker){
        unsafe{ APlayerController_OnAddedToPlayerControllerListInvokerHandler = Some(handler) };
    }

    type APlayerController_OnNetCleanupInvoker = unsafe extern "C" fn(*mut c_void, *mut UNetConnectionOpaque);
    pub(super) static mut APlayerController_OnNetCleanupInvokerHandler: Option<APlayerController_OnNetCleanupInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_OnNetCleanup_handler(handler: APlayerController_OnNetCleanupInvoker){
        unsafe{ APlayerController_OnNetCleanupInvokerHandler = Some(handler) };
    }

    type APlayerController_OnRemovedFromPlayerControllerListInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_OnRemovedFromPlayerControllerListInvokerHandler: Option<APlayerController_OnRemovedFromPlayerControllerListInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_OnRemovedFromPlayerControllerList_handler(handler: APlayerController_OnRemovedFromPlayerControllerListInvoker){
        unsafe{ APlayerController_OnRemovedFromPlayerControllerListInvokerHandler = Some(handler) };
    }

    type APlayerController_OnServerStartedVisualLoggerInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut APlayerController_OnServerStartedVisualLoggerInvokerHandler: Option<APlayerController_OnServerStartedVisualLoggerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_OnServerStartedVisualLogger_handler(handler: APlayerController_OnServerStartedVisualLoggerInvoker){
        unsafe{ APlayerController_OnServerStartedVisualLoggerInvokerHandler = Some(handler) };
    }

    type APlayerController_PauseInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_PauseInvokerHandler: Option<APlayerController_PauseInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_Pause_handler(handler: APlayerController_PauseInvoker){
        unsafe{ APlayerController_PauseInvokerHandler = Some(handler) };
    }

    type APlayerController_PawnLeavingGameInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_PawnLeavingGameInvokerHandler: Option<APlayerController_PawnLeavingGameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_PawnLeavingGame_handler(handler: APlayerController_PawnLeavingGameInvoker){
        unsafe{ APlayerController_PawnLeavingGameInvokerHandler = Some(handler) };
    }

    type APlayerController_PlayerTickInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut APlayerController_PlayerTickInvokerHandler: Option<APlayerController_PlayerTickInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_PlayerTick_handler(handler: APlayerController_PlayerTickInvoker){
        unsafe{ APlayerController_PlayerTickInvokerHandler = Some(handler) };
    }

    type APlayerController_PopInputComponentInvoker = unsafe extern "C" fn(*mut c_void, *mut UInputComponentOpaque) -> bool;
    pub(super) static mut APlayerController_PopInputComponentInvokerHandler: Option<APlayerController_PopInputComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_PopInputComponent_handler(handler: APlayerController_PopInputComponentInvoker){
        unsafe{ APlayerController_PopInputComponentInvokerHandler = Some(handler) };
    }

    type APlayerController_PostInitializeComponentsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_PostInitializeComponentsInvokerHandler: Option<APlayerController_PostInitializeComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_PostInitializeComponents_handler(handler: APlayerController_PostInitializeComponentsInvoker){
        unsafe{ APlayerController_PostInitializeComponentsInvokerHandler = Some(handler) };
    }

    type APlayerController_PostLoadInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_PostLoadInvokerHandler: Option<APlayerController_PostLoadInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_PostLoad_handler(handler: APlayerController_PostLoadInvoker){
        unsafe{ APlayerController_PostLoadInvokerHandler = Some(handler) };
    }

    type APlayerController_PostProcessInputInvoker = unsafe extern "C" fn(*mut c_void, f32, bool);
    pub(super) static mut APlayerController_PostProcessInputInvokerHandler: Option<APlayerController_PostProcessInputInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_PostProcessInput_handler(handler: APlayerController_PostProcessInputInvoker){
        unsafe{ APlayerController_PostProcessInputInvokerHandler = Some(handler) };
    }

    type APlayerController_PostSeamlessTravelInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_PostSeamlessTravelInvokerHandler: Option<APlayerController_PostSeamlessTravelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_PostSeamlessTravel_handler(handler: APlayerController_PostSeamlessTravelInvoker){
        unsafe{ APlayerController_PostSeamlessTravelInvokerHandler = Some(handler) };
    }

    type APlayerController_PreProcessInputInvoker = unsafe extern "C" fn(*mut c_void, f32, bool);
    pub(super) static mut APlayerController_PreProcessInputInvokerHandler: Option<APlayerController_PreProcessInputInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_PreProcessInput_handler(handler: APlayerController_PreProcessInputInvoker){
        unsafe{ APlayerController_PreProcessInputInvokerHandler = Some(handler) };
    }

    type APlayerController_PushInputComponentInvoker = unsafe extern "C" fn(*mut c_void, *mut UInputComponentOpaque);
    pub(super) static mut APlayerController_PushInputComponentInvokerHandler: Option<APlayerController_PushInputComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_PushInputComponent_handler(handler: APlayerController_PushInputComponentInvoker){
        unsafe{ APlayerController_PushInputComponentInvokerHandler = Some(handler) };
    }

    type APlayerController_ReceivedPlayerInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ReceivedPlayerInvokerHandler: Option<APlayerController_ReceivedPlayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ReceivedPlayer_handler(handler: APlayerController_ReceivedPlayerInvoker){
        unsafe{ APlayerController_ReceivedPlayerInvokerHandler = Some(handler) };
    }

    type APlayerController_RemoveFromNetConditionGroupInvoker = unsafe extern "C" fn(*mut c_void, UName);
    pub(super) static mut APlayerController_RemoveFromNetConditionGroupInvokerHandler: Option<APlayerController_RemoveFromNetConditionGroupInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_RemoveFromNetConditionGroup_handler(handler: APlayerController_RemoveFromNetConditionGroupInvoker){
        unsafe{ APlayerController_RemoveFromNetConditionGroupInvokerHandler = Some(handler) };
    }

    type APlayerController_ResetInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ResetInvokerHandler: Option<APlayerController_ResetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_Reset_handler(handler: APlayerController_ResetInvoker){
        unsafe{ APlayerController_ResetInvokerHandler = Some(handler) };
    }

    type APlayerController_ResetCameraModeInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ResetCameraModeInvokerHandler: Option<APlayerController_ResetCameraModeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ResetCameraMode_handler(handler: APlayerController_ResetCameraModeInvoker){
        unsafe{ APlayerController_ResetCameraModeInvokerHandler = Some(handler) };
    }

    type APlayerController_ResetControllerLightColorInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ResetControllerLightColorInvokerHandler: Option<APlayerController_ResetControllerLightColorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ResetControllerLightColor_handler(handler: APlayerController_ResetControllerLightColorInvoker){
        unsafe{ APlayerController_ResetControllerLightColorInvokerHandler = Some(handler) };
    }

    type APlayerController_ResetIgnoreInputFlagsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ResetIgnoreInputFlagsInvokerHandler: Option<APlayerController_ResetIgnoreInputFlagsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ResetIgnoreInputFlags_handler(handler: APlayerController_ResetIgnoreInputFlagsInvoker){
        unsafe{ APlayerController_ResetIgnoreInputFlagsInvokerHandler = Some(handler) };
    }

    type APlayerController_RestartLevelInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_RestartLevelInvokerHandler: Option<APlayerController_RestartLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_RestartLevel_handler(handler: APlayerController_RestartLevelInvoker){
        unsafe{ APlayerController_RestartLevelInvokerHandler = Some(handler) };
    }

    type APlayerController_SafeRetryClientRestartInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_SafeRetryClientRestartInvokerHandler: Option<APlayerController_SafeRetryClientRestartInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SafeRetryClientRestart_handler(handler: APlayerController_SafeRetryClientRestartInvoker){
        unsafe{ APlayerController_SafeRetryClientRestartInvokerHandler = Some(handler) };
    }

    type APlayerController_SafeServerCheckClientPossessionInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_SafeServerCheckClientPossessionInvokerHandler: Option<APlayerController_SafeServerCheckClientPossessionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SafeServerCheckClientPossession_handler(handler: APlayerController_SafeServerCheckClientPossessionInvoker){
        unsafe{ APlayerController_SafeServerCheckClientPossessionInvokerHandler = Some(handler) };
    }

    type APlayerController_SafeServerUpdateSpectatorStateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_SafeServerUpdateSpectatorStateInvokerHandler: Option<APlayerController_SafeServerUpdateSpectatorStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SafeServerUpdateSpectatorState_handler(handler: APlayerController_SafeServerUpdateSpectatorStateInvoker){
        unsafe{ APlayerController_SafeServerUpdateSpectatorStateInvokerHandler = Some(handler) };
    }

    type APlayerController_SeamlessTravelFromInvoker = unsafe extern "C" fn(*mut c_void, *mut APlayerControllerOpaque);
    pub(super) static mut APlayerController_SeamlessTravelFromInvokerHandler: Option<APlayerController_SeamlessTravelFromInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SeamlessTravelFrom_handler(handler: APlayerController_SeamlessTravelFromInvoker){
        unsafe{ APlayerController_SeamlessTravelFromInvokerHandler = Some(handler) };
    }

    type APlayerController_SeamlessTravelToInvoker = unsafe extern "C" fn(*mut c_void, *mut APlayerControllerOpaque);
    pub(super) static mut APlayerController_SeamlessTravelToInvokerHandler: Option<APlayerController_SeamlessTravelToInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SeamlessTravelTo_handler(handler: APlayerController_SeamlessTravelToInvoker){
        unsafe{ APlayerController_SeamlessTravelToInvokerHandler = Some(handler) };
    }

    type APlayerController_SendClientAdjustmentInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_SendClientAdjustmentInvokerHandler: Option<APlayerController_SendClientAdjustmentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SendClientAdjustment_handler(handler: APlayerController_SendClientAdjustmentInvoker){
        unsafe{ APlayerController_SendClientAdjustmentInvokerHandler = Some(handler) };
    }

    type APlayerController_ServerAcknowledgePossessionInvoker = unsafe extern "C" fn(*mut c_void, *mut APawnOpaque);
    pub(super) static mut APlayerController_ServerAcknowledgePossessionInvokerHandler: Option<APlayerController_ServerAcknowledgePossessionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ServerAcknowledgePossession_handler(handler: APlayerController_ServerAcknowledgePossessionInvoker){
        unsafe{ APlayerController_ServerAcknowledgePossessionInvokerHandler = Some(handler) };
    }

    type APlayerController_ServerCameraInvoker = unsafe extern "C" fn(*mut c_void, UName);
    pub(super) static mut APlayerController_ServerCameraInvokerHandler: Option<APlayerController_ServerCameraInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ServerCamera_handler(handler: APlayerController_ServerCameraInvoker){
        unsafe{ APlayerController_ServerCameraInvokerHandler = Some(handler) };
    }

    type APlayerController_ServerCheckClientPossessionInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ServerCheckClientPossessionInvokerHandler: Option<APlayerController_ServerCheckClientPossessionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ServerCheckClientPossession_handler(handler: APlayerController_ServerCheckClientPossessionInvoker){
        unsafe{ APlayerController_ServerCheckClientPossessionInvokerHandler = Some(handler) };
    }

    type APlayerController_ServerCheckClientPossessionReliableInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ServerCheckClientPossessionReliableInvokerHandler: Option<APlayerController_ServerCheckClientPossessionReliableInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ServerCheckClientPossessionReliable_handler(handler: APlayerController_ServerCheckClientPossessionReliableInvoker){
        unsafe{ APlayerController_ServerCheckClientPossessionReliableInvokerHandler = Some(handler) };
    }

    type APlayerController_ServerNotifyLoadedWorldInvoker = unsafe extern "C" fn(*mut c_void, UName);
    pub(super) static mut APlayerController_ServerNotifyLoadedWorldInvokerHandler: Option<APlayerController_ServerNotifyLoadedWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ServerNotifyLoadedWorld_handler(handler: APlayerController_ServerNotifyLoadedWorldInvoker){
        unsafe{ APlayerController_ServerNotifyLoadedWorldInvokerHandler = Some(handler) };
    }

    type APlayerController_ServerPauseInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ServerPauseInvokerHandler: Option<APlayerController_ServerPauseInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ServerPause_handler(handler: APlayerController_ServerPauseInvoker){
        unsafe{ APlayerController_ServerPauseInvokerHandler = Some(handler) };
    }

    type APlayerController_ServerRestartPlayerInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ServerRestartPlayerInvokerHandler: Option<APlayerController_ServerRestartPlayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ServerRestartPlayer_handler(handler: APlayerController_ServerRestartPlayerInvoker){
        unsafe{ APlayerController_ServerRestartPlayerInvokerHandler = Some(handler) };
    }

    type APlayerController_ServerSetSpectatorLocationInvoker = unsafe extern "C" fn(*mut c_void, Vector3, Rotator);
    pub(super) static mut APlayerController_ServerSetSpectatorLocationInvokerHandler: Option<APlayerController_ServerSetSpectatorLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ServerSetSpectatorLocation_handler(handler: APlayerController_ServerSetSpectatorLocationInvoker){
        unsafe{ APlayerController_ServerSetSpectatorLocationInvokerHandler = Some(handler) };
    }

    type APlayerController_ServerSetSpectatorWaitingInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut APlayerController_ServerSetSpectatorWaitingInvokerHandler: Option<APlayerController_ServerSetSpectatorWaitingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ServerSetSpectatorWaiting_handler(handler: APlayerController_ServerSetSpectatorWaitingInvoker){
        unsafe{ APlayerController_ServerSetSpectatorWaitingInvokerHandler = Some(handler) };
    }

    type APlayerController_ServerShortTimeoutInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ServerShortTimeoutInvokerHandler: Option<APlayerController_ServerShortTimeoutInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ServerShortTimeout_handler(handler: APlayerController_ServerShortTimeoutInvoker){
        unsafe{ APlayerController_ServerShortTimeoutInvokerHandler = Some(handler) };
    }

    type APlayerController_ServerToggleAILoggingInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ServerToggleAILoggingInvokerHandler: Option<APlayerController_ServerToggleAILoggingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ServerToggleAILogging_handler(handler: APlayerController_ServerToggleAILoggingInvoker){
        unsafe{ APlayerController_ServerToggleAILoggingInvokerHandler = Some(handler) };
    }

    type APlayerController_ServerVerifyViewTargetInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ServerVerifyViewTargetInvokerHandler: Option<APlayerController_ServerVerifyViewTargetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ServerVerifyViewTarget_handler(handler: APlayerController_ServerVerifyViewTargetInvoker){
        unsafe{ APlayerController_ServerVerifyViewTargetInvokerHandler = Some(handler) };
    }

    type APlayerController_ServerViewNextPlayerInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ServerViewNextPlayerInvokerHandler: Option<APlayerController_ServerViewNextPlayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ServerViewNextPlayer_handler(handler: APlayerController_ServerViewNextPlayerInvoker){
        unsafe{ APlayerController_ServerViewNextPlayerInvokerHandler = Some(handler) };
    }

    type APlayerController_ServerViewPrevPlayerInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_ServerViewPrevPlayerInvokerHandler: Option<APlayerController_ServerViewPrevPlayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ServerViewPrevPlayer_handler(handler: APlayerController_ServerViewPrevPlayerInvoker){
        unsafe{ APlayerController_ServerViewPrevPlayerInvokerHandler = Some(handler) };
    }

    type APlayerController_SetAsLocalPlayerControllerInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_SetAsLocalPlayerControllerInvokerHandler: Option<APlayerController_SetAsLocalPlayerControllerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SetAsLocalPlayerController_handler(handler: APlayerController_SetAsLocalPlayerControllerInvoker){
        unsafe{ APlayerController_SetAsLocalPlayerControllerInvokerHandler = Some(handler) };
    }

    type APlayerController_SetAudioListenerAttenuationOverrideInvoker = unsafe extern "C" fn(*mut c_void, *mut USceneComponentOpaque, Vector3);
    pub(super) static mut APlayerController_SetAudioListenerAttenuationOverrideInvokerHandler: Option<APlayerController_SetAudioListenerAttenuationOverrideInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SetAudioListenerAttenuationOverride_handler(handler: APlayerController_SetAudioListenerAttenuationOverrideInvoker){
        unsafe{ APlayerController_SetAudioListenerAttenuationOverrideInvokerHandler = Some(handler) };
    }

    type APlayerController_SetAudioListenerOverrideInvoker = unsafe extern "C" fn(*mut c_void, *mut USceneComponentOpaque, Vector3, Rotator);
    pub(super) static mut APlayerController_SetAudioListenerOverrideInvokerHandler: Option<APlayerController_SetAudioListenerOverrideInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SetAudioListenerOverride_handler(handler: APlayerController_SetAudioListenerOverrideInvoker){
        unsafe{ APlayerController_SetAudioListenerOverrideInvokerHandler = Some(handler) };
    }

    type APlayerController_SetCameraModeInvoker = unsafe extern "C" fn(*mut c_void, UName);
    pub(super) static mut APlayerController_SetCameraModeInvokerHandler: Option<APlayerController_SetCameraModeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SetCameraMode_handler(handler: APlayerController_SetCameraModeInvoker){
        unsafe{ APlayerController_SetCameraModeInvokerHandler = Some(handler) };
    }

    type APlayerController_SetCinematicModeInvoker = unsafe extern "C" fn(*mut c_void, bool, bool, bool);
    pub(super) static mut APlayerController_SetCinematicModeInvokerHandler: Option<APlayerController_SetCinematicModeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SetCinematicMode_handler(handler: APlayerController_SetCinematicModeInvoker){
        unsafe{ APlayerController_SetCinematicModeInvokerHandler = Some(handler) };
    }

    type APlayerController_SetCinematicMode2Invoker = unsafe extern "C" fn(*mut c_void, bool, bool, bool, bool, bool);
    pub(super) static mut APlayerController_SetCinematicMode2InvokerHandler: Option<APlayerController_SetCinematicMode2Invoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SetCinematicMode2_handler(handler: APlayerController_SetCinematicMode2Invoker){
        unsafe{ APlayerController_SetCinematicMode2InvokerHandler = Some(handler) };
    }

    type APlayerController_SetControllerLightColorInvoker = unsafe extern "C" fn(*mut c_void, Color);
    pub(super) static mut APlayerController_SetControllerLightColorInvokerHandler: Option<APlayerController_SetControllerLightColorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SetControllerLightColor_handler(handler: APlayerController_SetControllerLightColorInvoker){
        unsafe{ APlayerController_SetControllerLightColorInvokerHandler = Some(handler) };
    }

    type APlayerController_SetDisableHapticsInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut APlayerController_SetDisableHapticsInvokerHandler: Option<APlayerController_SetDisableHapticsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SetDisableHaptics_handler(handler: APlayerController_SetDisableHapticsInvoker){
        unsafe{ APlayerController_SetDisableHapticsInvokerHandler = Some(handler) };
    }

    type APlayerController_SetMotionControlsEnabledInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut APlayerController_SetMotionControlsEnabledInvokerHandler: Option<APlayerController_SetMotionControlsEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SetMotionControlsEnabled_handler(handler: APlayerController_SetMotionControlsEnabledInvoker){
        unsafe{ APlayerController_SetMotionControlsEnabledInvokerHandler = Some(handler) };
    }

    type APlayerController_SetNetSpeedInvoker = unsafe extern "C" fn(*mut c_void, i32);
    pub(super) static mut APlayerController_SetNetSpeedInvokerHandler: Option<APlayerController_SetNetSpeedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SetNetSpeed_handler(handler: APlayerController_SetNetSpeedInvoker){
        unsafe{ APlayerController_SetNetSpeedInvokerHandler = Some(handler) };
    }

    type APlayerController_SetPawnInvoker = unsafe extern "C" fn(*mut c_void, *mut APawnOpaque);
    pub(super) static mut APlayerController_SetPawnInvokerHandler: Option<APlayerController_SetPawnInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SetPawn_handler(handler: APlayerController_SetPawnInvoker){
        unsafe{ APlayerController_SetPawnInvokerHandler = Some(handler) };
    }

    type APlayerController_SetPlayerInvoker = unsafe extern "C" fn(*mut c_void, *mut UPlayerOpaque);
    pub(super) static mut APlayerController_SetPlayerInvokerHandler: Option<APlayerController_SetPlayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SetPlayer_handler(handler: APlayerController_SetPlayerInvoker){
        unsafe{ APlayerController_SetPlayerInvokerHandler = Some(handler) };
    }

    type APlayerController_SetShowMouseCursorInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut APlayerController_SetShowMouseCursorInvokerHandler: Option<APlayerController_SetShowMouseCursorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SetShowMouseCursor_handler(handler: APlayerController_SetShowMouseCursorInvoker){
        unsafe{ APlayerController_SetShowMouseCursorInvokerHandler = Some(handler) };
    }

    type APlayerController_SetVirtualJoystickVisibilityInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut APlayerController_SetVirtualJoystickVisibilityInvokerHandler: Option<APlayerController_SetVirtualJoystickVisibilityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SetVirtualJoystickVisibility_handler(handler: APlayerController_SetVirtualJoystickVisibilityInvoker){
        unsafe{ APlayerController_SetVirtualJoystickVisibilityInvokerHandler = Some(handler) };
    }

    type APlayerController_ShouldFlushKeysWhenViewportFocusChangesInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut APlayerController_ShouldFlushKeysWhenViewportFocusChangesInvokerHandler: Option<APlayerController_ShouldFlushKeysWhenViewportFocusChangesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ShouldFlushKeysWhenViewportFocusChanges_handler(handler: APlayerController_ShouldFlushKeysWhenViewportFocusChangesInvoker){
        unsafe{ APlayerController_ShouldFlushKeysWhenViewportFocusChangesInvokerHandler = Some(handler) };
    }

    type APlayerController_ShouldParticipateInSeamlessTravelInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut APlayerController_ShouldParticipateInSeamlessTravelInvokerHandler: Option<APlayerController_ShouldParticipateInSeamlessTravelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ShouldParticipateInSeamlessTravel_handler(handler: APlayerController_ShouldParticipateInSeamlessTravelInvoker){
        unsafe{ APlayerController_ShouldParticipateInSeamlessTravelInvokerHandler = Some(handler) };
    }

    type APlayerController_ShouldPerformFullTickWhenPausedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut APlayerController_ShouldPerformFullTickWhenPausedInvokerHandler: Option<APlayerController_ShouldPerformFullTickWhenPausedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ShouldPerformFullTickWhenPaused_handler(handler: APlayerController_ShouldPerformFullTickWhenPausedInvoker){
        unsafe{ APlayerController_ShouldPerformFullTickWhenPausedInvokerHandler = Some(handler) };
    }

    type APlayerController_ShouldShowMouseCursorInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut APlayerController_ShouldShowMouseCursorInvokerHandler: Option<APlayerController_ShouldShowMouseCursorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ShouldShowMouseCursor_handler(handler: APlayerController_ShouldShowMouseCursorInvoker){
        unsafe{ APlayerController_ShouldShowMouseCursorInvokerHandler = Some(handler) };
    }

    type APlayerController_SmoothTargetViewRotationInvoker = unsafe extern "C" fn(*mut c_void, *mut APawnOpaque, f32);
    pub(super) static mut APlayerController_SmoothTargetViewRotationInvokerHandler: Option<APlayerController_SmoothTargetViewRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SmoothTargetViewRotation_handler(handler: APlayerController_SmoothTargetViewRotationInvoker){
        unsafe{ APlayerController_SmoothTargetViewRotationInvokerHandler = Some(handler) };
    }

    type APlayerController_SpawnDefaultHUDInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_SpawnDefaultHUDInvokerHandler: Option<APlayerController_SpawnDefaultHUDInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SpawnDefaultHUD_handler(handler: APlayerController_SpawnDefaultHUDInvoker){
        unsafe{ APlayerController_SpawnDefaultHUDInvokerHandler = Some(handler) };
    }

    type APlayerController_SpawnPlayerCameraManagerInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_SpawnPlayerCameraManagerInvokerHandler: Option<APlayerController_SpawnPlayerCameraManagerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_SpawnPlayerCameraManager_handler(handler: APlayerController_SpawnPlayerCameraManagerInvoker){
        unsafe{ APlayerController_SpawnPlayerCameraManagerInvokerHandler = Some(handler) };
    }

    type APlayerController_StartFireInvoker = unsafe extern "C" fn(*mut c_void, u8);
    pub(super) static mut APlayerController_StartFireInvokerHandler: Option<APlayerController_StartFireInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_StartFire_handler(handler: APlayerController_StartFireInvoker){
        unsafe{ APlayerController_StartFireInvokerHandler = Some(handler) };
    }

    type APlayerController_StartSpectatingOnlyInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_StartSpectatingOnlyInvokerHandler: Option<APlayerController_StartSpectatingOnlyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_StartSpectatingOnly_handler(handler: APlayerController_StartSpectatingOnlyInvoker){
        unsafe{ APlayerController_StartSpectatingOnlyInvokerHandler = Some(handler) };
    }

    type APlayerController_StartTalkingInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_StartTalkingInvokerHandler: Option<APlayerController_StartTalkingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_StartTalking_handler(handler: APlayerController_StartTalkingInvoker){
        unsafe{ APlayerController_StartTalkingInvokerHandler = Some(handler) };
    }

    type APlayerController_StopTalkingInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_StopTalkingInvokerHandler: Option<APlayerController_StopTalkingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_StopTalking_handler(handler: APlayerController_StopTalkingInvoker){
        unsafe{ APlayerController_StopTalkingInvokerHandler = Some(handler) };
    }

    type APlayerController_StreamingSourceShouldActivateInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut APlayerController_StreamingSourceShouldActivateInvokerHandler: Option<APlayerController_StreamingSourceShouldActivateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_StreamingSourceShouldActivate_handler(handler: APlayerController_StreamingSourceShouldActivateInvoker){
        unsafe{ APlayerController_StreamingSourceShouldActivateInvokerHandler = Some(handler) };
    }

    type APlayerController_StreamingSourceShouldBlockOnSlowStreamingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut APlayerController_StreamingSourceShouldBlockOnSlowStreamingInvokerHandler: Option<APlayerController_StreamingSourceShouldBlockOnSlowStreamingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_StreamingSourceShouldBlockOnSlowStreaming_handler(handler: APlayerController_StreamingSourceShouldBlockOnSlowStreamingInvoker){
        unsafe{ APlayerController_StreamingSourceShouldBlockOnSlowStreamingInvokerHandler = Some(handler) };
    }

    type APlayerController_ToggleSpeakingInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut APlayerController_ToggleSpeakingInvokerHandler: Option<APlayerController_ToggleSpeakingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ToggleSpeaking_handler(handler: APlayerController_ToggleSpeakingInvoker){
        unsafe{ APlayerController_ToggleSpeakingInvokerHandler = Some(handler) };
    }

    type APlayerController_UnFreezeInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut APlayerController_UnFreezeInvokerHandler: Option<APlayerController_UnFreezeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_UnFreeze_handler(handler: APlayerController_UnFreezeInvoker){
        unsafe{ APlayerController_UnFreezeInvokerHandler = Some(handler) };
    }

    type APlayerController_UpdateCameraManagerInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut APlayerController_UpdateCameraManagerInvokerHandler: Option<APlayerController_UpdateCameraManagerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_UpdateCameraManager_handler(handler: APlayerController_UpdateCameraManagerInvoker){
        unsafe{ APlayerController_UpdateCameraManagerInvokerHandler = Some(handler) };
    }

    type APlayerController_UpdatePingInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut APlayerController_UpdatePingInvokerHandler: Option<APlayerController_UpdatePingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_UpdatePing_handler(handler: APlayerController_UpdatePingInvoker){
        unsafe{ APlayerController_UpdatePingInvokerHandler = Some(handler) };
    }

    type APlayerController_UpdateRotationInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut APlayerController_UpdateRotationInvokerHandler: Option<APlayerController_UpdateRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_UpdateRotation_handler(handler: APlayerController_UpdateRotationInvoker){
        unsafe{ APlayerController_UpdateRotationInvokerHandler = Some(handler) };
    }

    type APlayerController_UseShortConnectTimeoutInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut APlayerController_UseShortConnectTimeoutInvokerHandler: Option<APlayerController_UseShortConnectTimeoutInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_UseShortConnectTimeout_handler(handler: APlayerController_UseShortConnectTimeoutInvoker){
        unsafe{ APlayerController_UseShortConnectTimeoutInvokerHandler = Some(handler) };
    }

    type APlayerController_ViewAPlayerInvoker = unsafe extern "C" fn(*mut c_void, i32);
    pub(super) static mut APlayerController_ViewAPlayerInvokerHandler: Option<APlayerController_ViewAPlayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_APlayerController_ViewAPlayer_handler(handler: APlayerController_ViewAPlayerInvoker){
        unsafe{ APlayerController_ViewAPlayerInvokerHandler = Some(handler) };
    }

    type FRandomStream_FRandInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut FRandomStream_FRandInvokerHandler: Option<FRandomStream_FRandInvoker> = None;
    #[no_mangle]
    extern "C" fn set_FRandomStream_FRand_handler(handler: FRandomStream_FRandInvoker){
        unsafe{ FRandomStream_FRandInvokerHandler = Some(handler) };
    }

    type FRandomStream_GenerateNewSeedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut FRandomStream_GenerateNewSeedInvokerHandler: Option<FRandomStream_GenerateNewSeedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_FRandomStream_GenerateNewSeed_handler(handler: FRandomStream_GenerateNewSeedInvoker){
        unsafe{ FRandomStream_GenerateNewSeedInvokerHandler = Some(handler) };
    }

    type FRandomStream_GetCurrentSeedInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut FRandomStream_GetCurrentSeedInvokerHandler: Option<FRandomStream_GetCurrentSeedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_FRandomStream_GetCurrentSeed_handler(handler: FRandomStream_GetCurrentSeedInvoker){
        unsafe{ FRandomStream_GetCurrentSeedInvokerHandler = Some(handler) };
    }

    type FRandomStream_GetFractionInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut FRandomStream_GetFractionInvokerHandler: Option<FRandomStream_GetFractionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_FRandomStream_GetFraction_handler(handler: FRandomStream_GetFractionInvoker){
        unsafe{ FRandomStream_GetFractionInvokerHandler = Some(handler) };
    }

    type FRandomStream_GetInitialSeedInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut FRandomStream_GetInitialSeedInvokerHandler: Option<FRandomStream_GetInitialSeedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_FRandomStream_GetInitialSeed_handler(handler: FRandomStream_GetInitialSeedInvoker){
        unsafe{ FRandomStream_GetInitialSeedInvokerHandler = Some(handler) };
    }

    type FRandomStream_GetUnitVectorInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut FRandomStream_GetUnitVectorInvokerHandler: Option<FRandomStream_GetUnitVectorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_FRandomStream_GetUnitVector_handler(handler: FRandomStream_GetUnitVectorInvoker){
        unsafe{ FRandomStream_GetUnitVectorInvokerHandler = Some(handler) };
    }

    type FRandomStream_GetUnsignedIntInvoker = unsafe extern "C" fn(*mut c_void) -> u32;
    pub(super) static mut FRandomStream_GetUnsignedIntInvokerHandler: Option<FRandomStream_GetUnsignedIntInvoker> = None;
    #[no_mangle]
    extern "C" fn set_FRandomStream_GetUnsignedInt_handler(handler: FRandomStream_GetUnsignedIntInvoker){
        unsafe{ FRandomStream_GetUnsignedIntInvokerHandler = Some(handler) };
    }

    type FRandomStream_InitializeInvoker = unsafe extern "C" fn(*mut c_void, i32);
    pub(super) static mut FRandomStream_InitializeInvokerHandler: Option<FRandomStream_InitializeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_FRandomStream_Initialize_handler(handler: FRandomStream_InitializeInvoker){
        unsafe{ FRandomStream_InitializeInvokerHandler = Some(handler) };
    }

    type FRandomStream_RandHelperInvoker = unsafe extern "C" fn(*mut c_void, i32) -> i32;
    pub(super) static mut FRandomStream_RandHelperInvokerHandler: Option<FRandomStream_RandHelperInvoker> = None;
    #[no_mangle]
    extern "C" fn set_FRandomStream_RandHelper_handler(handler: FRandomStream_RandHelperInvoker){
        unsafe{ FRandomStream_RandHelperInvokerHandler = Some(handler) };
    }

    type FRandomStream_RandRangeInvoker = unsafe extern "C" fn(*mut c_void, i32, i32) -> i32;
    pub(super) static mut FRandomStream_RandRangeInvokerHandler: Option<FRandomStream_RandRangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_FRandomStream_RandRange_handler(handler: FRandomStream_RandRangeInvoker){
        unsafe{ FRandomStream_RandRangeInvokerHandler = Some(handler) };
    }

    type FRandomStream_ResetInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut FRandomStream_ResetInvokerHandler: Option<FRandomStream_ResetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_FRandomStream_Reset_handler(handler: FRandomStream_ResetInvoker){
        unsafe{ FRandomStream_ResetInvokerHandler = Some(handler) };
    }

    type FRandomStream_ToStringInvoker = unsafe extern "C" fn(*mut c_void) -> *const std::os::raw::c_char;
    pub(super) static mut FRandomStream_ToStringInvokerHandler: Option<FRandomStream_ToStringInvoker> = None;
    #[no_mangle]
    extern "C" fn set_FRandomStream_ToString_handler(handler: FRandomStream_ToStringInvoker){
        unsafe{ FRandomStream_ToStringInvokerHandler = Some(handler) };
    }

    type FRandomStream_VRandInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut FRandomStream_VRandInvokerHandler: Option<FRandomStream_VRandInvoker> = None;
    #[no_mangle]
    extern "C" fn set_FRandomStream_VRand_handler(handler: FRandomStream_VRandInvoker){
        unsafe{ FRandomStream_VRandInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_ActivateReverbEffectInvoker = unsafe extern "C" fn(*mut UObjectOpaque, *mut UReverbEffectOpaque, UName, f32, f32, f32);
    pub(super) static mut UGameplayStatics_ActivateReverbEffectInvokerHandler: Option<UGameplayStatics_ActivateReverbEffectInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_ActivateReverbEffect_handler(handler: UGameplayStatics_ActivateReverbEffectInvoker){
        unsafe{ UGameplayStatics_ActivateReverbEffectInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_AreSubtitlesEnabledInvoker = unsafe extern "C" fn() -> bool;
    pub(super) static mut UGameplayStatics_AreSubtitlesEnabledInvokerHandler: Option<UGameplayStatics_AreSubtitlesEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_AreSubtitlesEnabled_handler(handler: UGameplayStatics_AreSubtitlesEnabledInvoker){
        unsafe{ UGameplayStatics_AreSubtitlesEnabledInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_CancelAsyncLoadingInvoker = unsafe extern "C" fn();
    pub(super) static mut UGameplayStatics_CancelAsyncLoadingInvokerHandler: Option<UGameplayStatics_CancelAsyncLoadingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_CancelAsyncLoading_handler(handler: UGameplayStatics_CancelAsyncLoadingInvoker){
        unsafe{ UGameplayStatics_CancelAsyncLoadingInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_ClearSoundMixClassOverrideInvoker = unsafe extern "C" fn(*mut UObjectOpaque, *mut USoundMixOpaque, *mut USoundClassOpaque, f32);
    pub(super) static mut UGameplayStatics_ClearSoundMixClassOverrideInvokerHandler: Option<UGameplayStatics_ClearSoundMixClassOverrideInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_ClearSoundMixClassOverride_handler(handler: UGameplayStatics_ClearSoundMixClassOverrideInvoker){
        unsafe{ UGameplayStatics_ClearSoundMixClassOverrideInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_ClearSoundMixModifiersInvoker = unsafe extern "C" fn(*mut UObjectOpaque);
    pub(super) static mut UGameplayStatics_ClearSoundMixModifiersInvokerHandler: Option<UGameplayStatics_ClearSoundMixModifiersInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_ClearSoundMixModifiers_handler(handler: UGameplayStatics_ClearSoundMixModifiersInvoker){
        unsafe{ UGameplayStatics_ClearSoundMixModifiersInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_CreatePlayerInvoker = unsafe extern "C" fn(*mut UObjectOpaque, i32, bool) -> *mut APlayerControllerOpaque;
    pub(super) static mut UGameplayStatics_CreatePlayerInvokerHandler: Option<UGameplayStatics_CreatePlayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_CreatePlayer_handler(handler: UGameplayStatics_CreatePlayerInvoker){
        unsafe{ UGameplayStatics_CreatePlayerInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_CreateSound2DInvoker = unsafe extern "C" fn(*mut UObjectOpaque, *mut USoundBaseOpaque, f32, f32, f32, *mut USoundConcurrencyOpaque, bool, bool) -> *mut UAudioComponentOpaque;
    pub(super) static mut UGameplayStatics_CreateSound2DInvokerHandler: Option<UGameplayStatics_CreateSound2DInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_CreateSound2D_handler(handler: UGameplayStatics_CreateSound2DInvoker){
        unsafe{ UGameplayStatics_CreateSound2DInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_DeactivateReverbEffectInvoker = unsafe extern "C" fn(*mut UObjectOpaque, UName);
    pub(super) static mut UGameplayStatics_DeactivateReverbEffectInvokerHandler: Option<UGameplayStatics_DeactivateReverbEffectInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_DeactivateReverbEffect_handler(handler: UGameplayStatics_DeactivateReverbEffectInvoker){
        unsafe{ UGameplayStatics_DeactivateReverbEffectInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_EnableLiveStreamingInvoker = unsafe extern "C" fn(bool);
    pub(super) static mut UGameplayStatics_EnableLiveStreamingInvokerHandler: Option<UGameplayStatics_EnableLiveStreamingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_EnableLiveStreaming_handler(handler: UGameplayStatics_EnableLiveStreamingInvoker){
        unsafe{ UGameplayStatics_EnableLiveStreamingInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_FlushLevelStreamingInvoker = unsafe extern "C" fn(*mut UObjectOpaque);
    pub(super) static mut UGameplayStatics_FlushLevelStreamingInvokerHandler: Option<UGameplayStatics_FlushLevelStreamingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_FlushLevelStreaming_handler(handler: UGameplayStatics_FlushLevelStreamingInvoker){
        unsafe{ UGameplayStatics_FlushLevelStreamingInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetAccurateRealTimeInvoker = unsafe extern "C" fn(&mut i32, &mut f64);
    pub(super) static mut UGameplayStatics_GetAccurateRealTimeInvokerHandler: Option<UGameplayStatics_GetAccurateRealTimeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetAccurateRealTime_handler(handler: UGameplayStatics_GetAccurateRealTimeInvoker){
        unsafe{ UGameplayStatics_GetAccurateRealTimeInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetActiveSpatialPluginNameInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> UName;
    pub(super) static mut UGameplayStatics_GetActiveSpatialPluginNameInvokerHandler: Option<UGameplayStatics_GetActiveSpatialPluginNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetActiveSpatialPluginName_handler(handler: UGameplayStatics_GetActiveSpatialPluginNameInvoker){
        unsafe{ UGameplayStatics_GetActiveSpatialPluginNameInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetAudioTimeSecondsInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> f64;
    pub(super) static mut UGameplayStatics_GetAudioTimeSecondsInvokerHandler: Option<UGameplayStatics_GetAudioTimeSecondsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetAudioTimeSeconds_handler(handler: UGameplayStatics_GetAudioTimeSecondsInvoker){
        unsafe{ UGameplayStatics_GetAudioTimeSecondsInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetCurrentLevelNameInvoker = unsafe extern "C" fn(*mut UObjectOpaque, bool) -> *const std::os::raw::c_char;
    pub(super) static mut UGameplayStatics_GetCurrentLevelNameInvokerHandler: Option<UGameplayStatics_GetCurrentLevelNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetCurrentLevelName_handler(handler: UGameplayStatics_GetCurrentLevelNameInvoker){
        unsafe{ UGameplayStatics_GetCurrentLevelNameInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetCurrentReverbEffectInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> *mut UReverbEffectOpaque;
    pub(super) static mut UGameplayStatics_GetCurrentReverbEffectInvokerHandler: Option<UGameplayStatics_GetCurrentReverbEffectInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetCurrentReverbEffect_handler(handler: UGameplayStatics_GetCurrentReverbEffectInvoker){
        unsafe{ UGameplayStatics_GetCurrentReverbEffectInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetEnableWorldRenderingInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> bool;
    pub(super) static mut UGameplayStatics_GetEnableWorldRenderingInvokerHandler: Option<UGameplayStatics_GetEnableWorldRenderingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetEnableWorldRendering_handler(handler: UGameplayStatics_GetEnableWorldRenderingInvoker){
        unsafe{ UGameplayStatics_GetEnableWorldRenderingInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetGameInstanceInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> *mut UGameInstanceOpaque;
    pub(super) static mut UGameplayStatics_GetGameInstanceInvokerHandler: Option<UGameplayStatics_GetGameInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetGameInstance_handler(handler: UGameplayStatics_GetGameInstanceInvoker){
        unsafe{ UGameplayStatics_GetGameInstanceInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetGameModeInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> *mut AGameModeBaseOpaque;
    pub(super) static mut UGameplayStatics_GetGameModeInvokerHandler: Option<UGameplayStatics_GetGameModeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetGameMode_handler(handler: UGameplayStatics_GetGameModeInvoker){
        unsafe{ UGameplayStatics_GetGameModeInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetGameStateInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> *mut AGameStateBaseOpaque;
    pub(super) static mut UGameplayStatics_GetGameStateInvokerHandler: Option<UGameplayStatics_GetGameStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetGameState_handler(handler: UGameplayStatics_GetGameStateInvoker){
        unsafe{ UGameplayStatics_GetGameStateInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetGlobalTimeDilationInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> f32;
    pub(super) static mut UGameplayStatics_GetGlobalTimeDilationInvokerHandler: Option<UGameplayStatics_GetGlobalTimeDilationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetGlobalTimeDilation_handler(handler: UGameplayStatics_GetGlobalTimeDilationInvoker){
        unsafe{ UGameplayStatics_GetGlobalTimeDilationInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetMaxAudioChannelCountInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> i32;
    pub(super) static mut UGameplayStatics_GetMaxAudioChannelCountInvokerHandler: Option<UGameplayStatics_GetMaxAudioChannelCountInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetMaxAudioChannelCount_handler(handler: UGameplayStatics_GetMaxAudioChannelCountInvoker){
        unsafe{ UGameplayStatics_GetMaxAudioChannelCountInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetNumLocalPlayerControllersInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> i32;
    pub(super) static mut UGameplayStatics_GetNumLocalPlayerControllersInvokerHandler: Option<UGameplayStatics_GetNumLocalPlayerControllersInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetNumLocalPlayerControllers_handler(handler: UGameplayStatics_GetNumLocalPlayerControllersInvoker){
        unsafe{ UGameplayStatics_GetNumLocalPlayerControllersInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetNumPlayerControllersInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> i32;
    pub(super) static mut UGameplayStatics_GetNumPlayerControllersInvokerHandler: Option<UGameplayStatics_GetNumPlayerControllersInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetNumPlayerControllers_handler(handler: UGameplayStatics_GetNumPlayerControllersInvoker){
        unsafe{ UGameplayStatics_GetNumPlayerControllersInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetNumPlayerStatesInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> i32;
    pub(super) static mut UGameplayStatics_GetNumPlayerStatesInvokerHandler: Option<UGameplayStatics_GetNumPlayerStatesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetNumPlayerStates_handler(handler: UGameplayStatics_GetNumPlayerStatesInvoker){
        unsafe{ UGameplayStatics_GetNumPlayerStatesInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetObjectClassInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> *mut UClassOpaque;
    pub(super) static mut UGameplayStatics_GetObjectClassInvokerHandler: Option<UGameplayStatics_GetObjectClassInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetObjectClass_handler(handler: UGameplayStatics_GetObjectClassInvoker){
        unsafe{ UGameplayStatics_GetObjectClassInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetPlatformNameInvoker = unsafe extern "C" fn() -> *const std::os::raw::c_char;
    pub(super) static mut UGameplayStatics_GetPlatformNameInvokerHandler: Option<UGameplayStatics_GetPlatformNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetPlatformName_handler(handler: UGameplayStatics_GetPlatformNameInvoker){
        unsafe{ UGameplayStatics_GetPlatformNameInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetPlayerCameraManagerInvoker = unsafe extern "C" fn(*mut UObjectOpaque, i32) -> *mut APlayerCameraManagerOpaque;
    pub(super) static mut UGameplayStatics_GetPlayerCameraManagerInvokerHandler: Option<UGameplayStatics_GetPlayerCameraManagerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetPlayerCameraManager_handler(handler: UGameplayStatics_GetPlayerCameraManagerInvoker){
        unsafe{ UGameplayStatics_GetPlayerCameraManagerInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetPlayerCharacterInvoker = unsafe extern "C" fn(*mut UObjectOpaque, i32) -> *mut ACharacterOpaque;
    pub(super) static mut UGameplayStatics_GetPlayerCharacterInvokerHandler: Option<UGameplayStatics_GetPlayerCharacterInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetPlayerCharacter_handler(handler: UGameplayStatics_GetPlayerCharacterInvoker){
        unsafe{ UGameplayStatics_GetPlayerCharacterInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetPlayerControllerInvoker = unsafe extern "C" fn(*mut UObjectOpaque, i32) -> *mut APlayerControllerOpaque;
    pub(super) static mut UGameplayStatics_GetPlayerControllerInvokerHandler: Option<UGameplayStatics_GetPlayerControllerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetPlayerController_handler(handler: UGameplayStatics_GetPlayerControllerInvoker){
        unsafe{ UGameplayStatics_GetPlayerControllerInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetPlayerControllerFromIDInvoker = unsafe extern "C" fn(*mut UObjectOpaque, i32) -> *mut APlayerControllerOpaque;
    pub(super) static mut UGameplayStatics_GetPlayerControllerFromIDInvokerHandler: Option<UGameplayStatics_GetPlayerControllerFromIDInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetPlayerControllerFromID_handler(handler: UGameplayStatics_GetPlayerControllerFromIDInvoker){
        unsafe{ UGameplayStatics_GetPlayerControllerFromIDInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetPlayerControllerIDInvoker = unsafe extern "C" fn(*mut APlayerControllerOpaque) -> i32;
    pub(super) static mut UGameplayStatics_GetPlayerControllerIDInvokerHandler: Option<UGameplayStatics_GetPlayerControllerIDInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetPlayerControllerID_handler(handler: UGameplayStatics_GetPlayerControllerIDInvoker){
        unsafe{ UGameplayStatics_GetPlayerControllerIDInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetPlayerPawnInvoker = unsafe extern "C" fn(*mut UObjectOpaque, i32) -> *mut APawnOpaque;
    pub(super) static mut UGameplayStatics_GetPlayerPawnInvokerHandler: Option<UGameplayStatics_GetPlayerPawnInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetPlayerPawn_handler(handler: UGameplayStatics_GetPlayerPawnInvoker){
        unsafe{ UGameplayStatics_GetPlayerPawnInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetPlayerStateInvoker = unsafe extern "C" fn(*mut UObjectOpaque, i32) -> *mut APlayerStateOpaque;
    pub(super) static mut UGameplayStatics_GetPlayerStateInvokerHandler: Option<UGameplayStatics_GetPlayerStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetPlayerState_handler(handler: UGameplayStatics_GetPlayerStateInvoker){
        unsafe{ UGameplayStatics_GetPlayerStateInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetRealTimeSecondsInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> f64;
    pub(super) static mut UGameplayStatics_GetRealTimeSecondsInvokerHandler: Option<UGameplayStatics_GetRealTimeSecondsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetRealTimeSeconds_handler(handler: UGameplayStatics_GetRealTimeSecondsInvoker){
        unsafe{ UGameplayStatics_GetRealTimeSecondsInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetStreamingLevelInvoker = unsafe extern "C" fn(*mut UObjectOpaque, UName) -> *mut ULevelStreamingOpaque;
    pub(super) static mut UGameplayStatics_GetStreamingLevelInvokerHandler: Option<UGameplayStatics_GetStreamingLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetStreamingLevel_handler(handler: UGameplayStatics_GetStreamingLevelInvoker){
        unsafe{ UGameplayStatics_GetStreamingLevelInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetTimeSecondsInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> f64;
    pub(super) static mut UGameplayStatics_GetTimeSecondsInvokerHandler: Option<UGameplayStatics_GetTimeSecondsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetTimeSeconds_handler(handler: UGameplayStatics_GetTimeSecondsInvoker){
        unsafe{ UGameplayStatics_GetTimeSecondsInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetUnpausedTimeSecondsInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> f64;
    pub(super) static mut UGameplayStatics_GetUnpausedTimeSecondsInvokerHandler: Option<UGameplayStatics_GetUnpausedTimeSecondsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetUnpausedTimeSeconds_handler(handler: UGameplayStatics_GetUnpausedTimeSecondsInvoker){
        unsafe{ UGameplayStatics_GetUnpausedTimeSecondsInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GetWorldDeltaSecondsInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> f64;
    pub(super) static mut UGameplayStatics_GetWorldDeltaSecondsInvokerHandler: Option<UGameplayStatics_GetWorldDeltaSecondsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GetWorldDeltaSeconds_handler(handler: UGameplayStatics_GetWorldDeltaSecondsInvoker){
        unsafe{ UGameplayStatics_GetWorldDeltaSecondsInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_GrassOverlappingSphereCountInvoker = unsafe extern "C" fn(*mut UObjectOpaque, *mut UStaticMeshOpaque, Vector3, f32) -> i32;
    pub(super) static mut UGameplayStatics_GrassOverlappingSphereCountInvokerHandler: Option<UGameplayStatics_GrassOverlappingSphereCountInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_GrassOverlappingSphereCount_handler(handler: UGameplayStatics_GrassOverlappingSphereCountInvoker){
        unsafe{ UGameplayStatics_GrassOverlappingSphereCountInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_IsGamePausedInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> bool;
    pub(super) static mut UGameplayStatics_IsGamePausedInvokerHandler: Option<UGameplayStatics_IsGamePausedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_IsGamePaused_handler(handler: UGameplayStatics_IsGamePausedInvoker){
        unsafe{ UGameplayStatics_IsGamePausedInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_IsSplitscreenForceDisabledInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> bool;
    pub(super) static mut UGameplayStatics_IsSplitscreenForceDisabledInvokerHandler: Option<UGameplayStatics_IsSplitscreenForceDisabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_IsSplitscreenForceDisabled_handler(handler: UGameplayStatics_IsSplitscreenForceDisabledInvoker){
        unsafe{ UGameplayStatics_IsSplitscreenForceDisabledInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_OpenLevelInvoker = unsafe extern "C" fn(*mut UObjectOpaque, UName, bool, NativeString);
    pub(super) static mut UGameplayStatics_OpenLevelInvokerHandler: Option<UGameplayStatics_OpenLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_OpenLevel_handler(handler: UGameplayStatics_OpenLevelInvoker){
        unsafe{ UGameplayStatics_OpenLevelInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_PlaySound2DInvoker = unsafe extern "C" fn(*mut UObjectOpaque, *mut USoundBaseOpaque, f32, f32, f32, *mut USoundConcurrencyOpaque, *mut AActorOpaque, bool);
    pub(super) static mut UGameplayStatics_PlaySound2DInvokerHandler: Option<UGameplayStatics_PlaySound2DInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_PlaySound2D_handler(handler: UGameplayStatics_PlaySound2DInvoker){
        unsafe{ UGameplayStatics_PlaySound2DInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_PlaySoundAtLocationInvoker = unsafe extern "C" fn(*mut UObjectOpaque, *mut USoundBaseOpaque, Vector3, Rotator, f32, f32, f32, *mut USoundAttenuationOpaque, *mut USoundConcurrencyOpaque, *mut AActorOpaque, *mut UInitialActiveSoundParamsOpaque);
    pub(super) static mut UGameplayStatics_PlaySoundAtLocationInvokerHandler: Option<UGameplayStatics_PlaySoundAtLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_PlaySoundAtLocation_handler(handler: UGameplayStatics_PlaySoundAtLocationInvoker){
        unsafe{ UGameplayStatics_PlaySoundAtLocationInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_PlaySoundAtLocation2Invoker = unsafe extern "C" fn(*mut UObjectOpaque, *mut USoundBaseOpaque, Vector3, f32, f32, f32, *mut USoundAttenuationOpaque, *mut USoundConcurrencyOpaque, *mut UInitialActiveSoundParamsOpaque);
    pub(super) static mut UGameplayStatics_PlaySoundAtLocation2InvokerHandler: Option<UGameplayStatics_PlaySoundAtLocation2Invoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_PlaySoundAtLocation2_handler(handler: UGameplayStatics_PlaySoundAtLocation2Invoker){
        unsafe{ UGameplayStatics_PlaySoundAtLocation2InvokerHandler = Some(handler) };
    }

    type UGameplayStatics_PopSoundMixModifierInvoker = unsafe extern "C" fn(*mut UObjectOpaque, *mut USoundMixOpaque);
    pub(super) static mut UGameplayStatics_PopSoundMixModifierInvokerHandler: Option<UGameplayStatics_PopSoundMixModifierInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_PopSoundMixModifier_handler(handler: UGameplayStatics_PopSoundMixModifierInvoker){
        unsafe{ UGameplayStatics_PopSoundMixModifierInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_PrimeAllSoundsInSoundClassInvoker = unsafe extern "C" fn(*mut USoundClassOpaque);
    pub(super) static mut UGameplayStatics_PrimeAllSoundsInSoundClassInvokerHandler: Option<UGameplayStatics_PrimeAllSoundsInSoundClassInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_PrimeAllSoundsInSoundClass_handler(handler: UGameplayStatics_PrimeAllSoundsInSoundClassInvoker){
        unsafe{ UGameplayStatics_PrimeAllSoundsInSoundClassInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_PrimeSoundInvoker = unsafe extern "C" fn(*mut USoundBaseOpaque);
    pub(super) static mut UGameplayStatics_PrimeSoundInvokerHandler: Option<UGameplayStatics_PrimeSoundInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_PrimeSound_handler(handler: UGameplayStatics_PrimeSoundInvoker){
        unsafe{ UGameplayStatics_PrimeSoundInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_PushSoundMixModifierInvoker = unsafe extern "C" fn(*mut UObjectOpaque, *mut USoundMixOpaque);
    pub(super) static mut UGameplayStatics_PushSoundMixModifierInvokerHandler: Option<UGameplayStatics_PushSoundMixModifierInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_PushSoundMixModifier_handler(handler: UGameplayStatics_PushSoundMixModifierInvoker){
        unsafe{ UGameplayStatics_PushSoundMixModifierInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_RebaseLocalOriginOntoZeroInvoker = unsafe extern "C" fn(*mut UObjectOpaque, Vector3) -> Vector3;
    pub(super) static mut UGameplayStatics_RebaseLocalOriginOntoZeroInvokerHandler: Option<UGameplayStatics_RebaseLocalOriginOntoZeroInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_RebaseLocalOriginOntoZero_handler(handler: UGameplayStatics_RebaseLocalOriginOntoZeroInvoker){
        unsafe{ UGameplayStatics_RebaseLocalOriginOntoZeroInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_RebaseZeroOriginOntoLocalInvoker = unsafe extern "C" fn(*mut UObjectOpaque, Vector3) -> Vector3;
    pub(super) static mut UGameplayStatics_RebaseZeroOriginOntoLocalInvokerHandler: Option<UGameplayStatics_RebaseZeroOriginOntoLocalInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_RebaseZeroOriginOntoLocal_handler(handler: UGameplayStatics_RebaseZeroOriginOntoLocalInvoker){
        unsafe{ UGameplayStatics_RebaseZeroOriginOntoLocalInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_RemovePlayerInvoker = unsafe extern "C" fn(*mut APlayerControllerOpaque, bool);
    pub(super) static mut UGameplayStatics_RemovePlayerInvokerHandler: Option<UGameplayStatics_RemovePlayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_RemovePlayer_handler(handler: UGameplayStatics_RemovePlayerInvoker){
        unsafe{ UGameplayStatics_RemovePlayerInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_SetActiveSpatialPluginByNameInvoker = unsafe extern "C" fn(*mut UObjectOpaque, UName) -> bool;
    pub(super) static mut UGameplayStatics_SetActiveSpatialPluginByNameInvokerHandler: Option<UGameplayStatics_SetActiveSpatialPluginByNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_SetActiveSpatialPluginByName_handler(handler: UGameplayStatics_SetActiveSpatialPluginByNameInvoker){
        unsafe{ UGameplayStatics_SetActiveSpatialPluginByNameInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_SetBaseSoundMixInvoker = unsafe extern "C" fn(*mut UObjectOpaque, *mut USoundMixOpaque);
    pub(super) static mut UGameplayStatics_SetBaseSoundMixInvokerHandler: Option<UGameplayStatics_SetBaseSoundMixInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_SetBaseSoundMix_handler(handler: UGameplayStatics_SetBaseSoundMixInvoker){
        unsafe{ UGameplayStatics_SetBaseSoundMixInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_SetEnableWorldRenderingInvoker = unsafe extern "C" fn(*mut UObjectOpaque, bool);
    pub(super) static mut UGameplayStatics_SetEnableWorldRenderingInvokerHandler: Option<UGameplayStatics_SetEnableWorldRenderingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_SetEnableWorldRendering_handler(handler: UGameplayStatics_SetEnableWorldRenderingInvoker){
        unsafe{ UGameplayStatics_SetEnableWorldRenderingInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_SetForceDisableSplitscreenInvoker = unsafe extern "C" fn(*mut UObjectOpaque, bool);
    pub(super) static mut UGameplayStatics_SetForceDisableSplitscreenInvokerHandler: Option<UGameplayStatics_SetForceDisableSplitscreenInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_SetForceDisableSplitscreen_handler(handler: UGameplayStatics_SetForceDisableSplitscreenInvoker){
        unsafe{ UGameplayStatics_SetForceDisableSplitscreenInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_SetGamePausedInvoker = unsafe extern "C" fn(*mut UObjectOpaque, bool) -> bool;
    pub(super) static mut UGameplayStatics_SetGamePausedInvokerHandler: Option<UGameplayStatics_SetGamePausedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_SetGamePaused_handler(handler: UGameplayStatics_SetGamePausedInvoker){
        unsafe{ UGameplayStatics_SetGamePausedInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_SetGlobalListenerFocusParametersInvoker = unsafe extern "C" fn(*mut UObjectOpaque, f32, f32, f32, f32, f32, f32, f32, f32);
    pub(super) static mut UGameplayStatics_SetGlobalListenerFocusParametersInvokerHandler: Option<UGameplayStatics_SetGlobalListenerFocusParametersInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_SetGlobalListenerFocusParameters_handler(handler: UGameplayStatics_SetGlobalListenerFocusParametersInvoker){
        unsafe{ UGameplayStatics_SetGlobalListenerFocusParametersInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_SetGlobalPitchModulationInvoker = unsafe extern "C" fn(*mut UObjectOpaque, f32, f32);
    pub(super) static mut UGameplayStatics_SetGlobalPitchModulationInvokerHandler: Option<UGameplayStatics_SetGlobalPitchModulationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_SetGlobalPitchModulation_handler(handler: UGameplayStatics_SetGlobalPitchModulationInvoker){
        unsafe{ UGameplayStatics_SetGlobalPitchModulationInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_SetGlobalTimeDilationInvoker = unsafe extern "C" fn(*mut UObjectOpaque, f32);
    pub(super) static mut UGameplayStatics_SetGlobalTimeDilationInvokerHandler: Option<UGameplayStatics_SetGlobalTimeDilationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_SetGlobalTimeDilation_handler(handler: UGameplayStatics_SetGlobalTimeDilationInvoker){
        unsafe{ UGameplayStatics_SetGlobalTimeDilationInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_SetMaxAudioChannelsScaledInvoker = unsafe extern "C" fn(*mut UObjectOpaque, f32);
    pub(super) static mut UGameplayStatics_SetMaxAudioChannelsScaledInvokerHandler: Option<UGameplayStatics_SetMaxAudioChannelsScaledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_SetMaxAudioChannelsScaled_handler(handler: UGameplayStatics_SetMaxAudioChannelsScaledInvoker){
        unsafe{ UGameplayStatics_SetMaxAudioChannelsScaledInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_SetPlayerControllerIDInvoker = unsafe extern "C" fn(*mut APlayerControllerOpaque, i32);
    pub(super) static mut UGameplayStatics_SetPlayerControllerIDInvokerHandler: Option<UGameplayStatics_SetPlayerControllerIDInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_SetPlayerControllerID_handler(handler: UGameplayStatics_SetPlayerControllerIDInvoker){
        unsafe{ UGameplayStatics_SetPlayerControllerIDInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_SetSoundClassDistanceScaleInvoker = unsafe extern "C" fn(*mut UObjectOpaque, *mut USoundClassOpaque, f32, f32);
    pub(super) static mut UGameplayStatics_SetSoundClassDistanceScaleInvokerHandler: Option<UGameplayStatics_SetSoundClassDistanceScaleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_SetSoundClassDistanceScale_handler(handler: UGameplayStatics_SetSoundClassDistanceScaleInvoker){
        unsafe{ UGameplayStatics_SetSoundClassDistanceScaleInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_SetSoundMixClassOverrideInvoker = unsafe extern "C" fn(*mut UObjectOpaque, *mut USoundMixOpaque, *mut USoundClassOpaque, f32, f32, f32, bool);
    pub(super) static mut UGameplayStatics_SetSoundMixClassOverrideInvokerHandler: Option<UGameplayStatics_SetSoundMixClassOverrideInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_SetSoundMixClassOverride_handler(handler: UGameplayStatics_SetSoundMixClassOverrideInvoker){
        unsafe{ UGameplayStatics_SetSoundMixClassOverrideInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_SetSubtitlesEnabledInvoker = unsafe extern "C" fn(bool);
    pub(super) static mut UGameplayStatics_SetSubtitlesEnabledInvokerHandler: Option<UGameplayStatics_SetSubtitlesEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_SetSubtitlesEnabled_handler(handler: UGameplayStatics_SetSubtitlesEnabledInvoker){
        unsafe{ UGameplayStatics_SetSubtitlesEnabledInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_SpawnDecalAtLocationInvoker = unsafe extern "C" fn(*mut UObjectOpaque, *mut UMaterialInterfaceOpaque, Vector3, Vector3, Rotator, f32) -> *mut UDecalComponentOpaque;
    pub(super) static mut UGameplayStatics_SpawnDecalAtLocationInvokerHandler: Option<UGameplayStatics_SpawnDecalAtLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_SpawnDecalAtLocation_handler(handler: UGameplayStatics_SpawnDecalAtLocationInvoker){
        unsafe{ UGameplayStatics_SpawnDecalAtLocationInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_SpawnForceFeedbackAtLocationInvoker = unsafe extern "C" fn(*mut UObjectOpaque, *mut UForceFeedbackEffectOpaque, Vector3, Rotator, bool, f32, f32, *mut UForceFeedbackAttenuationOpaque, bool) -> *mut UForceFeedbackComponentOpaque;
    pub(super) static mut UGameplayStatics_SpawnForceFeedbackAtLocationInvokerHandler: Option<UGameplayStatics_SpawnForceFeedbackAtLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_SpawnForceFeedbackAtLocation_handler(handler: UGameplayStatics_SpawnForceFeedbackAtLocationInvoker){
        unsafe{ UGameplayStatics_SpawnForceFeedbackAtLocationInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_SpawnSound2DInvoker = unsafe extern "C" fn(*mut UObjectOpaque, *mut USoundBaseOpaque, f32, f32, f32, *mut USoundConcurrencyOpaque, bool, bool) -> *mut UAudioComponentOpaque;
    pub(super) static mut UGameplayStatics_SpawnSound2DInvokerHandler: Option<UGameplayStatics_SpawnSound2DInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_SpawnSound2D_handler(handler: UGameplayStatics_SpawnSound2DInvoker){
        unsafe{ UGameplayStatics_SpawnSound2DInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_SpawnSoundAtLocationInvoker = unsafe extern "C" fn(*mut UObjectOpaque, *mut USoundBaseOpaque, Vector3, Rotator, f32, f32, f32, *mut USoundAttenuationOpaque, *mut USoundConcurrencyOpaque, bool) -> *mut UAudioComponentOpaque;
    pub(super) static mut UGameplayStatics_SpawnSoundAtLocationInvokerHandler: Option<UGameplayStatics_SpawnSoundAtLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_SpawnSoundAtLocation_handler(handler: UGameplayStatics_SpawnSoundAtLocationInvoker){
        unsafe{ UGameplayStatics_SpawnSoundAtLocationInvokerHandler = Some(handler) };
    }

    type UGameplayStatics_UnRetainAllSoundsInSoundClassInvoker = unsafe extern "C" fn(*mut USoundClassOpaque);
    pub(super) static mut UGameplayStatics_UnRetainAllSoundsInSoundClassInvokerHandler: Option<UGameplayStatics_UnRetainAllSoundsInSoundClassInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UGameplayStatics_UnRetainAllSoundsInSoundClass_handler(handler: UGameplayStatics_UnRetainAllSoundsInSoundClassInvoker){
        unsafe{ UGameplayStatics_UnRetainAllSoundsInSoundClassInvokerHandler = Some(handler) };
    }

    type ACharacter_BeginPlayInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_BeginPlayInvokerHandler: Option<ACharacter_BeginPlayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_BeginPlay_handler(handler: ACharacter_BeginPlayInvoker){
        unsafe{ ACharacter_BeginPlayInvokerHandler = Some(handler) };
    }

    type ACharacter_CacheInitialMeshOffsetInvoker = unsafe extern "C" fn(*mut c_void, Vector3, Rotator);
    pub(super) static mut ACharacter_CacheInitialMeshOffsetInvokerHandler: Option<ACharacter_CacheInitialMeshOffsetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_CacheInitialMeshOffset_handler(handler: ACharacter_CacheInitialMeshOffsetInvoker){
        unsafe{ ACharacter_CacheInitialMeshOffsetInvokerHandler = Some(handler) };
    }

    type ACharacter_CanCrouchInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut ACharacter_CanCrouchInvokerHandler: Option<ACharacter_CanCrouchInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_CanCrouch_handler(handler: ACharacter_CanCrouchInvoker){
        unsafe{ ACharacter_CanCrouchInvokerHandler = Some(handler) };
    }

    type ACharacter_CanJumpInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut ACharacter_CanJumpInvokerHandler: Option<ACharacter_CanJumpInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_CanJump_handler(handler: ACharacter_CanJumpInvoker){
        unsafe{ ACharacter_CanJumpInvokerHandler = Some(handler) };
    }

    type ACharacter_CheckJumpInputInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut ACharacter_CheckJumpInputInvokerHandler: Option<ACharacter_CheckJumpInputInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_CheckJumpInput_handler(handler: ACharacter_CheckJumpInputInvoker){
        unsafe{ ACharacter_CheckJumpInputInvokerHandler = Some(handler) };
    }

    type ACharacter_ClearCrossLevelReferencesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_ClearCrossLevelReferencesInvokerHandler: Option<ACharacter_ClearCrossLevelReferencesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_ClearCrossLevelReferences_handler(handler: ACharacter_ClearCrossLevelReferencesInvoker){
        unsafe{ ACharacter_ClearCrossLevelReferencesInvokerHandler = Some(handler) };
    }

    type ACharacter_ClearJumpInputInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut ACharacter_ClearJumpInputInvokerHandler: Option<ACharacter_ClearJumpInputInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_ClearJumpInput_handler(handler: ACharacter_ClearJumpInputInvoker){
        unsafe{ ACharacter_ClearJumpInputInvokerHandler = Some(handler) };
    }

    type ACharacter_ClientAckGoodMoveInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut ACharacter_ClientAckGoodMoveInvokerHandler: Option<ACharacter_ClientAckGoodMoveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_ClientAckGoodMove_handler(handler: ACharacter_ClientAckGoodMoveInvoker){
        unsafe{ ACharacter_ClientAckGoodMoveInvokerHandler = Some(handler) };
    }

    type ACharacter_ClientAckGoodMove_ImplementationInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut ACharacter_ClientAckGoodMove_ImplementationInvokerHandler: Option<ACharacter_ClientAckGoodMove_ImplementationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_ClientAckGoodMove_Implementation_handler(handler: ACharacter_ClientAckGoodMove_ImplementationInvoker){
        unsafe{ ACharacter_ClientAckGoodMove_ImplementationInvokerHandler = Some(handler) };
    }

    type ACharacter_ClientAdjustPositionInvoker = unsafe extern "C" fn(*mut c_void, f32, Vector3, Vector3, *mut UPrimitiveComponentOpaque, UName, bool, bool, u8);
    pub(super) static mut ACharacter_ClientAdjustPositionInvokerHandler: Option<ACharacter_ClientAdjustPositionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_ClientAdjustPosition_handler(handler: ACharacter_ClientAdjustPositionInvoker){
        unsafe{ ACharacter_ClientAdjustPositionInvokerHandler = Some(handler) };
    }

    type ACharacter_ClientAdjustPosition_ImplementationInvoker = unsafe extern "C" fn(*mut c_void, f32, Vector3, Vector3, *mut UPrimitiveComponentOpaque, UName, bool, bool, u8);
    pub(super) static mut ACharacter_ClientAdjustPosition_ImplementationInvokerHandler: Option<ACharacter_ClientAdjustPosition_ImplementationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_ClientAdjustPosition_Implementation_handler(handler: ACharacter_ClientAdjustPosition_ImplementationInvoker){
        unsafe{ ACharacter_ClientAdjustPosition_ImplementationInvokerHandler = Some(handler) };
    }

    type ACharacter_ClientCheatFlyInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_ClientCheatFlyInvokerHandler: Option<ACharacter_ClientCheatFlyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_ClientCheatFly_handler(handler: ACharacter_ClientCheatFlyInvoker){
        unsafe{ ACharacter_ClientCheatFlyInvokerHandler = Some(handler) };
    }

    type ACharacter_ClientCheatFly_ImplementationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_ClientCheatFly_ImplementationInvokerHandler: Option<ACharacter_ClientCheatFly_ImplementationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_ClientCheatFly_Implementation_handler(handler: ACharacter_ClientCheatFly_ImplementationInvoker){
        unsafe{ ACharacter_ClientCheatFly_ImplementationInvokerHandler = Some(handler) };
    }

    type ACharacter_ClientCheatGhostInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_ClientCheatGhostInvokerHandler: Option<ACharacter_ClientCheatGhostInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_ClientCheatGhost_handler(handler: ACharacter_ClientCheatGhostInvoker){
        unsafe{ ACharacter_ClientCheatGhostInvokerHandler = Some(handler) };
    }

    type ACharacter_ClientCheatGhost_ImplementationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_ClientCheatGhost_ImplementationInvokerHandler: Option<ACharacter_ClientCheatGhost_ImplementationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_ClientCheatGhost_Implementation_handler(handler: ACharacter_ClientCheatGhost_ImplementationInvoker){
        unsafe{ ACharacter_ClientCheatGhost_ImplementationInvokerHandler = Some(handler) };
    }

    type ACharacter_ClientCheatWalkInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_ClientCheatWalkInvokerHandler: Option<ACharacter_ClientCheatWalkInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_ClientCheatWalk_handler(handler: ACharacter_ClientCheatWalkInvoker){
        unsafe{ ACharacter_ClientCheatWalkInvokerHandler = Some(handler) };
    }

    type ACharacter_ClientCheatWalk_ImplementationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_ClientCheatWalk_ImplementationInvokerHandler: Option<ACharacter_ClientCheatWalk_ImplementationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_ClientCheatWalk_Implementation_handler(handler: ACharacter_ClientCheatWalk_ImplementationInvoker){
        unsafe{ ACharacter_ClientCheatWalk_ImplementationInvokerHandler = Some(handler) };
    }

    type ACharacter_ClientVeryShortAdjustPositionInvoker = unsafe extern "C" fn(*mut c_void, f32, Vector3, *mut UPrimitiveComponentOpaque, UName, bool, bool, u8);
    pub(super) static mut ACharacter_ClientVeryShortAdjustPositionInvokerHandler: Option<ACharacter_ClientVeryShortAdjustPositionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_ClientVeryShortAdjustPosition_handler(handler: ACharacter_ClientVeryShortAdjustPositionInvoker){
        unsafe{ ACharacter_ClientVeryShortAdjustPositionInvokerHandler = Some(handler) };
    }

    type ACharacter_ClientVeryShortAdjustPosition_ImplementationInvoker = unsafe extern "C" fn(*mut c_void, f32, Vector3, *mut UPrimitiveComponentOpaque, UName, bool, bool, u8);
    pub(super) static mut ACharacter_ClientVeryShortAdjustPosition_ImplementationInvokerHandler: Option<ACharacter_ClientVeryShortAdjustPosition_ImplementationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_ClientVeryShortAdjustPosition_Implementation_handler(handler: ACharacter_ClientVeryShortAdjustPosition_ImplementationInvoker){
        unsafe{ ACharacter_ClientVeryShortAdjustPosition_ImplementationInvokerHandler = Some(handler) };
    }

    type ACharacter_CrouchInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut ACharacter_CrouchInvokerHandler: Option<ACharacter_CrouchInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_Crouch_handler(handler: ACharacter_CrouchInvoker){
        unsafe{ ACharacter_CrouchInvokerHandler = Some(handler) };
    }

    type ACharacter_FallingInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_FallingInvokerHandler: Option<ACharacter_FallingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_Falling_handler(handler: ACharacter_FallingInvoker){
        unsafe{ ACharacter_FallingInvokerHandler = Some(handler) };
    }

    type ACharacter_GetAnimRootMotionTranslationScaleInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut ACharacter_GetAnimRootMotionTranslationScaleInvokerHandler: Option<ACharacter_GetAnimRootMotionTranslationScaleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_GetAnimRootMotionTranslationScale_handler(handler: ACharacter_GetAnimRootMotionTranslationScaleInvoker){
        unsafe{ ACharacter_GetAnimRootMotionTranslationScaleInvokerHandler = Some(handler) };
    }

    type ACharacter_GetArrowComponentInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UArrowComponentOpaque;
    pub(super) static mut ACharacter_GetArrowComponentInvokerHandler: Option<ACharacter_GetArrowComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_GetArrowComponent_handler(handler: ACharacter_GetArrowComponentInvoker){
        unsafe{ ACharacter_GetArrowComponentInvokerHandler = Some(handler) };
    }

    type ACharacter_GetBaseRotationOffsetInvoker = unsafe extern "C" fn(*mut c_void) -> Quaternion;
    pub(super) static mut ACharacter_GetBaseRotationOffsetInvokerHandler: Option<ACharacter_GetBaseRotationOffsetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_GetBaseRotationOffset_handler(handler: ACharacter_GetBaseRotationOffsetInvoker){
        unsafe{ ACharacter_GetBaseRotationOffsetInvokerHandler = Some(handler) };
    }

    type ACharacter_GetBaseRotationOffsetRotatorInvoker = unsafe extern "C" fn(*mut c_void) -> Rotator;
    pub(super) static mut ACharacter_GetBaseRotationOffsetRotatorInvokerHandler: Option<ACharacter_GetBaseRotationOffsetRotatorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_GetBaseRotationOffsetRotator_handler(handler: ACharacter_GetBaseRotationOffsetRotatorInvoker){
        unsafe{ ACharacter_GetBaseRotationOffsetRotatorInvokerHandler = Some(handler) };
    }

    type ACharacter_GetBaseTranslationOffsetInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut ACharacter_GetBaseTranslationOffsetInvokerHandler: Option<ACharacter_GetBaseTranslationOffsetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_GetBaseTranslationOffset_handler(handler: ACharacter_GetBaseTranslationOffsetInvoker){
        unsafe{ ACharacter_GetBaseTranslationOffsetInvokerHandler = Some(handler) };
    }

    type ACharacter_GetCapsuleComponentInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UCapsuleComponentOpaque;
    pub(super) static mut ACharacter_GetCapsuleComponentInvokerHandler: Option<ACharacter_GetCapsuleComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_GetCapsuleComponent_handler(handler: ACharacter_GetCapsuleComponentInvoker){
        unsafe{ ACharacter_GetCapsuleComponentInvokerHandler = Some(handler) };
    }

    type ACharacter_GetCharacterMovementInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UCharacterMovementComponentOpaque;
    pub(super) static mut ACharacter_GetCharacterMovementInvokerHandler: Option<ACharacter_GetCharacterMovementInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_GetCharacterMovement_handler(handler: ACharacter_GetCharacterMovementInvoker){
        unsafe{ ACharacter_GetCharacterMovementInvokerHandler = Some(handler) };
    }

    type ACharacter_GetCurrentMontageInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UAnimMontageOpaque;
    pub(super) static mut ACharacter_GetCurrentMontageInvokerHandler: Option<ACharacter_GetCurrentMontageInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_GetCurrentMontage_handler(handler: ACharacter_GetCurrentMontageInvoker){
        unsafe{ ACharacter_GetCurrentMontageInvokerHandler = Some(handler) };
    }

    type ACharacter_GetDefaultHalfHeightInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut ACharacter_GetDefaultHalfHeightInvokerHandler: Option<ACharacter_GetDefaultHalfHeightInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_GetDefaultHalfHeight_handler(handler: ACharacter_GetDefaultHalfHeightInvoker){
        unsafe{ ACharacter_GetDefaultHalfHeightInvokerHandler = Some(handler) };
    }

    type ACharacter_GetJumpMaxHoldTimeInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut ACharacter_GetJumpMaxHoldTimeInvokerHandler: Option<ACharacter_GetJumpMaxHoldTimeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_GetJumpMaxHoldTime_handler(handler: ACharacter_GetJumpMaxHoldTimeInvoker){
        unsafe{ ACharacter_GetJumpMaxHoldTimeInvokerHandler = Some(handler) };
    }

    type ACharacter_GetMeshInvoker = unsafe extern "C" fn(*mut c_void) -> *mut USkeletalMeshComponentOpaque;
    pub(super) static mut ACharacter_GetMeshInvokerHandler: Option<ACharacter_GetMeshInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_GetMesh_handler(handler: ACharacter_GetMeshInvoker){
        unsafe{ ACharacter_GetMeshInvokerHandler = Some(handler) };
    }

    type ACharacter_GetMovementBaseInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UPrimitiveComponentOpaque;
    pub(super) static mut ACharacter_GetMovementBaseInvokerHandler: Option<ACharacter_GetMovementBaseInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_GetMovementBase_handler(handler: ACharacter_GetMovementBaseInvoker){
        unsafe{ ACharacter_GetMovementBaseInvokerHandler = Some(handler) };
    }

    type ACharacter_GetMovementComponentInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UPawnMovementComponentOpaque;
    pub(super) static mut ACharacter_GetMovementComponentInvokerHandler: Option<ACharacter_GetMovementComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_GetMovementComponent_handler(handler: ACharacter_GetMovementComponentInvoker){
        unsafe{ ACharacter_GetMovementComponentInvokerHandler = Some(handler) };
    }

    type ACharacter_GetNavAgentLocationInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut ACharacter_GetNavAgentLocationInvokerHandler: Option<ACharacter_GetNavAgentLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_GetNavAgentLocation_handler(handler: ACharacter_GetNavAgentLocationInvoker){
        unsafe{ ACharacter_GetNavAgentLocationInvokerHandler = Some(handler) };
    }

    type ACharacter_GetReplicatedMovementModeInvoker = unsafe extern "C" fn(*mut c_void) -> u8;
    pub(super) static mut ACharacter_GetReplicatedMovementModeInvokerHandler: Option<ACharacter_GetReplicatedMovementModeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_GetReplicatedMovementMode_handler(handler: ACharacter_GetReplicatedMovementModeInvoker){
        unsafe{ ACharacter_GetReplicatedMovementModeInvokerHandler = Some(handler) };
    }

    type ACharacter_GetReplicatedServerLastTransformUpdateTimeStampInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut ACharacter_GetReplicatedServerLastTransformUpdateTimeStampInvokerHandler: Option<ACharacter_GetReplicatedServerLastTransformUpdateTimeStampInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_GetReplicatedServerLastTransformUpdateTimeStamp_handler(handler: ACharacter_GetReplicatedServerLastTransformUpdateTimeStampInvoker){
        unsafe{ ACharacter_GetReplicatedServerLastTransformUpdateTimeStampInvokerHandler = Some(handler) };
    }

    type ACharacter_GetRootMotionAnimMontageInstanceInvoker = unsafe extern "C" fn(*mut c_void) -> *mut FAnimMontageInstanceOpaque;
    pub(super) static mut ACharacter_GetRootMotionAnimMontageInstanceInvokerHandler: Option<ACharacter_GetRootMotionAnimMontageInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_GetRootMotionAnimMontageInstance_handler(handler: ACharacter_GetRootMotionAnimMontageInstanceInvoker){
        unsafe{ ACharacter_GetRootMotionAnimMontageInstanceInvokerHandler = Some(handler) };
    }

    type ACharacter_GetSimpleCollisionCylinderInvoker = unsafe extern "C" fn(*mut c_void, &mut f32, &mut f32);
    pub(super) static mut ACharacter_GetSimpleCollisionCylinderInvokerHandler: Option<ACharacter_GetSimpleCollisionCylinderInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_GetSimpleCollisionCylinder_handler(handler: ACharacter_GetSimpleCollisionCylinderInvoker){
        unsafe{ ACharacter_GetSimpleCollisionCylinderInvokerHandler = Some(handler) };
    }

    type ACharacter_HasAnyRootMotionInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut ACharacter_HasAnyRootMotionInvokerHandler: Option<ACharacter_HasAnyRootMotionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_HasAnyRootMotion_handler(handler: ACharacter_HasAnyRootMotionInvoker){
        unsafe{ ACharacter_HasAnyRootMotionInvokerHandler = Some(handler) };
    }

    type ACharacter_IsJumpProvidingForceInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut ACharacter_IsJumpProvidingForceInvokerHandler: Option<ACharacter_IsJumpProvidingForceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_IsJumpProvidingForce_handler(handler: ACharacter_IsJumpProvidingForceInvoker){
        unsafe{ ACharacter_IsJumpProvidingForceInvokerHandler = Some(handler) };
    }

    type ACharacter_IsPlayingNetworkedRootMotionMontageInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut ACharacter_IsPlayingNetworkedRootMotionMontageInvokerHandler: Option<ACharacter_IsPlayingNetworkedRootMotionMontageInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_IsPlayingNetworkedRootMotionMontage_handler(handler: ACharacter_IsPlayingNetworkedRootMotionMontageInvoker){
        unsafe{ ACharacter_IsPlayingNetworkedRootMotionMontageInvokerHandler = Some(handler) };
    }

    type ACharacter_IsPlayingRootMotionInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut ACharacter_IsPlayingRootMotionInvokerHandler: Option<ACharacter_IsPlayingRootMotionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_IsPlayingRootMotion_handler(handler: ACharacter_IsPlayingRootMotionInvoker){
        unsafe{ ACharacter_IsPlayingRootMotionInvokerHandler = Some(handler) };
    }

    type ACharacter_JumpInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_JumpInvokerHandler: Option<ACharacter_JumpInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_Jump_handler(handler: ACharacter_JumpInvoker){
        unsafe{ ACharacter_JumpInvokerHandler = Some(handler) };
    }

    type ACharacter_K2_OnEndCrouchInvoker = unsafe extern "C" fn(*mut c_void, f32, f32);
    pub(super) static mut ACharacter_K2_OnEndCrouchInvokerHandler: Option<ACharacter_K2_OnEndCrouchInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_K2_OnEndCrouch_handler(handler: ACharacter_K2_OnEndCrouchInvoker){
        unsafe{ ACharacter_K2_OnEndCrouchInvokerHandler = Some(handler) };
    }

    type ACharacter_K2_OnStartCrouchInvoker = unsafe extern "C" fn(*mut c_void, f32, f32);
    pub(super) static mut ACharacter_K2_OnStartCrouchInvokerHandler: Option<ACharacter_K2_OnStartCrouchInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_K2_OnStartCrouch_handler(handler: ACharacter_K2_OnStartCrouchInvoker){
        unsafe{ ACharacter_K2_OnStartCrouchInvokerHandler = Some(handler) };
    }

    type ACharacter_K2_UpdateCustomMovementInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut ACharacter_K2_UpdateCustomMovementInvokerHandler: Option<ACharacter_K2_UpdateCustomMovementInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_K2_UpdateCustomMovement_handler(handler: ACharacter_K2_UpdateCustomMovementInvoker){
        unsafe{ ACharacter_K2_UpdateCustomMovementInvokerHandler = Some(handler) };
    }

    type ACharacter_LaunchCharacterInvoker = unsafe extern "C" fn(*mut c_void, Vector3, bool, bool);
    pub(super) static mut ACharacter_LaunchCharacterInvokerHandler: Option<ACharacter_LaunchCharacterInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_LaunchCharacter_handler(handler: ACharacter_LaunchCharacterInvoker){
        unsafe{ ACharacter_LaunchCharacterInvokerHandler = Some(handler) };
    }

    type ACharacter_NotifyActorBeginOverlapInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque);
    pub(super) static mut ACharacter_NotifyActorBeginOverlapInvokerHandler: Option<ACharacter_NotifyActorBeginOverlapInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_NotifyActorBeginOverlap_handler(handler: ACharacter_NotifyActorBeginOverlapInvoker){
        unsafe{ ACharacter_NotifyActorBeginOverlapInvokerHandler = Some(handler) };
    }

    type ACharacter_NotifyActorEndOverlapInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque);
    pub(super) static mut ACharacter_NotifyActorEndOverlapInvokerHandler: Option<ACharacter_NotifyActorEndOverlapInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_NotifyActorEndOverlap_handler(handler: ACharacter_NotifyActorEndOverlapInvoker){
        unsafe{ ACharacter_NotifyActorEndOverlapInvokerHandler = Some(handler) };
    }

    type ACharacter_NotifyJumpApexInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_NotifyJumpApexInvokerHandler: Option<ACharacter_NotifyJumpApexInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_NotifyJumpApex_handler(handler: ACharacter_NotifyJumpApexInvoker){
        unsafe{ ACharacter_NotifyJumpApexInvokerHandler = Some(handler) };
    }

    type ACharacter_OnEndCrouchInvoker = unsafe extern "C" fn(*mut c_void, f32, f32);
    pub(super) static mut ACharacter_OnEndCrouchInvokerHandler: Option<ACharacter_OnEndCrouchInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_OnEndCrouch_handler(handler: ACharacter_OnEndCrouchInvoker){
        unsafe{ ACharacter_OnEndCrouchInvokerHandler = Some(handler) };
    }

    type ACharacter_OnJumpedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_OnJumpedInvokerHandler: Option<ACharacter_OnJumpedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_OnJumped_handler(handler: ACharacter_OnJumpedInvoker){
        unsafe{ ACharacter_OnJumpedInvokerHandler = Some(handler) };
    }

    type ACharacter_OnJumped_ImplementationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_OnJumped_ImplementationInvokerHandler: Option<ACharacter_OnJumped_ImplementationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_OnJumped_Implementation_handler(handler: ACharacter_OnJumped_ImplementationInvoker){
        unsafe{ ACharacter_OnJumped_ImplementationInvokerHandler = Some(handler) };
    }

    type ACharacter_OnLaunchedInvoker = unsafe extern "C" fn(*mut c_void, Vector3, bool, bool);
    pub(super) static mut ACharacter_OnLaunchedInvokerHandler: Option<ACharacter_OnLaunchedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_OnLaunched_handler(handler: ACharacter_OnLaunchedInvoker){
        unsafe{ ACharacter_OnLaunchedInvokerHandler = Some(handler) };
    }

    type ACharacter_OnRep_IsCrouchedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_OnRep_IsCrouchedInvokerHandler: Option<ACharacter_OnRep_IsCrouchedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_OnRep_IsCrouched_handler(handler: ACharacter_OnRep_IsCrouchedInvoker){
        unsafe{ ACharacter_OnRep_IsCrouchedInvokerHandler = Some(handler) };
    }

    type ACharacter_OnRep_ReplayLastTransformUpdateTimeStampInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_OnRep_ReplayLastTransformUpdateTimeStampInvokerHandler: Option<ACharacter_OnRep_ReplayLastTransformUpdateTimeStampInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_OnRep_ReplayLastTransformUpdateTimeStamp_handler(handler: ACharacter_OnRep_ReplayLastTransformUpdateTimeStampInvoker){
        unsafe{ ACharacter_OnRep_ReplayLastTransformUpdateTimeStampInvokerHandler = Some(handler) };
    }

    type ACharacter_OnRep_ReplicatedBasedMovementInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_OnRep_ReplicatedBasedMovementInvokerHandler: Option<ACharacter_OnRep_ReplicatedBasedMovementInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_OnRep_ReplicatedBasedMovement_handler(handler: ACharacter_OnRep_ReplicatedBasedMovementInvoker){
        unsafe{ ACharacter_OnRep_ReplicatedBasedMovementInvokerHandler = Some(handler) };
    }

    type ACharacter_OnRep_ReplicatedMovementInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_OnRep_ReplicatedMovementInvokerHandler: Option<ACharacter_OnRep_ReplicatedMovementInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_OnRep_ReplicatedMovement_handler(handler: ACharacter_OnRep_ReplicatedMovementInvoker){
        unsafe{ ACharacter_OnRep_ReplicatedMovementInvokerHandler = Some(handler) };
    }

    type ACharacter_OnRep_RootMotionInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_OnRep_RootMotionInvokerHandler: Option<ACharacter_OnRep_RootMotionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_OnRep_RootMotion_handler(handler: ACharacter_OnRep_RootMotionInvoker){
        unsafe{ ACharacter_OnRep_RootMotionInvokerHandler = Some(handler) };
    }

    type ACharacter_OnStartCrouchInvoker = unsafe extern "C" fn(*mut c_void, f32, f32);
    pub(super) static mut ACharacter_OnStartCrouchInvokerHandler: Option<ACharacter_OnStartCrouchInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_OnStartCrouch_handler(handler: ACharacter_OnStartCrouchInvoker){
        unsafe{ ACharacter_OnStartCrouchInvokerHandler = Some(handler) };
    }

    type ACharacter_PawnClientRestartInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_PawnClientRestartInvokerHandler: Option<ACharacter_PawnClientRestartInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_PawnClientRestart_handler(handler: ACharacter_PawnClientRestartInvoker){
        unsafe{ ACharacter_PawnClientRestartInvokerHandler = Some(handler) };
    }

    type ACharacter_PlayAnimMontageInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimMontageOpaque, f32, UName) -> f32;
    pub(super) static mut ACharacter_PlayAnimMontageInvokerHandler: Option<ACharacter_PlayAnimMontageInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_PlayAnimMontage_handler(handler: ACharacter_PlayAnimMontageInvoker){
        unsafe{ ACharacter_PlayAnimMontageInvokerHandler = Some(handler) };
    }

    type ACharacter_PossessedByInvoker = unsafe extern "C" fn(*mut c_void, *mut AControllerOpaque);
    pub(super) static mut ACharacter_PossessedByInvokerHandler: Option<ACharacter_PossessedByInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_PossessedBy_handler(handler: ACharacter_PossessedByInvoker){
        unsafe{ ACharacter_PossessedByInvokerHandler = Some(handler) };
    }

    type ACharacter_PostInitializeComponentsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_PostInitializeComponentsInvokerHandler: Option<ACharacter_PostInitializeComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_PostInitializeComponents_handler(handler: ACharacter_PostInitializeComponentsInvoker){
        unsafe{ ACharacter_PostInitializeComponentsInvokerHandler = Some(handler) };
    }

    type ACharacter_PostLoadInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_PostLoadInvokerHandler: Option<ACharacter_PostLoadInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_PostLoad_handler(handler: ACharacter_PostLoadInvoker){
        unsafe{ ACharacter_PostLoadInvokerHandler = Some(handler) };
    }

    type ACharacter_PostNetReceiveInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_PostNetReceiveInvokerHandler: Option<ACharacter_PostNetReceiveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_PostNetReceive_handler(handler: ACharacter_PostNetReceiveInvoker){
        unsafe{ ACharacter_PostNetReceiveInvokerHandler = Some(handler) };
    }

    type ACharacter_PostNetReceiveLocationAndRotationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_PostNetReceiveLocationAndRotationInvokerHandler: Option<ACharacter_PostNetReceiveLocationAndRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_PostNetReceiveLocationAndRotation_handler(handler: ACharacter_PostNetReceiveLocationAndRotationInvoker){
        unsafe{ ACharacter_PostNetReceiveLocationAndRotationInvokerHandler = Some(handler) };
    }

    type ACharacter_PreNetReceiveInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_PreNetReceiveInvokerHandler: Option<ACharacter_PreNetReceiveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_PreNetReceive_handler(handler: ACharacter_PreNetReceiveInvoker){
        unsafe{ ACharacter_PreNetReceiveInvokerHandler = Some(handler) };
    }

    type ACharacter_RecalculateBaseEyeHeightInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_RecalculateBaseEyeHeightInvokerHandler: Option<ACharacter_RecalculateBaseEyeHeightInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_RecalculateBaseEyeHeight_handler(handler: ACharacter_RecalculateBaseEyeHeightInvoker){
        unsafe{ ACharacter_RecalculateBaseEyeHeightInvokerHandler = Some(handler) };
    }

    type ACharacter_RecalculateCrouchedEyeHeightInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_RecalculateCrouchedEyeHeightInvokerHandler: Option<ACharacter_RecalculateCrouchedEyeHeightInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_RecalculateCrouchedEyeHeight_handler(handler: ACharacter_RecalculateCrouchedEyeHeightInvoker){
        unsafe{ ACharacter_RecalculateCrouchedEyeHeightInvokerHandler = Some(handler) };
    }

    type ACharacter_ResetJumpStateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_ResetJumpStateInvokerHandler: Option<ACharacter_ResetJumpStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_ResetJumpState_handler(handler: ACharacter_ResetJumpStateInvoker){
        unsafe{ ACharacter_ResetJumpStateInvokerHandler = Some(handler) };
    }

    type ACharacter_RestartInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_RestartInvokerHandler: Option<ACharacter_RestartInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_Restart_handler(handler: ACharacter_RestartInvoker){
        unsafe{ ACharacter_RestartInvokerHandler = Some(handler) };
    }

    type ACharacter_SetAnimRootMotionTranslationScaleInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut ACharacter_SetAnimRootMotionTranslationScaleInvokerHandler: Option<ACharacter_SetAnimRootMotionTranslationScaleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_SetAnimRootMotionTranslationScale_handler(handler: ACharacter_SetAnimRootMotionTranslationScaleInvoker){
        unsafe{ ACharacter_SetAnimRootMotionTranslationScaleInvokerHandler = Some(handler) };
    }

    type ACharacter_SetBaseInvoker = unsafe extern "C" fn(*mut c_void, *mut UPrimitiveComponentOpaque, UName, bool);
    pub(super) static mut ACharacter_SetBaseInvokerHandler: Option<ACharacter_SetBaseInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_SetBase_handler(handler: ACharacter_SetBaseInvoker){
        unsafe{ ACharacter_SetBaseInvokerHandler = Some(handler) };
    }

    type ACharacter_SetReplicateMovementInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut ACharacter_SetReplicateMovementInvokerHandler: Option<ACharacter_SetReplicateMovementInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_SetReplicateMovement_handler(handler: ACharacter_SetReplicateMovementInvoker){
        unsafe{ ACharacter_SetReplicateMovementInvokerHandler = Some(handler) };
    }

    type ACharacter_SetupPlayerInputComponentInvoker = unsafe extern "C" fn(*mut c_void, *mut UInputComponentOpaque);
    pub(super) static mut ACharacter_SetupPlayerInputComponentInvokerHandler: Option<ACharacter_SetupPlayerInputComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_SetupPlayerInputComponent_handler(handler: ACharacter_SetupPlayerInputComponentInvoker){
        unsafe{ ACharacter_SetupPlayerInputComponentInvokerHandler = Some(handler) };
    }

    type ACharacter_SimulatedRootMotionPositionFixupInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut ACharacter_SimulatedRootMotionPositionFixupInvokerHandler: Option<ACharacter_SimulatedRootMotionPositionFixupInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_SimulatedRootMotionPositionFixup_handler(handler: ACharacter_SimulatedRootMotionPositionFixupInvoker){
        unsafe{ ACharacter_SimulatedRootMotionPositionFixupInvokerHandler = Some(handler) };
    }

    type ACharacter_StopAnimMontageInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimMontageOpaque);
    pub(super) static mut ACharacter_StopAnimMontageInvokerHandler: Option<ACharacter_StopAnimMontageInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_StopAnimMontage_handler(handler: ACharacter_StopAnimMontageInvoker){
        unsafe{ ACharacter_StopAnimMontageInvokerHandler = Some(handler) };
    }

    type ACharacter_StopJumpingInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_StopJumpingInvokerHandler: Option<ACharacter_StopJumpingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_StopJumping_handler(handler: ACharacter_StopJumpingInvoker){
        unsafe{ ACharacter_StopJumpingInvokerHandler = Some(handler) };
    }

    type ACharacter_TornOffInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_TornOffInvokerHandler: Option<ACharacter_TornOffInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_TornOff_handler(handler: ACharacter_TornOffInvoker){
        unsafe{ ACharacter_TornOffInvokerHandler = Some(handler) };
    }

    type ACharacter_TurnOffInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_TurnOffInvokerHandler: Option<ACharacter_TurnOffInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_TurnOff_handler(handler: ACharacter_TurnOffInvoker){
        unsafe{ ACharacter_TurnOffInvokerHandler = Some(handler) };
    }

    type ACharacter_UnCrouchInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut ACharacter_UnCrouchInvokerHandler: Option<ACharacter_UnCrouchInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_UnCrouch_handler(handler: ACharacter_UnCrouchInvoker){
        unsafe{ ACharacter_UnCrouchInvokerHandler = Some(handler) };
    }

    type ACharacter_UnPossessedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_UnPossessedInvokerHandler: Option<ACharacter_UnPossessedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_UnPossessed_handler(handler: ACharacter_UnPossessedInvoker){
        unsafe{ ACharacter_UnPossessedInvokerHandler = Some(handler) };
    }

    type ACharacter_UpdateNavigationRelevanceInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut ACharacter_UpdateNavigationRelevanceInvokerHandler: Option<ACharacter_UpdateNavigationRelevanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_ACharacter_UpdateNavigationRelevance_handler(handler: ACharacter_UpdateNavigationRelevanceInvoker){
        unsafe{ ACharacter_UpdateNavigationRelevanceInvokerHandler = Some(handler) };
    }

    type AGameModeBase_AllowCheatsInvoker = unsafe extern "C" fn(*mut c_void, *mut APlayerControllerOpaque) -> bool;
    pub(super) static mut AGameModeBase_AllowCheatsInvokerHandler: Option<AGameModeBase_AllowCheatsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_AllowCheats_handler(handler: AGameModeBase_AllowCheatsInvoker){
        unsafe{ AGameModeBase_AllowCheatsInvokerHandler = Some(handler) };
    }

    type AGameModeBase_AllowPausingInvoker = unsafe extern "C" fn(*mut c_void, *mut APlayerControllerOpaque) -> bool;
    pub(super) static mut AGameModeBase_AllowPausingInvokerHandler: Option<AGameModeBase_AllowPausingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_AllowPausing_handler(handler: AGameModeBase_AllowPausingInvoker){
        unsafe{ AGameModeBase_AllowPausingInvokerHandler = Some(handler) };
    }

    type AGameModeBase_CanSpectateInvoker = unsafe extern "C" fn(*mut c_void, *mut APlayerControllerOpaque, *mut APlayerStateOpaque) -> bool;
    pub(super) static mut AGameModeBase_CanSpectateInvokerHandler: Option<AGameModeBase_CanSpectateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_CanSpectate_handler(handler: AGameModeBase_CanSpectateInvoker){
        unsafe{ AGameModeBase_CanSpectateInvokerHandler = Some(handler) };
    }

    type AGameModeBase_ChoosePlayerStartInvoker = unsafe extern "C" fn(*mut c_void, *mut AControllerOpaque) -> *mut AActorOpaque;
    pub(super) static mut AGameModeBase_ChoosePlayerStartInvokerHandler: Option<AGameModeBase_ChoosePlayerStartInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_ChoosePlayerStart_handler(handler: AGameModeBase_ChoosePlayerStartInvoker){
        unsafe{ AGameModeBase_ChoosePlayerStartInvokerHandler = Some(handler) };
    }

    type AGameModeBase_ClearPauseInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AGameModeBase_ClearPauseInvokerHandler: Option<AGameModeBase_ClearPauseInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_ClearPause_handler(handler: AGameModeBase_ClearPauseInvoker){
        unsafe{ AGameModeBase_ClearPauseInvokerHandler = Some(handler) };
    }

    type AGameModeBase_DispatchPostLoginInvoker = unsafe extern "C" fn(*mut c_void, *mut AControllerOpaque);
    pub(super) static mut AGameModeBase_DispatchPostLoginInvokerHandler: Option<AGameModeBase_DispatchPostLoginInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_DispatchPostLogin_handler(handler: AGameModeBase_DispatchPostLoginInvoker){
        unsafe{ AGameModeBase_DispatchPostLoginInvokerHandler = Some(handler) };
    }

    type AGameModeBase_ForceClearUnpauseDelegatesInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque);
    pub(super) static mut AGameModeBase_ForceClearUnpauseDelegatesInvokerHandler: Option<AGameModeBase_ForceClearUnpauseDelegatesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_ForceClearUnpauseDelegates_handler(handler: AGameModeBase_ForceClearUnpauseDelegatesInvoker){
        unsafe{ AGameModeBase_ForceClearUnpauseDelegatesInvokerHandler = Some(handler) };
    }

    type AGameModeBase_GetNumPlayersInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut AGameModeBase_GetNumPlayersInvokerHandler: Option<AGameModeBase_GetNumPlayersInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_GetNumPlayers_handler(handler: AGameModeBase_GetNumPlayersInvoker){
        unsafe{ AGameModeBase_GetNumPlayersInvokerHandler = Some(handler) };
    }

    type AGameModeBase_GetNumSpectatorsInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut AGameModeBase_GetNumSpectatorsInvokerHandler: Option<AGameModeBase_GetNumSpectatorsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_GetNumSpectators_handler(handler: AGameModeBase_GetNumSpectatorsInvoker){
        unsafe{ AGameModeBase_GetNumSpectatorsInvokerHandler = Some(handler) };
    }

    type AGameModeBase_HandleStartingNewPlayerInvoker = unsafe extern "C" fn(*mut c_void, *mut APlayerControllerOpaque);
    pub(super) static mut AGameModeBase_HandleStartingNewPlayerInvokerHandler: Option<AGameModeBase_HandleStartingNewPlayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_HandleStartingNewPlayer_handler(handler: AGameModeBase_HandleStartingNewPlayerInvoker){
        unsafe{ AGameModeBase_HandleStartingNewPlayerInvokerHandler = Some(handler) };
    }

    type AGameModeBase_HasMatchEndedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AGameModeBase_HasMatchEndedInvokerHandler: Option<AGameModeBase_HasMatchEndedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_HasMatchEnded_handler(handler: AGameModeBase_HasMatchEndedInvoker){
        unsafe{ AGameModeBase_HasMatchEndedInvokerHandler = Some(handler) };
    }

    type AGameModeBase_HasMatchStartedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AGameModeBase_HasMatchStartedInvokerHandler: Option<AGameModeBase_HasMatchStartedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_HasMatchStarted_handler(handler: AGameModeBase_HasMatchStartedInvoker){
        unsafe{ AGameModeBase_HasMatchStartedInvokerHandler = Some(handler) };
    }

    type AGameModeBase_InitGameStateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AGameModeBase_InitGameStateInvokerHandler: Option<AGameModeBase_InitGameStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_InitGameState_handler(handler: AGameModeBase_InitGameStateInvoker){
        unsafe{ AGameModeBase_InitGameStateInvokerHandler = Some(handler) };
    }

    type AGameModeBase_InitStartSpotInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque, *mut AControllerOpaque);
    pub(super) static mut AGameModeBase_InitStartSpotInvokerHandler: Option<AGameModeBase_InitStartSpotInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_InitStartSpot_handler(handler: AGameModeBase_InitStartSpotInvoker){
        unsafe{ AGameModeBase_InitStartSpotInvokerHandler = Some(handler) };
    }

    type AGameModeBase_IsHandlingReplaysInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AGameModeBase_IsHandlingReplaysInvokerHandler: Option<AGameModeBase_IsHandlingReplaysInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_IsHandlingReplays_handler(handler: AGameModeBase_IsHandlingReplaysInvoker){
        unsafe{ AGameModeBase_IsHandlingReplaysInvokerHandler = Some(handler) };
    }

    type AGameModeBase_IsPausedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut AGameModeBase_IsPausedInvokerHandler: Option<AGameModeBase_IsPausedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_IsPaused_handler(handler: AGameModeBase_IsPausedInvoker){
        unsafe{ AGameModeBase_IsPausedInvokerHandler = Some(handler) };
    }

    type AGameModeBase_K2_OnLogoutInvoker = unsafe extern "C" fn(*mut c_void, *mut AControllerOpaque);
    pub(super) static mut AGameModeBase_K2_OnLogoutInvokerHandler: Option<AGameModeBase_K2_OnLogoutInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_K2_OnLogout_handler(handler: AGameModeBase_K2_OnLogoutInvoker){
        unsafe{ AGameModeBase_K2_OnLogoutInvokerHandler = Some(handler) };
    }

    type AGameModeBase_K2_OnRestartPlayerInvoker = unsafe extern "C" fn(*mut c_void, *mut AControllerOpaque);
    pub(super) static mut AGameModeBase_K2_OnRestartPlayerInvokerHandler: Option<AGameModeBase_K2_OnRestartPlayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_K2_OnRestartPlayer_handler(handler: AGameModeBase_K2_OnRestartPlayerInvoker){
        unsafe{ AGameModeBase_K2_OnRestartPlayerInvokerHandler = Some(handler) };
    }

    type AGameModeBase_K2_PostLoginInvoker = unsafe extern "C" fn(*mut c_void, *mut APlayerControllerOpaque);
    pub(super) static mut AGameModeBase_K2_PostLoginInvokerHandler: Option<AGameModeBase_K2_PostLoginInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_K2_PostLogin_handler(handler: AGameModeBase_K2_PostLoginInvoker){
        unsafe{ AGameModeBase_K2_PostLoginInvokerHandler = Some(handler) };
    }

    type AGameModeBase_LogoutInvoker = unsafe extern "C" fn(*mut c_void, *mut AControllerOpaque);
    pub(super) static mut AGameModeBase_LogoutInvokerHandler: Option<AGameModeBase_LogoutInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_Logout_handler(handler: AGameModeBase_LogoutInvoker){
        unsafe{ AGameModeBase_LogoutInvokerHandler = Some(handler) };
    }

    type AGameModeBase_MustSpectateInvoker = unsafe extern "C" fn(*mut c_void, *mut APlayerControllerOpaque) -> bool;
    pub(super) static mut AGameModeBase_MustSpectateInvokerHandler: Option<AGameModeBase_MustSpectateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_MustSpectate_handler(handler: AGameModeBase_MustSpectateInvoker){
        unsafe{ AGameModeBase_MustSpectateInvokerHandler = Some(handler) };
    }

    type AGameModeBase_PlayerCanRestartInvoker = unsafe extern "C" fn(*mut c_void, *mut APlayerControllerOpaque) -> bool;
    pub(super) static mut AGameModeBase_PlayerCanRestartInvokerHandler: Option<AGameModeBase_PlayerCanRestartInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_PlayerCanRestart_handler(handler: AGameModeBase_PlayerCanRestartInvoker){
        unsafe{ AGameModeBase_PlayerCanRestartInvokerHandler = Some(handler) };
    }

    type AGameModeBase_PostLoginInvoker = unsafe extern "C" fn(*mut c_void, *mut APlayerControllerOpaque);
    pub(super) static mut AGameModeBase_PostLoginInvokerHandler: Option<AGameModeBase_PostLoginInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_PostLogin_handler(handler: AGameModeBase_PostLoginInvoker){
        unsafe{ AGameModeBase_PostLoginInvokerHandler = Some(handler) };
    }

    type AGameModeBase_PostSeamlessTravelInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AGameModeBase_PostSeamlessTravelInvokerHandler: Option<AGameModeBase_PostSeamlessTravelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_PostSeamlessTravel_handler(handler: AGameModeBase_PostSeamlessTravelInvoker){
        unsafe{ AGameModeBase_PostSeamlessTravelInvokerHandler = Some(handler) };
    }

    type AGameModeBase_PreInitializeComponentsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AGameModeBase_PreInitializeComponentsInvokerHandler: Option<AGameModeBase_PreInitializeComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_PreInitializeComponents_handler(handler: AGameModeBase_PreInitializeComponentsInvoker){
        unsafe{ AGameModeBase_PreInitializeComponentsInvokerHandler = Some(handler) };
    }

    type AGameModeBase_ResetInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AGameModeBase_ResetInvokerHandler: Option<AGameModeBase_ResetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_Reset_handler(handler: AGameModeBase_ResetInvoker){
        unsafe{ AGameModeBase_ResetInvokerHandler = Some(handler) };
    }

    type AGameModeBase_ResetLevelInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AGameModeBase_ResetLevelInvokerHandler: Option<AGameModeBase_ResetLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_ResetLevel_handler(handler: AGameModeBase_ResetLevelInvoker){
        unsafe{ AGameModeBase_ResetLevelInvokerHandler = Some(handler) };
    }

    type AGameModeBase_RestartPlayerInvoker = unsafe extern "C" fn(*mut c_void, *mut AControllerOpaque);
    pub(super) static mut AGameModeBase_RestartPlayerInvokerHandler: Option<AGameModeBase_RestartPlayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_RestartPlayer_handler(handler: AGameModeBase_RestartPlayerInvoker){
        unsafe{ AGameModeBase_RestartPlayerInvokerHandler = Some(handler) };
    }

    type AGameModeBase_RestartPlayerAtPlayerStartInvoker = unsafe extern "C" fn(*mut c_void, *mut AControllerOpaque, *mut AActorOpaque);
    pub(super) static mut AGameModeBase_RestartPlayerAtPlayerStartInvokerHandler: Option<AGameModeBase_RestartPlayerAtPlayerStartInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_RestartPlayerAtPlayerStart_handler(handler: AGameModeBase_RestartPlayerAtPlayerStartInvoker){
        unsafe{ AGameModeBase_RestartPlayerAtPlayerStartInvokerHandler = Some(handler) };
    }

    type AGameModeBase_ReturnToMainMenuHostInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AGameModeBase_ReturnToMainMenuHostInvokerHandler: Option<AGameModeBase_ReturnToMainMenuHostInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_ReturnToMainMenuHost_handler(handler: AGameModeBase_ReturnToMainMenuHostInvoker){
        unsafe{ AGameModeBase_ReturnToMainMenuHostInvokerHandler = Some(handler) };
    }

    type AGameModeBase_SetPlayerDefaultsInvoker = unsafe extern "C" fn(*mut c_void, *mut APawnOpaque);
    pub(super) static mut AGameModeBase_SetPlayerDefaultsInvokerHandler: Option<AGameModeBase_SetPlayerDefaultsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_SetPlayerDefaults_handler(handler: AGameModeBase_SetPlayerDefaultsInvoker){
        unsafe{ AGameModeBase_SetPlayerDefaultsInvokerHandler = Some(handler) };
    }

    type AGameModeBase_ShouldResetInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque) -> bool;
    pub(super) static mut AGameModeBase_ShouldResetInvokerHandler: Option<AGameModeBase_ShouldResetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_ShouldReset_handler(handler: AGameModeBase_ShouldResetInvoker){
        unsafe{ AGameModeBase_ShouldResetInvokerHandler = Some(handler) };
    }

    type AGameModeBase_SpawnDefaultPawnForInvoker = unsafe extern "C" fn(*mut c_void, *mut AControllerOpaque, *mut AActorOpaque) -> *mut APawnOpaque;
    pub(super) static mut AGameModeBase_SpawnDefaultPawnForInvokerHandler: Option<AGameModeBase_SpawnDefaultPawnForInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_SpawnDefaultPawnFor_handler(handler: AGameModeBase_SpawnDefaultPawnForInvoker){
        unsafe{ AGameModeBase_SpawnDefaultPawnForInvokerHandler = Some(handler) };
    }

    type AGameModeBase_StartPlayInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AGameModeBase_StartPlayInvokerHandler: Option<AGameModeBase_StartPlayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_StartPlay_handler(handler: AGameModeBase_StartPlayInvoker){
        unsafe{ AGameModeBase_StartPlayInvokerHandler = Some(handler) };
    }

    type AGameModeBase_StartToLeaveMapInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut AGameModeBase_StartToLeaveMapInvokerHandler: Option<AGameModeBase_StartToLeaveMapInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_StartToLeaveMap_handler(handler: AGameModeBase_StartToLeaveMapInvoker){
        unsafe{ AGameModeBase_StartToLeaveMapInvokerHandler = Some(handler) };
    }

    type AGameModeBase_SwapPlayerControllersInvoker = unsafe extern "C" fn(*mut c_void, *mut APlayerControllerOpaque, *mut APlayerControllerOpaque);
    pub(super) static mut AGameModeBase_SwapPlayerControllersInvokerHandler: Option<AGameModeBase_SwapPlayerControllersInvoker> = None;
    #[no_mangle]
    extern "C" fn set_AGameModeBase_SwapPlayerControllers_handler(handler: AGameModeBase_SwapPlayerControllersInvoker){
        unsafe{ AGameModeBase_SwapPlayerControllersInvokerHandler = Some(handler) };
    }

    type USceneComponent_BeginDestroyInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USceneComponent_BeginDestroyInvokerHandler: Option<USceneComponent_BeginDestroyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_BeginDestroy_handler(handler: USceneComponent_BeginDestroyInvoker){
        unsafe{ USceneComponent_BeginDestroyInvokerHandler = Some(handler) };
    }

    type USceneComponent_CalcBoundingCylinderInvoker = unsafe extern "C" fn(*mut c_void, &mut f32, &mut f32);
    pub(super) static mut USceneComponent_CalcBoundingCylinderInvokerHandler: Option<USceneComponent_CalcBoundingCylinderInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_CalcBoundingCylinder_handler(handler: USceneComponent_CalcBoundingCylinderInvoker){
        unsafe{ USceneComponent_CalcBoundingCylinderInvokerHandler = Some(handler) };
    }

    type USceneComponent_CanAttachAsChildInvoker = unsafe extern "C" fn(*mut c_void, *mut USceneComponentOpaque, UName) -> bool;
    pub(super) static mut USceneComponent_CanAttachAsChildInvokerHandler: Option<USceneComponent_CanAttachAsChildInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_CanAttachAsChild_handler(handler: USceneComponent_CanAttachAsChildInvoker){
        unsafe{ USceneComponent_CanAttachAsChildInvokerHandler = Some(handler) };
    }

    type USceneComponent_CanEditChangeInvoker = unsafe extern "C" fn(*mut c_void, *mut FPropertyOpaque) -> bool;
    pub(super) static mut USceneComponent_CanEditChangeInvokerHandler: Option<USceneComponent_CanEditChangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_CanEditChange_handler(handler: USceneComponent_CanEditChangeInvoker){
        unsafe{ USceneComponent_CanEditChangeInvokerHandler = Some(handler) };
    }

    type USceneComponent_CanEverRenderInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_CanEverRenderInvokerHandler: Option<USceneComponent_CanEverRenderInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_CanEverRender_handler(handler: USceneComponent_CanEverRenderInvoker){
        unsafe{ USceneComponent_CanEverRenderInvokerHandler = Some(handler) };
    }

    type USceneComponent_CanHaveStaticMobilityInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_CanHaveStaticMobilityInvokerHandler: Option<USceneComponent_CanHaveStaticMobilityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_CanHaveStaticMobility_handler(handler: USceneComponent_CanHaveStaticMobilityInvoker){
        unsafe{ USceneComponent_CanHaveStaticMobilityInvokerHandler = Some(handler) };
    }

    type USceneComponent_ClearSkipUpdateOverlapsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USceneComponent_ClearSkipUpdateOverlapsInvokerHandler: Option<USceneComponent_ClearSkipUpdateOverlapsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_ClearSkipUpdateOverlaps_handler(handler: USceneComponent_ClearSkipUpdateOverlapsInvoker){
        unsafe{ USceneComponent_ClearSkipUpdateOverlapsInvokerHandler = Some(handler) };
    }

    type USceneComponent_ConditionalUpdateComponentToWorldInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USceneComponent_ConditionalUpdateComponentToWorldInvokerHandler: Option<USceneComponent_ConditionalUpdateComponentToWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_ConditionalUpdateComponentToWorld_handler(handler: USceneComponent_ConditionalUpdateComponentToWorldInvoker){
        unsafe{ USceneComponent_ConditionalUpdateComponentToWorldInvokerHandler = Some(handler) };
    }

    type USceneComponent_DestroyComponentInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USceneComponent_DestroyComponentInvokerHandler: Option<USceneComponent_DestroyComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_DestroyComponent_handler(handler: USceneComponent_DestroyComponentInvoker){
        unsafe{ USceneComponent_DestroyComponentInvokerHandler = Some(handler) };
    }

    type USceneComponent_DoesSocketExistInvoker = unsafe extern "C" fn(*mut c_void, UName) -> bool;
    pub(super) static mut USceneComponent_DoesSocketExistInvokerHandler: Option<USceneComponent_DoesSocketExistInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_DoesSocketExist_handler(handler: USceneComponent_DoesSocketExistInvoker){
        unsafe{ USceneComponent_DoesSocketExistInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetAbsoluteLocationPropertyNameInvoker = unsafe extern "C" fn() -> UName;
    pub(super) static mut USceneComponent_GetAbsoluteLocationPropertyNameInvokerHandler: Option<USceneComponent_GetAbsoluteLocationPropertyNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetAbsoluteLocationPropertyName_handler(handler: USceneComponent_GetAbsoluteLocationPropertyNameInvoker){
        unsafe{ USceneComponent_GetAbsoluteLocationPropertyNameInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetAbsoluteRotationPropertyNameInvoker = unsafe extern "C" fn() -> UName;
    pub(super) static mut USceneComponent_GetAbsoluteRotationPropertyNameInvokerHandler: Option<USceneComponent_GetAbsoluteRotationPropertyNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetAbsoluteRotationPropertyName_handler(handler: USceneComponent_GetAbsoluteRotationPropertyNameInvoker){
        unsafe{ USceneComponent_GetAbsoluteRotationPropertyNameInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetAbsoluteScalePropertyNameInvoker = unsafe extern "C" fn() -> UName;
    pub(super) static mut USceneComponent_GetAbsoluteScalePropertyNameInvokerHandler: Option<USceneComponent_GetAbsoluteScalePropertyNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetAbsoluteScalePropertyName_handler(handler: USceneComponent_GetAbsoluteScalePropertyNameInvoker){
        unsafe{ USceneComponent_GetAbsoluteScalePropertyNameInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetActorPositionForRendererInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut USceneComponent_GetActorPositionForRendererInvokerHandler: Option<USceneComponent_GetActorPositionForRendererInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetActorPositionForRenderer_handler(handler: USceneComponent_GetActorPositionForRendererInvoker){
        unsafe{ USceneComponent_GetActorPositionForRendererInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetAttachParentInvoker = unsafe extern "C" fn(*mut c_void) -> *mut USceneComponentOpaque;
    pub(super) static mut USceneComponent_GetAttachParentInvokerHandler: Option<USceneComponent_GetAttachParentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetAttachParent_handler(handler: USceneComponent_GetAttachParentInvoker){
        unsafe{ USceneComponent_GetAttachParentInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetAttachParentActorInvoker = unsafe extern "C" fn(*mut c_void) -> *mut AActorOpaque;
    pub(super) static mut USceneComponent_GetAttachParentActorInvokerHandler: Option<USceneComponent_GetAttachParentActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetAttachParentActor_handler(handler: USceneComponent_GetAttachParentActorInvoker){
        unsafe{ USceneComponent_GetAttachParentActorInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetAttachSocketNameInvoker = unsafe extern "C" fn(*mut c_void) -> UName;
    pub(super) static mut USceneComponent_GetAttachSocketNameInvokerHandler: Option<USceneComponent_GetAttachSocketNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetAttachSocketName_handler(handler: USceneComponent_GetAttachSocketNameInvoker){
        unsafe{ USceneComponent_GetAttachSocketNameInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetAttachmentRootInvoker = unsafe extern "C" fn(*mut c_void) -> *mut USceneComponentOpaque;
    pub(super) static mut USceneComponent_GetAttachmentRootInvokerHandler: Option<USceneComponent_GetAttachmentRootInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetAttachmentRoot_handler(handler: USceneComponent_GetAttachmentRootInvoker){
        unsafe{ USceneComponent_GetAttachmentRootInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetAttachmentRootActorInvoker = unsafe extern "C" fn(*mut c_void) -> *mut AActorOpaque;
    pub(super) static mut USceneComponent_GetAttachmentRootActorInvokerHandler: Option<USceneComponent_GetAttachmentRootActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetAttachmentRootActor_handler(handler: USceneComponent_GetAttachmentRootActorInvoker){
        unsafe{ USceneComponent_GetAttachmentRootActorInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetChildComponentInvoker = unsafe extern "C" fn(*mut c_void, i32) -> *mut USceneComponentOpaque;
    pub(super) static mut USceneComponent_GetChildComponentInvokerHandler: Option<USceneComponent_GetChildComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetChildComponent_handler(handler: USceneComponent_GetChildComponentInvoker){
        unsafe{ USceneComponent_GetChildComponentInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetCollisionObjectTypeInvoker = unsafe extern "C" fn(*mut c_void) -> ECollisionChannel;
    pub(super) static mut USceneComponent_GetCollisionObjectTypeInvokerHandler: Option<USceneComponent_GetCollisionObjectTypeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetCollisionObjectType_handler(handler: USceneComponent_GetCollisionObjectTypeInvoker){
        unsafe{ USceneComponent_GetCollisionObjectTypeInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetComponentLocationInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut USceneComponent_GetComponentLocationInvokerHandler: Option<USceneComponent_GetComponentLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetComponentLocation_handler(handler: USceneComponent_GetComponentLocationInvoker){
        unsafe{ USceneComponent_GetComponentLocationInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetComponentQuatInvoker = unsafe extern "C" fn(*mut c_void) -> Quaternion;
    pub(super) static mut USceneComponent_GetComponentQuatInvokerHandler: Option<USceneComponent_GetComponentQuatInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetComponentQuat_handler(handler: USceneComponent_GetComponentQuatInvoker){
        unsafe{ USceneComponent_GetComponentQuatInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetComponentRotationInvoker = unsafe extern "C" fn(*mut c_void) -> Rotator;
    pub(super) static mut USceneComponent_GetComponentRotationInvokerHandler: Option<USceneComponent_GetComponentRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetComponentRotation_handler(handler: USceneComponent_GetComponentRotationInvoker){
        unsafe{ USceneComponent_GetComponentRotationInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetComponentScaleInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut USceneComponent_GetComponentScaleInvokerHandler: Option<USceneComponent_GetComponentScaleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetComponentScale_handler(handler: USceneComponent_GetComponentScaleInvoker){
        unsafe{ USceneComponent_GetComponentScaleInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetComponentToWorldInvoker = unsafe extern "C" fn(*mut c_void) -> Transform;
    pub(super) static mut USceneComponent_GetComponentToWorldInvokerHandler: Option<USceneComponent_GetComponentToWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetComponentToWorld_handler(handler: USceneComponent_GetComponentToWorldInvoker){
        unsafe{ USceneComponent_GetComponentToWorldInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetComponentTransformInvoker = unsafe extern "C" fn(*mut c_void) -> Transform;
    pub(super) static mut USceneComponent_GetComponentTransformInvokerHandler: Option<USceneComponent_GetComponentTransformInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetComponentTransform_handler(handler: USceneComponent_GetComponentTransformInvoker){
        unsafe{ USceneComponent_GetComponentTransformInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetComponentVelocityInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut USceneComponent_GetComponentVelocityInvokerHandler: Option<USceneComponent_GetComponentVelocityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetComponentVelocity_handler(handler: USceneComponent_GetComponentVelocityInvoker){
        unsafe{ USceneComponent_GetComponentVelocityInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetCurrentScopedMovementInvoker = unsafe extern "C" fn(*mut c_void) -> *mut FScopedMovementUpdateOpaque;
    pub(super) static mut USceneComponent_GetCurrentScopedMovementInvokerHandler: Option<USceneComponent_GetCurrentScopedMovementInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetCurrentScopedMovement_handler(handler: USceneComponent_GetCurrentScopedMovementInvoker){
        unsafe{ USceneComponent_GetCurrentScopedMovementInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetDefaultSceneRootVariableNameInvoker = unsafe extern "C" fn() -> UName;
    pub(super) static mut USceneComponent_GetDefaultSceneRootVariableNameInvokerHandler: Option<USceneComponent_GetDefaultSceneRootVariableNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetDefaultSceneRootVariableName_handler(handler: USceneComponent_GetDefaultSceneRootVariableNameInvoker){
        unsafe{ USceneComponent_GetDefaultSceneRootVariableNameInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetForwardVectorInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut USceneComponent_GetForwardVectorInvokerHandler: Option<USceneComponent_GetForwardVectorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetForwardVector_handler(handler: USceneComponent_GetForwardVectorInvoker){
        unsafe{ USceneComponent_GetForwardVectorInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetNumChildrenComponentsInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut USceneComponent_GetNumChildrenComponentsInvokerHandler: Option<USceneComponent_GetNumChildrenComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetNumChildrenComponents_handler(handler: USceneComponent_GetNumChildrenComponentsInvoker){
        unsafe{ USceneComponent_GetNumChildrenComponentsInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetNumUncachedStaticLightingInteractionsInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut USceneComponent_GetNumUncachedStaticLightingInteractionsInvokerHandler: Option<USceneComponent_GetNumUncachedStaticLightingInteractionsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetNumUncachedStaticLightingInteractions_handler(handler: USceneComponent_GetNumUncachedStaticLightingInteractionsInvoker){
        unsafe{ USceneComponent_GetNumUncachedStaticLightingInteractionsInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetPhysicsVolumeInvoker = unsafe extern "C" fn(*mut c_void) -> *mut APhysicsVolumeOpaque;
    pub(super) static mut USceneComponent_GetPhysicsVolumeInvokerHandler: Option<USceneComponent_GetPhysicsVolumeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetPhysicsVolume_handler(handler: USceneComponent_GetPhysicsVolumeInvoker){
        unsafe{ USceneComponent_GetPhysicsVolumeInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetRelativeLocationInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut USceneComponent_GetRelativeLocationInvokerHandler: Option<USceneComponent_GetRelativeLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetRelativeLocation_handler(handler: USceneComponent_GetRelativeLocationInvoker){
        unsafe{ USceneComponent_GetRelativeLocationInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetRelativeLocationPropertyNameInvoker = unsafe extern "C" fn() -> UName;
    pub(super) static mut USceneComponent_GetRelativeLocationPropertyNameInvokerHandler: Option<USceneComponent_GetRelativeLocationPropertyNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetRelativeLocationPropertyName_handler(handler: USceneComponent_GetRelativeLocationPropertyNameInvoker){
        unsafe{ USceneComponent_GetRelativeLocationPropertyNameInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetRelativeLocation_DirectMutableInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut USceneComponent_GetRelativeLocation_DirectMutableInvokerHandler: Option<USceneComponent_GetRelativeLocation_DirectMutableInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetRelativeLocation_DirectMutable_handler(handler: USceneComponent_GetRelativeLocation_DirectMutableInvoker){
        unsafe{ USceneComponent_GetRelativeLocation_DirectMutableInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetRelativeRotationInvoker = unsafe extern "C" fn(*mut c_void) -> Rotator;
    pub(super) static mut USceneComponent_GetRelativeRotationInvokerHandler: Option<USceneComponent_GetRelativeRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetRelativeRotation_handler(handler: USceneComponent_GetRelativeRotationInvoker){
        unsafe{ USceneComponent_GetRelativeRotationInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetRelativeRotationPropertyNameInvoker = unsafe extern "C" fn() -> UName;
    pub(super) static mut USceneComponent_GetRelativeRotationPropertyNameInvokerHandler: Option<USceneComponent_GetRelativeRotationPropertyNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetRelativeRotationPropertyName_handler(handler: USceneComponent_GetRelativeRotationPropertyNameInvoker){
        unsafe{ USceneComponent_GetRelativeRotationPropertyNameInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetRelativeRotation_DirectMutableInvoker = unsafe extern "C" fn(*mut c_void) -> Rotator;
    pub(super) static mut USceneComponent_GetRelativeRotation_DirectMutableInvokerHandler: Option<USceneComponent_GetRelativeRotation_DirectMutableInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetRelativeRotation_DirectMutable_handler(handler: USceneComponent_GetRelativeRotation_DirectMutableInvoker){
        unsafe{ USceneComponent_GetRelativeRotation_DirectMutableInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetRelativeScale3DInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut USceneComponent_GetRelativeScale3DInvokerHandler: Option<USceneComponent_GetRelativeScale3DInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetRelativeScale3D_handler(handler: USceneComponent_GetRelativeScale3DInvoker){
        unsafe{ USceneComponent_GetRelativeScale3DInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetRelativeScale3DPropertyNameInvoker = unsafe extern "C" fn() -> UName;
    pub(super) static mut USceneComponent_GetRelativeScale3DPropertyNameInvokerHandler: Option<USceneComponent_GetRelativeScale3DPropertyNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetRelativeScale3DPropertyName_handler(handler: USceneComponent_GetRelativeScale3DPropertyNameInvoker){
        unsafe{ USceneComponent_GetRelativeScale3DPropertyNameInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetRelativeScale3D_DirectMutableInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut USceneComponent_GetRelativeScale3D_DirectMutableInvokerHandler: Option<USceneComponent_GetRelativeScale3D_DirectMutableInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetRelativeScale3D_DirectMutable_handler(handler: USceneComponent_GetRelativeScale3D_DirectMutableInvoker){
        unsafe{ USceneComponent_GetRelativeScale3D_DirectMutableInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetRelativeTransformInvoker = unsafe extern "C" fn(*mut c_void) -> Transform;
    pub(super) static mut USceneComponent_GetRelativeTransformInvokerHandler: Option<USceneComponent_GetRelativeTransformInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetRelativeTransform_handler(handler: USceneComponent_GetRelativeTransformInvoker){
        unsafe{ USceneComponent_GetRelativeTransformInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetRightVectorInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut USceneComponent_GetRightVectorInvokerHandler: Option<USceneComponent_GetRightVectorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetRightVector_handler(handler: USceneComponent_GetRightVectorInvoker){
        unsafe{ USceneComponent_GetRightVectorInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetShouldUpdatePhysicsVolumeInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_GetShouldUpdatePhysicsVolumeInvokerHandler: Option<USceneComponent_GetShouldUpdatePhysicsVolumeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetShouldUpdatePhysicsVolume_handler(handler: USceneComponent_GetShouldUpdatePhysicsVolumeInvoker){
        unsafe{ USceneComponent_GetShouldUpdatePhysicsVolumeInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetSocketLocationInvoker = unsafe extern "C" fn(*mut c_void, UName) -> Vector3;
    pub(super) static mut USceneComponent_GetSocketLocationInvokerHandler: Option<USceneComponent_GetSocketLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetSocketLocation_handler(handler: USceneComponent_GetSocketLocationInvoker){
        unsafe{ USceneComponent_GetSocketLocationInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetSocketQuaternionInvoker = unsafe extern "C" fn(*mut c_void, UName) -> Quaternion;
    pub(super) static mut USceneComponent_GetSocketQuaternionInvokerHandler: Option<USceneComponent_GetSocketQuaternionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetSocketQuaternion_handler(handler: USceneComponent_GetSocketQuaternionInvoker){
        unsafe{ USceneComponent_GetSocketQuaternionInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetSocketRotationInvoker = unsafe extern "C" fn(*mut c_void, UName) -> Rotator;
    pub(super) static mut USceneComponent_GetSocketRotationInvokerHandler: Option<USceneComponent_GetSocketRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetSocketRotation_handler(handler: USceneComponent_GetSocketRotationInvoker){
        unsafe{ USceneComponent_GetSocketRotationInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetUpVectorInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut USceneComponent_GetUpVectorInvokerHandler: Option<USceneComponent_GetUpVectorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetUpVector_handler(handler: USceneComponent_GetUpVectorInvoker){
        unsafe{ USceneComponent_GetUpVectorInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetVisibleFlagInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_GetVisibleFlagInvokerHandler: Option<USceneComponent_GetVisibleFlagInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetVisibleFlag_handler(handler: USceneComponent_GetVisibleFlagInvoker){
        unsafe{ USceneComponent_GetVisibleFlagInvokerHandler = Some(handler) };
    }

    type USceneComponent_GetVisiblePropertyNameInvoker = unsafe extern "C" fn() -> UName;
    pub(super) static mut USceneComponent_GetVisiblePropertyNameInvokerHandler: Option<USceneComponent_GetVisiblePropertyNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_GetVisiblePropertyName_handler(handler: USceneComponent_GetVisiblePropertyNameInvoker){
        unsafe{ USceneComponent_GetVisiblePropertyNameInvokerHandler = Some(handler) };
    }

    type USceneComponent_HasAnySocketsInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_HasAnySocketsInvokerHandler: Option<USceneComponent_HasAnySocketsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_HasAnySockets_handler(handler: USceneComponent_HasAnySocketsInvoker){
        unsafe{ USceneComponent_HasAnySocketsInvokerHandler = Some(handler) };
    }

    type USceneComponent_IsAnySimulatingPhysicsInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_IsAnySimulatingPhysicsInvokerHandler: Option<USceneComponent_IsAnySimulatingPhysicsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_IsAnySimulatingPhysics_handler(handler: USceneComponent_IsAnySimulatingPhysicsInvoker){
        unsafe{ USceneComponent_IsAnySimulatingPhysicsInvokerHandler = Some(handler) };
    }

    type USceneComponent_IsAttachedToInvoker = unsafe extern "C" fn(*mut c_void, *mut USceneComponentOpaque) -> bool;
    pub(super) static mut USceneComponent_IsAttachedToInvokerHandler: Option<USceneComponent_IsAttachedToInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_IsAttachedTo_handler(handler: USceneComponent_IsAttachedToInvoker){
        unsafe{ USceneComponent_IsAttachedToInvokerHandler = Some(handler) };
    }

    type USceneComponent_IsCollisionEnabledInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_IsCollisionEnabledInvokerHandler: Option<USceneComponent_IsCollisionEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_IsCollisionEnabled_handler(handler: USceneComponent_IsCollisionEnabledInvoker){
        unsafe{ USceneComponent_IsCollisionEnabledInvokerHandler = Some(handler) };
    }

    type USceneComponent_IsDeferringMovementUpdatesInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_IsDeferringMovementUpdatesInvokerHandler: Option<USceneComponent_IsDeferringMovementUpdatesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_IsDeferringMovementUpdates_handler(handler: USceneComponent_IsDeferringMovementUpdatesInvoker){
        unsafe{ USceneComponent_IsDeferringMovementUpdatesInvokerHandler = Some(handler) };
    }

    type USceneComponent_IsPhysicsCollisionEnabledInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_IsPhysicsCollisionEnabledInvokerHandler: Option<USceneComponent_IsPhysicsCollisionEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_IsPhysicsCollisionEnabled_handler(handler: USceneComponent_IsPhysicsCollisionEnabledInvoker){
        unsafe{ USceneComponent_IsPhysicsCollisionEnabledInvokerHandler = Some(handler) };
    }

    type USceneComponent_IsPostLoadThreadSafeInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_IsPostLoadThreadSafeInvokerHandler: Option<USceneComponent_IsPostLoadThreadSafeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_IsPostLoadThreadSafe_handler(handler: USceneComponent_IsPostLoadThreadSafeInvoker){
        unsafe{ USceneComponent_IsPostLoadThreadSafeInvokerHandler = Some(handler) };
    }

    type USceneComponent_IsPrecomputedLightingValidInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_IsPrecomputedLightingValidInvokerHandler: Option<USceneComponent_IsPrecomputedLightingValidInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_IsPrecomputedLightingValid_handler(handler: USceneComponent_IsPrecomputedLightingValidInvoker){
        unsafe{ USceneComponent_IsPrecomputedLightingValidInvokerHandler = Some(handler) };
    }

    type USceneComponent_IsQueryCollisionEnabledInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_IsQueryCollisionEnabledInvokerHandler: Option<USceneComponent_IsQueryCollisionEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_IsQueryCollisionEnabled_handler(handler: USceneComponent_IsQueryCollisionEnabledInvoker){
        unsafe{ USceneComponent_IsQueryCollisionEnabledInvokerHandler = Some(handler) };
    }

    type USceneComponent_IsSimulatingPhysicsInvoker = unsafe extern "C" fn(*mut c_void, UName) -> bool;
    pub(super) static mut USceneComponent_IsSimulatingPhysicsInvokerHandler: Option<USceneComponent_IsSimulatingPhysicsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_IsSimulatingPhysics_handler(handler: USceneComponent_IsSimulatingPhysicsInvoker){
        unsafe{ USceneComponent_IsSimulatingPhysicsInvokerHandler = Some(handler) };
    }

    type USceneComponent_IsUsingAbsoluteLocationInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_IsUsingAbsoluteLocationInvokerHandler: Option<USceneComponent_IsUsingAbsoluteLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_IsUsingAbsoluteLocation_handler(handler: USceneComponent_IsUsingAbsoluteLocationInvoker){
        unsafe{ USceneComponent_IsUsingAbsoluteLocationInvokerHandler = Some(handler) };
    }

    type USceneComponent_IsUsingAbsoluteRotationInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_IsUsingAbsoluteRotationInvokerHandler: Option<USceneComponent_IsUsingAbsoluteRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_IsUsingAbsoluteRotation_handler(handler: USceneComponent_IsUsingAbsoluteRotationInvoker){
        unsafe{ USceneComponent_IsUsingAbsoluteRotationInvokerHandler = Some(handler) };
    }

    type USceneComponent_IsUsingAbsoluteScaleInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_IsUsingAbsoluteScaleInvokerHandler: Option<USceneComponent_IsUsingAbsoluteScaleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_IsUsingAbsoluteScale_handler(handler: USceneComponent_IsUsingAbsoluteScaleInvoker){
        unsafe{ USceneComponent_IsUsingAbsoluteScaleInvokerHandler = Some(handler) };
    }

    type USceneComponent_IsVisibleInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_IsVisibleInvokerHandler: Option<USceneComponent_IsVisibleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_IsVisible_handler(handler: USceneComponent_IsVisibleInvoker){
        unsafe{ USceneComponent_IsVisibleInvokerHandler = Some(handler) };
    }

    type USceneComponent_IsVisibleInEditorInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_IsVisibleInEditorInvokerHandler: Option<USceneComponent_IsVisibleInEditorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_IsVisibleInEditor_handler(handler: USceneComponent_IsVisibleInEditorInvoker){
        unsafe{ USceneComponent_IsVisibleInEditorInvokerHandler = Some(handler) };
    }

    type USceneComponent_IsWorldGeometryInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_IsWorldGeometryInvokerHandler: Option<USceneComponent_IsWorldGeometryInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_IsWorldGeometry_handler(handler: USceneComponent_IsWorldGeometryInvoker){
        unsafe{ USceneComponent_IsWorldGeometryInvokerHandler = Some(handler) };
    }

    type USceneComponent_K2_GetComponentLocationInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut USceneComponent_K2_GetComponentLocationInvokerHandler: Option<USceneComponent_K2_GetComponentLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_K2_GetComponentLocation_handler(handler: USceneComponent_K2_GetComponentLocationInvoker){
        unsafe{ USceneComponent_K2_GetComponentLocationInvokerHandler = Some(handler) };
    }

    type USceneComponent_K2_GetComponentRotationInvoker = unsafe extern "C" fn(*mut c_void) -> Rotator;
    pub(super) static mut USceneComponent_K2_GetComponentRotationInvokerHandler: Option<USceneComponent_K2_GetComponentRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_K2_GetComponentRotation_handler(handler: USceneComponent_K2_GetComponentRotationInvoker){
        unsafe{ USceneComponent_K2_GetComponentRotationInvokerHandler = Some(handler) };
    }

    type USceneComponent_K2_GetComponentScaleInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut USceneComponent_K2_GetComponentScaleInvokerHandler: Option<USceneComponent_K2_GetComponentScaleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_K2_GetComponentScale_handler(handler: USceneComponent_K2_GetComponentScaleInvoker){
        unsafe{ USceneComponent_K2_GetComponentScaleInvokerHandler = Some(handler) };
    }

    type USceneComponent_K2_GetComponentToWorldInvoker = unsafe extern "C" fn(*mut c_void) -> Transform;
    pub(super) static mut USceneComponent_K2_GetComponentToWorldInvokerHandler: Option<USceneComponent_K2_GetComponentToWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_K2_GetComponentToWorld_handler(handler: USceneComponent_K2_GetComponentToWorldInvoker){
        unsafe{ USceneComponent_K2_GetComponentToWorldInvokerHandler = Some(handler) };
    }

    type USceneComponent_NeedsLoadForTargetPlatformInvoker = unsafe extern "C" fn(*mut c_void, *mut ITargetPlatformOpaque) -> bool;
    pub(super) static mut USceneComponent_NeedsLoadForTargetPlatformInvokerHandler: Option<USceneComponent_NeedsLoadForTargetPlatformInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_NeedsLoadForTargetPlatform_handler(handler: USceneComponent_NeedsLoadForTargetPlatformInvoker){
        unsafe{ USceneComponent_NeedsLoadForTargetPlatformInvokerHandler = Some(handler) };
    }

    type USceneComponent_OnAttachmentChangedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USceneComponent_OnAttachmentChangedInvokerHandler: Option<USceneComponent_OnAttachmentChangedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_OnAttachmentChanged_handler(handler: USceneComponent_OnAttachmentChangedInvoker){
        unsafe{ USceneComponent_OnAttachmentChangedInvokerHandler = Some(handler) };
    }

    type USceneComponent_OnComponentDestroyedInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USceneComponent_OnComponentDestroyedInvokerHandler: Option<USceneComponent_OnComponentDestroyedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_OnComponentDestroyed_handler(handler: USceneComponent_OnComponentDestroyedInvoker){
        unsafe{ USceneComponent_OnComponentDestroyedInvokerHandler = Some(handler) };
    }

    type USceneComponent_OnRegisterInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USceneComponent_OnRegisterInvokerHandler: Option<USceneComponent_OnRegisterInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_OnRegister_handler(handler: USceneComponent_OnRegisterInvoker){
        unsafe{ USceneComponent_OnRegisterInvokerHandler = Some(handler) };
    }

    type USceneComponent_OnUnregisterInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USceneComponent_OnUnregisterInvokerHandler: Option<USceneComponent_OnUnregisterInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_OnUnregister_handler(handler: USceneComponent_OnUnregisterInvoker){
        unsafe{ USceneComponent_OnUnregisterInvokerHandler = Some(handler) };
    }

    type USceneComponent_PostEditComponentMoveInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USceneComponent_PostEditComponentMoveInvokerHandler: Option<USceneComponent_PostEditComponentMoveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_PostEditComponentMove_handler(handler: USceneComponent_PostEditComponentMoveInvoker){
        unsafe{ USceneComponent_PostEditComponentMoveInvokerHandler = Some(handler) };
    }

    type USceneComponent_PostInterpChangeInvoker = unsafe extern "C" fn(*mut c_void, *mut FPropertyOpaque);
    pub(super) static mut USceneComponent_PostInterpChangeInvokerHandler: Option<USceneComponent_PostInterpChangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_PostInterpChange_handler(handler: USceneComponent_PostInterpChangeInvoker){
        unsafe{ USceneComponent_PostInterpChangeInvokerHandler = Some(handler) };
    }

    type USceneComponent_PostLoadInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USceneComponent_PostLoadInvokerHandler: Option<USceneComponent_PostLoadInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_PostLoad_handler(handler: USceneComponent_PostLoadInvoker){
        unsafe{ USceneComponent_PostLoadInvokerHandler = Some(handler) };
    }

    type USceneComponent_PostNetReceiveInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USceneComponent_PostNetReceiveInvokerHandler: Option<USceneComponent_PostNetReceiveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_PostNetReceive_handler(handler: USceneComponent_PostNetReceiveInvoker){
        unsafe{ USceneComponent_PostNetReceiveInvokerHandler = Some(handler) };
    }

    type USceneComponent_PostRepNotifiesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USceneComponent_PostRepNotifiesInvokerHandler: Option<USceneComponent_PostRepNotifiesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_PostRepNotifies_handler(handler: USceneComponent_PostRepNotifiesInvoker){
        unsafe{ USceneComponent_PostRepNotifiesInvokerHandler = Some(handler) };
    }

    type USceneComponent_PreNetReceiveInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USceneComponent_PreNetReceiveInvokerHandler: Option<USceneComponent_PreNetReceiveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_PreNetReceive_handler(handler: USceneComponent_PreNetReceiveInvoker){
        unsafe{ USceneComponent_PreNetReceiveInvokerHandler = Some(handler) };
    }

    type USceneComponent_PropagateLightingScenarioChangeInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USceneComponent_PropagateLightingScenarioChangeInvokerHandler: Option<USceneComponent_PropagateLightingScenarioChangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_PropagateLightingScenarioChange_handler(handler: USceneComponent_PropagateLightingScenarioChangeInvoker){
        unsafe{ USceneComponent_PropagateLightingScenarioChangeInvokerHandler = Some(handler) };
    }

    type USceneComponent_ResetRelativeTransformInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USceneComponent_ResetRelativeTransformInvokerHandler: Option<USceneComponent_ResetRelativeTransformInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_ResetRelativeTransform_handler(handler: USceneComponent_ResetRelativeTransformInvoker){
        unsafe{ USceneComponent_ResetRelativeTransformInvokerHandler = Some(handler) };
    }

    type USceneComponent_SetAbsoluteInvoker = unsafe extern "C" fn(*mut c_void, bool, bool, bool);
    pub(super) static mut USceneComponent_SetAbsoluteInvokerHandler: Option<USceneComponent_SetAbsoluteInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_SetAbsolute_handler(handler: USceneComponent_SetAbsoluteInvoker){
        unsafe{ USceneComponent_SetAbsoluteInvokerHandler = Some(handler) };
    }

    type USceneComponent_SetHiddenInGameInvoker = unsafe extern "C" fn(*mut c_void, bool, bool);
    pub(super) static mut USceneComponent_SetHiddenInGameInvokerHandler: Option<USceneComponent_SetHiddenInGameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_SetHiddenInGame_handler(handler: USceneComponent_SetHiddenInGameInvoker){
        unsafe{ USceneComponent_SetHiddenInGameInvokerHandler = Some(handler) };
    }

    type USceneComponent_SetPhysicsVolumeInvoker = unsafe extern "C" fn(*mut c_void, *mut APhysicsVolumeOpaque, bool);
    pub(super) static mut USceneComponent_SetPhysicsVolumeInvokerHandler: Option<USceneComponent_SetPhysicsVolumeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_SetPhysicsVolume_handler(handler: USceneComponent_SetPhysicsVolumeInvoker){
        unsafe{ USceneComponent_SetPhysicsVolumeInvokerHandler = Some(handler) };
    }

    type USceneComponent_SetRelativeLocation_DirectInvoker = unsafe extern "C" fn(*mut c_void, Vector3);
    pub(super) static mut USceneComponent_SetRelativeLocation_DirectInvokerHandler: Option<USceneComponent_SetRelativeLocation_DirectInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_SetRelativeLocation_Direct_handler(handler: USceneComponent_SetRelativeLocation_DirectInvoker){
        unsafe{ USceneComponent_SetRelativeLocation_DirectInvokerHandler = Some(handler) };
    }

    type USceneComponent_SetRelativeRotation_DirectInvoker = unsafe extern "C" fn(*mut c_void, Rotator);
    pub(super) static mut USceneComponent_SetRelativeRotation_DirectInvokerHandler: Option<USceneComponent_SetRelativeRotation_DirectInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_SetRelativeRotation_Direct_handler(handler: USceneComponent_SetRelativeRotation_DirectInvoker){
        unsafe{ USceneComponent_SetRelativeRotation_DirectInvokerHandler = Some(handler) };
    }

    type USceneComponent_SetRelativeScale3DInvoker = unsafe extern "C" fn(*mut c_void, Vector3);
    pub(super) static mut USceneComponent_SetRelativeScale3DInvokerHandler: Option<USceneComponent_SetRelativeScale3DInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_SetRelativeScale3D_handler(handler: USceneComponent_SetRelativeScale3DInvoker){
        unsafe{ USceneComponent_SetRelativeScale3DInvokerHandler = Some(handler) };
    }

    type USceneComponent_SetRelativeScale3D_DirectInvoker = unsafe extern "C" fn(*mut c_void, Vector3);
    pub(super) static mut USceneComponent_SetRelativeScale3D_DirectInvokerHandler: Option<USceneComponent_SetRelativeScale3D_DirectInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_SetRelativeScale3D_Direct_handler(handler: USceneComponent_SetRelativeScale3D_DirectInvoker){
        unsafe{ USceneComponent_SetRelativeScale3D_DirectInvokerHandler = Some(handler) };
    }

    type USceneComponent_SetShouldUpdatePhysicsVolumeInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USceneComponent_SetShouldUpdatePhysicsVolumeInvokerHandler: Option<USceneComponent_SetShouldUpdatePhysicsVolumeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_SetShouldUpdatePhysicsVolume_handler(handler: USceneComponent_SetShouldUpdatePhysicsVolumeInvoker){
        unsafe{ USceneComponent_SetShouldUpdatePhysicsVolumeInvokerHandler = Some(handler) };
    }

    type USceneComponent_SetUsingAbsoluteLocationInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USceneComponent_SetUsingAbsoluteLocationInvokerHandler: Option<USceneComponent_SetUsingAbsoluteLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_SetUsingAbsoluteLocation_handler(handler: USceneComponent_SetUsingAbsoluteLocationInvoker){
        unsafe{ USceneComponent_SetUsingAbsoluteLocationInvokerHandler = Some(handler) };
    }

    type USceneComponent_SetUsingAbsoluteRotationInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USceneComponent_SetUsingAbsoluteRotationInvokerHandler: Option<USceneComponent_SetUsingAbsoluteRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_SetUsingAbsoluteRotation_handler(handler: USceneComponent_SetUsingAbsoluteRotationInvoker){
        unsafe{ USceneComponent_SetUsingAbsoluteRotationInvokerHandler = Some(handler) };
    }

    type USceneComponent_SetUsingAbsoluteScaleInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USceneComponent_SetUsingAbsoluteScaleInvokerHandler: Option<USceneComponent_SetUsingAbsoluteScaleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_SetUsingAbsoluteScale_handler(handler: USceneComponent_SetUsingAbsoluteScaleInvoker){
        unsafe{ USceneComponent_SetUsingAbsoluteScaleInvokerHandler = Some(handler) };
    }

    type USceneComponent_SetVisibilityInvoker = unsafe extern "C" fn(*mut c_void, bool, bool);
    pub(super) static mut USceneComponent_SetVisibilityInvokerHandler: Option<USceneComponent_SetVisibilityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_SetVisibility_handler(handler: USceneComponent_SetVisibilityInvoker){
        unsafe{ USceneComponent_SetVisibilityInvokerHandler = Some(handler) };
    }

    type USceneComponent_SetVisibleFlagInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USceneComponent_SetVisibleFlagInvokerHandler: Option<USceneComponent_SetVisibleFlagInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_SetVisibleFlag_handler(handler: USceneComponent_SetVisibleFlagInvoker){
        unsafe{ USceneComponent_SetVisibleFlagInvokerHandler = Some(handler) };
    }

    type USceneComponent_SetWorldScale3DInvoker = unsafe extern "C" fn(*mut c_void, Vector3);
    pub(super) static mut USceneComponent_SetWorldScale3DInvokerHandler: Option<USceneComponent_SetWorldScale3DInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_SetWorldScale3D_handler(handler: USceneComponent_SetWorldScale3DInvoker){
        unsafe{ USceneComponent_SetWorldScale3DInvokerHandler = Some(handler) };
    }

    type USceneComponent_SetupAttachmentInvoker = unsafe extern "C" fn(*mut c_void, *mut USceneComponentOpaque, UName);
    pub(super) static mut USceneComponent_SetupAttachmentInvokerHandler: Option<USceneComponent_SetupAttachmentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_SetupAttachment_handler(handler: USceneComponent_SetupAttachmentInvoker){
        unsafe{ USceneComponent_SetupAttachmentInvokerHandler = Some(handler) };
    }

    type USceneComponent_ShouldCollideWhenPlacingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_ShouldCollideWhenPlacingInvokerHandler: Option<USceneComponent_ShouldCollideWhenPlacingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_ShouldCollideWhenPlacing_handler(handler: USceneComponent_ShouldCollideWhenPlacingInvoker){
        unsafe{ USceneComponent_ShouldCollideWhenPlacingInvokerHandler = Some(handler) };
    }

    type USceneComponent_ShouldComponentAddToSceneInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_ShouldComponentAddToSceneInvokerHandler: Option<USceneComponent_ShouldComponentAddToSceneInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_ShouldComponentAddToScene_handler(handler: USceneComponent_ShouldComponentAddToSceneInvoker){
        unsafe{ USceneComponent_ShouldComponentAddToSceneInvokerHandler = Some(handler) };
    }

    type USceneComponent_ShouldCreateRenderStateInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_ShouldCreateRenderStateInvokerHandler: Option<USceneComponent_ShouldCreateRenderStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_ShouldCreateRenderState_handler(handler: USceneComponent_ShouldCreateRenderStateInvoker){
        unsafe{ USceneComponent_ShouldCreateRenderStateInvokerHandler = Some(handler) };
    }

    type USceneComponent_ShouldRenderInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_ShouldRenderInvokerHandler: Option<USceneComponent_ShouldRenderInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_ShouldRender_handler(handler: USceneComponent_ShouldRenderInvoker){
        unsafe{ USceneComponent_ShouldRenderInvokerHandler = Some(handler) };
    }

    type USceneComponent_ShouldSkipUpdateOverlapsInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USceneComponent_ShouldSkipUpdateOverlapsInvokerHandler: Option<USceneComponent_ShouldSkipUpdateOverlapsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_ShouldSkipUpdateOverlaps_handler(handler: USceneComponent_ShouldSkipUpdateOverlapsInvoker){
        unsafe{ USceneComponent_ShouldSkipUpdateOverlapsInvokerHandler = Some(handler) };
    }

    type USceneComponent_ToggleVisibilityInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USceneComponent_ToggleVisibilityInvokerHandler: Option<USceneComponent_ToggleVisibilityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_ToggleVisibility_handler(handler: USceneComponent_ToggleVisibilityInvoker){
        unsafe{ USceneComponent_ToggleVisibilityInvokerHandler = Some(handler) };
    }

    type USceneComponent_UpdateBoundsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USceneComponent_UpdateBoundsInvokerHandler: Option<USceneComponent_UpdateBoundsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_UpdateBounds_handler(handler: USceneComponent_UpdateBoundsInvoker){
        unsafe{ USceneComponent_UpdateBoundsInvokerHandler = Some(handler) };
    }

    type USceneComponent_UpdateOverlapsInvoker = unsafe extern "C" fn(*mut c_void, *mut TOverlapArrayViewOpaque, bool, *mut TOverlapArrayViewOpaque) -> bool;
    pub(super) static mut USceneComponent_UpdateOverlapsInvokerHandler: Option<USceneComponent_UpdateOverlapsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_UpdateOverlaps_handler(handler: USceneComponent_UpdateOverlapsInvoker){
        unsafe{ USceneComponent_UpdateOverlapsInvokerHandler = Some(handler) };
    }

    type USceneComponent_UpdatePhysicsVolumeInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USceneComponent_UpdatePhysicsVolumeInvokerHandler: Option<USceneComponent_UpdatePhysicsVolumeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USceneComponent_UpdatePhysicsVolume_handler(handler: USceneComponent_UpdatePhysicsVolumeInvoker){
        unsafe{ USceneComponent_UpdatePhysicsVolumeInvokerHandler = Some(handler) };
    }

    type UActorComponent_ActivateInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UActorComponent_ActivateInvokerHandler: Option<UActorComponent_ActivateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_Activate_handler(handler: UActorComponent_ActivateInvoker){
        unsafe{ UActorComponent_ActivateInvokerHandler = Some(handler) };
    }

    type UActorComponent_AddAssetUserDataInvoker = unsafe extern "C" fn(*mut c_void, *mut UAssetUserDataOpaque);
    pub(super) static mut UActorComponent_AddAssetUserDataInvokerHandler: Option<UActorComponent_AddAssetUserDataInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_AddAssetUserData_handler(handler: UActorComponent_AddAssetUserDataInvoker){
        unsafe{ UActorComponent_AddAssetUserDataInvokerHandler = Some(handler) };
    }

    type UActorComponent_AddTickPrerequisiteActorInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque);
    pub(super) static mut UActorComponent_AddTickPrerequisiteActorInvokerHandler: Option<UActorComponent_AddTickPrerequisiteActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_AddTickPrerequisiteActor_handler(handler: UActorComponent_AddTickPrerequisiteActorInvoker){
        unsafe{ UActorComponent_AddTickPrerequisiteActorInvokerHandler = Some(handler) };
    }

    type UActorComponent_AddTickPrerequisiteComponentInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorComponentOpaque);
    pub(super) static mut UActorComponent_AddTickPrerequisiteComponentInvokerHandler: Option<UActorComponent_AddTickPrerequisiteComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_AddTickPrerequisiteComponent_handler(handler: UActorComponent_AddTickPrerequisiteComponentInvoker){
        unsafe{ UActorComponent_AddTickPrerequisiteComponentInvokerHandler = Some(handler) };
    }

    type UActorComponent_AdditionalStatObjectInvoker = unsafe extern "C" fn(*mut c_void) -> *mut Opaque;
    pub(super) static mut UActorComponent_AdditionalStatObjectInvokerHandler: Option<UActorComponent_AdditionalStatObjectInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_AdditionalStatObject_handler(handler: UActorComponent_AdditionalStatObjectInvoker){
        unsafe{ UActorComponent_AdditionalStatObjectInvokerHandler = Some(handler) };
    }

    type UActorComponent_AllowReregistrationInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_AllowReregistrationInvokerHandler: Option<UActorComponent_AllowReregistrationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_AllowReregistration_handler(handler: UActorComponent_AllowReregistrationInvoker){
        unsafe{ UActorComponent_AllowReregistrationInvokerHandler = Some(handler) };
    }

    type UActorComponent_AsyncPhysicsTickComponentInvoker = unsafe extern "C" fn(*mut c_void, f32, f32);
    pub(super) static mut UActorComponent_AsyncPhysicsTickComponentInvokerHandler: Option<UActorComponent_AsyncPhysicsTickComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_AsyncPhysicsTickComponent_handler(handler: UActorComponent_AsyncPhysicsTickComponentInvoker){
        unsafe{ UActorComponent_AsyncPhysicsTickComponentInvokerHandler = Some(handler) };
    }

    type UActorComponent_BeginDestroyInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_BeginDestroyInvokerHandler: Option<UActorComponent_BeginDestroyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_BeginDestroy_handler(handler: UActorComponent_BeginDestroyInvoker){
        unsafe{ UActorComponent_BeginDestroyInvokerHandler = Some(handler) };
    }

    type UActorComponent_BeginPlayInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_BeginPlayInvokerHandler: Option<UActorComponent_BeginPlayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_BeginPlay_handler(handler: UActorComponent_BeginPlayInvoker){
        unsafe{ UActorComponent_BeginPlayInvokerHandler = Some(handler) };
    }

    type UActorComponent_CallRemoteFunctionInvoker = unsafe extern "C" fn(*mut c_void, *mut UFunctionOpaque, *mut c_void, *mut FOutParmRecOpaque, *mut FFrameOpaque) -> bool;
    pub(super) static mut UActorComponent_CallRemoteFunctionInvokerHandler: Option<UActorComponent_CallRemoteFunctionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_CallRemoteFunction_handler(handler: UActorComponent_CallRemoteFunctionInvoker){
        unsafe{ UActorComponent_CallRemoteFunctionInvokerHandler = Some(handler) };
    }

    type UActorComponent_CanEditChangeInvoker = unsafe extern "C" fn(*mut c_void, *mut FPropertyOpaque) -> bool;
    pub(super) static mut UActorComponent_CanEditChangeInvokerHandler: Option<UActorComponent_CanEditChangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_CanEditChange_handler(handler: UActorComponent_CanEditChangeInvoker){
        unsafe{ UActorComponent_CanEditChangeInvokerHandler = Some(handler) };
    }

    type UActorComponent_CanEverAffectNavigationInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_CanEverAffectNavigationInvokerHandler: Option<UActorComponent_CanEverAffectNavigationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_CanEverAffectNavigation_handler(handler: UActorComponent_CanEverAffectNavigationInvoker){
        unsafe{ UActorComponent_CanEverAffectNavigationInvokerHandler = Some(handler) };
    }

    type UActorComponent_CheckForErrorsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_CheckForErrorsInvokerHandler: Option<UActorComponent_CheckForErrorsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_CheckForErrors_handler(handler: UActorComponent_CheckForErrorsInvoker){
        unsafe{ UActorComponent_CheckForErrorsInvokerHandler = Some(handler) };
    }

    type UActorComponent_ClearNeedEndOfFrameUpdateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_ClearNeedEndOfFrameUpdateInvokerHandler: Option<UActorComponent_ClearNeedEndOfFrameUpdateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_ClearNeedEndOfFrameUpdate_handler(handler: UActorComponent_ClearNeedEndOfFrameUpdateInvoker){
        unsafe{ UActorComponent_ClearNeedEndOfFrameUpdateInvokerHandler = Some(handler) };
    }

    type UActorComponent_ClearUCSModifiedPropertiesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_ClearUCSModifiedPropertiesInvokerHandler: Option<UActorComponent_ClearUCSModifiedPropertiesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_ClearUCSModifiedProperties_handler(handler: UActorComponent_ClearUCSModifiedPropertiesInvoker){
        unsafe{ UActorComponent_ClearUCSModifiedPropertiesInvokerHandler = Some(handler) };
    }

    type UActorComponent_ComponentHasTagInvoker = unsafe extern "C" fn(*mut c_void, UName) -> bool;
    pub(super) static mut UActorComponent_ComponentHasTagInvokerHandler: Option<UActorComponent_ComponentHasTagInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_ComponentHasTag_handler(handler: UActorComponent_ComponentHasTagInvoker){
        unsafe{ UActorComponent_ComponentHasTagInvokerHandler = Some(handler) };
    }

    type UActorComponent_ComponentIsInLevelInvoker = unsafe extern "C" fn(*mut c_void, *mut ULevelOpaque) -> bool;
    pub(super) static mut UActorComponent_ComponentIsInLevelInvokerHandler: Option<UActorComponent_ComponentIsInLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_ComponentIsInLevel_handler(handler: UActorComponent_ComponentIsInLevelInvoker){
        unsafe{ UActorComponent_ComponentIsInLevelInvokerHandler = Some(handler) };
    }

    type UActorComponent_ComponentIsInPersistentLevelInvoker = unsafe extern "C" fn(*mut c_void, bool) -> bool;
    pub(super) static mut UActorComponent_ComponentIsInPersistentLevelInvokerHandler: Option<UActorComponent_ComponentIsInPersistentLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_ComponentIsInPersistentLevel_handler(handler: UActorComponent_ComponentIsInPersistentLevelInvoker){
        unsafe{ UActorComponent_ComponentIsInPersistentLevelInvokerHandler = Some(handler) };
    }

    type UActorComponent_CreatePhysicsStateInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UActorComponent_CreatePhysicsStateInvokerHandler: Option<UActorComponent_CreatePhysicsStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_CreatePhysicsState_handler(handler: UActorComponent_CreatePhysicsStateInvoker){
        unsafe{ UActorComponent_CreatePhysicsStateInvokerHandler = Some(handler) };
    }

    type UActorComponent_DeactivateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_DeactivateInvokerHandler: Option<UActorComponent_DeactivateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_Deactivate_handler(handler: UActorComponent_DeactivateInvoker){
        unsafe{ UActorComponent_DeactivateInvokerHandler = Some(handler) };
    }

    type UActorComponent_DestroyComponentInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UActorComponent_DestroyComponentInvokerHandler: Option<UActorComponent_DestroyComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_DestroyComponent_handler(handler: UActorComponent_DestroyComponentInvoker){
        unsafe{ UActorComponent_DestroyComponentInvokerHandler = Some(handler) };
    }

    type UActorComponent_DestroyPhysicsStateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_DestroyPhysicsStateInvokerHandler: Option<UActorComponent_DestroyPhysicsStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_DestroyPhysicsState_handler(handler: UActorComponent_DestroyPhysicsStateInvoker){
        unsafe{ UActorComponent_DestroyPhysicsStateInvokerHandler = Some(handler) };
    }

    type UActorComponent_DetermineUCSModifiedPropertiesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_DetermineUCSModifiedPropertiesInvokerHandler: Option<UActorComponent_DetermineUCSModifiedPropertiesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_DetermineUCSModifiedProperties_handler(handler: UActorComponent_DetermineUCSModifiedPropertiesInvoker){
        unsafe{ UActorComponent_DetermineUCSModifiedPropertiesInvokerHandler = Some(handler) };
    }

    type UActorComponent_DoDeferredRenderUpdates_ConcurrentInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_DoDeferredRenderUpdates_ConcurrentInvokerHandler: Option<UActorComponent_DoDeferredRenderUpdates_ConcurrentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_DoDeferredRenderUpdates_Concurrent_handler(handler: UActorComponent_DoDeferredRenderUpdates_ConcurrentInvoker){
        unsafe{ UActorComponent_DoDeferredRenderUpdates_ConcurrentInvokerHandler = Some(handler) };
    }

    type UActorComponent_GetComponentClassCanReplicateInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_GetComponentClassCanReplicateInvokerHandler: Option<UActorComponent_GetComponentClassCanReplicateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_GetComponentClassCanReplicate_handler(handler: UActorComponent_GetComponentClassCanReplicateInvoker){
        unsafe{ UActorComponent_GetComponentClassCanReplicateInvokerHandler = Some(handler) };
    }

    type UActorComponent_GetComponentLevelInvoker = unsafe extern "C" fn(*mut c_void) -> *mut ULevelOpaque;
    pub(super) static mut UActorComponent_GetComponentLevelInvokerHandler: Option<UActorComponent_GetComponentLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_GetComponentLevel_handler(handler: UActorComponent_GetComponentLevelInvoker){
        unsafe{ UActorComponent_GetComponentLevelInvokerHandler = Some(handler) };
    }

    type UActorComponent_GetComponentTickIntervalInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UActorComponent_GetComponentTickIntervalInvokerHandler: Option<UActorComponent_GetComponentTickIntervalInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_GetComponentTickInterval_handler(handler: UActorComponent_GetComponentTickIntervalInvoker){
        unsafe{ UActorComponent_GetComponentTickIntervalInvokerHandler = Some(handler) };
    }

    type UActorComponent_GetFunctionCallspaceInvoker = unsafe extern "C" fn(*mut c_void, *mut UFunctionOpaque, *mut FFrameOpaque) -> i32;
    pub(super) static mut UActorComponent_GetFunctionCallspaceInvokerHandler: Option<UActorComponent_GetFunctionCallspaceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_GetFunctionCallspace_handler(handler: UActorComponent_GetFunctionCallspaceInvoker){
        unsafe{ UActorComponent_GetFunctionCallspaceInvokerHandler = Some(handler) };
    }

    type UActorComponent_GetIsReplicatedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_GetIsReplicatedInvokerHandler: Option<UActorComponent_GetIsReplicatedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_GetIsReplicated_handler(handler: UActorComponent_GetIsReplicatedInvoker){
        unsafe{ UActorComponent_GetIsReplicatedInvokerHandler = Some(handler) };
    }

    type UActorComponent_GetMarkedForEndOfFrameUpdateStateInvoker = unsafe extern "C" fn(*mut c_void) -> u32;
    pub(super) static mut UActorComponent_GetMarkedForEndOfFrameUpdateStateInvokerHandler: Option<UActorComponent_GetMarkedForEndOfFrameUpdateStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_GetMarkedForEndOfFrameUpdateState_handler(handler: UActorComponent_GetMarkedForEndOfFrameUpdateStateInvoker){
        unsafe{ UActorComponent_GetMarkedForEndOfFrameUpdateStateInvokerHandler = Some(handler) };
    }

    type UActorComponent_GetMarkedForPreEndOfFrameSyncInvoker = unsafe extern "C" fn(*mut c_void) -> u32;
    pub(super) static mut UActorComponent_GetMarkedForPreEndOfFrameSyncInvokerHandler: Option<UActorComponent_GetMarkedForPreEndOfFrameSyncInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_GetMarkedForPreEndOfFrameSync_handler(handler: UActorComponent_GetMarkedForPreEndOfFrameSyncInvoker){
        unsafe{ UActorComponent_GetMarkedForPreEndOfFrameSyncInvokerHandler = Some(handler) };
    }

    type UActorComponent_GetOwnerInvoker = unsafe extern "C" fn(*mut c_void) -> *mut AActorOpaque;
    pub(super) static mut UActorComponent_GetOwnerInvokerHandler: Option<UActorComponent_GetOwnerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_GetOwner_handler(handler: UActorComponent_GetOwnerInvoker){
        unsafe{ UActorComponent_GetOwnerInvokerHandler = Some(handler) };
    }

    type UActorComponent_GetReadableNameInvoker = unsafe extern "C" fn(*mut c_void) -> *const std::os::raw::c_char;
    pub(super) static mut UActorComponent_GetReadableNameInvokerHandler: Option<UActorComponent_GetReadableNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_GetReadableName_handler(handler: UActorComponent_GetReadableNameInvoker){
        unsafe{ UActorComponent_GetReadableNameInvokerHandler = Some(handler) };
    }

    type UActorComponent_GetSceneInvoker = unsafe extern "C" fn(*mut c_void) -> *mut FSceneInterfaceOpaque;
    pub(super) static mut UActorComponent_GetSceneInvokerHandler: Option<UActorComponent_GetSceneInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_GetScene_handler(handler: UActorComponent_GetSceneInvoker){
        unsafe{ UActorComponent_GetSceneInvokerHandler = Some(handler) };
    }

    type UActorComponent_GetUCSSerializationIndexInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UActorComponent_GetUCSSerializationIndexInvokerHandler: Option<UActorComponent_GetUCSSerializationIndexInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_GetUCSSerializationIndex_handler(handler: UActorComponent_GetUCSSerializationIndexInvoker){
        unsafe{ UActorComponent_GetUCSSerializationIndexInvokerHandler = Some(handler) };
    }

    type UActorComponent_GetWorldInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UWorldOpaque;
    pub(super) static mut UActorComponent_GetWorldInvokerHandler: Option<UActorComponent_GetWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_GetWorld_handler(handler: UActorComponent_GetWorldInvoker){
        unsafe{ UActorComponent_GetWorldInvokerHandler = Some(handler) };
    }

    type UActorComponent_HasBeenCreatedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_HasBeenCreatedInvokerHandler: Option<UActorComponent_HasBeenCreatedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_HasBeenCreated_handler(handler: UActorComponent_HasBeenCreatedInvoker){
        unsafe{ UActorComponent_HasBeenCreatedInvokerHandler = Some(handler) };
    }

    type UActorComponent_HasBeenInitializedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_HasBeenInitializedInvokerHandler: Option<UActorComponent_HasBeenInitializedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_HasBeenInitialized_handler(handler: UActorComponent_HasBeenInitializedInvoker){
        unsafe{ UActorComponent_HasBeenInitializedInvokerHandler = Some(handler) };
    }

    type UActorComponent_HasBegunPlayInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_HasBegunPlayInvokerHandler: Option<UActorComponent_HasBegunPlayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_HasBegunPlay_handler(handler: UActorComponent_HasBegunPlayInvoker){
        unsafe{ UActorComponent_HasBegunPlayInvokerHandler = Some(handler) };
    }

    type UActorComponent_InitializeComponentInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_InitializeComponentInvokerHandler: Option<UActorComponent_InitializeComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_InitializeComponent_handler(handler: UActorComponent_InitializeComponentInvoker){
        unsafe{ UActorComponent_InitializeComponentInvokerHandler = Some(handler) };
    }

    type UActorComponent_InvalidateLightingCacheInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_InvalidateLightingCacheInvokerHandler: Option<UActorComponent_InvalidateLightingCacheInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_InvalidateLightingCache_handler(handler: UActorComponent_InvalidateLightingCacheInvoker){
        unsafe{ UActorComponent_InvalidateLightingCacheInvokerHandler = Some(handler) };
    }

    type UActorComponent_InvalidateLightingCacheDetailedInvoker = unsafe extern "C" fn(*mut c_void, bool, bool);
    pub(super) static mut UActorComponent_InvalidateLightingCacheDetailedInvokerHandler: Option<UActorComponent_InvalidateLightingCacheDetailedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_InvalidateLightingCacheDetailed_handler(handler: UActorComponent_InvalidateLightingCacheDetailedInvoker){
        unsafe{ UActorComponent_InvalidateLightingCacheDetailedInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsActiveInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsActiveInvokerHandler: Option<UActorComponent_IsActiveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsActive_handler(handler: UActorComponent_IsActiveInvoker){
        unsafe{ UActorComponent_IsActiveInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsBeingDestroyedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsBeingDestroyedInvokerHandler: Option<UActorComponent_IsBeingDestroyedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsBeingDestroyed_handler(handler: UActorComponent_IsBeingDestroyedInvoker){
        unsafe{ UActorComponent_IsBeingDestroyedInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsComponentTickEnabledInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsComponentTickEnabledInvokerHandler: Option<UActorComponent_IsComponentTickEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsComponentTickEnabled_handler(handler: UActorComponent_IsComponentTickEnabledInvoker){
        unsafe{ UActorComponent_IsComponentTickEnabledInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsCreatedByConstructionScriptInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsCreatedByConstructionScriptInvokerHandler: Option<UActorComponent_IsCreatedByConstructionScriptInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsCreatedByConstructionScript_handler(handler: UActorComponent_IsCreatedByConstructionScriptInvoker){
        unsafe{ UActorComponent_IsCreatedByConstructionScriptInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsEditableWhenInheritedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsEditableWhenInheritedInvokerHandler: Option<UActorComponent_IsEditableWhenInheritedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsEditableWhenInherited_handler(handler: UActorComponent_IsEditableWhenInheritedInvoker){
        unsafe{ UActorComponent_IsEditableWhenInheritedInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsEditorOnlyInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsEditorOnlyInvokerHandler: Option<UActorComponent_IsEditorOnlyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsEditorOnly_handler(handler: UActorComponent_IsEditorOnlyInvoker){
        unsafe{ UActorComponent_IsEditorOnlyInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsHLODRelevantInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsHLODRelevantInvokerHandler: Option<UActorComponent_IsHLODRelevantInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsHLODRelevant_handler(handler: UActorComponent_IsHLODRelevantInvoker){
        unsafe{ UActorComponent_IsHLODRelevantInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsNameStableForNetworkingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsNameStableForNetworkingInvokerHandler: Option<UActorComponent_IsNameStableForNetworkingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsNameStableForNetworking_handler(handler: UActorComponent_IsNameStableForNetworkingInvoker){
        unsafe{ UActorComponent_IsNameStableForNetworkingInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsNavigationRelevantInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsNavigationRelevantInvokerHandler: Option<UActorComponent_IsNavigationRelevantInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsNavigationRelevant_handler(handler: UActorComponent_IsNavigationRelevantInvoker){
        unsafe{ UActorComponent_IsNavigationRelevantInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsNetSimulatingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsNetSimulatingInvokerHandler: Option<UActorComponent_IsNetSimulatingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsNetSimulating_handler(handler: UActorComponent_IsNetSimulatingInvoker){
        unsafe{ UActorComponent_IsNetSimulatingInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsNetStartupComponentInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsNetStartupComponentInvokerHandler: Option<UActorComponent_IsNetStartupComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsNetStartupComponent_handler(handler: UActorComponent_IsNetStartupComponentInvoker){
        unsafe{ UActorComponent_IsNetStartupComponentInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsOwnerRunningUserConstructionScriptInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsOwnerRunningUserConstructionScriptInvokerHandler: Option<UActorComponent_IsOwnerRunningUserConstructionScriptInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsOwnerRunningUserConstructionScript_handler(handler: UActorComponent_IsOwnerRunningUserConstructionScriptInvoker){
        unsafe{ UActorComponent_IsOwnerRunningUserConstructionScriptInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsOwnerSelectedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsOwnerSelectedInvokerHandler: Option<UActorComponent_IsOwnerSelectedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsOwnerSelected_handler(handler: UActorComponent_IsOwnerSelectedInvoker){
        unsafe{ UActorComponent_IsOwnerSelectedInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsPhysicsStateCreatedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsPhysicsStateCreatedInvokerHandler: Option<UActorComponent_IsPhysicsStateCreatedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsPhysicsStateCreated_handler(handler: UActorComponent_IsPhysicsStateCreatedInvoker){
        unsafe{ UActorComponent_IsPhysicsStateCreatedInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsReadyForOwnerToAutoDestroyInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsReadyForOwnerToAutoDestroyInvokerHandler: Option<UActorComponent_IsReadyForOwnerToAutoDestroyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsReadyForOwnerToAutoDestroy_handler(handler: UActorComponent_IsReadyForOwnerToAutoDestroyInvoker){
        unsafe{ UActorComponent_IsReadyForOwnerToAutoDestroyInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsReadyForReplicationInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsReadyForReplicationInvokerHandler: Option<UActorComponent_IsReadyForReplicationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsReadyForReplication_handler(handler: UActorComponent_IsReadyForReplicationInvoker){
        unsafe{ UActorComponent_IsReadyForReplicationInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsRegisteredInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsRegisteredInvokerHandler: Option<UActorComponent_IsRegisteredInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsRegistered_handler(handler: UActorComponent_IsRegisteredInvoker){
        unsafe{ UActorComponent_IsRegisteredInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsRenderInstancesDirtyInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsRenderInstancesDirtyInvokerHandler: Option<UActorComponent_IsRenderInstancesDirtyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsRenderInstancesDirty_handler(handler: UActorComponent_IsRenderInstancesDirtyInvoker){
        unsafe{ UActorComponent_IsRenderInstancesDirtyInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsRenderStateCreatedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsRenderStateCreatedInvokerHandler: Option<UActorComponent_IsRenderStateCreatedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsRenderStateCreated_handler(handler: UActorComponent_IsRenderStateCreatedInvoker){
        unsafe{ UActorComponent_IsRenderStateCreatedInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsRenderStateDirtyInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsRenderStateDirtyInvokerHandler: Option<UActorComponent_IsRenderStateDirtyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsRenderStateDirty_handler(handler: UActorComponent_IsRenderStateDirtyInvoker){
        unsafe{ UActorComponent_IsRenderStateDirtyInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsRenderTransformDirtyInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsRenderTransformDirtyInvokerHandler: Option<UActorComponent_IsRenderTransformDirtyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsRenderTransformDirty_handler(handler: UActorComponent_IsRenderTransformDirtyInvoker){
        unsafe{ UActorComponent_IsRenderTransformDirtyInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsReplicatedSubObjectRegisteredInvoker = unsafe extern "C" fn(*mut c_void, *mut UObjectOpaque) -> bool;
    pub(super) static mut UActorComponent_IsReplicatedSubObjectRegisteredInvokerHandler: Option<UActorComponent_IsReplicatedSubObjectRegisteredInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsReplicatedSubObjectRegistered_handler(handler: UActorComponent_IsReplicatedSubObjectRegisteredInvoker){
        unsafe{ UActorComponent_IsReplicatedSubObjectRegisteredInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsSelectedInEditorInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsSelectedInEditorInvokerHandler: Option<UActorComponent_IsSelectedInEditorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsSelectedInEditor_handler(handler: UActorComponent_IsSelectedInEditorInvoker){
        unsafe{ UActorComponent_IsSelectedInEditorInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsSupportedForNetworkingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsSupportedForNetworkingInvokerHandler: Option<UActorComponent_IsSupportedForNetworkingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsSupportedForNetworking_handler(handler: UActorComponent_IsSupportedForNetworkingInvoker){
        unsafe{ UActorComponent_IsSupportedForNetworkingInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsUsingRegisteredSubObjectListInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsUsingRegisteredSubObjectListInvokerHandler: Option<UActorComponent_IsUsingRegisteredSubObjectListInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsUsingRegisteredSubObjectList_handler(handler: UActorComponent_IsUsingRegisteredSubObjectListInvoker){
        unsafe{ UActorComponent_IsUsingRegisteredSubObjectListInvokerHandler = Some(handler) };
    }

    type UActorComponent_IsVisualizationComponentInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_IsVisualizationComponentInvokerHandler: Option<UActorComponent_IsVisualizationComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_IsVisualizationComponent_handler(handler: UActorComponent_IsVisualizationComponentInvoker){
        unsafe{ UActorComponent_IsVisualizationComponentInvokerHandler = Some(handler) };
    }

    type UActorComponent_K2_DestroyComponentInvoker = unsafe extern "C" fn(*mut c_void, *mut UObjectOpaque);
    pub(super) static mut UActorComponent_K2_DestroyComponentInvokerHandler: Option<UActorComponent_K2_DestroyComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_K2_DestroyComponent_handler(handler: UActorComponent_K2_DestroyComponentInvoker){
        unsafe{ UActorComponent_K2_DestroyComponentInvokerHandler = Some(handler) };
    }

    type UActorComponent_MarkAsEditorOnlySubobjectInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_MarkAsEditorOnlySubobjectInvokerHandler: Option<UActorComponent_MarkAsEditorOnlySubobjectInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_MarkAsEditorOnlySubobject_handler(handler: UActorComponent_MarkAsEditorOnlySubobjectInvoker){
        unsafe{ UActorComponent_MarkAsEditorOnlySubobjectInvokerHandler = Some(handler) };
    }

    type UActorComponent_MarkForNeededEndOfFrameRecreateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_MarkForNeededEndOfFrameRecreateInvokerHandler: Option<UActorComponent_MarkForNeededEndOfFrameRecreateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_MarkForNeededEndOfFrameRecreate_handler(handler: UActorComponent_MarkForNeededEndOfFrameRecreateInvoker){
        unsafe{ UActorComponent_MarkForNeededEndOfFrameRecreateInvokerHandler = Some(handler) };
    }

    type UActorComponent_MarkForNeededEndOfFrameUpdateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_MarkForNeededEndOfFrameUpdateInvokerHandler: Option<UActorComponent_MarkForNeededEndOfFrameUpdateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_MarkForNeededEndOfFrameUpdate_handler(handler: UActorComponent_MarkForNeededEndOfFrameUpdateInvoker){
        unsafe{ UActorComponent_MarkForNeededEndOfFrameUpdateInvokerHandler = Some(handler) };
    }

    type UActorComponent_MarkRenderDynamicDataDirtyInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_MarkRenderDynamicDataDirtyInvokerHandler: Option<UActorComponent_MarkRenderDynamicDataDirtyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_MarkRenderDynamicDataDirty_handler(handler: UActorComponent_MarkRenderDynamicDataDirtyInvoker){
        unsafe{ UActorComponent_MarkRenderDynamicDataDirtyInvokerHandler = Some(handler) };
    }

    type UActorComponent_MarkRenderInstancesDirtyInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_MarkRenderInstancesDirtyInvokerHandler: Option<UActorComponent_MarkRenderInstancesDirtyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_MarkRenderInstancesDirty_handler(handler: UActorComponent_MarkRenderInstancesDirtyInvoker){
        unsafe{ UActorComponent_MarkRenderInstancesDirtyInvokerHandler = Some(handler) };
    }

    type UActorComponent_MarkRenderStateDirtyInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_MarkRenderStateDirtyInvokerHandler: Option<UActorComponent_MarkRenderStateDirtyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_MarkRenderStateDirty_handler(handler: UActorComponent_MarkRenderStateDirtyInvoker){
        unsafe{ UActorComponent_MarkRenderStateDirtyInvokerHandler = Some(handler) };
    }

    type UActorComponent_MarkRenderTransformDirtyInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_MarkRenderTransformDirtyInvokerHandler: Option<UActorComponent_MarkRenderTransformDirtyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_MarkRenderTransformDirty_handler(handler: UActorComponent_MarkRenderTransformDirtyInvoker){
        unsafe{ UActorComponent_MarkRenderTransformDirtyInvokerHandler = Some(handler) };
    }

    type UActorComponent_ModifyInvoker = unsafe extern "C" fn(*mut c_void, bool) -> bool;
    pub(super) static mut UActorComponent_ModifyInvokerHandler: Option<UActorComponent_ModifyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_Modify_handler(handler: UActorComponent_ModifyInvoker){
        unsafe{ UActorComponent_ModifyInvokerHandler = Some(handler) };
    }

    type UActorComponent_NeedsLoadForClientInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_NeedsLoadForClientInvokerHandler: Option<UActorComponent_NeedsLoadForClientInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_NeedsLoadForClient_handler(handler: UActorComponent_NeedsLoadForClientInvoker){
        unsafe{ UActorComponent_NeedsLoadForClientInvokerHandler = Some(handler) };
    }

    type UActorComponent_NeedsLoadForEditorGameInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_NeedsLoadForEditorGameInvokerHandler: Option<UActorComponent_NeedsLoadForEditorGameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_NeedsLoadForEditorGame_handler(handler: UActorComponent_NeedsLoadForEditorGameInvoker){
        unsafe{ UActorComponent_NeedsLoadForEditorGameInvokerHandler = Some(handler) };
    }

    type UActorComponent_NeedsLoadForServerInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_NeedsLoadForServerInvokerHandler: Option<UActorComponent_NeedsLoadForServerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_NeedsLoadForServer_handler(handler: UActorComponent_NeedsLoadForServerInvoker){
        unsafe{ UActorComponent_NeedsLoadForServerInvokerHandler = Some(handler) };
    }

    type UActorComponent_OnActorEnableCollisionChangedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_OnActorEnableCollisionChangedInvokerHandler: Option<UActorComponent_OnActorEnableCollisionChangedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_OnActorEnableCollisionChanged_handler(handler: UActorComponent_OnActorEnableCollisionChangedInvoker){
        unsafe{ UActorComponent_OnActorEnableCollisionChangedInvokerHandler = Some(handler) };
    }

    type UActorComponent_OnComponentCreatedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_OnComponentCreatedInvokerHandler: Option<UActorComponent_OnComponentCreatedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_OnComponentCreated_handler(handler: UActorComponent_OnComponentCreatedInvoker){
        unsafe{ UActorComponent_OnComponentCreatedInvokerHandler = Some(handler) };
    }

    type UActorComponent_OnComponentDestroyedInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UActorComponent_OnComponentDestroyedInvokerHandler: Option<UActorComponent_OnComponentDestroyedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_OnComponentDestroyed_handler(handler: UActorComponent_OnComponentDestroyedInvoker){
        unsafe{ UActorComponent_OnComponentDestroyedInvokerHandler = Some(handler) };
    }

    type UActorComponent_OnCreatedFromReplicationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_OnCreatedFromReplicationInvokerHandler: Option<UActorComponent_OnCreatedFromReplicationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_OnCreatedFromReplication_handler(handler: UActorComponent_OnCreatedFromReplicationInvoker){
        unsafe{ UActorComponent_OnCreatedFromReplicationInvokerHandler = Some(handler) };
    }

    type UActorComponent_OnDestroyedFromReplicationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_OnDestroyedFromReplicationInvokerHandler: Option<UActorComponent_OnDestroyedFromReplicationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_OnDestroyedFromReplication_handler(handler: UActorComponent_OnDestroyedFromReplicationInvoker){
        unsafe{ UActorComponent_OnDestroyedFromReplicationInvokerHandler = Some(handler) };
    }

    type UActorComponent_OnEndOfFrameUpdateDuringTickInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_OnEndOfFrameUpdateDuringTickInvokerHandler: Option<UActorComponent_OnEndOfFrameUpdateDuringTickInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_OnEndOfFrameUpdateDuringTick_handler(handler: UActorComponent_OnEndOfFrameUpdateDuringTickInvoker){
        unsafe{ UActorComponent_OnEndOfFrameUpdateDuringTickInvokerHandler = Some(handler) };
    }

    type UActorComponent_OnPreEndOfFrameSyncInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_OnPreEndOfFrameSyncInvokerHandler: Option<UActorComponent_OnPreEndOfFrameSyncInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_OnPreEndOfFrameSync_handler(handler: UActorComponent_OnPreEndOfFrameSyncInvoker){
        unsafe{ UActorComponent_OnPreEndOfFrameSyncInvokerHandler = Some(handler) };
    }

    type UActorComponent_OnRep_IsActiveInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_OnRep_IsActiveInvokerHandler: Option<UActorComponent_OnRep_IsActiveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_OnRep_IsActive_handler(handler: UActorComponent_OnRep_IsActiveInvoker){
        unsafe{ UActorComponent_OnRep_IsActiveInvokerHandler = Some(handler) };
    }

    type UActorComponent_PostApplyToComponentInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_PostApplyToComponentInvokerHandler: Option<UActorComponent_PostApplyToComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_PostApplyToComponent_handler(handler: UActorComponent_PostApplyToComponentInvoker){
        unsafe{ UActorComponent_PostApplyToComponentInvokerHandler = Some(handler) };
    }

    type UActorComponent_PostEditUndoInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_PostEditUndoInvokerHandler: Option<UActorComponent_PostEditUndoInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_PostEditUndo_handler(handler: UActorComponent_PostEditUndoInvoker){
        unsafe{ UActorComponent_PostEditUndoInvokerHandler = Some(handler) };
    }

    type UActorComponent_PostInitPropertiesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_PostInitPropertiesInvokerHandler: Option<UActorComponent_PostInitPropertiesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_PostInitProperties_handler(handler: UActorComponent_PostInitPropertiesInvoker){
        unsafe{ UActorComponent_PostInitPropertiesInvokerHandler = Some(handler) };
    }

    type UActorComponent_PostLoadInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_PostLoadInvokerHandler: Option<UActorComponent_PostLoadInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_PostLoad_handler(handler: UActorComponent_PostLoadInvoker){
        unsafe{ UActorComponent_PostLoadInvokerHandler = Some(handler) };
    }

    type UActorComponent_PostRenameInvoker = unsafe extern "C" fn(*mut c_void, *mut UObjectOpaque, UName);
    pub(super) static mut UActorComponent_PostRenameInvokerHandler: Option<UActorComponent_PostRenameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_PostRename_handler(handler: UActorComponent_PostRenameInvoker){
        unsafe{ UActorComponent_PostRenameInvokerHandler = Some(handler) };
    }

    type UActorComponent_PreEditChangeInvoker = unsafe extern "C" fn(*mut c_void, *mut FPropertyOpaque);
    pub(super) static mut UActorComponent_PreEditChangeInvokerHandler: Option<UActorComponent_PreEditChangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_PreEditChange_handler(handler: UActorComponent_PreEditChangeInvoker){
        unsafe{ UActorComponent_PreEditChangeInvokerHandler = Some(handler) };
    }

    type UActorComponent_PreEditUndoInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_PreEditUndoInvokerHandler: Option<UActorComponent_PreEditUndoInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_PreEditUndo_handler(handler: UActorComponent_PreEditUndoInvoker){
        unsafe{ UActorComponent_PreEditUndoInvokerHandler = Some(handler) };
    }

    type UActorComponent_ReadyForReplicationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_ReadyForReplicationInvokerHandler: Option<UActorComponent_ReadyForReplicationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_ReadyForReplication_handler(handler: UActorComponent_ReadyForReplicationInvoker){
        unsafe{ UActorComponent_ReadyForReplicationInvokerHandler = Some(handler) };
    }

    type UActorComponent_ReceiveAsyncPhysicsTickInvoker = unsafe extern "C" fn(*mut c_void, f32, f32);
    pub(super) static mut UActorComponent_ReceiveAsyncPhysicsTickInvokerHandler: Option<UActorComponent_ReceiveAsyncPhysicsTickInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_ReceiveAsyncPhysicsTick_handler(handler: UActorComponent_ReceiveAsyncPhysicsTickInvoker){
        unsafe{ UActorComponent_ReceiveAsyncPhysicsTickInvokerHandler = Some(handler) };
    }

    type UActorComponent_ReceiveBeginPlayInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_ReceiveBeginPlayInvokerHandler: Option<UActorComponent_ReceiveBeginPlayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_ReceiveBeginPlay_handler(handler: UActorComponent_ReceiveBeginPlayInvoker){
        unsafe{ UActorComponent_ReceiveBeginPlayInvokerHandler = Some(handler) };
    }

    type UActorComponent_ReceiveTickInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UActorComponent_ReceiveTickInvokerHandler: Option<UActorComponent_ReceiveTickInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_ReceiveTick_handler(handler: UActorComponent_ReceiveTickInvoker){
        unsafe{ UActorComponent_ReceiveTickInvokerHandler = Some(handler) };
    }

    type UActorComponent_RecreatePhysicsStateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_RecreatePhysicsStateInvokerHandler: Option<UActorComponent_RecreatePhysicsStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_RecreatePhysicsState_handler(handler: UActorComponent_RecreatePhysicsStateInvoker){
        unsafe{ UActorComponent_RecreatePhysicsStateInvokerHandler = Some(handler) };
    }

    type UActorComponent_RecreateRenderState_ConcurrentInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_RecreateRenderState_ConcurrentInvokerHandler: Option<UActorComponent_RecreateRenderState_ConcurrentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_RecreateRenderState_Concurrent_handler(handler: UActorComponent_RecreateRenderState_ConcurrentInvoker){
        unsafe{ UActorComponent_RecreateRenderState_ConcurrentInvokerHandler = Some(handler) };
    }

    type UActorComponent_RegisterAllComponentTickFunctionsInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UActorComponent_RegisterAllComponentTickFunctionsInvokerHandler: Option<UActorComponent_RegisterAllComponentTickFunctionsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_RegisterAllComponentTickFunctions_handler(handler: UActorComponent_RegisterAllComponentTickFunctionsInvoker){
        unsafe{ UActorComponent_RegisterAllComponentTickFunctionsInvokerHandler = Some(handler) };
    }

    type UActorComponent_RegisterComponentInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_RegisterComponentInvokerHandler: Option<UActorComponent_RegisterComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_RegisterComponent_handler(handler: UActorComponent_RegisterComponentInvoker){
        unsafe{ UActorComponent_RegisterComponentInvokerHandler = Some(handler) };
    }

    type UActorComponent_RegisterComponentWithWorldInvoker = unsafe extern "C" fn(*mut c_void, *mut UWorldOpaque, *mut FRegisterComponentContextOpaque);
    pub(super) static mut UActorComponent_RegisterComponentWithWorldInvokerHandler: Option<UActorComponent_RegisterComponentWithWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_RegisterComponentWithWorld_handler(handler: UActorComponent_RegisterComponentWithWorldInvoker){
        unsafe{ UActorComponent_RegisterComponentWithWorldInvokerHandler = Some(handler) };
    }

    type UActorComponent_RemoveReplicatedSubObjectInvoker = unsafe extern "C" fn(*mut c_void, *mut UObjectOpaque);
    pub(super) static mut UActorComponent_RemoveReplicatedSubObjectInvokerHandler: Option<UActorComponent_RemoveReplicatedSubObjectInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_RemoveReplicatedSubObject_handler(handler: UActorComponent_RemoveReplicatedSubObjectInvoker){
        unsafe{ UActorComponent_RemoveReplicatedSubObjectInvokerHandler = Some(handler) };
    }

    type UActorComponent_RemoveTickPrerequisiteActorInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque);
    pub(super) static mut UActorComponent_RemoveTickPrerequisiteActorInvokerHandler: Option<UActorComponent_RemoveTickPrerequisiteActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_RemoveTickPrerequisiteActor_handler(handler: UActorComponent_RemoveTickPrerequisiteActorInvoker){
        unsafe{ UActorComponent_RemoveTickPrerequisiteActorInvokerHandler = Some(handler) };
    }

    type UActorComponent_RemoveTickPrerequisiteComponentInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorComponentOpaque);
    pub(super) static mut UActorComponent_RemoveTickPrerequisiteComponentInvokerHandler: Option<UActorComponent_RemoveTickPrerequisiteComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_RemoveTickPrerequisiteComponent_handler(handler: UActorComponent_RemoveTickPrerequisiteComponentInvoker){
        unsafe{ UActorComponent_RemoveTickPrerequisiteComponentInvokerHandler = Some(handler) };
    }

    type UActorComponent_ReplicateSubobjectsInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorChannelOpaque, *mut FOutBunchOpaque, *mut FReplicationFlagsOpaque) -> bool;
    pub(super) static mut UActorComponent_ReplicateSubobjectsInvokerHandler: Option<UActorComponent_ReplicateSubobjectsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_ReplicateSubobjects_handler(handler: UActorComponent_ReplicateSubobjectsInvoker){
        unsafe{ UActorComponent_ReplicateSubobjectsInvokerHandler = Some(handler) };
    }

    type UActorComponent_RequiresGameThreadEndOfFrameRecreateInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_RequiresGameThreadEndOfFrameRecreateInvokerHandler: Option<UActorComponent_RequiresGameThreadEndOfFrameRecreateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_RequiresGameThreadEndOfFrameRecreate_handler(handler: UActorComponent_RequiresGameThreadEndOfFrameRecreateInvoker){
        unsafe{ UActorComponent_RequiresGameThreadEndOfFrameRecreateInvokerHandler = Some(handler) };
    }

    type UActorComponent_RequiresGameThreadEndOfFrameUpdatesInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_RequiresGameThreadEndOfFrameUpdatesInvokerHandler: Option<UActorComponent_RequiresGameThreadEndOfFrameUpdatesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_RequiresGameThreadEndOfFrameUpdates_handler(handler: UActorComponent_RequiresGameThreadEndOfFrameUpdatesInvoker){
        unsafe{ UActorComponent_RequiresGameThreadEndOfFrameUpdatesInvokerHandler = Some(handler) };
    }

    type UActorComponent_RequiresPreEndOfFrameSyncInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UActorComponent_RequiresPreEndOfFrameSyncInvokerHandler: Option<UActorComponent_RequiresPreEndOfFrameSyncInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_RequiresPreEndOfFrameSync_handler(handler: UActorComponent_RequiresPreEndOfFrameSyncInvoker){
        unsafe{ UActorComponent_RequiresPreEndOfFrameSyncInvokerHandler = Some(handler) };
    }

    type UActorComponent_ReregisterComponentInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_ReregisterComponentInvokerHandler: Option<UActorComponent_ReregisterComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_ReregisterComponent_handler(handler: UActorComponent_ReregisterComponentInvoker){
        unsafe{ UActorComponent_ReregisterComponentInvokerHandler = Some(handler) };
    }

    type UActorComponent_SetActiveInvoker = unsafe extern "C" fn(*mut c_void, bool, bool);
    pub(super) static mut UActorComponent_SetActiveInvokerHandler: Option<UActorComponent_SetActiveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_SetActive_handler(handler: UActorComponent_SetActiveInvoker){
        unsafe{ UActorComponent_SetActiveInvokerHandler = Some(handler) };
    }

    type UActorComponent_SetActiveFlagInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UActorComponent_SetActiveFlagInvokerHandler: Option<UActorComponent_SetActiveFlagInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_SetActiveFlag_handler(handler: UActorComponent_SetActiveFlagInvoker){
        unsafe{ UActorComponent_SetActiveFlagInvokerHandler = Some(handler) };
    }

    type UActorComponent_SetAutoActivateInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UActorComponent_SetAutoActivateInvokerHandler: Option<UActorComponent_SetAutoActivateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_SetAutoActivate_handler(handler: UActorComponent_SetAutoActivateInvoker){
        unsafe{ UActorComponent_SetAutoActivateInvokerHandler = Some(handler) };
    }

    type UActorComponent_SetCanEverAffectNavigationInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UActorComponent_SetCanEverAffectNavigationInvokerHandler: Option<UActorComponent_SetCanEverAffectNavigationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_SetCanEverAffectNavigation_handler(handler: UActorComponent_SetCanEverAffectNavigationInvoker){
        unsafe{ UActorComponent_SetCanEverAffectNavigationInvokerHandler = Some(handler) };
    }

    type UActorComponent_SetComponentTickEnabledInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UActorComponent_SetComponentTickEnabledInvokerHandler: Option<UActorComponent_SetComponentTickEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_SetComponentTickEnabled_handler(handler: UActorComponent_SetComponentTickEnabledInvoker){
        unsafe{ UActorComponent_SetComponentTickEnabledInvokerHandler = Some(handler) };
    }

    type UActorComponent_SetComponentTickEnabledAsyncInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UActorComponent_SetComponentTickEnabledAsyncInvokerHandler: Option<UActorComponent_SetComponentTickEnabledAsyncInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_SetComponentTickEnabledAsync_handler(handler: UActorComponent_SetComponentTickEnabledAsyncInvoker){
        unsafe{ UActorComponent_SetComponentTickEnabledAsyncInvokerHandler = Some(handler) };
    }

    type UActorComponent_SetComponentTickIntervalInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UActorComponent_SetComponentTickIntervalInvokerHandler: Option<UActorComponent_SetComponentTickIntervalInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_SetComponentTickInterval_handler(handler: UActorComponent_SetComponentTickIntervalInvoker){
        unsafe{ UActorComponent_SetComponentTickIntervalInvokerHandler = Some(handler) };
    }

    type UActorComponent_SetComponentTickIntervalAndCooldownInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UActorComponent_SetComponentTickIntervalAndCooldownInvokerHandler: Option<UActorComponent_SetComponentTickIntervalAndCooldownInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_SetComponentTickIntervalAndCooldown_handler(handler: UActorComponent_SetComponentTickIntervalAndCooldownInvoker){
        unsafe{ UActorComponent_SetComponentTickIntervalAndCooldownInvokerHandler = Some(handler) };
    }

    type UActorComponent_SetIsNetStartupComponentInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UActorComponent_SetIsNetStartupComponentInvokerHandler: Option<UActorComponent_SetIsNetStartupComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_SetIsNetStartupComponent_handler(handler: UActorComponent_SetIsNetStartupComponentInvoker){
        unsafe{ UActorComponent_SetIsNetStartupComponentInvokerHandler = Some(handler) };
    }

    type UActorComponent_SetIsReplicatedInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UActorComponent_SetIsReplicatedInvokerHandler: Option<UActorComponent_SetIsReplicatedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_SetIsReplicated_handler(handler: UActorComponent_SetIsReplicatedInvoker){
        unsafe{ UActorComponent_SetIsReplicatedInvokerHandler = Some(handler) };
    }

    type UActorComponent_SetIsVisualizationComponentInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UActorComponent_SetIsVisualizationComponentInvokerHandler: Option<UActorComponent_SetIsVisualizationComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_SetIsVisualizationComponent_handler(handler: UActorComponent_SetIsVisualizationComponentInvoker){
        unsafe{ UActorComponent_SetIsVisualizationComponentInvokerHandler = Some(handler) };
    }

    type UActorComponent_SetNetAddressableInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_SetNetAddressableInvokerHandler: Option<UActorComponent_SetNetAddressableInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_SetNetAddressable_handler(handler: UActorComponent_SetNetAddressableInvoker){
        unsafe{ UActorComponent_SetNetAddressableInvokerHandler = Some(handler) };
    }

    type UActorComponent_SetPackageExternalInvoker = unsafe extern "C" fn(*mut c_void, bool, bool);
    pub(super) static mut UActorComponent_SetPackageExternalInvokerHandler: Option<UActorComponent_SetPackageExternalInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_SetPackageExternal_handler(handler: UActorComponent_SetPackageExternalInvoker){
        unsafe{ UActorComponent_SetPackageExternalInvokerHandler = Some(handler) };
    }

    type UActorComponent_SetTickableWhenPausedInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UActorComponent_SetTickableWhenPausedInvokerHandler: Option<UActorComponent_SetTickableWhenPausedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_SetTickableWhenPaused_handler(handler: UActorComponent_SetTickableWhenPausedInvoker){
        unsafe{ UActorComponent_SetTickableWhenPausedInvokerHandler = Some(handler) };
    }

    type UActorComponent_SetupActorComponentTickFunctionInvoker = unsafe extern "C" fn(*mut c_void, *mut FTickFunctionOpaque) -> bool;
    pub(super) static mut UActorComponent_SetupActorComponentTickFunctionInvokerHandler: Option<UActorComponent_SetupActorComponentTickFunctionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_SetupActorComponentTickFunction_handler(handler: UActorComponent_SetupActorComponentTickFunctionInvoker){
        unsafe{ UActorComponent_SetupActorComponentTickFunctionInvokerHandler = Some(handler) };
    }

    type UActorComponent_ToggleActiveInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_ToggleActiveInvokerHandler: Option<UActorComponent_ToggleActiveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_ToggleActive_handler(handler: UActorComponent_ToggleActiveInvoker){
        unsafe{ UActorComponent_ToggleActiveInvokerHandler = Some(handler) };
    }

    type UActorComponent_UninitializeComponentInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_UninitializeComponentInvokerHandler: Option<UActorComponent_UninitializeComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_UninitializeComponent_handler(handler: UActorComponent_UninitializeComponentInvoker){
        unsafe{ UActorComponent_UninitializeComponentInvokerHandler = Some(handler) };
    }

    type UActorComponent_UnregisterComponentInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UActorComponent_UnregisterComponentInvokerHandler: Option<UActorComponent_UnregisterComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UActorComponent_UnregisterComponent_handler(handler: UActorComponent_UnregisterComponentInvoker){
        unsafe{ UActorComponent_UnregisterComponentInvokerHandler = Some(handler) };
    }

    type UWorld_AddControllerInvoker = unsafe extern "C" fn(*mut c_void, *mut AControllerOpaque);
    pub(super) static mut UWorld_AddControllerInvokerHandler: Option<UWorld_AddControllerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_AddController_handler(handler: UWorld_AddControllerInvoker){
        unsafe{ UWorld_AddControllerInvokerHandler = Some(handler) };
    }

    type UWorld_AddLevelInvoker = unsafe extern "C" fn(*mut c_void, *mut ULevelOpaque) -> bool;
    pub(super) static mut UWorld_AddLevelInvokerHandler: Option<UWorld_AddLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_AddLevel_handler(handler: UWorld_AddLevelInvoker){
        unsafe{ UWorld_AddLevelInvokerHandler = Some(handler) };
    }

    type UWorld_AddNetworkActorInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque);
    pub(super) static mut UWorld_AddNetworkActorInvokerHandler: Option<UWorld_AddNetworkActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_AddNetworkActor_handler(handler: UWorld_AddNetworkActorInvoker){
        unsafe{ UWorld_AddNetworkActorInvokerHandler = Some(handler) };
    }

    type UWorld_AddParameterCollectionInstanceInvoker = unsafe extern "C" fn(*mut c_void, *mut UMaterialParameterCollectionOpaque, bool);
    pub(super) static mut UWorld_AddParameterCollectionInstanceInvokerHandler: Option<UWorld_AddParameterCollectionInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_AddParameterCollectionInstance_handler(handler: UWorld_AddParameterCollectionInstanceInvoker){
        unsafe{ UWorld_AddParameterCollectionInstanceInvokerHandler = Some(handler) };
    }

    type UWorld_AddPhysicsVolumeInvoker = unsafe extern "C" fn(*mut c_void, *mut APhysicsVolumeOpaque);
    pub(super) static mut UWorld_AddPhysicsVolumeInvokerHandler: Option<UWorld_AddPhysicsVolumeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_AddPhysicsVolume_handler(handler: UWorld_AddPhysicsVolumeInvoker){
        unsafe{ UWorld_AddPhysicsVolumeInvokerHandler = Some(handler) };
    }

    type UWorld_AddPostProcessingSettingsInvoker = unsafe extern "C" fn(*mut c_void, Vector3, *mut FSceneViewOpaque);
    pub(super) static mut UWorld_AddPostProcessingSettingsInvokerHandler: Option<UWorld_AddPostProcessingSettingsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_AddPostProcessingSettings_handler(handler: UWorld_AddPostProcessingSettingsInvoker){
        unsafe{ UWorld_AddPostProcessingSettingsInvokerHandler = Some(handler) };
    }

    type UWorld_AddStreamingLevelInvoker = unsafe extern "C" fn(*mut c_void, *mut ULevelStreamingOpaque);
    pub(super) static mut UWorld_AddStreamingLevelInvokerHandler: Option<UWorld_AddStreamingLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_AddStreamingLevel_handler(handler: UWorld_AddStreamingLevelInvoker){
        unsafe{ UWorld_AddStreamingLevelInvokerHandler = Some(handler) };
    }

    type UWorld_AddUniqueStreamingLevelInvoker = unsafe extern "C" fn(*mut c_void, *mut ULevelStreamingOpaque);
    pub(super) static mut UWorld_AddUniqueStreamingLevelInvokerHandler: Option<UWorld_AddUniqueStreamingLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_AddUniqueStreamingLevel_handler(handler: UWorld_AddUniqueStreamingLevelInvoker){
        unsafe{ UWorld_AddUniqueStreamingLevelInvokerHandler = Some(handler) };
    }

    type UWorld_AllowAudioPlaybackInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_AllowAudioPlaybackInvokerHandler: Option<UWorld_AllowAudioPlaybackInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_AllowAudioPlayback_handler(handler: UWorld_AllowAudioPlaybackInvoker){
        unsafe{ UWorld_AllowAudioPlaybackInvokerHandler = Some(handler) };
    }

    type UWorld_AllowLevelLoadRequestsInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_AllowLevelLoadRequestsInvokerHandler: Option<UWorld_AllowLevelLoadRequestsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_AllowLevelLoadRequests_handler(handler: UWorld_AllowLevelLoadRequestsInvoker){
        unsafe{ UWorld_AllowLevelLoadRequestsInvokerHandler = Some(handler) };
    }

    type UWorld_AreActorsInitializedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_AreActorsInitializedInvokerHandler: Option<UWorld_AreActorsInitializedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_AreActorsInitialized_handler(handler: UWorld_AreActorsInitializedInvoker){
        unsafe{ UWorld_AreActorsInitializedInvokerHandler = Some(handler) };
    }

    type UWorld_AreAlwaysLoadedLevelsLoadedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_AreAlwaysLoadedLevelsLoadedInvokerHandler: Option<UWorld_AreAlwaysLoadedLevelsLoadedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_AreAlwaysLoadedLevelsLoaded_handler(handler: UWorld_AreAlwaysLoadedLevelsLoadedInvoker){
        unsafe{ UWorld_AreAlwaysLoadedLevelsLoadedInvokerHandler = Some(handler) };
    }

    type UWorld_AsyncLoadAlwaysLoadedLevelsForSeamlessTravelInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_AsyncLoadAlwaysLoadedLevelsForSeamlessTravelInvokerHandler: Option<UWorld_AsyncLoadAlwaysLoadedLevelsForSeamlessTravelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_AsyncLoadAlwaysLoadedLevelsForSeamlessTravel_handler(handler: UWorld_AsyncLoadAlwaysLoadedLevelsForSeamlessTravelInvoker){
        unsafe{ UWorld_AsyncLoadAlwaysLoadedLevelsForSeamlessTravelInvokerHandler = Some(handler) };
    }

    type UWorld_BeginDestroyInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_BeginDestroyInvokerHandler: Option<UWorld_BeginDestroyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_BeginDestroy_handler(handler: UWorld_BeginDestroyInvoker){
        unsafe{ UWorld_BeginDestroyInvokerHandler = Some(handler) };
    }

    type UWorld_BeginPlayInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_BeginPlayInvokerHandler: Option<UWorld_BeginPlayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_BeginPlay_handler(handler: UWorld_BeginPlayInvoker){
        unsafe{ UWorld_BeginPlayInvokerHandler = Some(handler) };
    }

    type UWorld_BeginTearingDownInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_BeginTearingDownInvokerHandler: Option<UWorld_BeginTearingDownInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_BeginTearingDown_handler(handler: UWorld_BeginTearingDownInvoker){
        unsafe{ UWorld_BeginTearingDownInvokerHandler = Some(handler) };
    }

    type UWorld_BlockTillLevelStreamingCompletedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_BlockTillLevelStreamingCompletedInvokerHandler: Option<UWorld_BlockTillLevelStreamingCompletedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_BlockTillLevelStreamingCompleted_handler(handler: UWorld_BlockTillLevelStreamingCompletedInvoker){
        unsafe{ UWorld_BlockTillLevelStreamingCompletedInvokerHandler = Some(handler) };
    }

    type UWorld_BroadcastLevelsChangedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_BroadcastLevelsChangedInvokerHandler: Option<UWorld_BroadcastLevelsChangedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_BroadcastLevelsChanged_handler(handler: UWorld_BroadcastLevelsChangedInvoker){
        unsafe{ UWorld_BroadcastLevelsChangedInvokerHandler = Some(handler) };
    }

    type UWorld_BuildPIEPackagePrefixInvoker = unsafe extern "C" fn(i32) -> *const std::os::raw::c_char;
    pub(super) static mut UWorld_BuildPIEPackagePrefixInvokerHandler: Option<UWorld_BuildPIEPackagePrefixInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_BuildPIEPackagePrefix_handler(handler: UWorld_BuildPIEPackagePrefixInvoker){
        unsafe{ UWorld_BuildPIEPackagePrefixInvokerHandler = Some(handler) };
    }

    type UWorld_CancelPendingMapChangeInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_CancelPendingMapChangeInvokerHandler: Option<UWorld_CancelPendingMapChangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_CancelPendingMapChange_handler(handler: UWorld_CancelPendingMapChangeInvoker){
        unsafe{ UWorld_CancelPendingMapChangeInvokerHandler = Some(handler) };
    }

    type UWorld_CleanupActorsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_CleanupActorsInvokerHandler: Option<UWorld_CleanupActorsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_CleanupActors_handler(handler: UWorld_CleanupActorsInvoker){
        unsafe{ UWorld_CleanupActorsInvokerHandler = Some(handler) };
    }

    type UWorld_CleanupWorldInvoker = unsafe extern "C" fn(*mut c_void, bool, bool, *mut UWorldOpaque);
    pub(super) static mut UWorld_CleanupWorldInvokerHandler: Option<UWorld_CleanupWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_CleanupWorld_handler(handler: UWorld_CleanupWorldInvoker){
        unsafe{ UWorld_CleanupWorldInvokerHandler = Some(handler) };
    }

    type UWorld_ClearActorComponentEndOfFrameUpdateInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorComponentOpaque);
    pub(super) static mut UWorld_ClearActorComponentEndOfFrameUpdateInvokerHandler: Option<UWorld_ClearActorComponentEndOfFrameUpdateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_ClearActorComponentEndOfFrameUpdate_handler(handler: UWorld_ClearActorComponentEndOfFrameUpdateInvoker){
        unsafe{ UWorld_ClearActorComponentEndOfFrameUpdateInvokerHandler = Some(handler) };
    }

    type UWorld_ClearDemoNetDriverInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_ClearDemoNetDriverInvokerHandler: Option<UWorld_ClearDemoNetDriverInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_ClearDemoNetDriver_handler(handler: UWorld_ClearDemoNetDriverInvoker){
        unsafe{ UWorld_ClearDemoNetDriverInvokerHandler = Some(handler) };
    }

    type UWorld_ClearNetDriverInvoker = unsafe extern "C" fn(*mut c_void, *mut UNetDriverOpaque);
    pub(super) static mut UWorld_ClearNetDriverInvokerHandler: Option<UWorld_ClearNetDriverInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_ClearNetDriver_handler(handler: UWorld_ClearNetDriverInvoker){
        unsafe{ UWorld_ClearNetDriverInvokerHandler = Some(handler) };
    }

    type UWorld_ClearStreamingLevelsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_ClearStreamingLevelsInvokerHandler: Option<UWorld_ClearStreamingLevelsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_ClearStreamingLevels_handler(handler: UWorld_ClearStreamingLevelsInvoker){
        unsafe{ UWorld_ClearStreamingLevelsInvokerHandler = Some(handler) };
    }

    type UWorld_ClearWorldComponentsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_ClearWorldComponentsInvokerHandler: Option<UWorld_ClearWorldComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_ClearWorldComponents_handler(handler: UWorld_ClearWorldComponentsInvoker){
        unsafe{ UWorld_ClearWorldComponentsInvokerHandler = Some(handler) };
    }

    type UWorld_CommitMapChangeInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_CommitMapChangeInvokerHandler: Option<UWorld_CommitMapChangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_CommitMapChange_handler(handler: UWorld_CommitMapChangeInvoker){
        unsafe{ UWorld_CommitMapChangeInvokerHandler = Some(handler) };
    }

    type UWorld_CommitModelSurfacesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_CommitModelSurfacesInvokerHandler: Option<UWorld_CommitModelSurfacesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_CommitModelSurfaces_handler(handler: UWorld_CommitModelSurfacesInvoker){
        unsafe{ UWorld_CommitModelSurfacesInvokerHandler = Some(handler) };
    }

    type UWorld_ConditionallyBuildStreamingDataInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_ConditionallyBuildStreamingDataInvokerHandler: Option<UWorld_ConditionallyBuildStreamingDataInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_ConditionallyBuildStreamingData_handler(handler: UWorld_ConditionallyBuildStreamingDataInvoker){
        unsafe{ UWorld_ConditionallyBuildStreamingDataInvokerHandler = Some(handler) };
    }

    type UWorld_ContainsActorInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque) -> bool;
    pub(super) static mut UWorld_ContainsActorInvokerHandler: Option<UWorld_ContainsActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_ContainsActor_handler(handler: UWorld_ContainsActorInvoker){
        unsafe{ UWorld_ContainsActorInvokerHandler = Some(handler) };
    }

    type UWorld_ContainsLevelInvoker = unsafe extern "C" fn(*mut c_void, *mut ULevelOpaque) -> bool;
    pub(super) static mut UWorld_ContainsLevelInvokerHandler: Option<UWorld_ContainsLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_ContainsLevel_handler(handler: UWorld_ContainsLevelInvoker){
        unsafe{ UWorld_ContainsLevelInvokerHandler = Some(handler) };
    }

    type UWorld_CopyGameStateInvoker = unsafe extern "C" fn(*mut c_void, *mut AGameModeBaseOpaque, *mut AGameStateBaseOpaque);
    pub(super) static mut UWorld_CopyGameStateInvokerHandler: Option<UWorld_CopyGameStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_CopyGameState_handler(handler: UWorld_CopyGameStateInvoker){
        unsafe{ UWorld_CopyGameStateInvokerHandler = Some(handler) };
    }

    type UWorld_CreateAISystemInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UAISystemBaseOpaque;
    pub(super) static mut UWorld_CreateAISystemInvokerHandler: Option<UWorld_CreateAISystemInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_CreateAISystem_handler(handler: UWorld_CreateAISystemInvoker){
        unsafe{ UWorld_CreateAISystemInvokerHandler = Some(handler) };
    }

    type UWorld_CreateFXSystemInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_CreateFXSystemInvokerHandler: Option<UWorld_CreateFXSystemInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_CreateFXSystem_handler(handler: UWorld_CreateFXSystemInvoker){
        unsafe{ UWorld_CreateFXSystemInvokerHandler = Some(handler) };
    }

    type UWorld_CreatePhysicsSceneInvoker = unsafe extern "C" fn(*mut c_void, *mut AWorldSettingsOpaque);
    pub(super) static mut UWorld_CreatePhysicsSceneInvokerHandler: Option<UWorld_CreatePhysicsSceneInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_CreatePhysicsScene_handler(handler: UWorld_CreatePhysicsSceneInvoker){
        unsafe{ UWorld_CreatePhysicsSceneInvokerHandler = Some(handler) };
    }

    type UWorld_DeSelectLevelInvoker = unsafe extern "C" fn(*mut c_void, *mut ULevelOpaque);
    pub(super) static mut UWorld_DeSelectLevelInvokerHandler: Option<UWorld_DeSelectLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_DeSelectLevel_handler(handler: UWorld_DeSelectLevelInvoker){
        unsafe{ UWorld_DeSelectLevelInvokerHandler = Some(handler) };
    }

    type UWorld_DelayStreamingVolumeUpdatesInvoker = unsafe extern "C" fn(*mut c_void, i32);
    pub(super) static mut UWorld_DelayStreamingVolumeUpdatesInvokerHandler: Option<UWorld_DelayStreamingVolumeUpdatesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_DelayStreamingVolumeUpdates_handler(handler: UWorld_DelayStreamingVolumeUpdatesInvoker){
        unsafe{ UWorld_DelayStreamingVolumeUpdatesInvokerHandler = Some(handler) };
    }

    type UWorld_DestroyActorInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque, bool, bool) -> bool;
    pub(super) static mut UWorld_DestroyActorInvokerHandler: Option<UWorld_DestroyActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_DestroyActor_handler(handler: UWorld_DestroyActorInvoker){
        unsafe{ UWorld_DestroyActorInvokerHandler = Some(handler) };
    }

    type UWorld_DestroyDemoNetDriverInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_DestroyDemoNetDriverInvokerHandler: Option<UWorld_DestroyDemoNetDriverInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_DestroyDemoNetDriver_handler(handler: UWorld_DestroyDemoNetDriverInvoker){
        unsafe{ UWorld_DestroyDemoNetDriverInvokerHandler = Some(handler) };
    }

    type UWorld_DestroySwappedPCInvoker = unsafe extern "C" fn(*mut c_void, *mut UNetConnectionOpaque) -> bool;
    pub(super) static mut UWorld_DestroySwappedPCInvokerHandler: Option<UWorld_DestroySwappedPCInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_DestroySwappedPC_handler(handler: UWorld_DestroySwappedPCInvoker){
        unsafe{ UWorld_DestroySwappedPCInvokerHandler = Some(handler) };
    }

    type UWorld_DestroyWorldInvoker = unsafe extern "C" fn(*mut c_void, bool, *mut UWorldOpaque);
    pub(super) static mut UWorld_DestroyWorldInvokerHandler: Option<UWorld_DestroyWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_DestroyWorld_handler(handler: UWorld_DestroyWorldInvoker){
        unsafe{ UWorld_DestroyWorldInvokerHandler = Some(handler) };
    }

    type UWorld_DuplicateRequestedLevelsInvoker = unsafe extern "C" fn(*mut c_void, UName);
    pub(super) static mut UWorld_DuplicateRequestedLevelsInvokerHandler: Option<UWorld_DuplicateRequestedLevelsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_DuplicateRequestedLevels_handler(handler: UWorld_DuplicateRequestedLevelsInvoker){
        unsafe{ UWorld_DuplicateRequestedLevelsInvokerHandler = Some(handler) };
    }

    type UWorld_EditorDestroyActorInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque, bool) -> bool;
    pub(super) static mut UWorld_EditorDestroyActorInvokerHandler: Option<UWorld_EditorDestroyActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_EditorDestroyActor_handler(handler: UWorld_EditorDestroyActorInvoker){
        unsafe{ UWorld_EditorDestroyActorInvokerHandler = Some(handler) };
    }

    type UWorld_EnsureCollisionTreeIsBuiltInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_EnsureCollisionTreeIsBuiltInvokerHandler: Option<UWorld_EnsureCollisionTreeIsBuiltInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_EnsureCollisionTreeIsBuilt_handler(handler: UWorld_EnsureCollisionTreeIsBuiltInvoker){
        unsafe{ UWorld_EnsureCollisionTreeIsBuiltInvokerHandler = Some(handler) };
    }

    type UWorld_FindWorldInPackageInvoker = unsafe extern "C" fn(*mut UPackageOpaque) -> *mut UWorldOpaque;
    pub(super) static mut UWorld_FindWorldInPackageInvokerHandler: Option<UWorld_FindWorldInPackageInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_FindWorldInPackage_handler(handler: UWorld_FindWorldInPackageInvoker){
        unsafe{ UWorld_FindWorldInPackageInvokerHandler = Some(handler) };
    }

    type UWorld_FinishDestroyInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_FinishDestroyInvokerHandler: Option<UWorld_FinishDestroyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_FinishDestroy_handler(handler: UWorld_FinishDestroyInvoker){
        unsafe{ UWorld_FinishDestroyInvokerHandler = Some(handler) };
    }

    type UWorld_FinishPhysicsSimInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_FinishPhysicsSimInvokerHandler: Option<UWorld_FinishPhysicsSimInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_FinishPhysicsSim_handler(handler: UWorld_FinishPhysicsSimInvoker){
        unsafe{ UWorld_FinishPhysicsSimInvokerHandler = Some(handler) };
    }

    type UWorld_FlushDeferredParameterCollectionInstanceUpdatesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_FlushDeferredParameterCollectionInstanceUpdatesInvokerHandler: Option<UWorld_FlushDeferredParameterCollectionInstanceUpdatesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_FlushDeferredParameterCollectionInstanceUpdates_handler(handler: UWorld_FlushDeferredParameterCollectionInstanceUpdatesInvoker){
        unsafe{ UWorld_FlushDeferredParameterCollectionInstanceUpdatesInvokerHandler = Some(handler) };
    }

    type UWorld_GetAISystemInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UAISystemBaseOpaque;
    pub(super) static mut UWorld_GetAISystemInvokerHandler: Option<UWorld_GetAISystemInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetAISystem_handler(handler: UWorld_GetAISystemInvoker){
        unsafe{ UWorld_GetAISystemInvokerHandler = Some(handler) };
    }

    type UWorld_GetActiveLevelCollectionInvoker = unsafe extern "C" fn(*mut c_void) -> *mut FLevelCollectionOpaque;
    pub(super) static mut UWorld_GetActiveLevelCollectionInvokerHandler: Option<UWorld_GetActiveLevelCollectionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetActiveLevelCollection_handler(handler: UWorld_GetActiveLevelCollectionInvoker){
        unsafe{ UWorld_GetActiveLevelCollectionInvokerHandler = Some(handler) };
    }

    type UWorld_GetActiveLevelCollectionIndexInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UWorld_GetActiveLevelCollectionIndexInvokerHandler: Option<UWorld_GetActiveLevelCollectionIndexInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetActiveLevelCollectionIndex_handler(handler: UWorld_GetActiveLevelCollectionIndexInvoker){
        unsafe{ UWorld_GetActiveLevelCollectionIndexInvokerHandler = Some(handler) };
    }

    type UWorld_GetActiveLightingScenarioInvoker = unsafe extern "C" fn(*mut c_void) -> *mut ULevelOpaque;
    pub(super) static mut UWorld_GetActiveLightingScenarioInvokerHandler: Option<UWorld_GetActiveLightingScenarioInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetActiveLightingScenario_handler(handler: UWorld_GetActiveLightingScenarioInvoker){
        unsafe{ UWorld_GetActiveLightingScenarioInvokerHandler = Some(handler) };
    }

    type UWorld_GetActorCountInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UWorld_GetActorCountInvokerHandler: Option<UWorld_GetActorCountInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetActorCount_handler(handler: UWorld_GetActorCountInvoker){
        unsafe{ UWorld_GetActorCountInvokerHandler = Some(handler) };
    }

    type UWorld_GetAddressURLInvoker = unsafe extern "C" fn(*mut c_void) -> *const std::os::raw::c_char;
    pub(super) static mut UWorld_GetAddressURLInvokerHandler: Option<UWorld_GetAddressURLInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetAddressURL_handler(handler: UWorld_GetAddressURLInvoker){
        unsafe{ UWorld_GetAddressURLInvokerHandler = Some(handler) };
    }

    type UWorld_GetAllowDeferredPhysicsStateCreationInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_GetAllowDeferredPhysicsStateCreationInvokerHandler: Option<UWorld_GetAllowDeferredPhysicsStateCreationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetAllowDeferredPhysicsStateCreation_handler(handler: UWorld_GetAllowDeferredPhysicsStateCreationInvoker){
        unsafe{ UWorld_GetAllowDeferredPhysicsStateCreationInvokerHandler = Some(handler) };
    }

    type UWorld_GetAudioDeviceRawInvoker = unsafe extern "C" fn(*mut c_void) -> *mut FAudioDeviceOpaque;
    pub(super) static mut UWorld_GetAudioDeviceRawInvokerHandler: Option<UWorld_GetAudioDeviceRawInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetAudioDeviceRaw_handler(handler: UWorld_GetAudioDeviceRawInvoker){
        unsafe{ UWorld_GetAudioDeviceRawInvokerHandler = Some(handler) };
    }

    type UWorld_GetAudioTimeSecondsInvoker = unsafe extern "C" fn(*mut c_void) -> f64;
    pub(super) static mut UWorld_GetAudioTimeSecondsInvokerHandler: Option<UWorld_GetAudioTimeSecondsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetAudioTimeSeconds_handler(handler: UWorld_GetAudioTimeSecondsInvoker){
        unsafe{ UWorld_GetAudioTimeSecondsInvokerHandler = Some(handler) };
    }

    type UWorld_GetAvoidanceManagerInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UAvoidanceManagerOpaque;
    pub(super) static mut UWorld_GetAvoidanceManagerInvokerHandler: Option<UWorld_GetAvoidanceManagerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetAvoidanceManager_handler(handler: UWorld_GetAvoidanceManagerInvoker){
        unsafe{ UWorld_GetAvoidanceManagerInvokerHandler = Some(handler) };
    }

    type UWorld_GetBlockTillLevelStreamingCompletedEpochInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UWorld_GetBlockTillLevelStreamingCompletedEpochInvokerHandler: Option<UWorld_GetBlockTillLevelStreamingCompletedEpochInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetBlockTillLevelStreamingCompletedEpoch_handler(handler: UWorld_GetBlockTillLevelStreamingCompletedEpochInvoker){
        unsafe{ UWorld_GetBlockTillLevelStreamingCompletedEpochInvokerHandler = Some(handler) };
    }

    type UWorld_GetCanvasForDrawMaterialToRenderTargetInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UCanvasOpaque;
    pub(super) static mut UWorld_GetCanvasForDrawMaterialToRenderTargetInvokerHandler: Option<UWorld_GetCanvasForDrawMaterialToRenderTargetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetCanvasForDrawMaterialToRenderTarget_handler(handler: UWorld_GetCanvasForDrawMaterialToRenderTargetInvoker){
        unsafe{ UWorld_GetCanvasForDrawMaterialToRenderTargetInvokerHandler = Some(handler) };
    }

    type UWorld_GetCanvasForRenderingToTargetInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UCanvasOpaque;
    pub(super) static mut UWorld_GetCanvasForRenderingToTargetInvokerHandler: Option<UWorld_GetCanvasForRenderingToTargetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetCanvasForRenderingToTarget_handler(handler: UWorld_GetCanvasForRenderingToTargetInvoker){
        unsafe{ UWorld_GetCanvasForRenderingToTargetInvokerHandler = Some(handler) };
    }

    type UWorld_GetCurrentLevelInvoker = unsafe extern "C" fn(*mut c_void) -> *mut ULevelOpaque;
    pub(super) static mut UWorld_GetCurrentLevelInvokerHandler: Option<UWorld_GetCurrentLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetCurrentLevel_handler(handler: UWorld_GetCurrentLevelInvoker){
        unsafe{ UWorld_GetCurrentLevelInvokerHandler = Some(handler) };
    }

    type UWorld_GetCurrentLevelPendingInvisibilityInvoker = unsafe extern "C" fn(*mut c_void) -> *mut ULevelOpaque;
    pub(super) static mut UWorld_GetCurrentLevelPendingInvisibilityInvokerHandler: Option<UWorld_GetCurrentLevelPendingInvisibilityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetCurrentLevelPendingInvisibility_handler(handler: UWorld_GetCurrentLevelPendingInvisibilityInvoker){
        unsafe{ UWorld_GetCurrentLevelPendingInvisibilityInvokerHandler = Some(handler) };
    }

    type UWorld_GetCurrentLevelPendingVisibilityInvoker = unsafe extern "C" fn(*mut c_void) -> *mut ULevelOpaque;
    pub(super) static mut UWorld_GetCurrentLevelPendingVisibilityInvokerHandler: Option<UWorld_GetCurrentLevelPendingVisibilityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetCurrentLevelPendingVisibility_handler(handler: UWorld_GetCurrentLevelPendingVisibilityInvoker){
        unsafe{ UWorld_GetCurrentLevelPendingVisibilityInvokerHandler = Some(handler) };
    }

    type UWorld_GetDebugDisplayNameInvoker = unsafe extern "C" fn(*mut c_void) -> *const std::os::raw::c_char;
    pub(super) static mut UWorld_GetDebugDisplayNameInvokerHandler: Option<UWorld_GetDebugDisplayNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetDebugDisplayName_handler(handler: UWorld_GetDebugDisplayNameInvoker){
        unsafe{ UWorld_GetDebugDisplayNameInvokerHandler = Some(handler) };
    }

    type UWorld_GetDefaultBrushInvoker = unsafe extern "C" fn(*mut c_void) -> *mut ABrushOpaque;
    pub(super) static mut UWorld_GetDefaultBrushInvokerHandler: Option<UWorld_GetDefaultBrushInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetDefaultBrush_handler(handler: UWorld_GetDefaultBrushInvoker){
        unsafe{ UWorld_GetDefaultBrushInvokerHandler = Some(handler) };
    }

    type UWorld_GetDefaultGravityZInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UWorld_GetDefaultGravityZInvokerHandler: Option<UWorld_GetDefaultGravityZInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetDefaultGravityZ_handler(handler: UWorld_GetDefaultGravityZInvoker){
        unsafe{ UWorld_GetDefaultGravityZInvokerHandler = Some(handler) };
    }

    type UWorld_GetDefaultPhysicsVolumeInvoker = unsafe extern "C" fn(*mut c_void) -> *mut APhysicsVolumeOpaque;
    pub(super) static mut UWorld_GetDefaultPhysicsVolumeInvokerHandler: Option<UWorld_GetDefaultPhysicsVolumeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetDefaultPhysicsVolume_handler(handler: UWorld_GetDefaultPhysicsVolumeInvoker){
        unsafe{ UWorld_GetDefaultPhysicsVolumeInvokerHandler = Some(handler) };
    }

    type UWorld_GetDeltaSecondsInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UWorld_GetDeltaSecondsInvokerHandler: Option<UWorld_GetDeltaSecondsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetDeltaSeconds_handler(handler: UWorld_GetDeltaSecondsInvoker){
        unsafe{ UWorld_GetDeltaSecondsInvokerHandler = Some(handler) };
    }

    type UWorld_GetDemoNetDriverInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UDemoNetDriverOpaque;
    pub(super) static mut UWorld_GetDemoNetDriverInvokerHandler: Option<UWorld_GetDemoNetDriverInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetDemoNetDriver_handler(handler: UWorld_GetDemoNetDriverInvoker){
        unsafe{ UWorld_GetDemoNetDriverInvokerHandler = Some(handler) };
    }

    type UWorld_GetDetailModeInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UWorld_GetDetailModeInvokerHandler: Option<UWorld_GetDetailModeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetDetailMode_handler(handler: UWorld_GetDetailModeInvoker){
        unsafe{ UWorld_GetDetailModeInvokerHandler = Some(handler) };
    }

    type UWorld_GetDuplicatedWorldForPIEInvoker = unsafe extern "C" fn(*mut UWorldOpaque, *mut UPackageOpaque, i32) -> *mut UWorldOpaque;
    pub(super) static mut UWorld_GetDuplicatedWorldForPIEInvokerHandler: Option<UWorld_GetDuplicatedWorldForPIEInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetDuplicatedWorldForPIE_handler(handler: UWorld_GetDuplicatedWorldForPIEInvoker){
        unsafe{ UWorld_GetDuplicatedWorldForPIEInvokerHandler = Some(handler) };
    }

    type UWorld_GetFirstLocalPlayerFromControllerInvoker = unsafe extern "C" fn(*mut c_void) -> *mut ULocalPlayerOpaque;
    pub(super) static mut UWorld_GetFirstLocalPlayerFromControllerInvokerHandler: Option<UWorld_GetFirstLocalPlayerFromControllerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetFirstLocalPlayerFromController_handler(handler: UWorld_GetFirstLocalPlayerFromControllerInvoker){
        unsafe{ UWorld_GetFirstLocalPlayerFromControllerInvokerHandler = Some(handler) };
    }

    type UWorld_GetFirstPlayerControllerInvoker = unsafe extern "C" fn(*mut c_void) -> *mut APlayerControllerOpaque;
    pub(super) static mut UWorld_GetFirstPlayerControllerInvokerHandler: Option<UWorld_GetFirstPlayerControllerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetFirstPlayerController_handler(handler: UWorld_GetFirstPlayerControllerInvoker){
        unsafe{ UWorld_GetFirstPlayerControllerInvokerHandler = Some(handler) };
    }

    type UWorld_GetGameInstanceInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UGameInstanceOpaque;
    pub(super) static mut UWorld_GetGameInstanceInvokerHandler: Option<UWorld_GetGameInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetGameInstance_handler(handler: UWorld_GetGameInstanceInvoker){
        unsafe{ UWorld_GetGameInstanceInvokerHandler = Some(handler) };
    }

    type UWorld_GetGameStateInvoker = unsafe extern "C" fn(*mut c_void) -> *mut AGameStateBaseOpaque;
    pub(super) static mut UWorld_GetGameStateInvokerHandler: Option<UWorld_GetGameStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetGameState_handler(handler: UWorld_GetGameStateInvoker){
        unsafe{ UWorld_GetGameStateInvokerHandler = Some(handler) };
    }

    type UWorld_GetGameViewportInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UGameViewportClientOpaque;
    pub(super) static mut UWorld_GetGameViewportInvokerHandler: Option<UWorld_GetGameViewportInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetGameViewport_handler(handler: UWorld_GetGameViewportInvoker){
        unsafe{ UWorld_GetGameViewportInvokerHandler = Some(handler) };
    }

    type UWorld_GetGravityZInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UWorld_GetGravityZInvokerHandler: Option<UWorld_GetGravityZInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetGravityZ_handler(handler: UWorld_GetGravityZInvoker){
        unsafe{ UWorld_GetGravityZInvokerHandler = Some(handler) };
    }

    type UWorld_GetIsInBlockTillLevelStreamingCompletedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_GetIsInBlockTillLevelStreamingCompletedInvokerHandler: Option<UWorld_GetIsInBlockTillLevelStreamingCompletedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetIsInBlockTillLevelStreamingCompleted_handler(handler: UWorld_GetIsInBlockTillLevelStreamingCompletedInvoker){
        unsafe{ UWorld_GetIsInBlockTillLevelStreamingCompletedInvokerHandler = Some(handler) };
    }

    type UWorld_GetLevelInvoker = unsafe extern "C" fn(*mut c_void, i32) -> *mut ULevelOpaque;
    pub(super) static mut UWorld_GetLevelInvokerHandler: Option<UWorld_GetLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetLevel_handler(handler: UWorld_GetLevelInvoker){
        unsafe{ UWorld_GetLevelInvokerHandler = Some(handler) };
    }

    type UWorld_GetLevelScriptActorInvoker = unsafe extern "C" fn(*mut c_void, *mut ULevelOpaque) -> *mut ALevelScriptActorOpaque;
    pub(super) static mut UWorld_GetLevelScriptActorInvokerHandler: Option<UWorld_GetLevelScriptActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetLevelScriptActor_handler(handler: UWorld_GetLevelScriptActorInvoker){
        unsafe{ UWorld_GetLevelScriptActorInvokerHandler = Some(handler) };
    }

    type UWorld_GetLevelStreamingForPackageNameInvoker = unsafe extern "C" fn(*mut c_void, UName) -> *mut ULevelStreamingOpaque;
    pub(super) static mut UWorld_GetLevelStreamingForPackageNameInvokerHandler: Option<UWorld_GetLevelStreamingForPackageNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetLevelStreamingForPackageName_handler(handler: UWorld_GetLevelStreamingForPackageNameInvoker){
        unsafe{ UWorld_GetLevelStreamingForPackageNameInvokerHandler = Some(handler) };
    }

    type UWorld_GetLocalURLInvoker = unsafe extern "C" fn(*mut c_void) -> *const std::os::raw::c_char;
    pub(super) static mut UWorld_GetLocalURLInvokerHandler: Option<UWorld_GetLocalURLInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetLocalURL_handler(handler: UWorld_GetLocalURLInvoker){
        unsafe{ UWorld_GetLocalURLInvokerHandler = Some(handler) };
    }

    type UWorld_GetMapNameInvoker = unsafe extern "C" fn(*mut c_void) -> *const std::os::raw::c_char;
    pub(super) static mut UWorld_GetMapNameInvokerHandler: Option<UWorld_GetMapNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetMapName_handler(handler: UWorld_GetMapNameInvoker){
        unsafe{ UWorld_GetMapNameInvokerHandler = Some(handler) };
    }

    type UWorld_GetNetDriverInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UNetDriverOpaque;
    pub(super) static mut UWorld_GetNetDriverInvokerHandler: Option<UWorld_GetNetDriverInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetNetDriver_handler(handler: UWorld_GetNetDriverInvoker){
        unsafe{ UWorld_GetNetDriverInvokerHandler = Some(handler) };
    }

    type UWorld_GetNonDefaultPhysicsVolumeCountInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UWorld_GetNonDefaultPhysicsVolumeCountInvokerHandler: Option<UWorld_GetNonDefaultPhysicsVolumeCountInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetNonDefaultPhysicsVolumeCount_handler(handler: UWorld_GetNonDefaultPhysicsVolumeCountInvoker){
        unsafe{ UWorld_GetNonDefaultPhysicsVolumeCountInvokerHandler = Some(handler) };
    }

    type UWorld_GetNumControllersInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UWorld_GetNumControllersInvokerHandler: Option<UWorld_GetNumControllersInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetNumControllers_handler(handler: UWorld_GetNumControllersInvoker){
        unsafe{ UWorld_GetNumControllersInvokerHandler = Some(handler) };
    }

    type UWorld_GetNumLevelsInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UWorld_GetNumLevelsInvokerHandler: Option<UWorld_GetNumLevelsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetNumLevels_handler(handler: UWorld_GetNumLevelsInvoker){
        unsafe{ UWorld_GetNumLevelsInvokerHandler = Some(handler) };
    }

    type UWorld_GetNumPlayerControllersInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UWorld_GetNumPlayerControllersInvokerHandler: Option<UWorld_GetNumPlayerControllersInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetNumPlayerControllers_handler(handler: UWorld_GetNumPlayerControllersInvoker){
        unsafe{ UWorld_GetNumPlayerControllersInvokerHandler = Some(handler) };
    }

    type UWorld_GetNumSelectedLevelsInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UWorld_GetNumSelectedLevelsInvokerHandler: Option<UWorld_GetNumSelectedLevelsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetNumSelectedLevels_handler(handler: UWorld_GetNumSelectedLevelsInvoker){
        unsafe{ UWorld_GetNumSelectedLevelsInvokerHandler = Some(handler) };
    }

    type UWorld_GetParameterCollectionInstanceInvoker = unsafe extern "C" fn(*mut c_void, *mut UMaterialParameterCollectionOpaque) -> *mut UMaterialParameterCollectionInstanceOpaque;
    pub(super) static mut UWorld_GetParameterCollectionInstanceInvokerHandler: Option<UWorld_GetParameterCollectionInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetParameterCollectionInstance_handler(handler: UWorld_GetParameterCollectionInstanceInvoker){
        unsafe{ UWorld_GetParameterCollectionInstanceInvokerHandler = Some(handler) };
    }

    type UWorld_GetPhysicsSceneInvoker = unsafe extern "C" fn(*mut c_void) -> *mut FPhysSceneOpaque;
    pub(super) static mut UWorld_GetPhysicsSceneInvokerHandler: Option<UWorld_GetPhysicsSceneInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetPhysicsScene_handler(handler: UWorld_GetPhysicsSceneInvoker){
        unsafe{ UWorld_GetPhysicsSceneInvokerHandler = Some(handler) };
    }

    type UWorld_GetProgressDenominatorInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UWorld_GetProgressDenominatorInvokerHandler: Option<UWorld_GetProgressDenominatorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetProgressDenominator_handler(handler: UWorld_GetProgressDenominatorInvoker){
        unsafe{ UWorld_GetProgressDenominatorInvokerHandler = Some(handler) };
    }

    type UWorld_GetRealTimeSecondsInvoker = unsafe extern "C" fn(*mut c_void) -> f64;
    pub(super) static mut UWorld_GetRealTimeSecondsInvokerHandler: Option<UWorld_GetRealTimeSecondsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetRealTimeSeconds_handler(handler: UWorld_GetRealTimeSecondsInvoker){
        unsafe{ UWorld_GetRealTimeSecondsInvokerHandler = Some(handler) };
    }

    type UWorld_GetSelectedLevelInvoker = unsafe extern "C" fn(*mut c_void, i32) -> *mut ULevelOpaque;
    pub(super) static mut UWorld_GetSelectedLevelInvokerHandler: Option<UWorld_GetSelectedLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetSelectedLevel_handler(handler: UWorld_GetSelectedLevelInvoker){
        unsafe{ UWorld_GetSelectedLevelInvokerHandler = Some(handler) };
    }

    type UWorld_GetServerStreamingLevelsVisibilityInvoker = unsafe extern "C" fn(*mut c_void) -> *mut AServerStreamingLevelsVisibilityOpaque;
    pub(super) static mut UWorld_GetServerStreamingLevelsVisibilityInvokerHandler: Option<UWorld_GetServerStreamingLevelsVisibilityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetServerStreamingLevelsVisibility_handler(handler: UWorld_GetServerStreamingLevelsVisibilityInvoker){
        unsafe{ UWorld_GetServerStreamingLevelsVisibilityInvokerHandler = Some(handler) };
    }

    type UWorld_GetShouldForceUnloadStreamingLevelsInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_GetShouldForceUnloadStreamingLevelsInvokerHandler: Option<UWorld_GetShouldForceUnloadStreamingLevelsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetShouldForceUnloadStreamingLevels_handler(handler: UWorld_GetShouldForceUnloadStreamingLevelsInvoker){
        unsafe{ UWorld_GetShouldForceUnloadStreamingLevelsInvokerHandler = Some(handler) };
    }

    type UWorld_GetShouldForceVisibleStreamingLevelsInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_GetShouldForceVisibleStreamingLevelsInvokerHandler: Option<UWorld_GetShouldForceVisibleStreamingLevelsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetShouldForceVisibleStreamingLevels_handler(handler: UWorld_GetShouldForceVisibleStreamingLevelsInvoker){
        unsafe{ UWorld_GetShouldForceVisibleStreamingLevelsInvokerHandler = Some(handler) };
    }

    type UWorld_GetTimeSecondsInvoker = unsafe extern "C" fn(*mut c_void) -> f64;
    pub(super) static mut UWorld_GetTimeSecondsInvokerHandler: Option<UWorld_GetTimeSecondsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetTimeSeconds_handler(handler: UWorld_GetTimeSecondsInvoker){
        unsafe{ UWorld_GetTimeSecondsInvokerHandler = Some(handler) };
    }

    type UWorld_GetUnpausedTimeSecondsInvoker = unsafe extern "C" fn(*mut c_void) -> f64;
    pub(super) static mut UWorld_GetUnpausedTimeSecondsInvokerHandler: Option<UWorld_GetUnpausedTimeSecondsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetUnpausedTimeSeconds_handler(handler: UWorld_GetUnpausedTimeSecondsInvoker){
        unsafe{ UWorld_GetUnpausedTimeSecondsInvokerHandler = Some(handler) };
    }

    type UWorld_GetWorldInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UWorldOpaque;
    pub(super) static mut UWorld_GetWorldInvokerHandler: Option<UWorld_GetWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetWorld_handler(handler: UWorld_GetWorldInvoker){
        unsafe{ UWorld_GetWorldInvokerHandler = Some(handler) };
    }

    type UWorld_GetWorldPartitionInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UWorldPartitionOpaque;
    pub(super) static mut UWorld_GetWorldPartitionInvokerHandler: Option<UWorld_GetWorldPartitionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetWorldPartition_handler(handler: UWorld_GetWorldPartitionInvoker){
        unsafe{ UWorld_GetWorldPartitionInvokerHandler = Some(handler) };
    }

    type UWorld_GetWorldSettingsInvoker = unsafe extern "C" fn(*mut c_void, bool, bool) -> *mut AWorldSettingsOpaque;
    pub(super) static mut UWorld_GetWorldSettingsInvokerHandler: Option<UWorld_GetWorldSettingsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_GetWorldSettings_handler(handler: UWorld_GetWorldSettingsInvoker){
        unsafe{ UWorld_GetWorldSettingsInvokerHandler = Some(handler) };
    }

    type UWorld_HandleTimelineScrubbedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_HandleTimelineScrubbedInvokerHandler: Option<UWorld_HandleTimelineScrubbedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_HandleTimelineScrubbed_handler(handler: UWorld_HandleTimelineScrubbedInvoker){
        unsafe{ UWorld_HandleTimelineScrubbedInvokerHandler = Some(handler) };
    }

    type UWorld_HasBegunPlayInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_HasBegunPlayInvokerHandler: Option<UWorld_HasBegunPlayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_HasBegunPlay_handler(handler: UWorld_HasBegunPlayInvoker){
        unsafe{ UWorld_HasBegunPlayInvokerHandler = Some(handler) };
    }

    type UWorld_HasDefaultPhysicsVolumeInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_HasDefaultPhysicsVolumeInvokerHandler: Option<UWorld_HasDefaultPhysicsVolumeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_HasDefaultPhysicsVolume_handler(handler: UWorld_HasDefaultPhysicsVolumeInvoker){
        unsafe{ UWorld_HasDefaultPhysicsVolumeInvokerHandler = Some(handler) };
    }

    type UWorld_HasEndOfFrameUpdatesInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_HasEndOfFrameUpdatesInvokerHandler: Option<UWorld_HasEndOfFrameUpdatesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_HasEndOfFrameUpdates_handler(handler: UWorld_HasEndOfFrameUpdatesInvoker){
        unsafe{ UWorld_HasEndOfFrameUpdatesInvokerHandler = Some(handler) };
    }

    type UWorld_HasEverBeenInitializedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_HasEverBeenInitializedInvokerHandler: Option<UWorld_HasEverBeenInitializedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_HasEverBeenInitialized_handler(handler: UWorld_HasEverBeenInitializedInvoker){
        unsafe{ UWorld_HasEverBeenInitializedInvokerHandler = Some(handler) };
    }

    type UWorld_HasMarkedObjectsPendingKillInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_HasMarkedObjectsPendingKillInvokerHandler: Option<UWorld_HasMarkedObjectsPendingKillInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_HasMarkedObjectsPendingKill_handler(handler: UWorld_HasMarkedObjectsPendingKillInvoker){
        unsafe{ UWorld_HasMarkedObjectsPendingKillInvokerHandler = Some(handler) };
    }

    type UWorld_HasStreamingLevelsToConsiderInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_HasStreamingLevelsToConsiderInvokerHandler: Option<UWorld_HasStreamingLevelsToConsiderInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_HasStreamingLevelsToConsider_handler(handler: UWorld_HasStreamingLevelsToConsiderInvoker){
        unsafe{ UWorld_HasStreamingLevelsToConsiderInvokerHandler = Some(handler) };
    }

    type UWorld_InitializeSubsystemsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_InitializeSubsystemsInvokerHandler: Option<UWorld_InitializeSubsystemsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_InitializeSubsystems_handler(handler: UWorld_InitializeSubsystemsInvoker){
        unsafe{ UWorld_InitializeSubsystemsInvokerHandler = Some(handler) };
    }

    type UWorld_InsertPostProcessVolumeInvoker = unsafe extern "C" fn(*mut c_void, *mut IInterface_PostProcessVolumeOpaque);
    pub(super) static mut UWorld_InsertPostProcessVolumeInvokerHandler: Option<UWorld_InsertPostProcessVolumeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_InsertPostProcessVolume_handler(handler: UWorld_InsertPostProcessVolumeInvoker){
        unsafe{ UWorld_InsertPostProcessVolumeInvokerHandler = Some(handler) };
    }

    type UWorld_InvalidateAllSkyCapturesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_InvalidateAllSkyCapturesInvokerHandler: Option<UWorld_InvalidateAllSkyCapturesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_InvalidateAllSkyCaptures_handler(handler: UWorld_InvalidateAllSkyCapturesInvoker){
        unsafe{ UWorld_InvalidateAllSkyCapturesInvokerHandler = Some(handler) };
    }

    type UWorld_InvalidateModelGeometryInvoker = unsafe extern "C" fn(*mut c_void, *mut ULevelOpaque);
    pub(super) static mut UWorld_InvalidateModelGeometryInvokerHandler: Option<UWorld_InvalidateModelGeometryInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_InvalidateModelGeometry_handler(handler: UWorld_InvalidateModelGeometryInvoker){
        unsafe{ UWorld_InvalidateModelGeometryInvokerHandler = Some(handler) };
    }

    type UWorld_InvalidateModelSurfaceInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UWorld_InvalidateModelSurfaceInvokerHandler: Option<UWorld_InvalidateModelSurfaceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_InvalidateModelSurface_handler(handler: UWorld_InvalidateModelSurfaceInvoker){
        unsafe{ UWorld_InvalidateModelSurfaceInvokerHandler = Some(handler) };
    }

    type UWorld_IsCameraMoveableInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsCameraMoveableInvokerHandler: Option<UWorld_IsCameraMoveableInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsCameraMoveable_handler(handler: UWorld_IsCameraMoveableInvoker){
        unsafe{ UWorld_IsCameraMoveableInvokerHandler = Some(handler) };
    }

    type UWorld_IsEditorWorldInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsEditorWorldInvokerHandler: Option<UWorld_IsEditorWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsEditorWorld_handler(handler: UWorld_IsEditorWorldInvoker){
        unsafe{ UWorld_IsEditorWorldInvokerHandler = Some(handler) };
    }

    type UWorld_IsGameWorldInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsGameWorldInvokerHandler: Option<UWorld_IsGameWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsGameWorld_handler(handler: UWorld_IsGameWorldInvoker){
        unsafe{ UWorld_IsGameWorldInvokerHandler = Some(handler) };
    }

    type UWorld_IsInSeamlessTravelInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsInSeamlessTravelInvokerHandler: Option<UWorld_IsInSeamlessTravelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsInSeamlessTravel_handler(handler: UWorld_IsInSeamlessTravelInvoker){
        unsafe{ UWorld_IsInSeamlessTravelInvokerHandler = Some(handler) };
    }

    type UWorld_IsInitializedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsInitializedInvokerHandler: Option<UWorld_IsInitializedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsInitialized_handler(handler: UWorld_IsInitializedInvoker){
        unsafe{ UWorld_IsInitializedInvokerHandler = Some(handler) };
    }

    type UWorld_IsInstancedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsInstancedInvokerHandler: Option<UWorld_IsInstancedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsInstanced_handler(handler: UWorld_IsInstancedInvoker){
        unsafe{ UWorld_IsInstancedInvokerHandler = Some(handler) };
    }

    type UWorld_IsLevelSelectedInvoker = unsafe extern "C" fn(*mut c_void, *mut ULevelOpaque) -> bool;
    pub(super) static mut UWorld_IsLevelSelectedInvokerHandler: Option<UWorld_IsLevelSelectedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsLevelSelected_handler(handler: UWorld_IsLevelSelectedInvoker){
        unsafe{ UWorld_IsLevelSelectedInvokerHandler = Some(handler) };
    }

    type UWorld_IsMapChangeReadyInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsMapChangeReadyInvokerHandler: Option<UWorld_IsMapChangeReadyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsMapChangeReady_handler(handler: UWorld_IsMapChangeReadyInvoker){
        unsafe{ UWorld_IsMapChangeReadyInvokerHandler = Some(handler) };
    }

    type UWorld_IsMovieSceneSequenceTickHandlerBoundInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsMovieSceneSequenceTickHandlerBoundInvokerHandler: Option<UWorld_IsMovieSceneSequenceTickHandlerBoundInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsMovieSceneSequenceTickHandlerBound_handler(handler: UWorld_IsMovieSceneSequenceTickHandlerBoundInvoker){
        unsafe{ UWorld_IsMovieSceneSequenceTickHandlerBoundInvokerHandler = Some(handler) };
    }

    type UWorld_IsNameStableForNetworkingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsNameStableForNetworkingInvokerHandler: Option<UWorld_IsNameStableForNetworkingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsNameStableForNetworking_handler(handler: UWorld_IsNameStableForNetworkingInvoker){
        unsafe{ UWorld_IsNameStableForNetworkingInvokerHandler = Some(handler) };
    }

    type UWorld_IsNavigationRebuiltInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsNavigationRebuiltInvokerHandler: Option<UWorld_IsNavigationRebuiltInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsNavigationRebuilt_handler(handler: UWorld_IsNavigationRebuiltInvoker){
        unsafe{ UWorld_IsNavigationRebuiltInvokerHandler = Some(handler) };
    }

    type UWorld_IsPartitionedWorldInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsPartitionedWorldInvokerHandler: Option<UWorld_IsPartitionedWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsPartitionedWorld_handler(handler: UWorld_IsPartitionedWorldInvoker){
        unsafe{ UWorld_IsPartitionedWorldInvokerHandler = Some(handler) };
    }

    type UWorld_IsPartitionedWorld2Invoker = unsafe extern "C" fn(*mut UWorldOpaque) -> bool;
    pub(super) static mut UWorld_IsPartitionedWorld2InvokerHandler: Option<UWorld_IsPartitionedWorld2Invoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsPartitionedWorld2_handler(handler: UWorld_IsPartitionedWorld2Invoker){
        unsafe{ UWorld_IsPartitionedWorld2InvokerHandler = Some(handler) };
    }

    type UWorld_IsPausedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsPausedInvokerHandler: Option<UWorld_IsPausedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsPaused_handler(handler: UWorld_IsPausedInvoker){
        unsafe{ UWorld_IsPausedInvokerHandler = Some(handler) };
    }

    type UWorld_IsPlayInEditorInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsPlayInEditorInvokerHandler: Option<UWorld_IsPlayInEditorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsPlayInEditor_handler(handler: UWorld_IsPlayInEditorInvoker){
        unsafe{ UWorld_IsPlayInEditorInvokerHandler = Some(handler) };
    }

    type UWorld_IsPlayInMobilePreviewInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsPlayInMobilePreviewInvokerHandler: Option<UWorld_IsPlayInMobilePreviewInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsPlayInMobilePreview_handler(handler: UWorld_IsPlayInMobilePreviewInvoker){
        unsafe{ UWorld_IsPlayInMobilePreviewInvokerHandler = Some(handler) };
    }

    type UWorld_IsPlayInPreviewInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsPlayInPreviewInvokerHandler: Option<UWorld_IsPlayInPreviewInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsPlayInPreview_handler(handler: UWorld_IsPlayInPreviewInvoker){
        unsafe{ UWorld_IsPlayInPreviewInvokerHandler = Some(handler) };
    }

    type UWorld_IsPlayInVulkanPreviewInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsPlayInVulkanPreviewInvokerHandler: Option<UWorld_IsPlayInVulkanPreviewInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsPlayInVulkanPreview_handler(handler: UWorld_IsPlayInVulkanPreviewInvoker){
        unsafe{ UWorld_IsPlayInVulkanPreviewInvokerHandler = Some(handler) };
    }

    type UWorld_IsPlayingClientReplayInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsPlayingClientReplayInvokerHandler: Option<UWorld_IsPlayingClientReplayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsPlayingClientReplay_handler(handler: UWorld_IsPlayingClientReplayInvoker){
        unsafe{ UWorld_IsPlayingClientReplayInvokerHandler = Some(handler) };
    }

    type UWorld_IsPlayingReplayInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsPlayingReplayInvokerHandler: Option<UWorld_IsPlayingReplayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsPlayingReplay_handler(handler: UWorld_IsPlayingReplayInvoker){
        unsafe{ UWorld_IsPlayingReplayInvokerHandler = Some(handler) };
    }

    type UWorld_IsPreparingMapChangeInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsPreparingMapChangeInvokerHandler: Option<UWorld_IsPreparingMapChangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsPreparingMapChange_handler(handler: UWorld_IsPreparingMapChangeInvoker){
        unsafe{ UWorld_IsPreparingMapChangeInvokerHandler = Some(handler) };
    }

    type UWorld_IsPreviewWorldInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsPreviewWorldInvokerHandler: Option<UWorld_IsPreviewWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsPreviewWorld_handler(handler: UWorld_IsPreviewWorldInvoker){
        unsafe{ UWorld_IsPreviewWorldInvokerHandler = Some(handler) };
    }

    type UWorld_IsReadyForFinishDestroyInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsReadyForFinishDestroyInvokerHandler: Option<UWorld_IsReadyForFinishDestroyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsReadyForFinishDestroy_handler(handler: UWorld_IsReadyForFinishDestroyInvoker){
        unsafe{ UWorld_IsReadyForFinishDestroyInvokerHandler = Some(handler) };
    }

    type UWorld_IsRecordingClientReplayInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsRecordingClientReplayInvokerHandler: Option<UWorld_IsRecordingClientReplayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsRecordingClientReplay_handler(handler: UWorld_IsRecordingClientReplayInvoker){
        unsafe{ UWorld_IsRecordingClientReplayInvokerHandler = Some(handler) };
    }

    type UWorld_IsRecordingReplayInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsRecordingReplayInvokerHandler: Option<UWorld_IsRecordingReplayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsRecordingReplay_handler(handler: UWorld_IsRecordingReplayInvoker){
        unsafe{ UWorld_IsRecordingReplayInvokerHandler = Some(handler) };
    }

    type UWorld_IsRefreshingStreamingLevelsInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsRefreshingStreamingLevelsInvokerHandler: Option<UWorld_IsRefreshingStreamingLevelsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsRefreshingStreamingLevels_handler(handler: UWorld_IsRefreshingStreamingLevelsInvoker){
        unsafe{ UWorld_IsRefreshingStreamingLevelsInvokerHandler = Some(handler) };
    }

    type UWorld_IsStreamingLevelBeingConsideredInvoker = unsafe extern "C" fn(*mut c_void, *mut ULevelStreamingOpaque) -> bool;
    pub(super) static mut UWorld_IsStreamingLevelBeingConsideredInvokerHandler: Option<UWorld_IsStreamingLevelBeingConsideredInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsStreamingLevelBeingConsidered_handler(handler: UWorld_IsStreamingLevelBeingConsideredInvoker){
        unsafe{ UWorld_IsStreamingLevelBeingConsideredInvokerHandler = Some(handler) };
    }

    type UWorld_IsVisibilityRequestPendingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_IsVisibilityRequestPendingInvokerHandler: Option<UWorld_IsVisibilityRequestPendingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsVisibilityRequestPending_handler(handler: UWorld_IsVisibilityRequestPendingInvoker){
        unsafe{ UWorld_IsVisibilityRequestPendingInvokerHandler = Some(handler) };
    }

    type UWorld_IsWorldOrExternalActorPackageInvoker = unsafe extern "C" fn(*mut UPackageOpaque) -> bool;
    pub(super) static mut UWorld_IsWorldOrExternalActorPackageInvokerHandler: Option<UWorld_IsWorldOrExternalActorPackageInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IsWorldOrExternalActorPackage_handler(handler: UWorld_IsWorldOrExternalActorPackageInvoker){
        unsafe{ UWorld_IsWorldOrExternalActorPackageInvokerHandler = Some(handler) };
    }

    type UWorld_IssueEditorLoadWarningsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_IssueEditorLoadWarningsInvokerHandler: Option<UWorld_IssueEditorLoadWarningsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_IssueEditorLoadWarnings_handler(handler: UWorld_IssueEditorLoadWarningsInvoker){
        unsafe{ UWorld_IssueEditorLoadWarningsInvokerHandler = Some(handler) };
    }

    type UWorld_K2_GetWorldSettingsInvoker = unsafe extern "C" fn(*mut c_void) -> *mut AWorldSettingsOpaque;
    pub(super) static mut UWorld_K2_GetWorldSettingsInvokerHandler: Option<UWorld_K2_GetWorldSettingsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_K2_GetWorldSettings_handler(handler: UWorld_K2_GetWorldSettingsInvoker){
        unsafe{ UWorld_K2_GetWorldSettingsInvokerHandler = Some(handler) };
    }

    type UWorld_MarkActorComponentForNeededEndOfFrameUpdateInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorComponentOpaque, bool);
    pub(super) static mut UWorld_MarkActorComponentForNeededEndOfFrameUpdateInvokerHandler: Option<UWorld_MarkActorComponentForNeededEndOfFrameUpdateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_MarkActorComponentForNeededEndOfFrameUpdate_handler(handler: UWorld_MarkActorComponentForNeededEndOfFrameUpdateInvoker){
        unsafe{ UWorld_MarkActorComponentForNeededEndOfFrameUpdateInvokerHandler = Some(handler) };
    }

    type UWorld_MarkObjectsPendingKillInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_MarkObjectsPendingKillInvokerHandler: Option<UWorld_MarkObjectsPendingKillInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_MarkObjectsPendingKill_handler(handler: UWorld_MarkObjectsPendingKillInvoker){
        unsafe{ UWorld_MarkObjectsPendingKillInvokerHandler = Some(handler) };
    }

    type UWorld_ModifyLevelInvoker = unsafe extern "C" fn(*mut c_void, *mut ULevelOpaque);
    pub(super) static mut UWorld_ModifyLevelInvokerHandler: Option<UWorld_ModifyLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_ModifyLevel_handler(handler: UWorld_ModifyLevelInvoker){
        unsafe{ UWorld_ModifyLevelInvokerHandler = Some(handler) };
    }

    type UWorld_NotifyAcceptedConnectionInvoker = unsafe extern "C" fn(*mut c_void, *mut UNetConnectionOpaque);
    pub(super) static mut UWorld_NotifyAcceptedConnectionInvokerHandler: Option<UWorld_NotifyAcceptedConnectionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_NotifyAcceptedConnection_handler(handler: UWorld_NotifyAcceptedConnectionInvoker){
        unsafe{ UWorld_NotifyAcceptedConnectionInvokerHandler = Some(handler) };
    }

    type UWorld_NotifyAcceptingChannelInvoker = unsafe extern "C" fn(*mut c_void, *mut UChannelOpaque) -> bool;
    pub(super) static mut UWorld_NotifyAcceptingChannelInvokerHandler: Option<UWorld_NotifyAcceptingChannelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_NotifyAcceptingChannel_handler(handler: UWorld_NotifyAcceptingChannelInvoker){
        unsafe{ UWorld_NotifyAcceptingChannelInvokerHandler = Some(handler) };
    }

    type UWorld_NotifyOfBlueprintDebuggingAssociationInvoker = unsafe extern "C" fn(*mut c_void, *mut UBlueprintOpaque, *mut UObjectOpaque);
    pub(super) static mut UWorld_NotifyOfBlueprintDebuggingAssociationInvokerHandler: Option<UWorld_NotifyOfBlueprintDebuggingAssociationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_NotifyOfBlueprintDebuggingAssociation_handler(handler: UWorld_NotifyOfBlueprintDebuggingAssociationInvoker){
        unsafe{ UWorld_NotifyOfBlueprintDebuggingAssociationInvokerHandler = Some(handler) };
    }

    type UWorld_PopulateStreamingLevelsToConsiderInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_PopulateStreamingLevelsToConsiderInvokerHandler: Option<UWorld_PopulateStreamingLevelsToConsiderInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_PopulateStreamingLevelsToConsider_handler(handler: UWorld_PopulateStreamingLevelsToConsiderInvoker){
        unsafe{ UWorld_PopulateStreamingLevelsToConsiderInvokerHandler = Some(handler) };
    }

    type UWorld_PostDuplicateInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UWorld_PostDuplicateInvokerHandler: Option<UWorld_PostDuplicateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_PostDuplicate_handler(handler: UWorld_PostDuplicateInvoker){
        unsafe{ UWorld_PostDuplicateInvokerHandler = Some(handler) };
    }

    type UWorld_PostInitializeSubsystemsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_PostInitializeSubsystemsInvokerHandler: Option<UWorld_PostInitializeSubsystemsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_PostInitializeSubsystems_handler(handler: UWorld_PostInitializeSubsystemsInvoker){
        unsafe{ UWorld_PostInitializeSubsystemsInvokerHandler = Some(handler) };
    }

    type UWorld_PostLoadInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_PostLoadInvokerHandler: Option<UWorld_PostLoadInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_PostLoad_handler(handler: UWorld_PostLoadInvoker){
        unsafe{ UWorld_PostLoadInvokerHandler = Some(handler) };
    }

    type UWorld_PropagateLightingScenarioChangeInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_PropagateLightingScenarioChangeInvokerHandler: Option<UWorld_PropagateLightingScenarioChangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_PropagateLightingScenarioChange_handler(handler: UWorld_PropagateLightingScenarioChangeInvoker){
        unsafe{ UWorld_PropagateLightingScenarioChangeInvokerHandler = Some(handler) };
    }

    type UWorld_RefreshStreamingLevelsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_RefreshStreamingLevelsInvokerHandler: Option<UWorld_RefreshStreamingLevelsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_RefreshStreamingLevels_handler(handler: UWorld_RefreshStreamingLevelsInvoker){
        unsafe{ UWorld_RefreshStreamingLevelsInvokerHandler = Some(handler) };
    }

    type UWorld_RegisterAutoActivateCameraInvoker = unsafe extern "C" fn(*mut c_void, *mut ACameraActorOpaque, i32);
    pub(super) static mut UWorld_RegisterAutoActivateCameraInvokerHandler: Option<UWorld_RegisterAutoActivateCameraInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_RegisterAutoActivateCamera_handler(handler: UWorld_RegisterAutoActivateCameraInvoker){
        unsafe{ UWorld_RegisterAutoActivateCameraInvokerHandler = Some(handler) };
    }

    type UWorld_ReleasePhysicsSceneInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_ReleasePhysicsSceneInvokerHandler: Option<UWorld_ReleasePhysicsSceneInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_ReleasePhysicsScene_handler(handler: UWorld_ReleasePhysicsSceneInvoker){
        unsafe{ UWorld_ReleasePhysicsSceneInvokerHandler = Some(handler) };
    }

    type UWorld_RemoveActorInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque, bool);
    pub(super) static mut UWorld_RemoveActorInvokerHandler: Option<UWorld_RemoveActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_RemoveActor_handler(handler: UWorld_RemoveActorInvoker){
        unsafe{ UWorld_RemoveActorInvokerHandler = Some(handler) };
    }

    type UWorld_RemoveControllerInvoker = unsafe extern "C" fn(*mut c_void, *mut AControllerOpaque);
    pub(super) static mut UWorld_RemoveControllerInvokerHandler: Option<UWorld_RemoveControllerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_RemoveController_handler(handler: UWorld_RemoveControllerInvoker){
        unsafe{ UWorld_RemoveControllerInvokerHandler = Some(handler) };
    }

    type UWorld_RemoveLevelInvoker = unsafe extern "C" fn(*mut c_void, *mut ULevelOpaque) -> bool;
    pub(super) static mut UWorld_RemoveLevelInvokerHandler: Option<UWorld_RemoveLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_RemoveLevel_handler(handler: UWorld_RemoveLevelInvoker){
        unsafe{ UWorld_RemoveLevelInvokerHandler = Some(handler) };
    }

    type UWorld_RemoveNetworkActorInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque);
    pub(super) static mut UWorld_RemoveNetworkActorInvokerHandler: Option<UWorld_RemoveNetworkActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_RemoveNetworkActor_handler(handler: UWorld_RemoveNetworkActorInvoker){
        unsafe{ UWorld_RemoveNetworkActorInvokerHandler = Some(handler) };
    }

    type UWorld_RemovePhysicsVolumeInvoker = unsafe extern "C" fn(*mut c_void, *mut APhysicsVolumeOpaque);
    pub(super) static mut UWorld_RemovePhysicsVolumeInvokerHandler: Option<UWorld_RemovePhysicsVolumeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_RemovePhysicsVolume_handler(handler: UWorld_RemovePhysicsVolumeInvoker){
        unsafe{ UWorld_RemovePhysicsVolumeInvokerHandler = Some(handler) };
    }

    type UWorld_RemovePostProcessVolumeInvoker = unsafe extern "C" fn(*mut c_void, *mut IInterface_PostProcessVolumeOpaque);
    pub(super) static mut UWorld_RemovePostProcessVolumeInvokerHandler: Option<UWorld_RemovePostProcessVolumeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_RemovePostProcessVolume_handler(handler: UWorld_RemovePostProcessVolumeInvoker){
        unsafe{ UWorld_RemovePostProcessVolumeInvokerHandler = Some(handler) };
    }

    type UWorld_RemoveStreamingLevelInvoker = unsafe extern "C" fn(*mut c_void, *mut ULevelStreamingOpaque) -> bool;
    pub(super) static mut UWorld_RemoveStreamingLevelInvokerHandler: Option<UWorld_RemoveStreamingLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_RemoveStreamingLevel_handler(handler: UWorld_RemoveStreamingLevelInvoker){
        unsafe{ UWorld_RemoveStreamingLevelInvokerHandler = Some(handler) };
    }

    type UWorld_RemoveStreamingLevelAtInvoker = unsafe extern "C" fn(*mut c_void, i32) -> bool;
    pub(super) static mut UWorld_RemoveStreamingLevelAtInvokerHandler: Option<UWorld_RemoveStreamingLevelAtInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_RemoveStreamingLevelAt_handler(handler: UWorld_RemoveStreamingLevelAtInvoker){
        unsafe{ UWorld_RemoveStreamingLevelAtInvokerHandler = Some(handler) };
    }

    type UWorld_RenameToPIEWorldInvoker = unsafe extern "C" fn(*mut c_void, i32);
    pub(super) static mut UWorld_RenameToPIEWorldInvokerHandler: Option<UWorld_RenameToPIEWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_RenameToPIEWorld_handler(handler: UWorld_RenameToPIEWorldInvoker){
        unsafe{ UWorld_RenameToPIEWorldInvokerHandler = Some(handler) };
    }

    type UWorld_RequiresHitProxiesInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_RequiresHitProxiesInvokerHandler: Option<UWorld_RequiresHitProxiesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_RequiresHitProxies_handler(handler: UWorld_RequiresHitProxiesInvoker){
        unsafe{ UWorld_RequiresHitProxiesInvokerHandler = Some(handler) };
    }

    type UWorld_SelectLevelInvoker = unsafe extern "C" fn(*mut c_void, *mut ULevelOpaque);
    pub(super) static mut UWorld_SelectLevelInvokerHandler: Option<UWorld_SelectLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SelectLevel_handler(handler: UWorld_SelectLevelInvoker){
        unsafe{ UWorld_SelectLevelInvokerHandler = Some(handler) };
    }

    type UWorld_SendAllEndOfFrameUpdatesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_SendAllEndOfFrameUpdatesInvokerHandler: Option<UWorld_SendAllEndOfFrameUpdatesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SendAllEndOfFrameUpdates_handler(handler: UWorld_SendAllEndOfFrameUpdatesInvoker){
        unsafe{ UWorld_SendAllEndOfFrameUpdatesInvokerHandler = Some(handler) };
    }

    type UWorld_SetActiveLevelCollectionInvoker = unsafe extern "C" fn(*mut c_void, i32);
    pub(super) static mut UWorld_SetActiveLevelCollectionInvokerHandler: Option<UWorld_SetActiveLevelCollectionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SetActiveLevelCollection_handler(handler: UWorld_SetActiveLevelCollectionInvoker){
        unsafe{ UWorld_SetActiveLevelCollectionInvokerHandler = Some(handler) };
    }

    type UWorld_SetAllowDeferredPhysicsStateCreationInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UWorld_SetAllowDeferredPhysicsStateCreationInvokerHandler: Option<UWorld_SetAllowDeferredPhysicsStateCreationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SetAllowDeferredPhysicsStateCreation_handler(handler: UWorld_SetAllowDeferredPhysicsStateCreationInvoker){
        unsafe{ UWorld_SetAllowDeferredPhysicsStateCreationInvokerHandler = Some(handler) };
    }

    type UWorld_SetCurrentLevelInvoker = unsafe extern "C" fn(*mut c_void, *mut ULevelOpaque) -> bool;
    pub(super) static mut UWorld_SetCurrentLevelInvokerHandler: Option<UWorld_SetCurrentLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SetCurrentLevel_handler(handler: UWorld_SetCurrentLevelInvoker){
        unsafe{ UWorld_SetCurrentLevelInvokerHandler = Some(handler) };
    }

    type UWorld_SetDemoNetDriverInvoker = unsafe extern "C" fn(*mut c_void, *mut UDemoNetDriverOpaque);
    pub(super) static mut UWorld_SetDemoNetDriverInvokerHandler: Option<UWorld_SetDemoNetDriverInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SetDemoNetDriver_handler(handler: UWorld_SetDemoNetDriverInvoker){
        unsafe{ UWorld_SetDemoNetDriverInvokerHandler = Some(handler) };
    }

    type UWorld_SetGameInstanceInvoker = unsafe extern "C" fn(*mut c_void, *mut UGameInstanceOpaque);
    pub(super) static mut UWorld_SetGameInstanceInvokerHandler: Option<UWorld_SetGameInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SetGameInstance_handler(handler: UWorld_SetGameInstanceInvoker){
        unsafe{ UWorld_SetGameInstanceInvokerHandler = Some(handler) };
    }

    type UWorld_SetGameStateInvoker = unsafe extern "C" fn(*mut c_void, *mut AGameStateBaseOpaque);
    pub(super) static mut UWorld_SetGameStateInvokerHandler: Option<UWorld_SetGameStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SetGameState_handler(handler: UWorld_SetGameStateInvoker){
        unsafe{ UWorld_SetGameStateInvokerHandler = Some(handler) };
    }

    type UWorld_SetMapNeedsLightingFullyRebuiltInvoker = unsafe extern "C" fn(*mut c_void, i32, i32);
    pub(super) static mut UWorld_SetMapNeedsLightingFullyRebuiltInvokerHandler: Option<UWorld_SetMapNeedsLightingFullyRebuiltInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SetMapNeedsLightingFullyRebuilt_handler(handler: UWorld_SetMapNeedsLightingFullyRebuiltInvoker){
        unsafe{ UWorld_SetMapNeedsLightingFullyRebuiltInvokerHandler = Some(handler) };
    }

    type UWorld_SetMaterialParameterCollectionInstanceNeedsUpdateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_SetMaterialParameterCollectionInstanceNeedsUpdateInvokerHandler: Option<UWorld_SetMaterialParameterCollectionInstanceNeedsUpdateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SetMaterialParameterCollectionInstanceNeedsUpdate_handler(handler: UWorld_SetMaterialParameterCollectionInstanceNeedsUpdateInvoker){
        unsafe{ UWorld_SetMaterialParameterCollectionInstanceNeedsUpdateInvokerHandler = Some(handler) };
    }

    type UWorld_SetNavigationSystemInvoker = unsafe extern "C" fn(*mut c_void, *mut UNavigationSystemBaseOpaque);
    pub(super) static mut UWorld_SetNavigationSystemInvokerHandler: Option<UWorld_SetNavigationSystemInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SetNavigationSystem_handler(handler: UWorld_SetNavigationSystemInvoker){
        unsafe{ UWorld_SetNavigationSystemInvokerHandler = Some(handler) };
    }

    type UWorld_SetNetDriverInvoker = unsafe extern "C" fn(*mut c_void, *mut UNetDriverOpaque);
    pub(super) static mut UWorld_SetNetDriverInvokerHandler: Option<UWorld_SetNetDriverInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SetNetDriver_handler(handler: UWorld_SetNetDriverInvoker){
        unsafe{ UWorld_SetNetDriverInvokerHandler = Some(handler) };
    }

    type UWorld_SetPhysicsSceneInvoker = unsafe extern "C" fn(*mut c_void, *mut FPhysSceneOpaque);
    pub(super) static mut UWorld_SetPhysicsSceneInvokerHandler: Option<UWorld_SetPhysicsSceneInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SetPhysicsScene_handler(handler: UWorld_SetPhysicsSceneInvoker){
        unsafe{ UWorld_SetPhysicsSceneInvokerHandler = Some(handler) };
    }

    type UWorld_SetSeamlessTravelMidpointPauseInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UWorld_SetSeamlessTravelMidpointPauseInvokerHandler: Option<UWorld_SetSeamlessTravelMidpointPauseInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SetSeamlessTravelMidpointPause_handler(handler: UWorld_SetSeamlessTravelMidpointPauseInvoker){
        unsafe{ UWorld_SetSeamlessTravelMidpointPauseInvokerHandler = Some(handler) };
    }

    type UWorld_SetShouldForceUnloadStreamingLevelsInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UWorld_SetShouldForceUnloadStreamingLevelsInvokerHandler: Option<UWorld_SetShouldForceUnloadStreamingLevelsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SetShouldForceUnloadStreamingLevels_handler(handler: UWorld_SetShouldForceUnloadStreamingLevelsInvoker){
        unsafe{ UWorld_SetShouldForceUnloadStreamingLevelsInvokerHandler = Some(handler) };
    }

    type UWorld_SetShouldForceVisibleStreamingLevelsInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UWorld_SetShouldForceVisibleStreamingLevelsInvokerHandler: Option<UWorld_SetShouldForceVisibleStreamingLevelsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SetShouldForceVisibleStreamingLevels_handler(handler: UWorld_SetShouldForceVisibleStreamingLevelsInvoker){
        unsafe{ UWorld_SetShouldForceVisibleStreamingLevelsInvokerHandler = Some(handler) };
    }

    type UWorld_SetShouldTickInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UWorld_SetShouldTickInvokerHandler: Option<UWorld_SetShouldTickInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SetShouldTick_handler(handler: UWorld_SetShouldTickInvoker){
        unsafe{ UWorld_SetShouldTickInvokerHandler = Some(handler) };
    }

    type UWorld_SetWorldDataLayersInvoker = unsafe extern "C" fn(*mut c_void, *mut AWorldDataLayersOpaque);
    pub(super) static mut UWorld_SetWorldDataLayersInvokerHandler: Option<UWorld_SetWorldDataLayersInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SetWorldDataLayers_handler(handler: UWorld_SetWorldDataLayersInvoker){
        unsafe{ UWorld_SetWorldDataLayersInvokerHandler = Some(handler) };
    }

    type UWorld_SetupParameterCollectionInstancesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_SetupParameterCollectionInstancesInvokerHandler: Option<UWorld_SetupParameterCollectionInstancesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SetupParameterCollectionInstances_handler(handler: UWorld_SetupParameterCollectionInstancesInvoker){
        unsafe{ UWorld_SetupParameterCollectionInstancesInvokerHandler = Some(handler) };
    }

    type UWorld_SetupPhysicsTickFunctionsInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UWorld_SetupPhysicsTickFunctionsInvokerHandler: Option<UWorld_SetupPhysicsTickFunctionsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SetupPhysicsTickFunctions_handler(handler: UWorld_SetupPhysicsTickFunctionsInvoker){
        unsafe{ UWorld_SetupPhysicsTickFunctionsInvokerHandler = Some(handler) };
    }

    type UWorld_ShouldTickInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_ShouldTickInvokerHandler: Option<UWorld_ShouldTickInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_ShouldTick_handler(handler: UWorld_ShouldTickInvoker){
        unsafe{ UWorld_ShouldTickInvokerHandler = Some(handler) };
    }

    type UWorld_ShrinkLevelInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_ShrinkLevelInvokerHandler: Option<UWorld_ShrinkLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_ShrinkLevel_handler(handler: UWorld_ShrinkLevelInvoker){
        unsafe{ UWorld_ShrinkLevelInvokerHandler = Some(handler) };
    }

    type UWorld_SpawnBrushInvoker = unsafe extern "C" fn(*mut c_void) -> *mut ABrushOpaque;
    pub(super) static mut UWorld_SpawnBrushInvokerHandler: Option<UWorld_SpawnBrushInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SpawnBrush_handler(handler: UWorld_SpawnBrushInvoker){
        unsafe{ UWorld_SpawnBrushInvokerHandler = Some(handler) };
    }

    type UWorld_StartPhysicsSimInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_StartPhysicsSimInvokerHandler: Option<UWorld_StartPhysicsSimInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_StartPhysicsSim_handler(handler: UWorld_StartPhysicsSimInvoker){
        unsafe{ UWorld_StartPhysicsSimInvokerHandler = Some(handler) };
    }

    type UWorld_SupportsMakingInvisibleTransactionRequestsInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_SupportsMakingInvisibleTransactionRequestsInvokerHandler: Option<UWorld_SupportsMakingInvisibleTransactionRequestsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SupportsMakingInvisibleTransactionRequests_handler(handler: UWorld_SupportsMakingInvisibleTransactionRequestsInvoker){
        unsafe{ UWorld_SupportsMakingInvisibleTransactionRequestsInvokerHandler = Some(handler) };
    }

    type UWorld_SupportsMakingVisibleTransactionRequestsInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_SupportsMakingVisibleTransactionRequestsInvokerHandler: Option<UWorld_SupportsMakingVisibleTransactionRequestsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_SupportsMakingVisibleTransactionRequests_handler(handler: UWorld_SupportsMakingVisibleTransactionRequestsInvoker){
        unsafe{ UWorld_SupportsMakingVisibleTransactionRequestsInvokerHandler = Some(handler) };
    }

    type UWorld_TickNetClientInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UWorld_TickNetClientInvokerHandler: Option<UWorld_TickNetClientInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_TickNetClient_handler(handler: UWorld_TickNetClientInvoker){
        unsafe{ UWorld_TickNetClientInvokerHandler = Some(handler) };
    }

    type UWorld_TimeSinceInvoker = unsafe extern "C" fn(*mut c_void, f64) -> f64;
    pub(super) static mut UWorld_TimeSinceInvokerHandler: Option<UWorld_TimeSinceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_TimeSince_handler(handler: UWorld_TimeSinceInvoker){
        unsafe{ UWorld_TimeSinceInvokerHandler = Some(handler) };
    }

    type UWorld_TransferBlueprintDebugReferencesInvoker = unsafe extern "C" fn(*mut c_void, *mut UWorldOpaque);
    pub(super) static mut UWorld_TransferBlueprintDebugReferencesInvokerHandler: Option<UWorld_TransferBlueprintDebugReferencesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_TransferBlueprintDebugReferences_handler(handler: UWorld_TransferBlueprintDebugReferencesInvoker){
        unsafe{ UWorld_TransferBlueprintDebugReferencesInvokerHandler = Some(handler) };
    }

    type UWorld_TriggerStreamingDataRebuildInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_TriggerStreamingDataRebuildInvokerHandler: Option<UWorld_TriggerStreamingDataRebuildInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_TriggerStreamingDataRebuild_handler(handler: UWorld_TriggerStreamingDataRebuildInvoker){
        unsafe{ UWorld_TriggerStreamingDataRebuildInvokerHandler = Some(handler) };
    }

    type UWorld_UpdateActorComponentEndOfFrameUpdateStateInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorComponentOpaque);
    pub(super) static mut UWorld_UpdateActorComponentEndOfFrameUpdateStateInvokerHandler: Option<UWorld_UpdateActorComponentEndOfFrameUpdateStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_UpdateActorComponentEndOfFrameUpdateState_handler(handler: UWorld_UpdateActorComponentEndOfFrameUpdateStateInvoker){
        unsafe{ UWorld_UpdateActorComponentEndOfFrameUpdateStateInvokerHandler = Some(handler) };
    }

    type UWorld_UpdateAllSkyCapturesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_UpdateAllSkyCapturesInvokerHandler: Option<UWorld_UpdateAllSkyCapturesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_UpdateAllSkyCaptures_handler(handler: UWorld_UpdateAllSkyCapturesInvoker){
        unsafe{ UWorld_UpdateAllSkyCapturesInvokerHandler = Some(handler) };
    }

    type UWorld_UpdateConstraintActorsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_UpdateConstraintActorsInvokerHandler: Option<UWorld_UpdateConstraintActorsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_UpdateConstraintActors_handler(handler: UWorld_UpdateConstraintActorsInvoker){
        unsafe{ UWorld_UpdateConstraintActorsInvokerHandler = Some(handler) };
    }

    type UWorld_UpdateCullDistanceVolumesInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque, *mut UPrimitiveComponentOpaque) -> bool;
    pub(super) static mut UWorld_UpdateCullDistanceVolumesInvokerHandler: Option<UWorld_UpdateCullDistanceVolumesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_UpdateCullDistanceVolumes_handler(handler: UWorld_UpdateCullDistanceVolumesInvoker){
        unsafe{ UWorld_UpdateCullDistanceVolumesInvokerHandler = Some(handler) };
    }

    type UWorld_UpdateLevelStreamingInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UWorld_UpdateLevelStreamingInvokerHandler: Option<UWorld_UpdateLevelStreamingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_UpdateLevelStreaming_handler(handler: UWorld_UpdateLevelStreamingInvoker){
        unsafe{ UWorld_UpdateLevelStreamingInvokerHandler = Some(handler) };
    }

    type UWorld_UpdateParameterCollectionInstancesInvoker = unsafe extern "C" fn(*mut c_void, bool, bool);
    pub(super) static mut UWorld_UpdateParameterCollectionInstancesInvokerHandler: Option<UWorld_UpdateParameterCollectionInstancesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_UpdateParameterCollectionInstances_handler(handler: UWorld_UpdateParameterCollectionInstancesInvoker){
        unsafe{ UWorld_UpdateParameterCollectionInstancesInvokerHandler = Some(handler) };
    }

    type UWorld_UpdateStreamingLevelPriorityInvoker = unsafe extern "C" fn(*mut c_void, *mut ULevelStreamingOpaque);
    pub(super) static mut UWorld_UpdateStreamingLevelPriorityInvokerHandler: Option<UWorld_UpdateStreamingLevelPriorityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_UpdateStreamingLevelPriority_handler(handler: UWorld_UpdateStreamingLevelPriorityInvoker){
        unsafe{ UWorld_UpdateStreamingLevelPriorityInvokerHandler = Some(handler) };
    }

    type UWorld_UpdateStreamingLevelShouldBeConsideredInvoker = unsafe extern "C" fn(*mut c_void, *mut ULevelStreamingOpaque);
    pub(super) static mut UWorld_UpdateStreamingLevelShouldBeConsideredInvokerHandler: Option<UWorld_UpdateStreamingLevelShouldBeConsideredInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_UpdateStreamingLevelShouldBeConsidered_handler(handler: UWorld_UpdateStreamingLevelShouldBeConsideredInvoker){
        unsafe{ UWorld_UpdateStreamingLevelShouldBeConsideredInvokerHandler = Some(handler) };
    }

    type UWorld_UpdateWorldComponentsInvoker = unsafe extern "C" fn(*mut c_void, bool, bool, *mut FRegisterComponentContextOpaque);
    pub(super) static mut UWorld_UpdateWorldComponentsInvokerHandler: Option<UWorld_UpdateWorldComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_UpdateWorldComponents_handler(handler: UWorld_UpdateWorldComponentsInvoker){
        unsafe{ UWorld_UpdateWorldComponentsInvokerHandler = Some(handler) };
    }

    type UWorld_UsesGameHiddenFlagsInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UWorld_UsesGameHiddenFlagsInvokerHandler: Option<UWorld_UsesGameHiddenFlagsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_UsesGameHiddenFlags_handler(handler: UWorld_UsesGameHiddenFlagsInvoker){
        unsafe{ UWorld_UsesGameHiddenFlagsInvokerHandler = Some(handler) };
    }

    type UWorld_WelcomePlayerInvoker = unsafe extern "C" fn(*mut c_void, *mut UNetConnectionOpaque);
    pub(super) static mut UWorld_WelcomePlayerInvokerHandler: Option<UWorld_WelcomePlayerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UWorld_WelcomePlayer_handler(handler: UWorld_WelcomePlayerInvoker){
        unsafe{ UWorld_WelcomePlayerInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_AddAngularImpulseInDegreesInvoker = unsafe extern "C" fn(*mut c_void, Vector3, UName, bool);
    pub(super) static mut UPrimitiveComponent_AddAngularImpulseInDegreesInvokerHandler: Option<UPrimitiveComponent_AddAngularImpulseInDegreesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_AddAngularImpulseInDegrees_handler(handler: UPrimitiveComponent_AddAngularImpulseInDegreesInvoker){
        unsafe{ UPrimitiveComponent_AddAngularImpulseInDegreesInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_AddAngularImpulseInRadiansInvoker = unsafe extern "C" fn(*mut c_void, Vector3, UName, bool);
    pub(super) static mut UPrimitiveComponent_AddAngularImpulseInRadiansInvokerHandler: Option<UPrimitiveComponent_AddAngularImpulseInRadiansInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_AddAngularImpulseInRadians_handler(handler: UPrimitiveComponent_AddAngularImpulseInRadiansInvoker){
        unsafe{ UPrimitiveComponent_AddAngularImpulseInRadiansInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_AddForceInvoker = unsafe extern "C" fn(*mut c_void, Vector3, UName, bool);
    pub(super) static mut UPrimitiveComponent_AddForceInvokerHandler: Option<UPrimitiveComponent_AddForceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_AddForce_handler(handler: UPrimitiveComponent_AddForceInvoker){
        unsafe{ UPrimitiveComponent_AddForceInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_AddForceAtLocationInvoker = unsafe extern "C" fn(*mut c_void, Vector3, Vector3, UName);
    pub(super) static mut UPrimitiveComponent_AddForceAtLocationInvokerHandler: Option<UPrimitiveComponent_AddForceAtLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_AddForceAtLocation_handler(handler: UPrimitiveComponent_AddForceAtLocationInvoker){
        unsafe{ UPrimitiveComponent_AddForceAtLocationInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_AddForceAtLocationLocalInvoker = unsafe extern "C" fn(*mut c_void, Vector3, Vector3, UName);
    pub(super) static mut UPrimitiveComponent_AddForceAtLocationLocalInvokerHandler: Option<UPrimitiveComponent_AddForceAtLocationLocalInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_AddForceAtLocationLocal_handler(handler: UPrimitiveComponent_AddForceAtLocationLocalInvoker){
        unsafe{ UPrimitiveComponent_AddForceAtLocationLocalInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_AddImpulseInvoker = unsafe extern "C" fn(*mut c_void, Vector3, UName, bool);
    pub(super) static mut UPrimitiveComponent_AddImpulseInvokerHandler: Option<UPrimitiveComponent_AddImpulseInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_AddImpulse_handler(handler: UPrimitiveComponent_AddImpulseInvoker){
        unsafe{ UPrimitiveComponent_AddImpulseInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_AddImpulseAtLocationInvoker = unsafe extern "C" fn(*mut c_void, Vector3, Vector3, UName);
    pub(super) static mut UPrimitiveComponent_AddImpulseAtLocationInvokerHandler: Option<UPrimitiveComponent_AddImpulseAtLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_AddImpulseAtLocation_handler(handler: UPrimitiveComponent_AddImpulseAtLocationInvoker){
        unsafe{ UPrimitiveComponent_AddImpulseAtLocationInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_AddTorqueInDegreesInvoker = unsafe extern "C" fn(*mut c_void, Vector3, UName, bool);
    pub(super) static mut UPrimitiveComponent_AddTorqueInDegreesInvokerHandler: Option<UPrimitiveComponent_AddTorqueInDegreesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_AddTorqueInDegrees_handler(handler: UPrimitiveComponent_AddTorqueInDegreesInvoker){
        unsafe{ UPrimitiveComponent_AddTorqueInDegreesInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_AddTorqueInRadiansInvoker = unsafe extern "C" fn(*mut c_void, Vector3, UName, bool);
    pub(super) static mut UPrimitiveComponent_AddTorqueInRadiansInvokerHandler: Option<UPrimitiveComponent_AddTorqueInRadiansInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_AddTorqueInRadians_handler(handler: UPrimitiveComponent_AddTorqueInRadiansInvoker){
        unsafe{ UPrimitiveComponent_AddTorqueInRadiansInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_AddVelocityChangeImpulseAtLocationInvoker = unsafe extern "C" fn(*mut c_void, Vector3, Vector3, UName);
    pub(super) static mut UPrimitiveComponent_AddVelocityChangeImpulseAtLocationInvokerHandler: Option<UPrimitiveComponent_AddVelocityChangeImpulseAtLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_AddVelocityChangeImpulseAtLocation_handler(handler: UPrimitiveComponent_AddVelocityChangeImpulseAtLocationInvoker){
        unsafe{ UPrimitiveComponent_AddVelocityChangeImpulseAtLocationInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_BeginDestroyInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_BeginDestroyInvokerHandler: Option<UPrimitiveComponent_BeginDestroyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_BeginDestroy_handler(handler: UPrimitiveComponent_BeginDestroyInvoker){
        unsafe{ UPrimitiveComponent_BeginDestroyInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_BeginPlayInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_BeginPlayInvokerHandler: Option<UPrimitiveComponent_BeginPlayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_BeginPlay_handler(handler: UPrimitiveComponent_BeginPlayInvoker){
        unsafe{ UPrimitiveComponent_BeginPlayInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_CalculateMassInvoker = unsafe extern "C" fn(*mut c_void, UName) -> f32;
    pub(super) static mut UPrimitiveComponent_CalculateMassInvokerHandler: Option<UPrimitiveComponent_CalculateMassInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_CalculateMass_handler(handler: UPrimitiveComponent_CalculateMassInvoker){
        unsafe{ UPrimitiveComponent_CalculateMassInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_CanCharacterStepUpInvoker = unsafe extern "C" fn(*mut c_void, *mut APawnOpaque) -> bool;
    pub(super) static mut UPrimitiveComponent_CanCharacterStepUpInvokerHandler: Option<UPrimitiveComponent_CanCharacterStepUpInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_CanCharacterStepUp_handler(handler: UPrimitiveComponent_CanCharacterStepUpInvoker){
        unsafe{ UPrimitiveComponent_CanCharacterStepUpInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_CanEditChangeInvoker = unsafe extern "C" fn(*mut c_void, *mut FPropertyOpaque) -> bool;
    pub(super) static mut UPrimitiveComponent_CanEditChangeInvokerHandler: Option<UPrimitiveComponent_CanEditChangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_CanEditChange_handler(handler: UPrimitiveComponent_CanEditChangeInvoker){
        unsafe{ UPrimitiveComponent_CanEditChangeInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_CanEditSimulatePhysicsInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_CanEditSimulatePhysicsInvokerHandler: Option<UPrimitiveComponent_CanEditSimulatePhysicsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_CanEditSimulatePhysics_handler(handler: UPrimitiveComponent_CanEditSimulatePhysicsInvoker){
        unsafe{ UPrimitiveComponent_CanEditSimulatePhysicsInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_CanSkipGetTextureStreamingRenderAssetInfoInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_CanSkipGetTextureStreamingRenderAssetInfoInvokerHandler: Option<UPrimitiveComponent_CanSkipGetTextureStreamingRenderAssetInfoInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_CanSkipGetTextureStreamingRenderAssetInfo_handler(handler: UPrimitiveComponent_CanSkipGetTextureStreamingRenderAssetInfoInvoker){
        unsafe{ UPrimitiveComponent_CanSkipGetTextureStreamingRenderAssetInfoInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_CheckForErrorsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_CheckForErrorsInvokerHandler: Option<UPrimitiveComponent_CheckForErrorsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_CheckForErrors_handler(handler: UPrimitiveComponent_CheckForErrorsInvoker){
        unsafe{ UPrimitiveComponent_CheckForErrorsInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_ClearMoveIgnoreActorsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_ClearMoveIgnoreActorsInvokerHandler: Option<UPrimitiveComponent_ClearMoveIgnoreActorsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_ClearMoveIgnoreActors_handler(handler: UPrimitiveComponent_ClearMoveIgnoreActorsInvoker){
        unsafe{ UPrimitiveComponent_ClearMoveIgnoreActorsInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_ClearMoveIgnoreComponentsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_ClearMoveIgnoreComponentsInvokerHandler: Option<UPrimitiveComponent_ClearMoveIgnoreComponentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_ClearMoveIgnoreComponents_handler(handler: UPrimitiveComponent_ClearMoveIgnoreComponentsInvoker){
        unsafe{ UPrimitiveComponent_ClearMoveIgnoreComponentsInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_ComputeHashTextureStreamingBuiltDataInvoker = unsafe extern "C" fn(*mut c_void) -> u32;
    pub(super) static mut UPrimitiveComponent_ComputeHashTextureStreamingBuiltDataInvokerHandler: Option<UPrimitiveComponent_ComputeHashTextureStreamingBuiltDataInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_ComputeHashTextureStreamingBuiltData_handler(handler: UPrimitiveComponent_ComputeHashTextureStreamingBuiltDataInvoker){
        unsafe{ UPrimitiveComponent_ComputeHashTextureStreamingBuiltDataInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_CreateRenderState_ConcurrentInvoker = unsafe extern "C" fn(*mut c_void, *mut FRegisterComponentContextOpaque);
    pub(super) static mut UPrimitiveComponent_CreateRenderState_ConcurrentInvokerHandler: Option<UPrimitiveComponent_CreateRenderState_ConcurrentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_CreateRenderState_Concurrent_handler(handler: UPrimitiveComponent_CreateRenderState_ConcurrentInvoker){
        unsafe{ UPrimitiveComponent_CreateRenderState_ConcurrentInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_CreateSceneProxyInvoker = unsafe extern "C" fn(*mut c_void) -> *mut FPrimitiveSceneProxyOpaque;
    pub(super) static mut UPrimitiveComponent_CreateSceneProxyInvokerHandler: Option<UPrimitiveComponent_CreateSceneProxyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_CreateSceneProxy_handler(handler: UPrimitiveComponent_CreateSceneProxyInvoker){
        unsafe{ UPrimitiveComponent_CreateSceneProxyInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_DestroyRenderState_ConcurrentInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_DestroyRenderState_ConcurrentInvokerHandler: Option<UPrimitiveComponent_DestroyRenderState_ConcurrentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_DestroyRenderState_Concurrent_handler(handler: UPrimitiveComponent_DestroyRenderState_ConcurrentInvoker){
        unsafe{ UPrimitiveComponent_DestroyRenderState_ConcurrentInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_DispatchMouseOverEventsInvoker = unsafe extern "C" fn(*mut UPrimitiveComponentOpaque, *mut UPrimitiveComponentOpaque);
    pub(super) static mut UPrimitiveComponent_DispatchMouseOverEventsInvokerHandler: Option<UPrimitiveComponent_DispatchMouseOverEventsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_DispatchMouseOverEvents_handler(handler: UPrimitiveComponent_DispatchMouseOverEventsInvoker){
        unsafe{ UPrimitiveComponent_DispatchMouseOverEventsInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_FinishDestroyInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_FinishDestroyInvokerHandler: Option<UPrimitiveComponent_FinishDestroyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_FinishDestroy_handler(handler: UPrimitiveComponent_FinishDestroyInvoker){
        unsafe{ UPrimitiveComponent_FinishDestroyInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetAngularDampingInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UPrimitiveComponent_GetAngularDampingInvokerHandler: Option<UPrimitiveComponent_GetAngularDampingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetAngularDamping_handler(handler: UPrimitiveComponent_GetAngularDampingInvoker){
        unsafe{ UPrimitiveComponent_GetAngularDampingInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetBodyInstanceInvoker = unsafe extern "C" fn(*mut c_void, UName, bool, i32) -> *mut FBodyInstanceOpaque;
    pub(super) static mut UPrimitiveComponent_GetBodyInstanceInvokerHandler: Option<UPrimitiveComponent_GetBodyInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetBodyInstance_handler(handler: UPrimitiveComponent_GetBodyInstanceInvoker){
        unsafe{ UPrimitiveComponent_GetBodyInstanceInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetBodySetupInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UBodySetupOpaque;
    pub(super) static mut UPrimitiveComponent_GetBodySetupInvokerHandler: Option<UPrimitiveComponent_GetBodySetupInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetBodySetup_handler(handler: UPrimitiveComponent_GetBodySetupInvoker){
        unsafe{ UPrimitiveComponent_GetBodySetupInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetCenterOfMassInvoker = unsafe extern "C" fn(*mut c_void, UName) -> Vector3;
    pub(super) static mut UPrimitiveComponent_GetCenterOfMassInvokerHandler: Option<UPrimitiveComponent_GetCenterOfMassInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetCenterOfMass_handler(handler: UPrimitiveComponent_GetCenterOfMassInvoker){
        unsafe{ UPrimitiveComponent_GetCenterOfMassInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetCollisionObjectTypeInvoker = unsafe extern "C" fn(*mut c_void) -> ECollisionChannel;
    pub(super) static mut UPrimitiveComponent_GetCollisionObjectTypeInvokerHandler: Option<UPrimitiveComponent_GetCollisionObjectTypeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetCollisionObjectType_handler(handler: UPrimitiveComponent_GetCollisionObjectTypeInvoker){
        unsafe{ UPrimitiveComponent_GetCollisionObjectTypeInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetCollisionProfileNameInvoker = unsafe extern "C" fn(*mut c_void) -> UName;
    pub(super) static mut UPrimitiveComponent_GetCollisionProfileNameInvokerHandler: Option<UPrimitiveComponent_GetCollisionProfileNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetCollisionProfileName_handler(handler: UPrimitiveComponent_GetCollisionProfileNameInvoker){
        unsafe{ UPrimitiveComponent_GetCollisionProfileNameInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetCollisionShapeInvoker = unsafe extern "C" fn(*mut c_void, f32) -> CollisionShape;
    pub(super) static mut UPrimitiveComponent_GetCollisionShapeInvokerHandler: Option<UPrimitiveComponent_GetCollisionShapeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetCollisionShape_handler(handler: UPrimitiveComponent_GetCollisionShapeInvoker){
        unsafe{ UPrimitiveComponent_GetCollisionShapeInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetComponentTransformFromBodyInstanceInvoker = unsafe extern "C" fn(*mut c_void, *mut FBodyInstanceOpaque) -> Transform;
    pub(super) static mut UPrimitiveComponent_GetComponentTransformFromBodyInstanceInvokerHandler: Option<UPrimitiveComponent_GetComponentTransformFromBodyInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetComponentTransformFromBodyInstance_handler(handler: UPrimitiveComponent_GetComponentTransformFromBodyInstanceInvoker){
        unsafe{ UPrimitiveComponent_GetComponentTransformFromBodyInstanceInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetComponentVelocityInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut UPrimitiveComponent_GetComponentVelocityInvokerHandler: Option<UPrimitiveComponent_GetComponentVelocityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetComponentVelocity_handler(handler: UPrimitiveComponent_GetComponentVelocityInvoker){
        unsafe{ UPrimitiveComponent_GetComponentVelocityInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetCustomPrimitiveDataIndexForScalarParameterInvoker = unsafe extern "C" fn(*mut c_void, UName) -> i32;
    pub(super) static mut UPrimitiveComponent_GetCustomPrimitiveDataIndexForScalarParameterInvokerHandler: Option<UPrimitiveComponent_GetCustomPrimitiveDataIndexForScalarParameterInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetCustomPrimitiveDataIndexForScalarParameter_handler(handler: UPrimitiveComponent_GetCustomPrimitiveDataIndexForScalarParameterInvoker){
        unsafe{ UPrimitiveComponent_GetCustomPrimitiveDataIndexForScalarParameterInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetCustomPrimitiveDataIndexForVectorParameterInvoker = unsafe extern "C" fn(*mut c_void, UName) -> i32;
    pub(super) static mut UPrimitiveComponent_GetCustomPrimitiveDataIndexForVectorParameterInvokerHandler: Option<UPrimitiveComponent_GetCustomPrimitiveDataIndexForVectorParameterInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetCustomPrimitiveDataIndexForVectorParameter_handler(handler: UPrimitiveComponent_GetCustomPrimitiveDataIndexForVectorParameterInvoker){
        unsafe{ UPrimitiveComponent_GetCustomPrimitiveDataIndexForVectorParameterInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetDiffuseBoostInvoker = unsafe extern "C" fn(*mut c_void, i32) -> f32;
    pub(super) static mut UPrimitiveComponent_GetDiffuseBoostInvokerHandler: Option<UPrimitiveComponent_GetDiffuseBoostInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetDiffuseBoost_handler(handler: UPrimitiveComponent_GetDiffuseBoostInvoker){
        unsafe{ UPrimitiveComponent_GetDiffuseBoostInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetEditorMaterialInvoker = unsafe extern "C" fn(*mut c_void, i32) -> *mut UMaterialInterfaceOpaque;
    pub(super) static mut UPrimitiveComponent_GetEditorMaterialInvokerHandler: Option<UPrimitiveComponent_GetEditorMaterialInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetEditorMaterial_handler(handler: UPrimitiveComponent_GetEditorMaterialInvoker){
        unsafe{ UPrimitiveComponent_GetEditorMaterialInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetEmissiveBoostInvoker = unsafe extern "C" fn(*mut c_void, i32) -> f32;
    pub(super) static mut UPrimitiveComponent_GetEmissiveBoostInvokerHandler: Option<UPrimitiveComponent_GetEmissiveBoostInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetEmissiveBoost_handler(handler: UPrimitiveComponent_GetEmissiveBoostInvoker){
        unsafe{ UPrimitiveComponent_GetEmissiveBoostInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetGenerateOverlapEventsInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_GetGenerateOverlapEventsInvokerHandler: Option<UPrimitiveComponent_GetGenerateOverlapEventsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetGenerateOverlapEvents_handler(handler: UPrimitiveComponent_GetGenerateOverlapEventsInvoker){
        unsafe{ UPrimitiveComponent_GetGenerateOverlapEventsInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetHiddenEditorViewsInvoker = unsafe extern "C" fn(*mut c_void) -> u64;
    pub(super) static mut UPrimitiveComponent_GetHiddenEditorViewsInvokerHandler: Option<UPrimitiveComponent_GetHiddenEditorViewsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetHiddenEditorViews_handler(handler: UPrimitiveComponent_GetHiddenEditorViewsInvoker){
        unsafe{ UPrimitiveComponent_GetHiddenEditorViewsInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetInertiaTensorInvoker = unsafe extern "C" fn(*mut c_void, UName) -> Vector3;
    pub(super) static mut UPrimitiveComponent_GetInertiaTensorInvokerHandler: Option<UPrimitiveComponent_GetInertiaTensorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetInertiaTensor_handler(handler: UPrimitiveComponent_GetInertiaTensorInvoker){
        unsafe{ UPrimitiveComponent_GetInertiaTensorInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetLODParentPrimitiveInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UPrimitiveComponentOpaque;
    pub(super) static mut UPrimitiveComponent_GetLODParentPrimitiveInvokerHandler: Option<UPrimitiveComponent_GetLODParentPrimitiveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetLODParentPrimitive_handler(handler: UPrimitiveComponent_GetLODParentPrimitiveInvoker){
        unsafe{ UPrimitiveComponent_GetLODParentPrimitiveInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetLastRenderTimeInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UPrimitiveComponent_GetLastRenderTimeInvokerHandler: Option<UPrimitiveComponent_GetLastRenderTimeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetLastRenderTime_handler(handler: UPrimitiveComponent_GetLastRenderTimeInvoker){
        unsafe{ UPrimitiveComponent_GetLastRenderTimeInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetLastRenderTimeOnScreenInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UPrimitiveComponent_GetLastRenderTimeOnScreenInvokerHandler: Option<UPrimitiveComponent_GetLastRenderTimeOnScreenInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetLastRenderTimeOnScreen_handler(handler: UPrimitiveComponent_GetLastRenderTimeOnScreenInvoker){
        unsafe{ UPrimitiveComponent_GetLastRenderTimeOnScreenInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetLevelInstanceEditingStateInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_GetLevelInstanceEditingStateInvokerHandler: Option<UPrimitiveComponent_GetLevelInstanceEditingStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetLevelInstanceEditingState_handler(handler: UPrimitiveComponent_GetLevelInstanceEditingStateInvoker){
        unsafe{ UPrimitiveComponent_GetLevelInstanceEditingStateInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetLightAndShadowMapMemoryUsageInvoker = unsafe extern "C" fn(*mut c_void, &mut i32, &mut i32);
    pub(super) static mut UPrimitiveComponent_GetLightAndShadowMapMemoryUsageInvokerHandler: Option<UPrimitiveComponent_GetLightAndShadowMapMemoryUsageInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetLightAndShadowMapMemoryUsage_handler(handler: UPrimitiveComponent_GetLightAndShadowMapMemoryUsageInvoker){
        unsafe{ UPrimitiveComponent_GetLightAndShadowMapMemoryUsageInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetLightMapResolutionInvoker = unsafe extern "C" fn(*mut c_void, &mut i32, &mut i32) -> bool;
    pub(super) static mut UPrimitiveComponent_GetLightMapResolutionInvokerHandler: Option<UPrimitiveComponent_GetLightMapResolutionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetLightMapResolution_handler(handler: UPrimitiveComponent_GetLightMapResolutionInvoker){
        unsafe{ UPrimitiveComponent_GetLightMapResolutionInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetLightingAttachmentRootInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UPrimitiveComponentOpaque;
    pub(super) static mut UPrimitiveComponent_GetLightingAttachmentRootInvokerHandler: Option<UPrimitiveComponent_GetLightingAttachmentRootInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetLightingAttachmentRoot_handler(handler: UPrimitiveComponent_GetLightingAttachmentRootInvoker){
        unsafe{ UPrimitiveComponent_GetLightingAttachmentRootInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetLinearDampingInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UPrimitiveComponent_GetLinearDampingInvokerHandler: Option<UPrimitiveComponent_GetLinearDampingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetLinearDamping_handler(handler: UPrimitiveComponent_GetLinearDampingInvoker){
        unsafe{ UPrimitiveComponent_GetLinearDampingInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetMassInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UPrimitiveComponent_GetMassInvokerHandler: Option<UPrimitiveComponent_GetMassInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetMass_handler(handler: UPrimitiveComponent_GetMassInvoker){
        unsafe{ UPrimitiveComponent_GetMassInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetMassScaleInvoker = unsafe extern "C" fn(*mut c_void, UName) -> f32;
    pub(super) static mut UPrimitiveComponent_GetMassScaleInvokerHandler: Option<UPrimitiveComponent_GetMassScaleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetMassScale_handler(handler: UPrimitiveComponent_GetMassScaleInvoker){
        unsafe{ UPrimitiveComponent_GetMassScaleInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetMaterialInvoker = unsafe extern "C" fn(*mut c_void, i32) -> *mut UMaterialInterfaceOpaque;
    pub(super) static mut UPrimitiveComponent_GetMaterialInvokerHandler: Option<UPrimitiveComponent_GetMaterialInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetMaterial_handler(handler: UPrimitiveComponent_GetMaterialInvoker){
        unsafe{ UPrimitiveComponent_GetMaterialInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetMaterialFromCollisionFaceIndexInvoker = unsafe extern "C" fn(*mut c_void, i32, &mut i32) -> *mut UMaterialInterfaceOpaque;
    pub(super) static mut UPrimitiveComponent_GetMaterialFromCollisionFaceIndexInvokerHandler: Option<UPrimitiveComponent_GetMaterialFromCollisionFaceIndexInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetMaterialFromCollisionFaceIndex_handler(handler: UPrimitiveComponent_GetMaterialFromCollisionFaceIndexInvoker){
        unsafe{ UPrimitiveComponent_GetMaterialFromCollisionFaceIndexInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetNumMaterialsInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UPrimitiveComponent_GetNumMaterialsInvokerHandler: Option<UPrimitiveComponent_GetNumMaterialsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetNumMaterials_handler(handler: UPrimitiveComponent_GetNumMaterialsInvoker){
        unsafe{ UPrimitiveComponent_GetNumMaterialsInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetNumUncachedStaticLightingInteractionsInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UPrimitiveComponent_GetNumUncachedStaticLightingInteractionsInvokerHandler: Option<UPrimitiveComponent_GetNumUncachedStaticLightingInteractionsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetNumUncachedStaticLightingInteractions_handler(handler: UPrimitiveComponent_GetNumUncachedStaticLightingInteractionsInvoker){
        unsafe{ UPrimitiveComponent_GetNumUncachedStaticLightingInteractionsInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetPhysicsAngularVelocityInDegreesInvoker = unsafe extern "C" fn(*mut c_void, UName) -> Vector3;
    pub(super) static mut UPrimitiveComponent_GetPhysicsAngularVelocityInDegreesInvokerHandler: Option<UPrimitiveComponent_GetPhysicsAngularVelocityInDegreesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetPhysicsAngularVelocityInDegrees_handler(handler: UPrimitiveComponent_GetPhysicsAngularVelocityInDegreesInvoker){
        unsafe{ UPrimitiveComponent_GetPhysicsAngularVelocityInDegreesInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetPhysicsAngularVelocityInRadiansInvoker = unsafe extern "C" fn(*mut c_void, UName) -> Vector3;
    pub(super) static mut UPrimitiveComponent_GetPhysicsAngularVelocityInRadiansInvokerHandler: Option<UPrimitiveComponent_GetPhysicsAngularVelocityInRadiansInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetPhysicsAngularVelocityInRadians_handler(handler: UPrimitiveComponent_GetPhysicsAngularVelocityInRadiansInvoker){
        unsafe{ UPrimitiveComponent_GetPhysicsAngularVelocityInRadiansInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetPhysicsLinearVelocityInvoker = unsafe extern "C" fn(*mut c_void, UName) -> Vector3;
    pub(super) static mut UPrimitiveComponent_GetPhysicsLinearVelocityInvokerHandler: Option<UPrimitiveComponent_GetPhysicsLinearVelocityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetPhysicsLinearVelocity_handler(handler: UPrimitiveComponent_GetPhysicsLinearVelocityInvoker){
        unsafe{ UPrimitiveComponent_GetPhysicsLinearVelocityInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetPhysicsLinearVelocityAtPointInvoker = unsafe extern "C" fn(*mut c_void, Vector3, UName) -> Vector3;
    pub(super) static mut UPrimitiveComponent_GetPhysicsLinearVelocityAtPointInvokerHandler: Option<UPrimitiveComponent_GetPhysicsLinearVelocityAtPointInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetPhysicsLinearVelocityAtPoint_handler(handler: UPrimitiveComponent_GetPhysicsLinearVelocityAtPointInvoker){
        unsafe{ UPrimitiveComponent_GetPhysicsLinearVelocityAtPointInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetRayTracingGroupIdInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UPrimitiveComponent_GetRayTracingGroupIdInvokerHandler: Option<UPrimitiveComponent_GetRayTracingGroupIdInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetRayTracingGroupId_handler(handler: UPrimitiveComponent_GetRayTracingGroupIdInvoker){
        unsafe{ UPrimitiveComponent_GetRayTracingGroupIdInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetShadowIndirectOnlyInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_GetShadowIndirectOnlyInvokerHandler: Option<UPrimitiveComponent_GetShadowIndirectOnlyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetShadowIndirectOnly_handler(handler: UPrimitiveComponent_GetShadowIndirectOnlyInvoker){
        unsafe{ UPrimitiveComponent_GetShadowIndirectOnlyInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetStaticLightMapResolutionInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UPrimitiveComponent_GetStaticLightMapResolutionInvokerHandler: Option<UPrimitiveComponent_GetStaticLightMapResolutionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetStaticLightMapResolution_handler(handler: UPrimitiveComponent_GetStaticLightMapResolutionInvoker){
        unsafe{ UPrimitiveComponent_GetStaticLightMapResolutionInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetStreamingScaleInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UPrimitiveComponent_GetStreamingScaleInvokerHandler: Option<UPrimitiveComponent_GetStreamingScaleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetStreamingScale_handler(handler: UPrimitiveComponent_GetStreamingScaleInvoker){
        unsafe{ UPrimitiveComponent_GetStreamingScaleInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_GetVirtualTextureMainPassMaxDrawDistanceInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UPrimitiveComponent_GetVirtualTextureMainPassMaxDrawDistanceInvokerHandler: Option<UPrimitiveComponent_GetVirtualTextureMainPassMaxDrawDistanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_GetVirtualTextureMainPassMaxDrawDistance_handler(handler: UPrimitiveComponent_GetVirtualTextureMainPassMaxDrawDistanceInvoker){
        unsafe{ UPrimitiveComponent_GetVirtualTextureMainPassMaxDrawDistanceInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_HasStaticLightingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_HasStaticLightingInvokerHandler: Option<UPrimitiveComponent_HasStaticLightingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_HasStaticLighting_handler(handler: UPrimitiveComponent_HasStaticLightingInvoker){
        unsafe{ UPrimitiveComponent_HasStaticLightingInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_HasValidPhysicsStateInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_HasValidPhysicsStateInvokerHandler: Option<UPrimitiveComponent_HasValidPhysicsStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_HasValidPhysicsState_handler(handler: UPrimitiveComponent_HasValidPhysicsStateInvoker){
        unsafe{ UPrimitiveComponent_HasValidPhysicsStateInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_HasValidSettingsForStaticLightingInvoker = unsafe extern "C" fn(*mut c_void, bool) -> bool;
    pub(super) static mut UPrimitiveComponent_HasValidSettingsForStaticLightingInvokerHandler: Option<UPrimitiveComponent_HasValidSettingsForStaticLightingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_HasValidSettingsForStaticLighting_handler(handler: UPrimitiveComponent_HasValidSettingsForStaticLightingInvoker){
        unsafe{ UPrimitiveComponent_HasValidSettingsForStaticLightingInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_IgnoreActorWhenMovingInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque, bool);
    pub(super) static mut UPrimitiveComponent_IgnoreActorWhenMovingInvokerHandler: Option<UPrimitiveComponent_IgnoreActorWhenMovingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_IgnoreActorWhenMoving_handler(handler: UPrimitiveComponent_IgnoreActorWhenMovingInvoker){
        unsafe{ UPrimitiveComponent_IgnoreActorWhenMovingInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_IgnoreBoundsForEditorFocusInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_IgnoreBoundsForEditorFocusInvokerHandler: Option<UPrimitiveComponent_IgnoreBoundsForEditorFocusInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_IgnoreBoundsForEditorFocus_handler(handler: UPrimitiveComponent_IgnoreBoundsForEditorFocusInvoker){
        unsafe{ UPrimitiveComponent_IgnoreBoundsForEditorFocusInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_IgnoreComponentWhenMovingInvoker = unsafe extern "C" fn(*mut c_void, *mut UPrimitiveComponentOpaque, bool);
    pub(super) static mut UPrimitiveComponent_IgnoreComponentWhenMovingInvokerHandler: Option<UPrimitiveComponent_IgnoreComponentWhenMovingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_IgnoreComponentWhenMoving_handler(handler: UPrimitiveComponent_IgnoreComponentWhenMovingInvoker){
        unsafe{ UPrimitiveComponent_IgnoreComponentWhenMovingInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_InvalidateLightingCacheDetailedInvoker = unsafe extern "C" fn(*mut c_void, bool, bool);
    pub(super) static mut UPrimitiveComponent_InvalidateLightingCacheDetailedInvokerHandler: Option<UPrimitiveComponent_InvalidateLightingCacheDetailedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_InvalidateLightingCacheDetailed_handler(handler: UPrimitiveComponent_InvalidateLightingCacheDetailedInvoker){
        unsafe{ UPrimitiveComponent_InvalidateLightingCacheDetailedInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_InvalidateLumenSurfaceCacheInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_InvalidateLumenSurfaceCacheInvokerHandler: Option<UPrimitiveComponent_InvalidateLumenSurfaceCacheInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_InvalidateLumenSurfaceCache_handler(handler: UPrimitiveComponent_InvalidateLumenSurfaceCacheInvoker){
        unsafe{ UPrimitiveComponent_InvalidateLumenSurfaceCacheInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_IsAnyRigidBodyAwakeInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_IsAnyRigidBodyAwakeInvokerHandler: Option<UPrimitiveComponent_IsAnyRigidBodyAwakeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_IsAnyRigidBodyAwake_handler(handler: UPrimitiveComponent_IsAnyRigidBodyAwakeInvoker){
        unsafe{ UPrimitiveComponent_IsAnyRigidBodyAwakeInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_IsAttachedToStreamingManagerInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_IsAttachedToStreamingManagerInvokerHandler: Option<UPrimitiveComponent_IsAttachedToStreamingManagerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_IsAttachedToStreamingManager_handler(handler: UPrimitiveComponent_IsAttachedToStreamingManagerInvoker){
        unsafe{ UPrimitiveComponent_IsAttachedToStreamingManagerInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_IsCompilingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_IsCompilingInvokerHandler: Option<UPrimitiveComponent_IsCompilingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_IsCompiling_handler(handler: UPrimitiveComponent_IsCompilingInvoker){
        unsafe{ UPrimitiveComponent_IsCompilingInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_IsComponentIndividuallySelectedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_IsComponentIndividuallySelectedInvokerHandler: Option<UPrimitiveComponent_IsComponentIndividuallySelectedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_IsComponentIndividuallySelected_handler(handler: UPrimitiveComponent_IsComponentIndividuallySelectedInvoker){
        unsafe{ UPrimitiveComponent_IsComponentIndividuallySelectedInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_IsEditorOnlyInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_IsEditorOnlyInvokerHandler: Option<UPrimitiveComponent_IsEditorOnlyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_IsEditorOnly_handler(handler: UPrimitiveComponent_IsEditorOnlyInvoker){
        unsafe{ UPrimitiveComponent_IsEditorOnlyInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_IsGravityEnabledInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_IsGravityEnabledInvokerHandler: Option<UPrimitiveComponent_IsGravityEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_IsGravityEnabled_handler(handler: UPrimitiveComponent_IsGravityEnabledInvoker){
        unsafe{ UPrimitiveComponent_IsGravityEnabledInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_IsNavigationRelevantInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_IsNavigationRelevantInvokerHandler: Option<UPrimitiveComponent_IsNavigationRelevantInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_IsNavigationRelevant_handler(handler: UPrimitiveComponent_IsNavigationRelevantInvoker){
        unsafe{ UPrimitiveComponent_IsNavigationRelevantInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_IsOverlappingActorInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque) -> bool;
    pub(super) static mut UPrimitiveComponent_IsOverlappingActorInvokerHandler: Option<UPrimitiveComponent_IsOverlappingActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_IsOverlappingActor_handler(handler: UPrimitiveComponent_IsOverlappingActorInvoker){
        unsafe{ UPrimitiveComponent_IsOverlappingActorInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_IsOverlappingComponentInvoker = unsafe extern "C" fn(*mut c_void, *mut UPrimitiveComponentOpaque) -> bool;
    pub(super) static mut UPrimitiveComponent_IsOverlappingComponentInvokerHandler: Option<UPrimitiveComponent_IsOverlappingComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_IsOverlappingComponent_handler(handler: UPrimitiveComponent_IsOverlappingComponentInvoker){
        unsafe{ UPrimitiveComponent_IsOverlappingComponentInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_IsReadyForFinishDestroyInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_IsReadyForFinishDestroyInvokerHandler: Option<UPrimitiveComponent_IsReadyForFinishDestroyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_IsReadyForFinishDestroy_handler(handler: UPrimitiveComponent_IsReadyForFinishDestroyInvoker){
        unsafe{ UPrimitiveComponent_IsReadyForFinishDestroyInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_IsSimulatingPhysicsInvoker = unsafe extern "C" fn(*mut c_void, UName) -> bool;
    pub(super) static mut UPrimitiveComponent_IsSimulatingPhysicsInvokerHandler: Option<UPrimitiveComponent_IsSimulatingPhysicsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_IsSimulatingPhysics_handler(handler: UPrimitiveComponent_IsSimulatingPhysicsInvoker){
        unsafe{ UPrimitiveComponent_IsSimulatingPhysicsInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_IsWeldedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_IsWeldedInvokerHandler: Option<UPrimitiveComponent_IsWeldedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_IsWelded_handler(handler: UPrimitiveComponent_IsWeldedInvoker){
        unsafe{ UPrimitiveComponent_IsWeldedInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_IsWorldGeometryInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_IsWorldGeometryInvokerHandler: Option<UPrimitiveComponent_IsWorldGeometryInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_IsWorldGeometry_handler(handler: UPrimitiveComponent_IsWorldGeometryInvoker){
        unsafe{ UPrimitiveComponent_IsWorldGeometryInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_IsZeroExtentInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_IsZeroExtentInvokerHandler: Option<UPrimitiveComponent_IsZeroExtentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_IsZeroExtent_handler(handler: UPrimitiveComponent_IsZeroExtentInvoker){
        unsafe{ UPrimitiveComponent_IsZeroExtentInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_K2_IsCollisionEnabledInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_K2_IsCollisionEnabledInvokerHandler: Option<UPrimitiveComponent_K2_IsCollisionEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_K2_IsCollisionEnabled_handler(handler: UPrimitiveComponent_K2_IsCollisionEnabledInvoker){
        unsafe{ UPrimitiveComponent_K2_IsCollisionEnabledInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_K2_IsPhysicsCollisionEnabledInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_K2_IsPhysicsCollisionEnabledInvokerHandler: Option<UPrimitiveComponent_K2_IsPhysicsCollisionEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_K2_IsPhysicsCollisionEnabled_handler(handler: UPrimitiveComponent_K2_IsPhysicsCollisionEnabledInvoker){
        unsafe{ UPrimitiveComponent_K2_IsPhysicsCollisionEnabledInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_K2_IsQueryCollisionEnabledInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_K2_IsQueryCollisionEnabledInvokerHandler: Option<UPrimitiveComponent_K2_IsQueryCollisionEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_K2_IsQueryCollisionEnabled_handler(handler: UPrimitiveComponent_K2_IsQueryCollisionEnabledInvoker){
        unsafe{ UPrimitiveComponent_K2_IsQueryCollisionEnabledInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_NeedsLoadForClientInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_NeedsLoadForClientInvokerHandler: Option<UPrimitiveComponent_NeedsLoadForClientInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_NeedsLoadForClient_handler(handler: UPrimitiveComponent_NeedsLoadForClientInvoker){
        unsafe{ UPrimitiveComponent_NeedsLoadForClientInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_NeedsLoadForServerInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_NeedsLoadForServerInvokerHandler: Option<UPrimitiveComponent_NeedsLoadForServerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_NeedsLoadForServer_handler(handler: UPrimitiveComponent_NeedsLoadForServerInvoker){
        unsafe{ UPrimitiveComponent_NeedsLoadForServerInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_OnActorEnableCollisionChangedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_OnActorEnableCollisionChangedInvokerHandler: Option<UPrimitiveComponent_OnActorEnableCollisionChangedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_OnActorEnableCollisionChanged_handler(handler: UPrimitiveComponent_OnActorEnableCollisionChangedInvoker){
        unsafe{ UPrimitiveComponent_OnActorEnableCollisionChangedInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_OnAttachmentChangedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_OnAttachmentChangedInvokerHandler: Option<UPrimitiveComponent_OnAttachmentChangedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_OnAttachmentChanged_handler(handler: UPrimitiveComponent_OnAttachmentChangedInvoker){
        unsafe{ UPrimitiveComponent_OnAttachmentChangedInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_OnComponentDestroyedInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_OnComponentDestroyedInvokerHandler: Option<UPrimitiveComponent_OnComponentDestroyedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_OnComponentDestroyed_handler(handler: UPrimitiveComponent_OnComponentDestroyedInvoker){
        unsafe{ UPrimitiveComponent_OnComponentDestroyedInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_OnCreatePhysicsStateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_OnCreatePhysicsStateInvokerHandler: Option<UPrimitiveComponent_OnCreatePhysicsStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_OnCreatePhysicsState_handler(handler: UPrimitiveComponent_OnCreatePhysicsStateInvoker){
        unsafe{ UPrimitiveComponent_OnCreatePhysicsStateInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_OnDestroyPhysicsStateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_OnDestroyPhysicsStateInvokerHandler: Option<UPrimitiveComponent_OnDestroyPhysicsStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_OnDestroyPhysicsState_handler(handler: UPrimitiveComponent_OnDestroyPhysicsStateInvoker){
        unsafe{ UPrimitiveComponent_OnDestroyPhysicsStateInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_OnRegisterInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_OnRegisterInvokerHandler: Option<UPrimitiveComponent_OnRegisterInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_OnRegister_handler(handler: UPrimitiveComponent_OnRegisterInvoker){
        unsafe{ UPrimitiveComponent_OnRegisterInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_OnUnregisterInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_OnUnregisterInvokerHandler: Option<UPrimitiveComponent_OnUnregisterInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_OnUnregister_handler(handler: UPrimitiveComponent_OnUnregisterInvoker){
        unsafe{ UPrimitiveComponent_OnUnregisterInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_PostDuplicateInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_PostDuplicateInvokerHandler: Option<UPrimitiveComponent_PostDuplicateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_PostDuplicate_handler(handler: UPrimitiveComponent_PostDuplicateInvoker){
        unsafe{ UPrimitiveComponent_PostDuplicateInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_PostEditImportInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_PostEditImportInvokerHandler: Option<UPrimitiveComponent_PostEditImportInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_PostEditImport_handler(handler: UPrimitiveComponent_PostEditImportInvoker){
        unsafe{ UPrimitiveComponent_PostEditImportInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_PostInitPropertiesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_PostInitPropertiesInvokerHandler: Option<UPrimitiveComponent_PostInitPropertiesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_PostInitProperties_handler(handler: UPrimitiveComponent_PostInitPropertiesInvoker){
        unsafe{ UPrimitiveComponent_PostInitPropertiesInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_PostLoadInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_PostLoadInvokerHandler: Option<UPrimitiveComponent_PostLoadInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_PostLoad_handler(handler: UPrimitiveComponent_PostLoadInvoker){
        unsafe{ UPrimitiveComponent_PostLoadInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_PushEditorVisibilityToProxyInvoker = unsafe extern "C" fn(*mut c_void, u64);
    pub(super) static mut UPrimitiveComponent_PushEditorVisibilityToProxyInvokerHandler: Option<UPrimitiveComponent_PushEditorVisibilityToProxyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_PushEditorVisibilityToProxy_handler(handler: UPrimitiveComponent_PushEditorVisibilityToProxyInvoker){
        unsafe{ UPrimitiveComponent_PushEditorVisibilityToProxyInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_PushHoveredToProxyInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_PushHoveredToProxyInvokerHandler: Option<UPrimitiveComponent_PushHoveredToProxyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_PushHoveredToProxy_handler(handler: UPrimitiveComponent_PushHoveredToProxyInvoker){
        unsafe{ UPrimitiveComponent_PushHoveredToProxyInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_PushLevelInstanceEditingStateToProxyInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_PushLevelInstanceEditingStateToProxyInvokerHandler: Option<UPrimitiveComponent_PushLevelInstanceEditingStateToProxyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_PushLevelInstanceEditingStateToProxy_handler(handler: UPrimitiveComponent_PushLevelInstanceEditingStateToProxyInvoker){
        unsafe{ UPrimitiveComponent_PushLevelInstanceEditingStateToProxyInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_PushSelectionToProxyInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_PushSelectionToProxyInvokerHandler: Option<UPrimitiveComponent_PushSelectionToProxyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_PushSelectionToProxy_handler(handler: UPrimitiveComponent_PushSelectionToProxyInvoker){
        unsafe{ UPrimitiveComponent_PushSelectionToProxyInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_PutAllRigidBodiesToSleepInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_PutAllRigidBodiesToSleepInvokerHandler: Option<UPrimitiveComponent_PutAllRigidBodiesToSleepInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_PutAllRigidBodiesToSleep_handler(handler: UPrimitiveComponent_PutAllRigidBodiesToSleepInvoker){
        unsafe{ UPrimitiveComponent_PutAllRigidBodiesToSleepInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_PutRigidBodyToSleepInvoker = unsafe extern "C" fn(*mut c_void, UName);
    pub(super) static mut UPrimitiveComponent_PutRigidBodyToSleepInvokerHandler: Option<UPrimitiveComponent_PutRigidBodyToSleepInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_PutRigidBodyToSleep_handler(handler: UPrimitiveComponent_PutRigidBodyToSleepInvoker){
        unsafe{ UPrimitiveComponent_PutRigidBodyToSleepInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_RemapActorTextureStreamingBuiltDataToLevelInvoker = unsafe extern "C" fn(*mut c_void, *mut UActorTextureStreamingBuildDataComponentOpaque) -> bool;
    pub(super) static mut UPrimitiveComponent_RemapActorTextureStreamingBuiltDataToLevelInvokerHandler: Option<UPrimitiveComponent_RemapActorTextureStreamingBuiltDataToLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_RemapActorTextureStreamingBuiltDataToLevel_handler(handler: UPrimitiveComponent_RemapActorTextureStreamingBuiltDataToLevelInvoker){
        unsafe{ UPrimitiveComponent_RemapActorTextureStreamingBuiltDataToLevelInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_RigidBodyIsAwakeInvoker = unsafe extern "C" fn(*mut c_void, UName) -> bool;
    pub(super) static mut UPrimitiveComponent_RigidBodyIsAwakeInvokerHandler: Option<UPrimitiveComponent_RigidBodyIsAwakeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_RigidBodyIsAwake_handler(handler: UPrimitiveComponent_RigidBodyIsAwakeInvoker){
        unsafe{ UPrimitiveComponent_RigidBodyIsAwakeInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_ScaleByMomentOfInertiaInvoker = unsafe extern "C" fn(*mut c_void, Vector3, UName) -> Vector3;
    pub(super) static mut UPrimitiveComponent_ScaleByMomentOfInertiaInvokerHandler: Option<UPrimitiveComponent_ScaleByMomentOfInertiaInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_ScaleByMomentOfInertia_handler(handler: UPrimitiveComponent_ScaleByMomentOfInertiaInvoker){
        unsafe{ UPrimitiveComponent_ScaleByMomentOfInertiaInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SendRenderDebugPhysicsInvoker = unsafe extern "C" fn(*mut c_void, *mut FPrimitiveSceneProxyOpaque);
    pub(super) static mut UPrimitiveComponent_SendRenderDebugPhysicsInvokerHandler: Option<UPrimitiveComponent_SendRenderDebugPhysicsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SendRenderDebugPhysics_handler(handler: UPrimitiveComponent_SendRenderDebugPhysicsInvoker){
        unsafe{ UPrimitiveComponent_SendRenderDebugPhysicsInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SendRenderTransform_ConcurrentInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_SendRenderTransform_ConcurrentInvokerHandler: Option<UPrimitiveComponent_SendRenderTransform_ConcurrentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SendRenderTransform_Concurrent_handler(handler: UPrimitiveComponent_SendRenderTransform_ConcurrentInvoker){
        unsafe{ UPrimitiveComponent_SendRenderTransform_ConcurrentInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetAllMassScaleInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UPrimitiveComponent_SetAllMassScaleInvokerHandler: Option<UPrimitiveComponent_SetAllMassScaleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetAllMassScale_handler(handler: UPrimitiveComponent_SetAllMassScaleInvoker){
        unsafe{ UPrimitiveComponent_SetAllMassScaleInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetAllPhysicsLinearVelocityInvoker = unsafe extern "C" fn(*mut c_void, Vector3, bool);
    pub(super) static mut UPrimitiveComponent_SetAllPhysicsLinearVelocityInvokerHandler: Option<UPrimitiveComponent_SetAllPhysicsLinearVelocityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetAllPhysicsLinearVelocity_handler(handler: UPrimitiveComponent_SetAllPhysicsLinearVelocityInvoker){
        unsafe{ UPrimitiveComponent_SetAllPhysicsLinearVelocityInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetAllPhysicsPositionInvoker = unsafe extern "C" fn(*mut c_void, Vector3);
    pub(super) static mut UPrimitiveComponent_SetAllPhysicsPositionInvokerHandler: Option<UPrimitiveComponent_SetAllPhysicsPositionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetAllPhysicsPosition_handler(handler: UPrimitiveComponent_SetAllPhysicsPositionInvoker){
        unsafe{ UPrimitiveComponent_SetAllPhysicsPositionInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetAllPhysicsRotationInvoker = unsafe extern "C" fn(*mut c_void, Rotator);
    pub(super) static mut UPrimitiveComponent_SetAllPhysicsRotationInvokerHandler: Option<UPrimitiveComponent_SetAllPhysicsRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetAllPhysicsRotation_handler(handler: UPrimitiveComponent_SetAllPhysicsRotationInvoker){
        unsafe{ UPrimitiveComponent_SetAllPhysicsRotationInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetAllUseCCDInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_SetAllUseCCDInvokerHandler: Option<UPrimitiveComponent_SetAllUseCCDInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetAllUseCCD_handler(handler: UPrimitiveComponent_SetAllUseCCDInvoker){
        unsafe{ UPrimitiveComponent_SetAllUseCCDInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetAngularDampingInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UPrimitiveComponent_SetAngularDampingInvokerHandler: Option<UPrimitiveComponent_SetAngularDampingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetAngularDamping_handler(handler: UPrimitiveComponent_SetAngularDampingInvoker){
        unsafe{ UPrimitiveComponent_SetAngularDampingInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetBoundsScaleInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UPrimitiveComponent_SetBoundsScaleInvokerHandler: Option<UPrimitiveComponent_SetBoundsScaleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetBoundsScale_handler(handler: UPrimitiveComponent_SetBoundsScaleInvoker){
        unsafe{ UPrimitiveComponent_SetBoundsScaleInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetCachedMaxDrawDistanceInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UPrimitiveComponent_SetCachedMaxDrawDistanceInvokerHandler: Option<UPrimitiveComponent_SetCachedMaxDrawDistanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetCachedMaxDrawDistance_handler(handler: UPrimitiveComponent_SetCachedMaxDrawDistanceInvoker){
        unsafe{ UPrimitiveComponent_SetCachedMaxDrawDistanceInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetCastHiddenShadowInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_SetCastHiddenShadowInvokerHandler: Option<UPrimitiveComponent_SetCastHiddenShadowInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetCastHiddenShadow_handler(handler: UPrimitiveComponent_SetCastHiddenShadowInvoker){
        unsafe{ UPrimitiveComponent_SetCastHiddenShadowInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetCastShadowInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_SetCastShadowInvokerHandler: Option<UPrimitiveComponent_SetCastShadowInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetCastShadow_handler(handler: UPrimitiveComponent_SetCastShadowInvoker){
        unsafe{ UPrimitiveComponent_SetCastShadowInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetCenterOfMassInvoker = unsafe extern "C" fn(*mut c_void, Vector3, UName);
    pub(super) static mut UPrimitiveComponent_SetCenterOfMassInvokerHandler: Option<UPrimitiveComponent_SetCenterOfMassInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetCenterOfMass_handler(handler: UPrimitiveComponent_SetCenterOfMassInvoker){
        unsafe{ UPrimitiveComponent_SetCenterOfMassInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetCollisionObjectTypeInvoker = unsafe extern "C" fn(*mut c_void, ECollisionChannel);
    pub(super) static mut UPrimitiveComponent_SetCollisionObjectTypeInvokerHandler: Option<UPrimitiveComponent_SetCollisionObjectTypeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetCollisionObjectType_handler(handler: UPrimitiveComponent_SetCollisionObjectTypeInvoker){
        unsafe{ UPrimitiveComponent_SetCollisionObjectTypeInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetCollisionProfileNameInvoker = unsafe extern "C" fn(*mut c_void, UName, bool);
    pub(super) static mut UPrimitiveComponent_SetCollisionProfileNameInvokerHandler: Option<UPrimitiveComponent_SetCollisionProfileNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetCollisionProfileName_handler(handler: UPrimitiveComponent_SetCollisionProfileNameInvoker){
        unsafe{ UPrimitiveComponent_SetCollisionProfileNameInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetCullDistanceInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UPrimitiveComponent_SetCullDistanceInvokerHandler: Option<UPrimitiveComponent_SetCullDistanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetCullDistance_handler(handler: UPrimitiveComponent_SetCullDistanceInvoker){
        unsafe{ UPrimitiveComponent_SetCullDistanceInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetCustomDepthStencilValueInvoker = unsafe extern "C" fn(*mut c_void, i32);
    pub(super) static mut UPrimitiveComponent_SetCustomDepthStencilValueInvokerHandler: Option<UPrimitiveComponent_SetCustomDepthStencilValueInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetCustomDepthStencilValue_handler(handler: UPrimitiveComponent_SetCustomDepthStencilValueInvoker){
        unsafe{ UPrimitiveComponent_SetCustomDepthStencilValueInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetCustomPrimitiveDataFloatInvoker = unsafe extern "C" fn(*mut c_void, i32, f32);
    pub(super) static mut UPrimitiveComponent_SetCustomPrimitiveDataFloatInvokerHandler: Option<UPrimitiveComponent_SetCustomPrimitiveDataFloatInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetCustomPrimitiveDataFloat_handler(handler: UPrimitiveComponent_SetCustomPrimitiveDataFloatInvoker){
        unsafe{ UPrimitiveComponent_SetCustomPrimitiveDataFloatInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetCustomPrimitiveDataVector2Invoker = unsafe extern "C" fn(*mut c_void, i32, Vector2);
    pub(super) static mut UPrimitiveComponent_SetCustomPrimitiveDataVector2InvokerHandler: Option<UPrimitiveComponent_SetCustomPrimitiveDataVector2Invoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetCustomPrimitiveDataVector2_handler(handler: UPrimitiveComponent_SetCustomPrimitiveDataVector2Invoker){
        unsafe{ UPrimitiveComponent_SetCustomPrimitiveDataVector2InvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetCustomPrimitiveDataVector3Invoker = unsafe extern "C" fn(*mut c_void, i32, Vector3);
    pub(super) static mut UPrimitiveComponent_SetCustomPrimitiveDataVector3InvokerHandler: Option<UPrimitiveComponent_SetCustomPrimitiveDataVector3Invoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetCustomPrimitiveDataVector3_handler(handler: UPrimitiveComponent_SetCustomPrimitiveDataVector3Invoker){
        unsafe{ UPrimitiveComponent_SetCustomPrimitiveDataVector3InvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetCustomPrimitiveDataVector4Invoker = unsafe extern "C" fn(*mut c_void, i32, Vector4);
    pub(super) static mut UPrimitiveComponent_SetCustomPrimitiveDataVector4InvokerHandler: Option<UPrimitiveComponent_SetCustomPrimitiveDataVector4Invoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetCustomPrimitiveDataVector4_handler(handler: UPrimitiveComponent_SetCustomPrimitiveDataVector4Invoker){
        unsafe{ UPrimitiveComponent_SetCustomPrimitiveDataVector4InvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetDefaultCustomPrimitiveDataFloatInvoker = unsafe extern "C" fn(*mut c_void, i32, f32);
    pub(super) static mut UPrimitiveComponent_SetDefaultCustomPrimitiveDataFloatInvokerHandler: Option<UPrimitiveComponent_SetDefaultCustomPrimitiveDataFloatInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetDefaultCustomPrimitiveDataFloat_handler(handler: UPrimitiveComponent_SetDefaultCustomPrimitiveDataFloatInvoker){
        unsafe{ UPrimitiveComponent_SetDefaultCustomPrimitiveDataFloatInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector2Invoker = unsafe extern "C" fn(*mut c_void, i32, Vector2);
    pub(super) static mut UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector2InvokerHandler: Option<UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector2Invoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector2_handler(handler: UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector2Invoker){
        unsafe{ UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector2InvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector3Invoker = unsafe extern "C" fn(*mut c_void, i32, Vector3);
    pub(super) static mut UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector3InvokerHandler: Option<UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector3Invoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector3_handler(handler: UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector3Invoker){
        unsafe{ UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector3InvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector4Invoker = unsafe extern "C" fn(*mut c_void, i32, Vector4);
    pub(super) static mut UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector4InvokerHandler: Option<UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector4Invoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector4_handler(handler: UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector4Invoker){
        unsafe{ UPrimitiveComponent_SetDefaultCustomPrimitiveDataVector4InvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetEmissiveLightSourceInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_SetEmissiveLightSourceInvokerHandler: Option<UPrimitiveComponent_SetEmissiveLightSourceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetEmissiveLightSource_handler(handler: UPrimitiveComponent_SetEmissiveLightSourceInvoker){
        unsafe{ UPrimitiveComponent_SetEmissiveLightSourceInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetEnableGravityInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_SetEnableGravityInvokerHandler: Option<UPrimitiveComponent_SetEnableGravityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetEnableGravity_handler(handler: UPrimitiveComponent_SetEnableGravityInvoker){
        unsafe{ UPrimitiveComponent_SetEnableGravityInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetGenerateOverlapEventsInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_SetGenerateOverlapEventsInvokerHandler: Option<UPrimitiveComponent_SetGenerateOverlapEventsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetGenerateOverlapEvents_handler(handler: UPrimitiveComponent_SetGenerateOverlapEventsInvoker){
        unsafe{ UPrimitiveComponent_SetGenerateOverlapEventsInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetHiddenInSceneCaptureInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_SetHiddenInSceneCaptureInvokerHandler: Option<UPrimitiveComponent_SetHiddenInSceneCaptureInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetHiddenInSceneCapture_handler(handler: UPrimitiveComponent_SetHiddenInSceneCaptureInvoker){
        unsafe{ UPrimitiveComponent_SetHiddenInSceneCaptureInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetIgnoreBoundsForEditorFocusInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_SetIgnoreBoundsForEditorFocusInvokerHandler: Option<UPrimitiveComponent_SetIgnoreBoundsForEditorFocusInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetIgnoreBoundsForEditorFocus_handler(handler: UPrimitiveComponent_SetIgnoreBoundsForEditorFocusInvoker){
        unsafe{ UPrimitiveComponent_SetIgnoreBoundsForEditorFocusInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetIsBeingMovedByEditorInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_SetIsBeingMovedByEditorInvokerHandler: Option<UPrimitiveComponent_SetIsBeingMovedByEditorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetIsBeingMovedByEditor_handler(handler: UPrimitiveComponent_SetIsBeingMovedByEditorInvoker){
        unsafe{ UPrimitiveComponent_SetIsBeingMovedByEditorInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetLODParentPrimitiveInvoker = unsafe extern "C" fn(*mut c_void, *mut UPrimitiveComponentOpaque);
    pub(super) static mut UPrimitiveComponent_SetLODParentPrimitiveInvokerHandler: Option<UPrimitiveComponent_SetLODParentPrimitiveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetLODParentPrimitive_handler(handler: UPrimitiveComponent_SetLODParentPrimitiveInvoker){
        unsafe{ UPrimitiveComponent_SetLODParentPrimitiveInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetLastRenderTimeInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UPrimitiveComponent_SetLastRenderTimeInvokerHandler: Option<UPrimitiveComponent_SetLastRenderTimeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetLastRenderTime_handler(handler: UPrimitiveComponent_SetLastRenderTimeInvoker){
        unsafe{ UPrimitiveComponent_SetLastRenderTimeInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetLightingChannelsInvoker = unsafe extern "C" fn(*mut c_void, bool, bool, bool);
    pub(super) static mut UPrimitiveComponent_SetLightingChannelsInvokerHandler: Option<UPrimitiveComponent_SetLightingChannelsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetLightingChannels_handler(handler: UPrimitiveComponent_SetLightingChannelsInvoker){
        unsafe{ UPrimitiveComponent_SetLightingChannelsInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetLinearDampingInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UPrimitiveComponent_SetLinearDampingInvokerHandler: Option<UPrimitiveComponent_SetLinearDampingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetLinearDamping_handler(handler: UPrimitiveComponent_SetLinearDampingInvoker){
        unsafe{ UPrimitiveComponent_SetLinearDampingInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetMassOverrideInKgInvoker = unsafe extern "C" fn(*mut c_void, UName, f32, bool);
    pub(super) static mut UPrimitiveComponent_SetMassOverrideInKgInvokerHandler: Option<UPrimitiveComponent_SetMassOverrideInKgInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetMassOverrideInKg_handler(handler: UPrimitiveComponent_SetMassOverrideInKgInvoker){
        unsafe{ UPrimitiveComponent_SetMassOverrideInKgInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetMassScaleInvoker = unsafe extern "C" fn(*mut c_void, UName, f32);
    pub(super) static mut UPrimitiveComponent_SetMassScaleInvokerHandler: Option<UPrimitiveComponent_SetMassScaleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetMassScale_handler(handler: UPrimitiveComponent_SetMassScaleInvoker){
        unsafe{ UPrimitiveComponent_SetMassScaleInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetMaterialInvoker = unsafe extern "C" fn(*mut c_void, i32, *mut UMaterialInterfaceOpaque);
    pub(super) static mut UPrimitiveComponent_SetMaterialInvokerHandler: Option<UPrimitiveComponent_SetMaterialInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetMaterial_handler(handler: UPrimitiveComponent_SetMaterialInvoker){
        unsafe{ UPrimitiveComponent_SetMaterialInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetMaterialByNameInvoker = unsafe extern "C" fn(*mut c_void, UName, *mut UMaterialInterfaceOpaque);
    pub(super) static mut UPrimitiveComponent_SetMaterialByNameInvokerHandler: Option<UPrimitiveComponent_SetMaterialByNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetMaterialByName_handler(handler: UPrimitiveComponent_SetMaterialByNameInvoker){
        unsafe{ UPrimitiveComponent_SetMaterialByNameInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetNotifyRigidBodyCollisionInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_SetNotifyRigidBodyCollisionInvokerHandler: Option<UPrimitiveComponent_SetNotifyRigidBodyCollisionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetNotifyRigidBodyCollision_handler(handler: UPrimitiveComponent_SetNotifyRigidBodyCollisionInvoker){
        unsafe{ UPrimitiveComponent_SetNotifyRigidBodyCollisionInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetOnlyOwnerSeeInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_SetOnlyOwnerSeeInvokerHandler: Option<UPrimitiveComponent_SetOnlyOwnerSeeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetOnlyOwnerSee_handler(handler: UPrimitiveComponent_SetOnlyOwnerSeeInvoker){
        unsafe{ UPrimitiveComponent_SetOnlyOwnerSeeInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetOwnerNoSeeInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_SetOwnerNoSeeInvokerHandler: Option<UPrimitiveComponent_SetOwnerNoSeeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetOwnerNoSee_handler(handler: UPrimitiveComponent_SetOwnerNoSeeInvoker){
        unsafe{ UPrimitiveComponent_SetOwnerNoSeeInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetPhysMaterialOverrideInvoker = unsafe extern "C" fn(*mut c_void, *mut UPhysicalMaterialOpaque);
    pub(super) static mut UPrimitiveComponent_SetPhysMaterialOverrideInvokerHandler: Option<UPrimitiveComponent_SetPhysMaterialOverrideInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetPhysMaterialOverride_handler(handler: UPrimitiveComponent_SetPhysMaterialOverrideInvoker){
        unsafe{ UPrimitiveComponent_SetPhysMaterialOverrideInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetPhysicsAngularVelocityInDegreesInvoker = unsafe extern "C" fn(*mut c_void, Vector3, bool, UName);
    pub(super) static mut UPrimitiveComponent_SetPhysicsAngularVelocityInDegreesInvokerHandler: Option<UPrimitiveComponent_SetPhysicsAngularVelocityInDegreesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetPhysicsAngularVelocityInDegrees_handler(handler: UPrimitiveComponent_SetPhysicsAngularVelocityInDegreesInvoker){
        unsafe{ UPrimitiveComponent_SetPhysicsAngularVelocityInDegreesInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetPhysicsAngularVelocityInRadiansInvoker = unsafe extern "C" fn(*mut c_void, Vector3, bool, UName);
    pub(super) static mut UPrimitiveComponent_SetPhysicsAngularVelocityInRadiansInvokerHandler: Option<UPrimitiveComponent_SetPhysicsAngularVelocityInRadiansInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetPhysicsAngularVelocityInRadians_handler(handler: UPrimitiveComponent_SetPhysicsAngularVelocityInRadiansInvoker){
        unsafe{ UPrimitiveComponent_SetPhysicsAngularVelocityInRadiansInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetPhysicsLinearVelocityInvoker = unsafe extern "C" fn(*mut c_void, Vector3, bool, UName);
    pub(super) static mut UPrimitiveComponent_SetPhysicsLinearVelocityInvokerHandler: Option<UPrimitiveComponent_SetPhysicsLinearVelocityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetPhysicsLinearVelocity_handler(handler: UPrimitiveComponent_SetPhysicsLinearVelocityInvoker){
        unsafe{ UPrimitiveComponent_SetPhysicsLinearVelocityInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetPhysicsMaxAngularVelocityInDegreesInvoker = unsafe extern "C" fn(*mut c_void, f32, bool, UName);
    pub(super) static mut UPrimitiveComponent_SetPhysicsMaxAngularVelocityInDegreesInvokerHandler: Option<UPrimitiveComponent_SetPhysicsMaxAngularVelocityInDegreesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetPhysicsMaxAngularVelocityInDegrees_handler(handler: UPrimitiveComponent_SetPhysicsMaxAngularVelocityInDegreesInvoker){
        unsafe{ UPrimitiveComponent_SetPhysicsMaxAngularVelocityInDegreesInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetPhysicsMaxAngularVelocityInRadiansInvoker = unsafe extern "C" fn(*mut c_void, f32, bool, UName);
    pub(super) static mut UPrimitiveComponent_SetPhysicsMaxAngularVelocityInRadiansInvokerHandler: Option<UPrimitiveComponent_SetPhysicsMaxAngularVelocityInRadiansInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetPhysicsMaxAngularVelocityInRadians_handler(handler: UPrimitiveComponent_SetPhysicsMaxAngularVelocityInRadiansInvoker){
        unsafe{ UPrimitiveComponent_SetPhysicsMaxAngularVelocityInRadiansInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetReceivesDecalsInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_SetReceivesDecalsInvokerHandler: Option<UPrimitiveComponent_SetReceivesDecalsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetReceivesDecals_handler(handler: UPrimitiveComponent_SetReceivesDecalsInvoker){
        unsafe{ UPrimitiveComponent_SetReceivesDecalsInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetRenderCustomDepthInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_SetRenderCustomDepthInvokerHandler: Option<UPrimitiveComponent_SetRenderCustomDepthInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetRenderCustomDepth_handler(handler: UPrimitiveComponent_SetRenderCustomDepthInvoker){
        unsafe{ UPrimitiveComponent_SetRenderCustomDepthInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetRenderInDepthPassInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_SetRenderInDepthPassInvokerHandler: Option<UPrimitiveComponent_SetRenderInDepthPassInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetRenderInDepthPass_handler(handler: UPrimitiveComponent_SetRenderInDepthPassInvoker){
        unsafe{ UPrimitiveComponent_SetRenderInDepthPassInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetRenderInMainPassInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_SetRenderInMainPassInvokerHandler: Option<UPrimitiveComponent_SetRenderInMainPassInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetRenderInMainPass_handler(handler: UPrimitiveComponent_SetRenderInMainPassInvoker){
        unsafe{ UPrimitiveComponent_SetRenderInMainPassInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetScalarParameterForCustomPrimitiveDataInvoker = unsafe extern "C" fn(*mut c_void, UName, f32);
    pub(super) static mut UPrimitiveComponent_SetScalarParameterForCustomPrimitiveDataInvokerHandler: Option<UPrimitiveComponent_SetScalarParameterForCustomPrimitiveDataInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetScalarParameterForCustomPrimitiveData_handler(handler: UPrimitiveComponent_SetScalarParameterForCustomPrimitiveDataInvoker){
        unsafe{ UPrimitiveComponent_SetScalarParameterForCustomPrimitiveDataInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetScalarParameterForDefaultCustomPrimitiveDataInvoker = unsafe extern "C" fn(*mut c_void, UName, f32);
    pub(super) static mut UPrimitiveComponent_SetScalarParameterForDefaultCustomPrimitiveDataInvokerHandler: Option<UPrimitiveComponent_SetScalarParameterForDefaultCustomPrimitiveDataInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetScalarParameterForDefaultCustomPrimitiveData_handler(handler: UPrimitiveComponent_SetScalarParameterForDefaultCustomPrimitiveDataInvoker){
        unsafe{ UPrimitiveComponent_SetScalarParameterForDefaultCustomPrimitiveDataInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetSimulatePhysicsInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_SetSimulatePhysicsInvokerHandler: Option<UPrimitiveComponent_SetSimulatePhysicsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetSimulatePhysics_handler(handler: UPrimitiveComponent_SetSimulatePhysicsInvoker){
        unsafe{ UPrimitiveComponent_SetSimulatePhysicsInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetSingleSampleShadowFromStationaryLightsInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_SetSingleSampleShadowFromStationaryLightsInvokerHandler: Option<UPrimitiveComponent_SetSingleSampleShadowFromStationaryLightsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetSingleSampleShadowFromStationaryLights_handler(handler: UPrimitiveComponent_SetSingleSampleShadowFromStationaryLightsInvoker){
        unsafe{ UPrimitiveComponent_SetSingleSampleShadowFromStationaryLightsInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetTranslucencySortDistanceOffsetInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UPrimitiveComponent_SetTranslucencySortDistanceOffsetInvokerHandler: Option<UPrimitiveComponent_SetTranslucencySortDistanceOffsetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetTranslucencySortDistanceOffset_handler(handler: UPrimitiveComponent_SetTranslucencySortDistanceOffsetInvoker){
        unsafe{ UPrimitiveComponent_SetTranslucencySortDistanceOffsetInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetTranslucentSortPriorityInvoker = unsafe extern "C" fn(*mut c_void, i32);
    pub(super) static mut UPrimitiveComponent_SetTranslucentSortPriorityInvokerHandler: Option<UPrimitiveComponent_SetTranslucentSortPriorityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetTranslucentSortPriority_handler(handler: UPrimitiveComponent_SetTranslucentSortPriorityInvoker){
        unsafe{ UPrimitiveComponent_SetTranslucentSortPriorityInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetUseCCDInvoker = unsafe extern "C" fn(*mut c_void, bool, UName);
    pub(super) static mut UPrimitiveComponent_SetUseCCDInvokerHandler: Option<UPrimitiveComponent_SetUseCCDInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetUseCCD_handler(handler: UPrimitiveComponent_SetUseCCDInvoker){
        unsafe{ UPrimitiveComponent_SetUseCCDInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetVectorParameterForCustomPrimitiveDataInvoker = unsafe extern "C" fn(*mut c_void, UName, Vector4);
    pub(super) static mut UPrimitiveComponent_SetVectorParameterForCustomPrimitiveDataInvokerHandler: Option<UPrimitiveComponent_SetVectorParameterForCustomPrimitiveDataInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetVectorParameterForCustomPrimitiveData_handler(handler: UPrimitiveComponent_SetVectorParameterForCustomPrimitiveDataInvoker){
        unsafe{ UPrimitiveComponent_SetVectorParameterForCustomPrimitiveDataInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetVectorParameterForDefaultCustomPrimitiveDataInvoker = unsafe extern "C" fn(*mut c_void, UName, Vector4);
    pub(super) static mut UPrimitiveComponent_SetVectorParameterForDefaultCustomPrimitiveDataInvokerHandler: Option<UPrimitiveComponent_SetVectorParameterForDefaultCustomPrimitiveDataInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetVectorParameterForDefaultCustomPrimitiveData_handler(handler: UPrimitiveComponent_SetVectorParameterForDefaultCustomPrimitiveDataInvoker){
        unsafe{ UPrimitiveComponent_SetVectorParameterForDefaultCustomPrimitiveDataInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetVisibleInRayTracingInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_SetVisibleInRayTracingInvokerHandler: Option<UPrimitiveComponent_SetVisibleInRayTracingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetVisibleInRayTracing_handler(handler: UPrimitiveComponent_SetVisibleInRayTracingInvoker){
        unsafe{ UPrimitiveComponent_SetVisibleInRayTracingInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SetVisibleInSceneCaptureOnlyInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_SetVisibleInSceneCaptureOnlyInvokerHandler: Option<UPrimitiveComponent_SetVisibleInSceneCaptureOnlyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SetVisibleInSceneCaptureOnly_handler(handler: UPrimitiveComponent_SetVisibleInSceneCaptureOnlyInvoker){
        unsafe{ UPrimitiveComponent_SetVisibleInSceneCaptureOnlyInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_ShouldComponentAddToSceneInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_ShouldComponentAddToSceneInvokerHandler: Option<UPrimitiveComponent_ShouldComponentAddToSceneInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_ShouldComponentAddToScene_handler(handler: UPrimitiveComponent_ShouldComponentAddToSceneInvoker){
        unsafe{ UPrimitiveComponent_ShouldComponentAddToSceneInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_ShouldCreatePhysicsStateInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_ShouldCreatePhysicsStateInvokerHandler: Option<UPrimitiveComponent_ShouldCreatePhysicsStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_ShouldCreatePhysicsState_handler(handler: UPrimitiveComponent_ShouldCreatePhysicsStateInvoker){
        unsafe{ UPrimitiveComponent_ShouldCreatePhysicsStateInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_ShouldGenerateAutoLODInvoker = unsafe extern "C" fn(*mut c_void, i32) -> bool;
    pub(super) static mut UPrimitiveComponent_ShouldGenerateAutoLODInvokerHandler: Option<UPrimitiveComponent_ShouldGenerateAutoLODInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_ShouldGenerateAutoLOD_handler(handler: UPrimitiveComponent_ShouldGenerateAutoLODInvoker){
        unsafe{ UPrimitiveComponent_ShouldGenerateAutoLODInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_ShouldRecreateProxyOnUpdateTransformInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_ShouldRecreateProxyOnUpdateTransformInvokerHandler: Option<UPrimitiveComponent_ShouldRecreateProxyOnUpdateTransformInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_ShouldRecreateProxyOnUpdateTransform_handler(handler: UPrimitiveComponent_ShouldRecreateProxyOnUpdateTransformInvoker){
        unsafe{ UPrimitiveComponent_ShouldRecreateProxyOnUpdateTransformInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_ShouldRenderSelectedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_ShouldRenderSelectedInvokerHandler: Option<UPrimitiveComponent_ShouldRenderSelectedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_ShouldRenderSelected_handler(handler: UPrimitiveComponent_ShouldRenderSelectedInvoker){
        unsafe{ UPrimitiveComponent_ShouldRenderSelectedInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SupportsWorldPositionOffsetVelocityInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_SupportsWorldPositionOffsetVelocityInvokerHandler: Option<UPrimitiveComponent_SupportsWorldPositionOffsetVelocityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SupportsWorldPositionOffsetVelocity_handler(handler: UPrimitiveComponent_SupportsWorldPositionOffsetVelocityInvoker){
        unsafe{ UPrimitiveComponent_SupportsWorldPositionOffsetVelocityInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_SyncComponentToRBPhysicsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_SyncComponentToRBPhysicsInvokerHandler: Option<UPrimitiveComponent_SyncComponentToRBPhysicsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_SyncComponentToRBPhysics_handler(handler: UPrimitiveComponent_SyncComponentToRBPhysicsInvoker){
        unsafe{ UPrimitiveComponent_SyncComponentToRBPhysicsInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_UnWeldChildrenInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_UnWeldChildrenInvokerHandler: Option<UPrimitiveComponent_UnWeldChildrenInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_UnWeldChildren_handler(handler: UPrimitiveComponent_UnWeldChildrenInvoker){
        unsafe{ UPrimitiveComponent_UnWeldChildrenInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_UnWeldFromParentInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_UnWeldFromParentInvokerHandler: Option<UPrimitiveComponent_UnWeldFromParentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_UnWeldFromParent_handler(handler: UPrimitiveComponent_UnWeldFromParentInvoker){
        unsafe{ UPrimitiveComponent_UnWeldFromParentInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_UpdateBoundsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_UpdateBoundsInvokerHandler: Option<UPrimitiveComponent_UpdateBoundsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_UpdateBounds_handler(handler: UPrimitiveComponent_UpdateBoundsInvoker){
        unsafe{ UPrimitiveComponent_UpdateBoundsInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_UpdateCollisionProfileInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_UpdateCollisionProfileInvokerHandler: Option<UPrimitiveComponent_UpdateCollisionProfileInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_UpdateCollisionProfile_handler(handler: UPrimitiveComponent_UpdateCollisionProfileInvoker){
        unsafe{ UPrimitiveComponent_UpdateCollisionProfileInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_UpdateOcclusionBoundsSlackInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UPrimitiveComponent_UpdateOcclusionBoundsSlackInvokerHandler: Option<UPrimitiveComponent_UpdateOcclusionBoundsSlackInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_UpdateOcclusionBoundsSlack_handler(handler: UPrimitiveComponent_UpdateOcclusionBoundsSlackInvoker){
        unsafe{ UPrimitiveComponent_UpdateOcclusionBoundsSlackInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_UpdateOverlapsImplInvoker = unsafe extern "C" fn(*mut c_void, *mut TOverlapArrayViewOpaque, bool, *mut TOverlapArrayViewOpaque) -> bool;
    pub(super) static mut UPrimitiveComponent_UpdateOverlapsImplInvokerHandler: Option<UPrimitiveComponent_UpdateOverlapsImplInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_UpdateOverlapsImpl_handler(handler: UPrimitiveComponent_UpdateOverlapsImplInvoker){
        unsafe{ UPrimitiveComponent_UpdateOverlapsImplInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_UpdatePhysicsVolumeInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UPrimitiveComponent_UpdatePhysicsVolumeInvokerHandler: Option<UPrimitiveComponent_UpdatePhysicsVolumeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_UpdatePhysicsVolume_handler(handler: UPrimitiveComponent_UpdatePhysicsVolumeInvoker){
        unsafe{ UPrimitiveComponent_UpdatePhysicsVolumeInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_UsesOnlyUnlitMaterialsInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UPrimitiveComponent_UsesOnlyUnlitMaterialsInvokerHandler: Option<UPrimitiveComponent_UsesOnlyUnlitMaterialsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_UsesOnlyUnlitMaterials_handler(handler: UPrimitiveComponent_UsesOnlyUnlitMaterialsInvoker){
        unsafe{ UPrimitiveComponent_UsesOnlyUnlitMaterialsInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_WakeAllRigidBodiesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UPrimitiveComponent_WakeAllRigidBodiesInvokerHandler: Option<UPrimitiveComponent_WakeAllRigidBodiesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_WakeAllRigidBodies_handler(handler: UPrimitiveComponent_WakeAllRigidBodiesInvoker){
        unsafe{ UPrimitiveComponent_WakeAllRigidBodiesInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_WakeRigidBodyInvoker = unsafe extern "C" fn(*mut c_void, UName);
    pub(super) static mut UPrimitiveComponent_WakeRigidBodyInvokerHandler: Option<UPrimitiveComponent_WakeRigidBodyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_WakeRigidBody_handler(handler: UPrimitiveComponent_WakeRigidBodyInvoker){
        unsafe{ UPrimitiveComponent_WakeRigidBodyInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_WasRecentlyRenderedInvoker = unsafe extern "C" fn(*mut c_void, f32) -> bool;
    pub(super) static mut UPrimitiveComponent_WasRecentlyRenderedInvokerHandler: Option<UPrimitiveComponent_WasRecentlyRenderedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_WasRecentlyRendered_handler(handler: UPrimitiveComponent_WasRecentlyRenderedInvoker){
        unsafe{ UPrimitiveComponent_WasRecentlyRenderedInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_WeldToInvoker = unsafe extern "C" fn(*mut c_void, *mut USceneComponentOpaque, UName);
    pub(super) static mut UPrimitiveComponent_WeldToInvokerHandler: Option<UPrimitiveComponent_WeldToInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_WeldTo_handler(handler: UPrimitiveComponent_WeldToInvoker){
        unsafe{ UPrimitiveComponent_WeldToInvokerHandler = Some(handler) };
    }

    type UPrimitiveComponent_WeldToImplementationInvoker = unsafe extern "C" fn(*mut c_void, *mut USceneComponentOpaque, UName, bool) -> bool;
    pub(super) static mut UPrimitiveComponent_WeldToImplementationInvokerHandler: Option<UPrimitiveComponent_WeldToImplementationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UPrimitiveComponent_WeldToImplementation_handler(handler: UPrimitiveComponent_WeldToImplementationInvoker){
        unsafe{ UPrimitiveComponent_WeldToImplementationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_AddExternalNotifyHandlerInvoker = unsafe extern "C" fn(*mut c_void, *mut UObjectOpaque, UName);
    pub(super) static mut UAnimInstance_AddExternalNotifyHandlerInvokerHandler: Option<UAnimInstance_AddExternalNotifyHandlerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_AddExternalNotifyHandler_handler(handler: UAnimInstance_AddExternalNotifyHandlerInvoker){
        unsafe{ UAnimInstance_AddExternalNotifyHandlerInvokerHandler = Some(handler) };
    }

    type UAnimInstance_BeginDestroyInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_BeginDestroyInvokerHandler: Option<UAnimInstance_BeginDestroyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_BeginDestroy_handler(handler: UAnimInstance_BeginDestroyInvoker){
        unsafe{ UAnimInstance_BeginDestroyInvokerHandler = Some(handler) };
    }

    type UAnimInstance_BlueprintBeginPlayInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_BlueprintBeginPlayInvokerHandler: Option<UAnimInstance_BlueprintBeginPlayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_BlueprintBeginPlay_handler(handler: UAnimInstance_BlueprintBeginPlayInvoker){
        unsafe{ UAnimInstance_BlueprintBeginPlayInvokerHandler = Some(handler) };
    }

    type UAnimInstance_BlueprintInitializeAnimationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_BlueprintInitializeAnimationInvokerHandler: Option<UAnimInstance_BlueprintInitializeAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_BlueprintInitializeAnimation_handler(handler: UAnimInstance_BlueprintInitializeAnimationInvoker){
        unsafe{ UAnimInstance_BlueprintInitializeAnimationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_BlueprintLinkedAnimationLayersInitializedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_BlueprintLinkedAnimationLayersInitializedInvokerHandler: Option<UAnimInstance_BlueprintLinkedAnimationLayersInitializedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_BlueprintLinkedAnimationLayersInitialized_handler(handler: UAnimInstance_BlueprintLinkedAnimationLayersInitializedInvoker){
        unsafe{ UAnimInstance_BlueprintLinkedAnimationLayersInitializedInvokerHandler = Some(handler) };
    }

    type UAnimInstance_BlueprintPostEvaluateAnimationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_BlueprintPostEvaluateAnimationInvokerHandler: Option<UAnimInstance_BlueprintPostEvaluateAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_BlueprintPostEvaluateAnimation_handler(handler: UAnimInstance_BlueprintPostEvaluateAnimationInvoker){
        unsafe{ UAnimInstance_BlueprintPostEvaluateAnimationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_BlueprintThreadSafeUpdateAnimationInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UAnimInstance_BlueprintThreadSafeUpdateAnimationInvokerHandler: Option<UAnimInstance_BlueprintThreadSafeUpdateAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_BlueprintThreadSafeUpdateAnimation_handler(handler: UAnimInstance_BlueprintThreadSafeUpdateAnimationInvoker){
        unsafe{ UAnimInstance_BlueprintThreadSafeUpdateAnimationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_BlueprintUpdateAnimationInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UAnimInstance_BlueprintUpdateAnimationInvokerHandler: Option<UAnimInstance_BlueprintUpdateAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_BlueprintUpdateAnimation_handler(handler: UAnimInstance_BlueprintUpdateAnimationInvoker){
        unsafe{ UAnimInstance_BlueprintUpdateAnimationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_CanRunParallelWorkInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UAnimInstance_CanRunParallelWorkInvokerHandler: Option<UAnimInstance_CanRunParallelWorkInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_CanRunParallelWork_handler(handler: UAnimInstance_CanRunParallelWorkInvoker){
        unsafe{ UAnimInstance_CanRunParallelWorkInvokerHandler = Some(handler) };
    }

    type UAnimInstance_CanTransitionSignatureInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UAnimInstance_CanTransitionSignatureInvokerHandler: Option<UAnimInstance_CanTransitionSignatureInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_CanTransitionSignature_handler(handler: UAnimInstance_CanTransitionSignatureInvoker){
        unsafe{ UAnimInstance_CanTransitionSignatureInvokerHandler = Some(handler) };
    }

    type UAnimInstance_ClearAllTransitionEventsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_ClearAllTransitionEventsInvokerHandler: Option<UAnimInstance_ClearAllTransitionEventsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_ClearAllTransitionEvents_handler(handler: UAnimInstance_ClearAllTransitionEventsInvoker){
        unsafe{ UAnimInstance_ClearAllTransitionEventsInvokerHandler = Some(handler) };
    }

    type UAnimInstance_ClearMorphTargetsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_ClearMorphTargetsInvokerHandler: Option<UAnimInstance_ClearMorphTargetsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_ClearMorphTargets_handler(handler: UAnimInstance_ClearMorphTargetsInvoker){
        unsafe{ UAnimInstance_ClearMorphTargetsInvokerHandler = Some(handler) };
    }

    type UAnimInstance_ClearTransitionEventsInvoker = unsafe extern "C" fn(*mut c_void, UName);
    pub(super) static mut UAnimInstance_ClearTransitionEventsInvokerHandler: Option<UAnimInstance_ClearTransitionEventsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_ClearTransitionEvents_handler(handler: UAnimInstance_ClearTransitionEventsInvoker){
        unsafe{ UAnimInstance_ClearTransitionEventsInvokerHandler = Some(handler) };
    }

    type UAnimInstance_CopyCurveValuesInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimInstanceOpaque);
    pub(super) static mut UAnimInstance_CopyCurveValuesInvokerHandler: Option<UAnimInstance_CopyCurveValuesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_CopyCurveValues_handler(handler: UAnimInstance_CopyCurveValuesInvoker){
        unsafe{ UAnimInstance_CopyCurveValuesInvokerHandler = Some(handler) };
    }

    type UAnimInstance_DispatchQueuedAnimEventsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_DispatchQueuedAnimEventsInvokerHandler: Option<UAnimInstance_DispatchQueuedAnimEventsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_DispatchQueuedAnimEvents_handler(handler: UAnimInstance_DispatchQueuedAnimEventsInvoker){
        unsafe{ UAnimInstance_DispatchQueuedAnimEventsInvokerHandler = Some(handler) };
    }

    type UAnimInstance_EndNotifyStatesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_EndNotifyStatesInvokerHandler: Option<UAnimInstance_EndNotifyStatesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_EndNotifyStates_handler(handler: UAnimInstance_EndNotifyStatesInvoker){
        unsafe{ UAnimInstance_EndNotifyStatesInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetActiveInstanceForMontageInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimMontageOpaque) -> *mut FAnimMontageInstanceOpaque;
    pub(super) static mut UAnimInstance_GetActiveInstanceForMontageInvokerHandler: Option<UAnimInstance_GetActiveInstanceForMontageInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetActiveInstanceForMontage_handler(handler: UAnimInstance_GetActiveInstanceForMontageInvoker){
        unsafe{ UAnimInstance_GetActiveInstanceForMontageInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetActiveMontageInstanceInvoker = unsafe extern "C" fn(*mut c_void) -> *mut FAnimMontageInstanceOpaque;
    pub(super) static mut UAnimInstance_GetActiveMontageInstanceInvokerHandler: Option<UAnimInstance_GetActiveMontageInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetActiveMontageInstance_handler(handler: UAnimInstance_GetActiveMontageInstanceInvoker){
        unsafe{ UAnimInstance_GetActiveMontageInstanceInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetCurrentActiveMontageInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UAnimMontageOpaque;
    pub(super) static mut UAnimInstance_GetCurrentActiveMontageInvokerHandler: Option<UAnimInstance_GetCurrentActiveMontageInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetCurrentActiveMontage_handler(handler: UAnimInstance_GetCurrentActiveMontageInvoker){
        unsafe{ UAnimInstance_GetCurrentActiveMontageInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetCurrentStateNameInvoker = unsafe extern "C" fn(*mut c_void, i32) -> UName;
    pub(super) static mut UAnimInstance_GetCurrentStateNameInvokerHandler: Option<UAnimInstance_GetCurrentStateNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetCurrentStateName_handler(handler: UAnimInstance_GetCurrentStateNameInvoker){
        unsafe{ UAnimInstance_GetCurrentStateNameInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetCurveValueInvoker = unsafe extern "C" fn(*mut c_void, UName) -> f32;
    pub(super) static mut UAnimInstance_GetCurveValueInvokerHandler: Option<UAnimInstance_GetCurveValueInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetCurveValue_handler(handler: UAnimInstance_GetCurveValueInvoker){
        unsafe{ UAnimInstance_GetCurveValueInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetCurveValue2Invoker = unsafe extern "C" fn(*mut c_void, UName, &mut f32) -> bool;
    pub(super) static mut UAnimInstance_GetCurveValue2InvokerHandler: Option<UAnimInstance_GetCurveValue2Invoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetCurveValue2_handler(handler: UAnimInstance_GetCurveValue2Invoker){
        unsafe{ UAnimInstance_GetCurveValue2InvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetCurveValueWithDefaultInvoker = unsafe extern "C" fn(*mut c_void, UName, f32, &mut f32) -> bool;
    pub(super) static mut UAnimInstance_GetCurveValueWithDefaultInvokerHandler: Option<UAnimInstance_GetCurveValueWithDefaultInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetCurveValueWithDefault_handler(handler: UAnimInstance_GetCurveValueWithDefaultInvoker){
        unsafe{ UAnimInstance_GetCurveValueWithDefaultInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetDeltaSecondsInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UAnimInstance_GetDeltaSecondsInvokerHandler: Option<UAnimInstance_GetDeltaSecondsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetDeltaSeconds_handler(handler: UAnimInstance_GetDeltaSecondsInvoker){
        unsafe{ UAnimInstance_GetDeltaSecondsInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetInstanceAssetPlayerIndexInvoker = unsafe extern "C" fn(*mut c_void, UName, UName, UName) -> i32;
    pub(super) static mut UAnimInstance_GetInstanceAssetPlayerIndexInvokerHandler: Option<UAnimInstance_GetInstanceAssetPlayerIndexInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetInstanceAssetPlayerIndex_handler(handler: UAnimInstance_GetInstanceAssetPlayerIndexInvoker){
        unsafe{ UAnimInstance_GetInstanceAssetPlayerIndexInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetInstanceAssetPlayerLengthInvoker = unsafe extern "C" fn(*mut c_void, i32) -> f32;
    pub(super) static mut UAnimInstance_GetInstanceAssetPlayerLengthInvokerHandler: Option<UAnimInstance_GetInstanceAssetPlayerLengthInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetInstanceAssetPlayerLength_handler(handler: UAnimInstance_GetInstanceAssetPlayerLengthInvoker){
        unsafe{ UAnimInstance_GetInstanceAssetPlayerLengthInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetInstanceAssetPlayerTimeInvoker = unsafe extern "C" fn(*mut c_void, i32) -> f32;
    pub(super) static mut UAnimInstance_GetInstanceAssetPlayerTimeInvokerHandler: Option<UAnimInstance_GetInstanceAssetPlayerTimeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetInstanceAssetPlayerTime_handler(handler: UAnimInstance_GetInstanceAssetPlayerTimeInvoker){
        unsafe{ UAnimInstance_GetInstanceAssetPlayerTimeInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetInstanceAssetPlayerTimeFractionInvoker = unsafe extern "C" fn(*mut c_void, i32) -> f32;
    pub(super) static mut UAnimInstance_GetInstanceAssetPlayerTimeFractionInvokerHandler: Option<UAnimInstance_GetInstanceAssetPlayerTimeFractionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetInstanceAssetPlayerTimeFraction_handler(handler: UAnimInstance_GetInstanceAssetPlayerTimeFractionInvoker){
        unsafe{ UAnimInstance_GetInstanceAssetPlayerTimeFractionInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetInstanceAssetPlayerTimeFromEndInvoker = unsafe extern "C" fn(*mut c_void, i32) -> f32;
    pub(super) static mut UAnimInstance_GetInstanceAssetPlayerTimeFromEndInvokerHandler: Option<UAnimInstance_GetInstanceAssetPlayerTimeFromEndInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetInstanceAssetPlayerTimeFromEnd_handler(handler: UAnimInstance_GetInstanceAssetPlayerTimeFromEndInvoker){
        unsafe{ UAnimInstance_GetInstanceAssetPlayerTimeFromEndInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetInstanceAssetPlayerTimeFromEndFractionInvoker = unsafe extern "C" fn(*mut c_void, i32) -> f32;
    pub(super) static mut UAnimInstance_GetInstanceAssetPlayerTimeFromEndFractionInvokerHandler: Option<UAnimInstance_GetInstanceAssetPlayerTimeFromEndFractionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetInstanceAssetPlayerTimeFromEndFraction_handler(handler: UAnimInstance_GetInstanceAssetPlayerTimeFromEndFractionInvoker){
        unsafe{ UAnimInstance_GetInstanceAssetPlayerTimeFromEndFractionInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetInstanceCurrentStateElapsedTimeInvoker = unsafe extern "C" fn(*mut c_void, i32) -> f32;
    pub(super) static mut UAnimInstance_GetInstanceCurrentStateElapsedTimeInvokerHandler: Option<UAnimInstance_GetInstanceCurrentStateElapsedTimeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetInstanceCurrentStateElapsedTime_handler(handler: UAnimInstance_GetInstanceCurrentStateElapsedTimeInvoker){
        unsafe{ UAnimInstance_GetInstanceCurrentStateElapsedTimeInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetInstanceMachineWeightInvoker = unsafe extern "C" fn(*mut c_void, i32) -> f32;
    pub(super) static mut UAnimInstance_GetInstanceMachineWeightInvokerHandler: Option<UAnimInstance_GetInstanceMachineWeightInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetInstanceMachineWeight_handler(handler: UAnimInstance_GetInstanceMachineWeightInvoker){
        unsafe{ UAnimInstance_GetInstanceMachineWeightInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetInstanceStateWeightInvoker = unsafe extern "C" fn(*mut c_void, i32, i32) -> f32;
    pub(super) static mut UAnimInstance_GetInstanceStateWeightInvokerHandler: Option<UAnimInstance_GetInstanceStateWeightInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetInstanceStateWeight_handler(handler: UAnimInstance_GetInstanceStateWeightInvoker){
        unsafe{ UAnimInstance_GetInstanceStateWeightInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetInstanceTransitionCrossfadeDurationInvoker = unsafe extern "C" fn(*mut c_void, i32, i32) -> f32;
    pub(super) static mut UAnimInstance_GetInstanceTransitionCrossfadeDurationInvokerHandler: Option<UAnimInstance_GetInstanceTransitionCrossfadeDurationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetInstanceTransitionCrossfadeDuration_handler(handler: UAnimInstance_GetInstanceTransitionCrossfadeDurationInvoker){
        unsafe{ UAnimInstance_GetInstanceTransitionCrossfadeDurationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetInstanceTransitionTimeElapsedInvoker = unsafe extern "C" fn(*mut c_void, i32, i32) -> f32;
    pub(super) static mut UAnimInstance_GetInstanceTransitionTimeElapsedInvokerHandler: Option<UAnimInstance_GetInstanceTransitionTimeElapsedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetInstanceTransitionTimeElapsed_handler(handler: UAnimInstance_GetInstanceTransitionTimeElapsedInvoker){
        unsafe{ UAnimInstance_GetInstanceTransitionTimeElapsedInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetInstanceTransitionTimeElapsedFractionInvoker = unsafe extern "C" fn(*mut c_void, i32, i32) -> f32;
    pub(super) static mut UAnimInstance_GetInstanceTransitionTimeElapsedFractionInvokerHandler: Option<UAnimInstance_GetInstanceTransitionTimeElapsedFractionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetInstanceTransitionTimeElapsedFraction_handler(handler: UAnimInstance_GetInstanceTransitionTimeElapsedFractionInvoker){
        unsafe{ UAnimInstance_GetInstanceTransitionTimeElapsedFractionInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetLODLevelInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UAnimInstance_GetLODLevelInvokerHandler: Option<UAnimInstance_GetLODLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetLODLevel_handler(handler: UAnimInstance_GetLODLevelInvoker){
        unsafe{ UAnimInstance_GetLODLevelInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetLinkedAnimGraphInstanceByTagInvoker = unsafe extern "C" fn(*mut c_void, UName) -> *mut UAnimInstanceOpaque;
    pub(super) static mut UAnimInstance_GetLinkedAnimGraphInstanceByTagInvokerHandler: Option<UAnimInstance_GetLinkedAnimGraphInstanceByTagInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetLinkedAnimGraphInstanceByTag_handler(handler: UAnimInstance_GetLinkedAnimGraphInstanceByTagInvoker){
        unsafe{ UAnimInstance_GetLinkedAnimGraphInstanceByTagInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetLinkedAnimLayerInstanceByGroupInvoker = unsafe extern "C" fn(*mut c_void, UName) -> *mut UAnimInstanceOpaque;
    pub(super) static mut UAnimInstance_GetLinkedAnimLayerInstanceByGroupInvokerHandler: Option<UAnimInstance_GetLinkedAnimLayerInstanceByGroupInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetLinkedAnimLayerInstanceByGroup_handler(handler: UAnimInstance_GetLinkedAnimLayerInstanceByGroupInvoker){
        unsafe{ UAnimInstance_GetLinkedAnimLayerInstanceByGroupInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetLinkedInputPoseNodeInvoker = unsafe extern "C" fn(*mut c_void, UName, UName) -> *mut FAnimNode_LinkedInputPoseOpaque;
    pub(super) static mut UAnimInstance_GetLinkedInputPoseNodeInvokerHandler: Option<UAnimInstance_GetLinkedInputPoseNodeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetLinkedInputPoseNode_handler(handler: UAnimInstance_GetLinkedInputPoseNodeInvoker){
        unsafe{ UAnimInstance_GetLinkedInputPoseNodeInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetMachineDescriptionInvoker = unsafe extern "C" fn(*mut c_void, *mut IAnimClassInterfaceOpaque, *mut FAnimNode_StateMachineOpaque) -> *mut FBakedAnimationStateMachineOpaque;
    pub(super) static mut UAnimInstance_GetMachineDescriptionInvokerHandler: Option<UAnimInstance_GetMachineDescriptionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetMachineDescription_handler(handler: UAnimInstance_GetMachineDescriptionInvoker){
        unsafe{ UAnimInstance_GetMachineDescriptionInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetMontageInstanceForIDInvoker = unsafe extern "C" fn(*mut c_void, i32) -> *mut FAnimMontageInstanceOpaque;
    pub(super) static mut UAnimInstance_GetMontageInstanceForIDInvokerHandler: Option<UAnimInstance_GetMontageInstanceForIDInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetMontageInstanceForID_handler(handler: UAnimInstance_GetMontageInstanceForIDInvoker){
        unsafe{ UAnimInstance_GetMontageInstanceForIDInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetOwningActorInvoker = unsafe extern "C" fn(*mut c_void) -> *mut AActorOpaque;
    pub(super) static mut UAnimInstance_GetOwningActorInvokerHandler: Option<UAnimInstance_GetOwningActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetOwningActor_handler(handler: UAnimInstance_GetOwningActorInvoker){
        unsafe{ UAnimInstance_GetOwningActorInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetOwningComponentInvoker = unsafe extern "C" fn(*mut c_void) -> *mut USkeletalMeshComponentOpaque;
    pub(super) static mut UAnimInstance_GetOwningComponentInvokerHandler: Option<UAnimInstance_GetOwningComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetOwningComponent_handler(handler: UAnimInstance_GetOwningComponentInvoker){
        unsafe{ UAnimInstance_GetOwningComponentInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetPoseSnapshotInvoker = unsafe extern "C" fn(*mut c_void, UName) -> *mut FPoseSnapshotOpaque;
    pub(super) static mut UAnimInstance_GetPoseSnapshotInvokerHandler: Option<UAnimInstance_GetPoseSnapshotInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetPoseSnapshot_handler(handler: UAnimInstance_GetPoseSnapshotInvoker){
        unsafe{ UAnimInstance_GetPoseSnapshotInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetPropagateNotifiesToLinkedInstancesInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UAnimInstance_GetPropagateNotifiesToLinkedInstancesInvokerHandler: Option<UAnimInstance_GetPropagateNotifiesToLinkedInstancesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetPropagateNotifiesToLinkedInstances_handler(handler: UAnimInstance_GetPropagateNotifiesToLinkedInstancesInvoker){
        unsafe{ UAnimInstance_GetPropagateNotifiesToLinkedInstancesInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetReceiveNotifiesFromLinkedInstancesInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UAnimInstance_GetReceiveNotifiesFromLinkedInstancesInvokerHandler: Option<UAnimInstance_GetReceiveNotifiesFromLinkedInstancesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetReceiveNotifiesFromLinkedInstances_handler(handler: UAnimInstance_GetReceiveNotifiesFromLinkedInstancesInvoker){
        unsafe{ UAnimInstance_GetReceiveNotifiesFromLinkedInstancesInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetRelevantAnimLengthInvoker = unsafe extern "C" fn(*mut c_void, i32, i32) -> f32;
    pub(super) static mut UAnimInstance_GetRelevantAnimLengthInvokerHandler: Option<UAnimInstance_GetRelevantAnimLengthInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetRelevantAnimLength_handler(handler: UAnimInstance_GetRelevantAnimLengthInvoker){
        unsafe{ UAnimInstance_GetRelevantAnimLengthInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetRelevantAnimTimeInvoker = unsafe extern "C" fn(*mut c_void, i32, i32) -> f32;
    pub(super) static mut UAnimInstance_GetRelevantAnimTimeInvokerHandler: Option<UAnimInstance_GetRelevantAnimTimeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetRelevantAnimTime_handler(handler: UAnimInstance_GetRelevantAnimTimeInvoker){
        unsafe{ UAnimInstance_GetRelevantAnimTimeInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetRelevantAnimTimeFractionInvoker = unsafe extern "C" fn(*mut c_void, i32, i32) -> f32;
    pub(super) static mut UAnimInstance_GetRelevantAnimTimeFractionInvokerHandler: Option<UAnimInstance_GetRelevantAnimTimeFractionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetRelevantAnimTimeFraction_handler(handler: UAnimInstance_GetRelevantAnimTimeFractionInvoker){
        unsafe{ UAnimInstance_GetRelevantAnimTimeFractionInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetRelevantAnimTimeRemainingInvoker = unsafe extern "C" fn(*mut c_void, i32, i32) -> f32;
    pub(super) static mut UAnimInstance_GetRelevantAnimTimeRemainingInvokerHandler: Option<UAnimInstance_GetRelevantAnimTimeRemainingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetRelevantAnimTimeRemaining_handler(handler: UAnimInstance_GetRelevantAnimTimeRemainingInvoker){
        unsafe{ UAnimInstance_GetRelevantAnimTimeRemainingInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetRelevantAnimTimeRemainingFractionInvoker = unsafe extern "C" fn(*mut c_void, i32, i32) -> f32;
    pub(super) static mut UAnimInstance_GetRelevantAnimTimeRemainingFractionInvokerHandler: Option<UAnimInstance_GetRelevantAnimTimeRemainingFractionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetRelevantAnimTimeRemainingFraction_handler(handler: UAnimInstance_GetRelevantAnimTimeRemainingFractionInvoker){
        unsafe{ UAnimInstance_GetRelevantAnimTimeRemainingFractionInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetRootMotionMontageInstanceInvoker = unsafe extern "C" fn(*mut c_void) -> *mut FAnimMontageInstanceOpaque;
    pub(super) static mut UAnimInstance_GetRootMotionMontageInstanceInvokerHandler: Option<UAnimInstance_GetRootMotionMontageInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetRootMotionMontageInstance_handler(handler: UAnimInstance_GetRootMotionMontageInstanceInvoker){
        unsafe{ UAnimInstance_GetRootMotionMontageInstanceInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetSkelMeshComponentInvoker = unsafe extern "C" fn(*mut c_void) -> *mut USkeletalMeshComponentOpaque;
    pub(super) static mut UAnimInstance_GetSkelMeshComponentInvokerHandler: Option<UAnimInstance_GetSkelMeshComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetSkelMeshComponent_handler(handler: UAnimInstance_GetSkelMeshComponentInvoker){
        unsafe{ UAnimInstance_GetSkelMeshComponentInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetStateMachineIndexInvoker = unsafe extern "C" fn(*mut c_void, UName) -> i32;
    pub(super) static mut UAnimInstance_GetStateMachineIndexInvokerHandler: Option<UAnimInstance_GetStateMachineIndexInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetStateMachineIndex_handler(handler: UAnimInstance_GetStateMachineIndexInvoker){
        unsafe{ UAnimInstance_GetStateMachineIndexInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetStateMachineInstanceInvoker = unsafe extern "C" fn(*mut c_void, i32) -> *mut FAnimNode_StateMachineOpaque;
    pub(super) static mut UAnimInstance_GetStateMachineInstanceInvokerHandler: Option<UAnimInstance_GetStateMachineInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetStateMachineInstance_handler(handler: UAnimInstance_GetStateMachineInstanceInvoker){
        unsafe{ UAnimInstance_GetStateMachineInstanceInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetStateMachineInstanceDescInvoker = unsafe extern "C" fn(*mut c_void, UName) -> *mut FBakedAnimationStateMachineOpaque;
    pub(super) static mut UAnimInstance_GetStateMachineInstanceDescInvokerHandler: Option<UAnimInstance_GetStateMachineInstanceDescInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetStateMachineInstanceDesc_handler(handler: UAnimInstance_GetStateMachineInstanceDescInvoker){
        unsafe{ UAnimInstance_GetStateMachineInstanceDescInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetStateMachineInstanceFromNameInvoker = unsafe extern "C" fn(*mut c_void, UName) -> *mut FAnimNode_StateMachineOpaque;
    pub(super) static mut UAnimInstance_GetStateMachineInstanceFromNameInvokerHandler: Option<UAnimInstance_GetStateMachineInstanceFromNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetStateMachineInstanceFromName_handler(handler: UAnimInstance_GetStateMachineInstanceFromNameInvoker){
        unsafe{ UAnimInstance_GetStateMachineInstanceFromNameInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetSyncGroupIndexFromNameInvoker = unsafe extern "C" fn(*mut c_void, UName) -> i32;
    pub(super) static mut UAnimInstance_GetSyncGroupIndexFromNameInvokerHandler: Option<UAnimInstance_GetSyncGroupIndexFromNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetSyncGroupIndexFromName_handler(handler: UAnimInstance_GetSyncGroupIndexFromNameInvoker){
        unsafe{ UAnimInstance_GetSyncGroupIndexFromNameInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetTimeToClosestMarkerInvoker = unsafe extern "C" fn(*mut c_void, UName, UName, &mut f32) -> bool;
    pub(super) static mut UAnimInstance_GetTimeToClosestMarkerInvokerHandler: Option<UAnimInstance_GetTimeToClosestMarkerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetTimeToClosestMarker_handler(handler: UAnimInstance_GetTimeToClosestMarkerInvoker){
        unsafe{ UAnimInstance_GetTimeToClosestMarkerInvokerHandler = Some(handler) };
    }

    type UAnimInstance_GetWorldInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UWorldOpaque;
    pub(super) static mut UAnimInstance_GetWorldInvokerHandler: Option<UAnimInstance_GetWorldInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_GetWorld_handler(handler: UAnimInstance_GetWorldInvoker){
        unsafe{ UAnimInstance_GetWorldInvokerHandler = Some(handler) };
    }

    type UAnimInstance_HasActiveCurvesInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UAnimInstance_HasActiveCurvesInvokerHandler: Option<UAnimInstance_HasActiveCurvesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_HasActiveCurves_handler(handler: UAnimInstance_HasActiveCurvesInvoker){
        unsafe{ UAnimInstance_HasActiveCurvesInvokerHandler = Some(handler) };
    }

    type UAnimInstance_HasMarkerBeenHitThisFrameInvoker = unsafe extern "C" fn(*mut c_void, UName, UName) -> bool;
    pub(super) static mut UAnimInstance_HasMarkerBeenHitThisFrameInvokerHandler: Option<UAnimInstance_HasMarkerBeenHitThisFrameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_HasMarkerBeenHitThisFrame_handler(handler: UAnimInstance_HasMarkerBeenHitThisFrameInvoker){
        unsafe{ UAnimInstance_HasMarkerBeenHitThisFrameInvokerHandler = Some(handler) };
    }

    type UAnimInstance_HasMorphTargetCurvesInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UAnimInstance_HasMorphTargetCurvesInvokerHandler: Option<UAnimInstance_HasMorphTargetCurvesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_HasMorphTargetCurves_handler(handler: UAnimInstance_HasMorphTargetCurvesInvoker){
        unsafe{ UAnimInstance_HasMorphTargetCurvesInvokerHandler = Some(handler) };
    }

    type UAnimInstance_InitializeAnimationInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UAnimInstance_InitializeAnimationInvokerHandler: Option<UAnimInstance_InitializeAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_InitializeAnimation_handler(handler: UAnimInstance_InitializeAnimationInvoker){
        unsafe{ UAnimInstance_InitializeAnimationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_InitializeGroupedLayersInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UAnimInstance_InitializeGroupedLayersInvokerHandler: Option<UAnimInstance_InitializeGroupedLayersInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_InitializeGroupedLayers_handler(handler: UAnimInstance_InitializeGroupedLayersInvoker){
        unsafe{ UAnimInstance_InitializeGroupedLayersInvokerHandler = Some(handler) };
    }

    type UAnimInstance_IsAnyMontagePlayingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UAnimInstance_IsAnyMontagePlayingInvokerHandler: Option<UAnimInstance_IsAnyMontagePlayingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_IsAnyMontagePlaying_handler(handler: UAnimInstance_IsAnyMontagePlayingInvoker){
        unsafe{ UAnimInstance_IsAnyMontagePlayingInvokerHandler = Some(handler) };
    }

    type UAnimInstance_IsBeingDebuggedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UAnimInstance_IsBeingDebuggedInvokerHandler: Option<UAnimInstance_IsBeingDebuggedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_IsBeingDebugged_handler(handler: UAnimInstance_IsBeingDebuggedInvoker){
        unsafe{ UAnimInstance_IsBeingDebuggedInvokerHandler = Some(handler) };
    }

    type UAnimInstance_IsPlayingSlotAnimationInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimSequenceBaseOpaque, UName) -> bool;
    pub(super) static mut UAnimInstance_IsPlayingSlotAnimationInvokerHandler: Option<UAnimInstance_IsPlayingSlotAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_IsPlayingSlotAnimation_handler(handler: UAnimInstance_IsPlayingSlotAnimationInvoker){
        unsafe{ UAnimInstance_IsPlayingSlotAnimationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_IsPostUpdatingAnimationInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UAnimInstance_IsPostUpdatingAnimationInvokerHandler: Option<UAnimInstance_IsPostUpdatingAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_IsPostUpdatingAnimation_handler(handler: UAnimInstance_IsPostUpdatingAnimationInvoker){
        unsafe{ UAnimInstance_IsPostUpdatingAnimationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_IsRunningParallelEvaluationInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UAnimInstance_IsRunningParallelEvaluationInvokerHandler: Option<UAnimInstance_IsRunningParallelEvaluationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_IsRunningParallelEvaluation_handler(handler: UAnimInstance_IsRunningParallelEvaluationInvoker){
        unsafe{ UAnimInstance_IsRunningParallelEvaluationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_IsSyncGroupBetweenMarkersInvoker = unsafe extern "C" fn(*mut c_void, UName, UName, UName, bool) -> bool;
    pub(super) static mut UAnimInstance_IsSyncGroupBetweenMarkersInvokerHandler: Option<UAnimInstance_IsSyncGroupBetweenMarkersInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_IsSyncGroupBetweenMarkers_handler(handler: UAnimInstance_IsSyncGroupBetweenMarkersInvoker){
        unsafe{ UAnimInstance_IsSyncGroupBetweenMarkersInvokerHandler = Some(handler) };
    }

    type UAnimInstance_IsUpdatingAnimationInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UAnimInstance_IsUpdatingAnimationInvokerHandler: Option<UAnimInstance_IsUpdatingAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_IsUpdatingAnimation_handler(handler: UAnimInstance_IsUpdatingAnimationInvoker){
        unsafe{ UAnimInstance_IsUpdatingAnimationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_IsUsingMainInstanceMontageEvaluationDataInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UAnimInstance_IsUsingMainInstanceMontageEvaluationDataInvokerHandler: Option<UAnimInstance_IsUsingMainInstanceMontageEvaluationDataInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_IsUsingMainInstanceMontageEvaluationData_handler(handler: UAnimInstance_IsUsingMainInstanceMontageEvaluationDataInvoker){
        unsafe{ UAnimInstance_IsUsingMainInstanceMontageEvaluationDataInvokerHandler = Some(handler) };
    }

    type UAnimInstance_LockAIResourcesInvoker = unsafe extern "C" fn(*mut c_void, bool, bool);
    pub(super) static mut UAnimInstance_LockAIResourcesInvokerHandler: Option<UAnimInstance_LockAIResourcesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_LockAIResources_handler(handler: UAnimInstance_LockAIResourcesInvoker){
        unsafe{ UAnimInstance_LockAIResourcesInvokerHandler = Some(handler) };
    }

    type UAnimInstance_MontageSync_FollowInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimMontageOpaque, *mut UAnimInstanceOpaque, *mut UAnimMontageOpaque);
    pub(super) static mut UAnimInstance_MontageSync_FollowInvokerHandler: Option<UAnimInstance_MontageSync_FollowInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_MontageSync_Follow_handler(handler: UAnimInstance_MontageSync_FollowInvoker){
        unsafe{ UAnimInstance_MontageSync_FollowInvokerHandler = Some(handler) };
    }

    type UAnimInstance_MontageSync_StopFollowingInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimMontageOpaque);
    pub(super) static mut UAnimInstance_MontageSync_StopFollowingInvokerHandler: Option<UAnimInstance_MontageSync_StopFollowingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_MontageSync_StopFollowing_handler(handler: UAnimInstance_MontageSync_StopFollowingInvoker){
        unsafe{ UAnimInstance_MontageSync_StopFollowingInvokerHandler = Some(handler) };
    }

    type UAnimInstance_Montage_GetBlendTimeInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimMontageOpaque) -> f32;
    pub(super) static mut UAnimInstance_Montage_GetBlendTimeInvokerHandler: Option<UAnimInstance_Montage_GetBlendTimeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_Montage_GetBlendTime_handler(handler: UAnimInstance_Montage_GetBlendTimeInvoker){
        unsafe{ UAnimInstance_Montage_GetBlendTimeInvokerHandler = Some(handler) };
    }

    type UAnimInstance_Montage_GetBlendingOutDelegateInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimMontageOpaque) -> *mut FOnMontageBlendingOutStartedOpaque;
    pub(super) static mut UAnimInstance_Montage_GetBlendingOutDelegateInvokerHandler: Option<UAnimInstance_Montage_GetBlendingOutDelegateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_Montage_GetBlendingOutDelegate_handler(handler: UAnimInstance_Montage_GetBlendingOutDelegateInvoker){
        unsafe{ UAnimInstance_Montage_GetBlendingOutDelegateInvokerHandler = Some(handler) };
    }

    type UAnimInstance_Montage_GetCurrentSectionInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimMontageOpaque) -> UName;
    pub(super) static mut UAnimInstance_Montage_GetCurrentSectionInvokerHandler: Option<UAnimInstance_Montage_GetCurrentSectionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_Montage_GetCurrentSection_handler(handler: UAnimInstance_Montage_GetCurrentSectionInvoker){
        unsafe{ UAnimInstance_Montage_GetCurrentSectionInvokerHandler = Some(handler) };
    }

    type UAnimInstance_Montage_GetIsStoppedInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimMontageOpaque) -> bool;
    pub(super) static mut UAnimInstance_Montage_GetIsStoppedInvokerHandler: Option<UAnimInstance_Montage_GetIsStoppedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_Montage_GetIsStopped_handler(handler: UAnimInstance_Montage_GetIsStoppedInvoker){
        unsafe{ UAnimInstance_Montage_GetIsStoppedInvokerHandler = Some(handler) };
    }

    type UAnimInstance_Montage_GetPlayRateInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimMontageOpaque) -> f32;
    pub(super) static mut UAnimInstance_Montage_GetPlayRateInvokerHandler: Option<UAnimInstance_Montage_GetPlayRateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_Montage_GetPlayRate_handler(handler: UAnimInstance_Montage_GetPlayRateInvoker){
        unsafe{ UAnimInstance_Montage_GetPlayRateInvokerHandler = Some(handler) };
    }

    type UAnimInstance_Montage_GetPositionInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimMontageOpaque) -> f32;
    pub(super) static mut UAnimInstance_Montage_GetPositionInvokerHandler: Option<UAnimInstance_Montage_GetPositionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_Montage_GetPosition_handler(handler: UAnimInstance_Montage_GetPositionInvoker){
        unsafe{ UAnimInstance_Montage_GetPositionInvokerHandler = Some(handler) };
    }

    type UAnimInstance_Montage_IsActiveInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimMontageOpaque) -> bool;
    pub(super) static mut UAnimInstance_Montage_IsActiveInvokerHandler: Option<UAnimInstance_Montage_IsActiveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_Montage_IsActive_handler(handler: UAnimInstance_Montage_IsActiveInvoker){
        unsafe{ UAnimInstance_Montage_IsActiveInvokerHandler = Some(handler) };
    }

    type UAnimInstance_Montage_IsPlayingInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimMontageOpaque) -> bool;
    pub(super) static mut UAnimInstance_Montage_IsPlayingInvokerHandler: Option<UAnimInstance_Montage_IsPlayingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_Montage_IsPlaying_handler(handler: UAnimInstance_Montage_IsPlayingInvoker){
        unsafe{ UAnimInstance_Montage_IsPlayingInvokerHandler = Some(handler) };
    }

    type UAnimInstance_Montage_JumpToSectionInvoker = unsafe extern "C" fn(*mut c_void, UName, *mut UAnimMontageOpaque);
    pub(super) static mut UAnimInstance_Montage_JumpToSectionInvokerHandler: Option<UAnimInstance_Montage_JumpToSectionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_Montage_JumpToSection_handler(handler: UAnimInstance_Montage_JumpToSectionInvoker){
        unsafe{ UAnimInstance_Montage_JumpToSectionInvokerHandler = Some(handler) };
    }

    type UAnimInstance_Montage_JumpToSectionsEndInvoker = unsafe extern "C" fn(*mut c_void, UName, *mut UAnimMontageOpaque);
    pub(super) static mut UAnimInstance_Montage_JumpToSectionsEndInvokerHandler: Option<UAnimInstance_Montage_JumpToSectionsEndInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_Montage_JumpToSectionsEnd_handler(handler: UAnimInstance_Montage_JumpToSectionsEndInvoker){
        unsafe{ UAnimInstance_Montage_JumpToSectionsEndInvokerHandler = Some(handler) };
    }

    type UAnimInstance_Montage_PauseInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimMontageOpaque);
    pub(super) static mut UAnimInstance_Montage_PauseInvokerHandler: Option<UAnimInstance_Montage_PauseInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_Montage_Pause_handler(handler: UAnimInstance_Montage_PauseInvoker){
        unsafe{ UAnimInstance_Montage_PauseInvokerHandler = Some(handler) };
    }

    type UAnimInstance_Montage_PlayInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimMontageOpaque, f32, EMontagePlayReturnType, f32, bool) -> f32;
    pub(super) static mut UAnimInstance_Montage_PlayInvokerHandler: Option<UAnimInstance_Montage_PlayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_Montage_Play_handler(handler: UAnimInstance_Montage_PlayInvoker){
        unsafe{ UAnimInstance_Montage_PlayInvokerHandler = Some(handler) };
    }

    type UAnimInstance_Montage_ResumeInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimMontageOpaque);
    pub(super) static mut UAnimInstance_Montage_ResumeInvokerHandler: Option<UAnimInstance_Montage_ResumeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_Montage_Resume_handler(handler: UAnimInstance_Montage_ResumeInvoker){
        unsafe{ UAnimInstance_Montage_ResumeInvokerHandler = Some(handler) };
    }

    type UAnimInstance_Montage_SetNextSectionInvoker = unsafe extern "C" fn(*mut c_void, UName, UName, *mut UAnimMontageOpaque);
    pub(super) static mut UAnimInstance_Montage_SetNextSectionInvokerHandler: Option<UAnimInstance_Montage_SetNextSectionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_Montage_SetNextSection_handler(handler: UAnimInstance_Montage_SetNextSectionInvoker){
        unsafe{ UAnimInstance_Montage_SetNextSectionInvokerHandler = Some(handler) };
    }

    type UAnimInstance_Montage_SetPlayRateInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimMontageOpaque, f32);
    pub(super) static mut UAnimInstance_Montage_SetPlayRateInvokerHandler: Option<UAnimInstance_Montage_SetPlayRateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_Montage_SetPlayRate_handler(handler: UAnimInstance_Montage_SetPlayRateInvoker){
        unsafe{ UAnimInstance_Montage_SetPlayRateInvokerHandler = Some(handler) };
    }

    type UAnimInstance_Montage_SetPositionInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimMontageOpaque, f32);
    pub(super) static mut UAnimInstance_Montage_SetPositionInvokerHandler: Option<UAnimInstance_Montage_SetPositionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_Montage_SetPosition_handler(handler: UAnimInstance_Montage_SetPositionInvoker){
        unsafe{ UAnimInstance_Montage_SetPositionInvokerHandler = Some(handler) };
    }

    type UAnimInstance_Montage_StopInvoker = unsafe extern "C" fn(*mut c_void, f32, *mut UAnimMontageOpaque);
    pub(super) static mut UAnimInstance_Montage_StopInvokerHandler: Option<UAnimInstance_Montage_StopInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_Montage_Stop_handler(handler: UAnimInstance_Montage_StopInvoker){
        unsafe{ UAnimInstance_Montage_StopInvokerHandler = Some(handler) };
    }

    type UAnimInstance_Montage_StopGroupByNameInvoker = unsafe extern "C" fn(*mut c_void, f32, UName);
    pub(super) static mut UAnimInstance_Montage_StopGroupByNameInvokerHandler: Option<UAnimInstance_Montage_StopGroupByNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_Montage_StopGroupByName_handler(handler: UAnimInstance_Montage_StopGroupByNameInvoker){
        unsafe{ UAnimInstance_Montage_StopGroupByNameInvokerHandler = Some(handler) };
    }

    type UAnimInstance_NativeBeginPlayInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_NativeBeginPlayInvokerHandler: Option<UAnimInstance_NativeBeginPlayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_NativeBeginPlay_handler(handler: UAnimInstance_NativeBeginPlayInvoker){
        unsafe{ UAnimInstance_NativeBeginPlayInvokerHandler = Some(handler) };
    }

    type UAnimInstance_NativeInitializeAnimationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_NativeInitializeAnimationInvokerHandler: Option<UAnimInstance_NativeInitializeAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_NativeInitializeAnimation_handler(handler: UAnimInstance_NativeInitializeAnimationInvoker){
        unsafe{ UAnimInstance_NativeInitializeAnimationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_NativePostEvaluateAnimationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_NativePostEvaluateAnimationInvokerHandler: Option<UAnimInstance_NativePostEvaluateAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_NativePostEvaluateAnimation_handler(handler: UAnimInstance_NativePostEvaluateAnimationInvoker){
        unsafe{ UAnimInstance_NativePostEvaluateAnimationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_NativeThreadSafeUpdateAnimationInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UAnimInstance_NativeThreadSafeUpdateAnimationInvokerHandler: Option<UAnimInstance_NativeThreadSafeUpdateAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_NativeThreadSafeUpdateAnimation_handler(handler: UAnimInstance_NativeThreadSafeUpdateAnimationInvoker){
        unsafe{ UAnimInstance_NativeThreadSafeUpdateAnimationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_NativeUninitializeAnimationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_NativeUninitializeAnimationInvokerHandler: Option<UAnimInstance_NativeUninitializeAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_NativeUninitializeAnimation_handler(handler: UAnimInstance_NativeUninitializeAnimationInvoker){
        unsafe{ UAnimInstance_NativeUninitializeAnimationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_NativeUpdateAnimationInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UAnimInstance_NativeUpdateAnimationInvokerHandler: Option<UAnimInstance_NativeUpdateAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_NativeUpdateAnimation_handler(handler: UAnimInstance_NativeUpdateAnimationInvoker){
        unsafe{ UAnimInstance_NativeUpdateAnimationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_NeedsUpdateInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UAnimInstance_NeedsUpdateInvokerHandler: Option<UAnimInstance_NeedsUpdateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_NeedsUpdate_handler(handler: UAnimInstance_NeedsUpdateInvoker){
        unsafe{ UAnimInstance_NeedsUpdateInvokerHandler = Some(handler) };
    }

    type UAnimInstance_OnUROSkipTickAnimationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_OnUROSkipTickAnimationInvokerHandler: Option<UAnimInstance_OnUROSkipTickAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_OnUROSkipTickAnimation_handler(handler: UAnimInstance_OnUROSkipTickAnimationInvoker){
        unsafe{ UAnimInstance_OnUROSkipTickAnimationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_PCV_ShouldNotifyAboutNodesNotUsingFastPathInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UAnimInstance_PCV_ShouldNotifyAboutNodesNotUsingFastPathInvokerHandler: Option<UAnimInstance_PCV_ShouldNotifyAboutNodesNotUsingFastPathInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_PCV_ShouldNotifyAboutNodesNotUsingFastPath_handler(handler: UAnimInstance_PCV_ShouldNotifyAboutNodesNotUsingFastPathInvoker){
        unsafe{ UAnimInstance_PCV_ShouldNotifyAboutNodesNotUsingFastPathInvokerHandler = Some(handler) };
    }

    type UAnimInstance_PCV_ShouldWarnAboutNodesNotUsingFastPathInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UAnimInstance_PCV_ShouldWarnAboutNodesNotUsingFastPathInvokerHandler: Option<UAnimInstance_PCV_ShouldWarnAboutNodesNotUsingFastPathInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_PCV_ShouldWarnAboutNodesNotUsingFastPath_handler(handler: UAnimInstance_PCV_ShouldWarnAboutNodesNotUsingFastPathInvoker){
        unsafe{ UAnimInstance_PCV_ShouldWarnAboutNodesNotUsingFastPathInvokerHandler = Some(handler) };
    }

    type UAnimInstance_ParallelCanEvaluateInvoker = unsafe extern "C" fn(*mut c_void, *mut USkeletalMeshOpaque) -> bool;
    pub(super) static mut UAnimInstance_ParallelCanEvaluateInvokerHandler: Option<UAnimInstance_ParallelCanEvaluateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_ParallelCanEvaluate_handler(handler: UAnimInstance_ParallelCanEvaluateInvoker){
        unsafe{ UAnimInstance_ParallelCanEvaluateInvokerHandler = Some(handler) };
    }

    type UAnimInstance_ParallelUpdateAnimationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_ParallelUpdateAnimationInvokerHandler: Option<UAnimInstance_ParallelUpdateAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_ParallelUpdateAnimation_handler(handler: UAnimInstance_ParallelUpdateAnimationInvoker){
        unsafe{ UAnimInstance_ParallelUpdateAnimationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_PlaySlotAnimationAsDynamicMontageInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimSequenceBaseOpaque, UName, f32, f32, f32, i32, f32, f32) -> *mut UAnimMontageOpaque;
    pub(super) static mut UAnimInstance_PlaySlotAnimationAsDynamicMontageInvokerHandler: Option<UAnimInstance_PlaySlotAnimationAsDynamicMontageInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_PlaySlotAnimationAsDynamicMontage_handler(handler: UAnimInstance_PlaySlotAnimationAsDynamicMontageInvoker){
        unsafe{ UAnimInstance_PlaySlotAnimationAsDynamicMontageInvokerHandler = Some(handler) };
    }

    type UAnimInstance_PostEvaluateAnimationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_PostEvaluateAnimationInvokerHandler: Option<UAnimInstance_PostEvaluateAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_PostEvaluateAnimation_handler(handler: UAnimInstance_PostEvaluateAnimationInvoker){
        unsafe{ UAnimInstance_PostEvaluateAnimationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_PostInitPropertiesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_PostInitPropertiesInvokerHandler: Option<UAnimInstance_PostInitPropertiesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_PostInitProperties_handler(handler: UAnimInstance_PostInitPropertiesInvoker){
        unsafe{ UAnimInstance_PostInitPropertiesInvokerHandler = Some(handler) };
    }

    type UAnimInstance_PostUpdateAnimationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_PostUpdateAnimationInvokerHandler: Option<UAnimInstance_PostUpdateAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_PostUpdateAnimation_handler(handler: UAnimInstance_PostUpdateAnimationInvoker){
        unsafe{ UAnimInstance_PostUpdateAnimationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_PreEvaluateAnimationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_PreEvaluateAnimationInvokerHandler: Option<UAnimInstance_PreEvaluateAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_PreEvaluateAnimation_handler(handler: UAnimInstance_PreEvaluateAnimationInvoker){
        unsafe{ UAnimInstance_PreEvaluateAnimationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_PreUpdateLinkedInstancesInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UAnimInstance_PreUpdateLinkedInstancesInvokerHandler: Option<UAnimInstance_PreUpdateLinkedInstancesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_PreUpdateLinkedInstances_handler(handler: UAnimInstance_PreUpdateLinkedInstancesInvoker){
        unsafe{ UAnimInstance_PreUpdateLinkedInstancesInvokerHandler = Some(handler) };
    }

    type UAnimInstance_QueryAndMarkTransitionEventInvoker = unsafe extern "C" fn(*mut c_void, i32, i32, UName) -> bool;
    pub(super) static mut UAnimInstance_QueryAndMarkTransitionEventInvokerHandler: Option<UAnimInstance_QueryAndMarkTransitionEventInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_QueryAndMarkTransitionEvent_handler(handler: UAnimInstance_QueryAndMarkTransitionEventInvoker){
        unsafe{ UAnimInstance_QueryAndMarkTransitionEventInvokerHandler = Some(handler) };
    }

    type UAnimInstance_QueryTransitionEventInvoker = unsafe extern "C" fn(*mut c_void, i32, i32, UName) -> bool;
    pub(super) static mut UAnimInstance_QueryTransitionEventInvokerHandler: Option<UAnimInstance_QueryTransitionEventInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_QueryTransitionEvent_handler(handler: UAnimInstance_QueryTransitionEventInvoker){
        unsafe{ UAnimInstance_QueryTransitionEventInvokerHandler = Some(handler) };
    }

    type UAnimInstance_RecalcRequiredBonesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_RecalcRequiredBonesInvokerHandler: Option<UAnimInstance_RecalcRequiredBonesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_RecalcRequiredBones_handler(handler: UAnimInstance_RecalcRequiredBonesInvoker){
        unsafe{ UAnimInstance_RecalcRequiredBonesInvokerHandler = Some(handler) };
    }

    type UAnimInstance_RecordMachineWeightInvoker = unsafe extern "C" fn(*mut c_void, i32, f32);
    pub(super) static mut UAnimInstance_RecordMachineWeightInvokerHandler: Option<UAnimInstance_RecordMachineWeightInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_RecordMachineWeight_handler(handler: UAnimInstance_RecordMachineWeightInvoker){
        unsafe{ UAnimInstance_RecordMachineWeightInvokerHandler = Some(handler) };
    }

    type UAnimInstance_RecordStateWeightInvoker = unsafe extern "C" fn(*mut c_void, i32, i32, f32, f32);
    pub(super) static mut UAnimInstance_RecordStateWeightInvokerHandler: Option<UAnimInstance_RecordStateWeightInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_RecordStateWeight_handler(handler: UAnimInstance_RecordStateWeightInvoker){
        unsafe{ UAnimInstance_RecordStateWeightInvokerHandler = Some(handler) };
    }

    type UAnimInstance_RefreshCurvesInvoker = unsafe extern "C" fn(*mut c_void, *mut USkeletalMeshComponentOpaque);
    pub(super) static mut UAnimInstance_RefreshCurvesInvokerHandler: Option<UAnimInstance_RefreshCurvesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_RefreshCurves_handler(handler: UAnimInstance_RefreshCurvesInvoker){
        unsafe{ UAnimInstance_RefreshCurvesInvokerHandler = Some(handler) };
    }

    type UAnimInstance_RemoveExternalNotifyHandlerInvoker = unsafe extern "C" fn(*mut c_void, *mut UObjectOpaque, UName);
    pub(super) static mut UAnimInstance_RemoveExternalNotifyHandlerInvokerHandler: Option<UAnimInstance_RemoveExternalNotifyHandlerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_RemoveExternalNotifyHandler_handler(handler: UAnimInstance_RemoveExternalNotifyHandlerInvoker){
        unsafe{ UAnimInstance_RemoveExternalNotifyHandlerInvokerHandler = Some(handler) };
    }

    type UAnimInstance_RemovePoseSnapshotInvoker = unsafe extern "C" fn(*mut c_void, UName);
    pub(super) static mut UAnimInstance_RemovePoseSnapshotInvokerHandler: Option<UAnimInstance_RemovePoseSnapshotInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_RemovePoseSnapshot_handler(handler: UAnimInstance_RemovePoseSnapshotInvoker){
        unsafe{ UAnimInstance_RemovePoseSnapshotInvokerHandler = Some(handler) };
    }

    type UAnimInstance_RequestMontageInertializationInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimMontageOpaque, f32, *mut UBlendProfileOpaque);
    pub(super) static mut UAnimInstance_RequestMontageInertializationInvokerHandler: Option<UAnimInstance_RequestMontageInertializationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_RequestMontageInertialization_handler(handler: UAnimInstance_RequestMontageInertializationInvoker){
        unsafe{ UAnimInstance_RequestMontageInertializationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_RequestSlotGroupInertializationInvoker = unsafe extern "C" fn(*mut c_void, UName, f32, *mut UBlendProfileOpaque);
    pub(super) static mut UAnimInstance_RequestSlotGroupInertializationInvokerHandler: Option<UAnimInstance_RequestSlotGroupInertializationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_RequestSlotGroupInertialization_handler(handler: UAnimInstance_RequestSlotGroupInertializationInvoker){
        unsafe{ UAnimInstance_RequestSlotGroupInertializationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_SavePoseSnapshotInvoker = unsafe extern "C" fn(*mut c_void, UName);
    pub(super) static mut UAnimInstance_SavePoseSnapshotInvokerHandler: Option<UAnimInstance_SavePoseSnapshotInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_SavePoseSnapshot_handler(handler: UAnimInstance_SavePoseSnapshotInvoker){
        unsafe{ UAnimInstance_SavePoseSnapshotInvokerHandler = Some(handler) };
    }

    type UAnimInstance_SetMorphTargetInvoker = unsafe extern "C" fn(*mut c_void, UName, f32);
    pub(super) static mut UAnimInstance_SetMorphTargetInvokerHandler: Option<UAnimInstance_SetMorphTargetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_SetMorphTarget_handler(handler: UAnimInstance_SetMorphTargetInvoker){
        unsafe{ UAnimInstance_SetMorphTargetInvokerHandler = Some(handler) };
    }

    type UAnimInstance_SetPropagateNotifiesToLinkedInstancesInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UAnimInstance_SetPropagateNotifiesToLinkedInstancesInvokerHandler: Option<UAnimInstance_SetPropagateNotifiesToLinkedInstancesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_SetPropagateNotifiesToLinkedInstances_handler(handler: UAnimInstance_SetPropagateNotifiesToLinkedInstancesInvoker){
        unsafe{ UAnimInstance_SetPropagateNotifiesToLinkedInstancesInvokerHandler = Some(handler) };
    }

    type UAnimInstance_SetReceiveNotifiesFromLinkedInstancesInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UAnimInstance_SetReceiveNotifiesFromLinkedInstancesInvokerHandler: Option<UAnimInstance_SetReceiveNotifiesFromLinkedInstancesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_SetReceiveNotifiesFromLinkedInstances_handler(handler: UAnimInstance_SetReceiveNotifiesFromLinkedInstancesInvoker){
        unsafe{ UAnimInstance_SetReceiveNotifiesFromLinkedInstancesInvokerHandler = Some(handler) };
    }

    type UAnimInstance_SetUseMainInstanceMontageEvaluationDataInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UAnimInstance_SetUseMainInstanceMontageEvaluationDataInvokerHandler: Option<UAnimInstance_SetUseMainInstanceMontageEvaluationDataInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_SetUseMainInstanceMontageEvaluationData_handler(handler: UAnimInstance_SetUseMainInstanceMontageEvaluationDataInvoker){
        unsafe{ UAnimInstance_SetUseMainInstanceMontageEvaluationDataInvokerHandler = Some(handler) };
    }

    type UAnimInstance_ShouldExtractRootMotionInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UAnimInstance_ShouldExtractRootMotionInvokerHandler: Option<UAnimInstance_ShouldExtractRootMotionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_ShouldExtractRootMotion_handler(handler: UAnimInstance_ShouldExtractRootMotionInvoker){
        unsafe{ UAnimInstance_ShouldExtractRootMotionInvokerHandler = Some(handler) };
    }

    type UAnimInstance_ShouldTriggerAnimNotifyStateInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimNotifyStateOpaque) -> bool;
    pub(super) static mut UAnimInstance_ShouldTriggerAnimNotifyStateInvokerHandler: Option<UAnimInstance_ShouldTriggerAnimNotifyStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_ShouldTriggerAnimNotifyState_handler(handler: UAnimInstance_ShouldTriggerAnimNotifyStateInvoker){
        unsafe{ UAnimInstance_ShouldTriggerAnimNotifyStateInvokerHandler = Some(handler) };
    }

    type UAnimInstance_StopAllMontagesInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UAnimInstance_StopAllMontagesInvokerHandler: Option<UAnimInstance_StopAllMontagesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_StopAllMontages_handler(handler: UAnimInstance_StopAllMontagesInvoker){
        unsafe{ UAnimInstance_StopAllMontagesInvokerHandler = Some(handler) };
    }

    type UAnimInstance_StopSlotAnimationInvoker = unsafe extern "C" fn(*mut c_void, f32, UName);
    pub(super) static mut UAnimInstance_StopSlotAnimationInvokerHandler: Option<UAnimInstance_StopSlotAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_StopSlotAnimation_handler(handler: UAnimInstance_StopSlotAnimationInvoker){
        unsafe{ UAnimInstance_StopSlotAnimationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_TriggerAnimNotifiesInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UAnimInstance_TriggerAnimNotifiesInvokerHandler: Option<UAnimInstance_TriggerAnimNotifiesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_TriggerAnimNotifies_handler(handler: UAnimInstance_TriggerAnimNotifiesInvoker){
        unsafe{ UAnimInstance_TriggerAnimNotifiesInvokerHandler = Some(handler) };
    }

    type UAnimInstance_TriggerSingleAnimNotifyInvoker = unsafe extern "C" fn(*mut c_void, *mut FAnimNotifyEventOpaque);
    pub(super) static mut UAnimInstance_TriggerSingleAnimNotifyInvokerHandler: Option<UAnimInstance_TriggerSingleAnimNotifyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_TriggerSingleAnimNotify_handler(handler: UAnimInstance_TriggerSingleAnimNotifyInvoker){
        unsafe{ UAnimInstance_TriggerSingleAnimNotifyInvokerHandler = Some(handler) };
    }

    type UAnimInstance_TryGetPawnOwnerInvoker = unsafe extern "C" fn(*mut c_void) -> *mut APawnOpaque;
    pub(super) static mut UAnimInstance_TryGetPawnOwnerInvokerHandler: Option<UAnimInstance_TryGetPawnOwnerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_TryGetPawnOwner_handler(handler: UAnimInstance_TryGetPawnOwnerInvoker){
        unsafe{ UAnimInstance_TryGetPawnOwnerInvokerHandler = Some(handler) };
    }

    type UAnimInstance_UninitializeAnimationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_UninitializeAnimationInvokerHandler: Option<UAnimInstance_UninitializeAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_UninitializeAnimation_handler(handler: UAnimInstance_UninitializeAnimationInvoker){
        unsafe{ UAnimInstance_UninitializeAnimationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_UnlockAIResourcesInvoker = unsafe extern "C" fn(*mut c_void, bool, bool);
    pub(super) static mut UAnimInstance_UnlockAIResourcesInvokerHandler: Option<UAnimInstance_UnlockAIResourcesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_UnlockAIResources_handler(handler: UAnimInstance_UnlockAIResourcesInvoker){
        unsafe{ UAnimInstance_UnlockAIResourcesInvokerHandler = Some(handler) };
    }

    type UAnimInstance_UpdateCurvesPostEvaluationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimInstance_UpdateCurvesPostEvaluationInvokerHandler: Option<UAnimInstance_UpdateCurvesPostEvaluationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_UpdateCurvesPostEvaluation_handler(handler: UAnimInstance_UpdateCurvesPostEvaluationInvoker){
        unsafe{ UAnimInstance_UpdateCurvesPostEvaluationInvokerHandler = Some(handler) };
    }

    type UAnimInstance_WasAnimNotifyNameTriggeredInAnyStateInvoker = unsafe extern "C" fn(*mut c_void, UName) -> bool;
    pub(super) static mut UAnimInstance_WasAnimNotifyNameTriggeredInAnyStateInvokerHandler: Option<UAnimInstance_WasAnimNotifyNameTriggeredInAnyStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_WasAnimNotifyNameTriggeredInAnyState_handler(handler: UAnimInstance_WasAnimNotifyNameTriggeredInAnyStateInvoker){
        unsafe{ UAnimInstance_WasAnimNotifyNameTriggeredInAnyStateInvokerHandler = Some(handler) };
    }

    type UAnimInstance_WasAnimNotifyNameTriggeredInSourceStateInvoker = unsafe extern "C" fn(*mut c_void, i32, i32, UName) -> bool;
    pub(super) static mut UAnimInstance_WasAnimNotifyNameTriggeredInSourceStateInvokerHandler: Option<UAnimInstance_WasAnimNotifyNameTriggeredInSourceStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_WasAnimNotifyNameTriggeredInSourceState_handler(handler: UAnimInstance_WasAnimNotifyNameTriggeredInSourceStateInvoker){
        unsafe{ UAnimInstance_WasAnimNotifyNameTriggeredInSourceStateInvokerHandler = Some(handler) };
    }

    type UAnimInstance_WasAnimNotifyNameTriggeredInStateMachineInvoker = unsafe extern "C" fn(*mut c_void, i32, UName) -> bool;
    pub(super) static mut UAnimInstance_WasAnimNotifyNameTriggeredInStateMachineInvokerHandler: Option<UAnimInstance_WasAnimNotifyNameTriggeredInStateMachineInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimInstance_WasAnimNotifyNameTriggeredInStateMachine_handler(handler: UAnimInstance_WasAnimNotifyNameTriggeredInStateMachineInvoker){
        unsafe{ UAnimInstance_WasAnimNotifyNameTriggeredInStateMachineInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_CancelTransactionInvoker = unsafe extern "C" fn(i32);
    pub(super) static mut UKismetSystemLibrary_CancelTransactionInvokerHandler: Option<UKismetSystemLibrary_CancelTransactionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_CancelTransaction_handler(handler: UKismetSystemLibrary_CancelTransactionInvoker){
        unsafe{ UKismetSystemLibrary_CancelTransactionInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_CollectGarbageInvoker = unsafe extern "C" fn();
    pub(super) static mut UKismetSystemLibrary_CollectGarbageInvokerHandler: Option<UKismetSystemLibrary_CollectGarbageInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_CollectGarbage_handler(handler: UKismetSystemLibrary_CollectGarbageInvoker){
        unsafe{ UKismetSystemLibrary_CollectGarbageInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_ControlScreensaverInvoker = unsafe extern "C" fn(bool);
    pub(super) static mut UKismetSystemLibrary_ControlScreensaverInvokerHandler: Option<UKismetSystemLibrary_ControlScreensaverInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_ControlScreensaver_handler(handler: UKismetSystemLibrary_ControlScreensaverInvoker){
        unsafe{ UKismetSystemLibrary_ControlScreensaverInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_CreateCopyForUndoBufferInvoker = unsafe extern "C" fn(*mut UObjectOpaque);
    pub(super) static mut UKismetSystemLibrary_CreateCopyForUndoBufferInvokerHandler: Option<UKismetSystemLibrary_CreateCopyForUndoBufferInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_CreateCopyForUndoBuffer_handler(handler: UKismetSystemLibrary_CreateCopyForUndoBufferInvoker){
        unsafe{ UKismetSystemLibrary_CreateCopyForUndoBufferInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_DrawDebugCoordinateSystemInvoker = unsafe extern "C" fn(*mut UObjectOpaque, Vector3, Rotator, f32, f32, f32);
    pub(super) static mut UKismetSystemLibrary_DrawDebugCoordinateSystemInvokerHandler: Option<UKismetSystemLibrary_DrawDebugCoordinateSystemInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_DrawDebugCoordinateSystem_handler(handler: UKismetSystemLibrary_DrawDebugCoordinateSystemInvoker){
        unsafe{ UKismetSystemLibrary_DrawDebugCoordinateSystemInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_EndTransactionInvoker = unsafe extern "C" fn() -> i32;
    pub(super) static mut UKismetSystemLibrary_EndTransactionInvokerHandler: Option<UKismetSystemLibrary_EndTransactionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_EndTransaction_handler(handler: UKismetSystemLibrary_EndTransactionInvoker){
        unsafe{ UKismetSystemLibrary_EndTransactionInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_FlushDebugStringsInvoker = unsafe extern "C" fn(*mut UObjectOpaque);
    pub(super) static mut UKismetSystemLibrary_FlushDebugStringsInvokerHandler: Option<UKismetSystemLibrary_FlushDebugStringsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_FlushDebugStrings_handler(handler: UKismetSystemLibrary_FlushDebugStringsInvoker){
        unsafe{ UKismetSystemLibrary_FlushDebugStringsInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_FlushPersistentDebugLinesInvoker = unsafe extern "C" fn(*mut UObjectOpaque);
    pub(super) static mut UKismetSystemLibrary_FlushPersistentDebugLinesInvokerHandler: Option<UKismetSystemLibrary_FlushPersistentDebugLinesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_FlushPersistentDebugLines_handler(handler: UKismetSystemLibrary_FlushPersistentDebugLinesInvoker){
        unsafe{ UKismetSystemLibrary_FlushPersistentDebugLinesInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_ForceCloseAdBannerInvoker = unsafe extern "C" fn();
    pub(super) static mut UKismetSystemLibrary_ForceCloseAdBannerInvokerHandler: Option<UKismetSystemLibrary_ForceCloseAdBannerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_ForceCloseAdBanner_handler(handler: UKismetSystemLibrary_ForceCloseAdBannerInvoker){
        unsafe{ UKismetSystemLibrary_ForceCloseAdBannerInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_Generic_GetEditorPropertyInvoker = unsafe extern "C" fn(*mut UObjectOpaque, *mut FPropertyOpaque, *mut c_void, *mut FPropertyOpaque) -> bool;
    pub(super) static mut UKismetSystemLibrary_Generic_GetEditorPropertyInvokerHandler: Option<UKismetSystemLibrary_Generic_GetEditorPropertyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_Generic_GetEditorProperty_handler(handler: UKismetSystemLibrary_Generic_GetEditorPropertyInvoker){
        unsafe{ UKismetSystemLibrary_Generic_GetEditorPropertyInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_Generic_SetStructurePropertyByNameInvoker = unsafe extern "C" fn(*mut UObjectOpaque, UName, *mut c_void);
    pub(super) static mut UKismetSystemLibrary_Generic_SetStructurePropertyByNameInvokerHandler: Option<UKismetSystemLibrary_Generic_SetStructurePropertyByNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_Generic_SetStructurePropertyByName_handler(handler: UKismetSystemLibrary_Generic_SetStructurePropertyByNameInvoker){
        unsafe{ UKismetSystemLibrary_Generic_SetStructurePropertyByNameInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetAdIDCountInvoker = unsafe extern "C" fn() -> i32;
    pub(super) static mut UKismetSystemLibrary_GetAdIDCountInvokerHandler: Option<UKismetSystemLibrary_GetAdIDCountInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetAdIDCount_handler(handler: UKismetSystemLibrary_GetAdIDCountInvoker){
        unsafe{ UKismetSystemLibrary_GetAdIDCountInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetBuildConfigurationInvoker = unsafe extern "C" fn() -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetBuildConfigurationInvokerHandler: Option<UKismetSystemLibrary_GetBuildConfigurationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetBuildConfiguration_handler(handler: UKismetSystemLibrary_GetBuildConfigurationInvoker){
        unsafe{ UKismetSystemLibrary_GetBuildConfigurationInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetBuildVersionInvoker = unsafe extern "C" fn() -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetBuildVersionInvokerHandler: Option<UKismetSystemLibrary_GetBuildVersionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetBuildVersion_handler(handler: UKismetSystemLibrary_GetBuildVersionInvoker){
        unsafe{ UKismetSystemLibrary_GetBuildVersionInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetClassDisplayNameInvoker = unsafe extern "C" fn(*mut UClassOpaque) -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetClassDisplayNameInvokerHandler: Option<UKismetSystemLibrary_GetClassDisplayNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetClassDisplayName_handler(handler: UKismetSystemLibrary_GetClassDisplayNameInvoker){
        unsafe{ UKismetSystemLibrary_GetClassDisplayNameInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetCommandLineInvoker = unsafe extern "C" fn() -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetCommandLineInvokerHandler: Option<UKismetSystemLibrary_GetCommandLineInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetCommandLine_handler(handler: UKismetSystemLibrary_GetCommandLineInvoker){
        unsafe{ UKismetSystemLibrary_GetCommandLineInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetDefaultLanguageInvoker = unsafe extern "C" fn() -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetDefaultLanguageInvokerHandler: Option<UKismetSystemLibrary_GetDefaultLanguageInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetDefaultLanguage_handler(handler: UKismetSystemLibrary_GetDefaultLanguageInvoker){
        unsafe{ UKismetSystemLibrary_GetDefaultLanguageInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetDefaultLocaleInvoker = unsafe extern "C" fn() -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetDefaultLocaleInvokerHandler: Option<UKismetSystemLibrary_GetDefaultLocaleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetDefaultLocale_handler(handler: UKismetSystemLibrary_GetDefaultLocaleInvoker){
        unsafe{ UKismetSystemLibrary_GetDefaultLocaleInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetDeviceIdInvoker = unsafe extern "C" fn() -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetDeviceIdInvokerHandler: Option<UKismetSystemLibrary_GetDeviceIdInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetDeviceId_handler(handler: UKismetSystemLibrary_GetDeviceIdInvoker){
        unsafe{ UKismetSystemLibrary_GetDeviceIdInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetDisplayNameInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetDisplayNameInvokerHandler: Option<UKismetSystemLibrary_GetDisplayNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetDisplayName_handler(handler: UKismetSystemLibrary_GetDisplayNameInvoker){
        unsafe{ UKismetSystemLibrary_GetDisplayNameInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetEditorPropertyInvoker = unsafe extern "C" fn(*mut UObjectOpaque, UName, &mut i32) -> bool;
    pub(super) static mut UKismetSystemLibrary_GetEditorPropertyInvokerHandler: Option<UKismetSystemLibrary_GetEditorPropertyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetEditorProperty_handler(handler: UKismetSystemLibrary_GetEditorPropertyInvoker){
        unsafe{ UKismetSystemLibrary_GetEditorPropertyInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetEngineVersionInvoker = unsafe extern "C" fn() -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetEngineVersionInvokerHandler: Option<UKismetSystemLibrary_GetEngineVersionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetEngineVersion_handler(handler: UKismetSystemLibrary_GetEngineVersionInvoker){
        unsafe{ UKismetSystemLibrary_GetEngineVersionInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetFrameCountInvoker = unsafe extern "C" fn() -> i64;
    pub(super) static mut UKismetSystemLibrary_GetFrameCountInvokerHandler: Option<UKismetSystemLibrary_GetFrameCountInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetFrameCount_handler(handler: UKismetSystemLibrary_GetFrameCountInvoker){
        unsafe{ UKismetSystemLibrary_GetFrameCountInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetGameBundleIdInvoker = unsafe extern "C" fn() -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetGameBundleIdInvokerHandler: Option<UKismetSystemLibrary_GetGameBundleIdInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetGameBundleId_handler(handler: UKismetSystemLibrary_GetGameBundleIdInvoker){
        unsafe{ UKismetSystemLibrary_GetGameBundleIdInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetGameNameInvoker = unsafe extern "C" fn() -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetGameNameInvokerHandler: Option<UKismetSystemLibrary_GetGameNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetGameName_handler(handler: UKismetSystemLibrary_GetGameNameInvoker){
        unsafe{ UKismetSystemLibrary_GetGameNameInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetGameTimeInSecondsInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> f64;
    pub(super) static mut UKismetSystemLibrary_GetGameTimeInSecondsInvokerHandler: Option<UKismetSystemLibrary_GetGameTimeInSecondsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetGameTimeInSeconds_handler(handler: UKismetSystemLibrary_GetGameTimeInSecondsInvoker){
        unsafe{ UKismetSystemLibrary_GetGameTimeInSecondsInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetGamepadControllerNameInvoker = unsafe extern "C" fn(i32) -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetGamepadControllerNameInvokerHandler: Option<UKismetSystemLibrary_GetGamepadControllerNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetGamepadControllerName_handler(handler: UKismetSystemLibrary_GetGamepadControllerNameInvoker){
        unsafe{ UKismetSystemLibrary_GetGamepadControllerNameInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetLocalCurrencyCodeInvoker = unsafe extern "C" fn() -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetLocalCurrencyCodeInvokerHandler: Option<UKismetSystemLibrary_GetLocalCurrencyCodeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetLocalCurrencyCode_handler(handler: UKismetSystemLibrary_GetLocalCurrencyCodeInvoker){
        unsafe{ UKismetSystemLibrary_GetLocalCurrencyCodeInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetLocalCurrencySymbolInvoker = unsafe extern "C" fn() -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetLocalCurrencySymbolInvokerHandler: Option<UKismetSystemLibrary_GetLocalCurrencySymbolInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetLocalCurrencySymbol_handler(handler: UKismetSystemLibrary_GetLocalCurrencySymbolInvoker){
        unsafe{ UKismetSystemLibrary_GetLocalCurrencySymbolInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetMinYResolutionFor3DViewInvoker = unsafe extern "C" fn() -> i32;
    pub(super) static mut UKismetSystemLibrary_GetMinYResolutionFor3DViewInvokerHandler: Option<UKismetSystemLibrary_GetMinYResolutionFor3DViewInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetMinYResolutionFor3DView_handler(handler: UKismetSystemLibrary_GetMinYResolutionFor3DViewInvoker){
        unsafe{ UKismetSystemLibrary_GetMinYResolutionFor3DViewInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetMinYResolutionForUIInvoker = unsafe extern "C" fn() -> i32;
    pub(super) static mut UKismetSystemLibrary_GetMinYResolutionForUIInvokerHandler: Option<UKismetSystemLibrary_GetMinYResolutionForUIInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetMinYResolutionForUI_handler(handler: UKismetSystemLibrary_GetMinYResolutionForUIInvoker){
        unsafe{ UKismetSystemLibrary_GetMinYResolutionForUIInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetObjectNameInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetObjectNameInvokerHandler: Option<UKismetSystemLibrary_GetObjectNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetObjectName_handler(handler: UKismetSystemLibrary_GetObjectNameInvoker){
        unsafe{ UKismetSystemLibrary_GetObjectNameInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetOuterObjectInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> *mut UObjectOpaque;
    pub(super) static mut UKismetSystemLibrary_GetOuterObjectInvokerHandler: Option<UKismetSystemLibrary_GetOuterObjectInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetOuterObject_handler(handler: UKismetSystemLibrary_GetOuterObjectInvoker){
        unsafe{ UKismetSystemLibrary_GetOuterObjectInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetPathNameInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetPathNameInvokerHandler: Option<UKismetSystemLibrary_GetPathNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetPathName_handler(handler: UKismetSystemLibrary_GetPathNameInvoker){
        unsafe{ UKismetSystemLibrary_GetPathNameInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetPlatformUserDirInvoker = unsafe extern "C" fn() -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetPlatformUserDirInvokerHandler: Option<UKismetSystemLibrary_GetPlatformUserDirInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetPlatformUserDir_handler(handler: UKismetSystemLibrary_GetPlatformUserDirInvoker){
        unsafe{ UKismetSystemLibrary_GetPlatformUserDirInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetPlatformUserNameInvoker = unsafe extern "C" fn() -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetPlatformUserNameInvokerHandler: Option<UKismetSystemLibrary_GetPlatformUserNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetPlatformUserName_handler(handler: UKismetSystemLibrary_GetPlatformUserNameInvoker){
        unsafe{ UKismetSystemLibrary_GetPlatformUserNameInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetProjectContentDirectoryInvoker = unsafe extern "C" fn() -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetProjectContentDirectoryInvokerHandler: Option<UKismetSystemLibrary_GetProjectContentDirectoryInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetProjectContentDirectory_handler(handler: UKismetSystemLibrary_GetProjectContentDirectoryInvoker){
        unsafe{ UKismetSystemLibrary_GetProjectContentDirectoryInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetProjectDirectoryInvoker = unsafe extern "C" fn() -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetProjectDirectoryInvokerHandler: Option<UKismetSystemLibrary_GetProjectDirectoryInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetProjectDirectory_handler(handler: UKismetSystemLibrary_GetProjectDirectoryInvoker){
        unsafe{ UKismetSystemLibrary_GetProjectDirectoryInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetProjectSavedDirectoryInvoker = unsafe extern "C" fn() -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetProjectSavedDirectoryInvokerHandler: Option<UKismetSystemLibrary_GetProjectSavedDirectoryInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetProjectSavedDirectory_handler(handler: UKismetSystemLibrary_GetProjectSavedDirectoryInvoker){
        unsafe{ UKismetSystemLibrary_GetProjectSavedDirectoryInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetRenderingDetailModeInvoker = unsafe extern "C" fn() -> i32;
    pub(super) static mut UKismetSystemLibrary_GetRenderingDetailModeInvokerHandler: Option<UKismetSystemLibrary_GetRenderingDetailModeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetRenderingDetailMode_handler(handler: UKismetSystemLibrary_GetRenderingDetailModeInvoker){
        unsafe{ UKismetSystemLibrary_GetRenderingDetailModeInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetRenderingMaterialQualityLevelInvoker = unsafe extern "C" fn() -> i32;
    pub(super) static mut UKismetSystemLibrary_GetRenderingMaterialQualityLevelInvokerHandler: Option<UKismetSystemLibrary_GetRenderingMaterialQualityLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetRenderingMaterialQualityLevel_handler(handler: UKismetSystemLibrary_GetRenderingMaterialQualityLevelInvoker){
        unsafe{ UKismetSystemLibrary_GetRenderingMaterialQualityLevelInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetSystemPathInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetSystemPathInvokerHandler: Option<UKismetSystemLibrary_GetSystemPathInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetSystemPath_handler(handler: UKismetSystemLibrary_GetSystemPathInvoker){
        unsafe{ UKismetSystemLibrary_GetSystemPathInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetUniqueDeviceIdInvoker = unsafe extern "C" fn() -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_GetUniqueDeviceIdInvokerHandler: Option<UKismetSystemLibrary_GetUniqueDeviceIdInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetUniqueDeviceId_handler(handler: UKismetSystemLibrary_GetUniqueDeviceIdInvoker){
        unsafe{ UKismetSystemLibrary_GetUniqueDeviceIdInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_GetVolumeButtonsHandledBySystemInvoker = unsafe extern "C" fn() -> bool;
    pub(super) static mut UKismetSystemLibrary_GetVolumeButtonsHandledBySystemInvokerHandler: Option<UKismetSystemLibrary_GetVolumeButtonsHandledBySystemInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_GetVolumeButtonsHandledBySystem_handler(handler: UKismetSystemLibrary_GetVolumeButtonsHandledBySystemInvoker){
        unsafe{ UKismetSystemLibrary_GetVolumeButtonsHandledBySystemInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_HasMultipleLocalPlayersInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> bool;
    pub(super) static mut UKismetSystemLibrary_HasMultipleLocalPlayersInvokerHandler: Option<UKismetSystemLibrary_HasMultipleLocalPlayersInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_HasMultipleLocalPlayers_handler(handler: UKismetSystemLibrary_HasMultipleLocalPlayersInvoker){
        unsafe{ UKismetSystemLibrary_HasMultipleLocalPlayersInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_HideAdBannerInvoker = unsafe extern "C" fn();
    pub(super) static mut UKismetSystemLibrary_HideAdBannerInvokerHandler: Option<UKismetSystemLibrary_HideAdBannerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_HideAdBanner_handler(handler: UKismetSystemLibrary_HideAdBannerInvoker){
        unsafe{ UKismetSystemLibrary_HideAdBannerInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_IsControllerAssignedToGamepadInvoker = unsafe extern "C" fn(i32) -> bool;
    pub(super) static mut UKismetSystemLibrary_IsControllerAssignedToGamepadInvokerHandler: Option<UKismetSystemLibrary_IsControllerAssignedToGamepadInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_IsControllerAssignedToGamepad_handler(handler: UKismetSystemLibrary_IsControllerAssignedToGamepadInvoker){
        unsafe{ UKismetSystemLibrary_IsControllerAssignedToGamepadInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_IsDedicatedServerInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> bool;
    pub(super) static mut UKismetSystemLibrary_IsDedicatedServerInvokerHandler: Option<UKismetSystemLibrary_IsDedicatedServerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_IsDedicatedServer_handler(handler: UKismetSystemLibrary_IsDedicatedServerInvoker){
        unsafe{ UKismetSystemLibrary_IsDedicatedServerInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_IsInterstitialAdAvailableInvoker = unsafe extern "C" fn() -> bool;
    pub(super) static mut UKismetSystemLibrary_IsInterstitialAdAvailableInvokerHandler: Option<UKismetSystemLibrary_IsInterstitialAdAvailableInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_IsInterstitialAdAvailable_handler(handler: UKismetSystemLibrary_IsInterstitialAdAvailableInvoker){
        unsafe{ UKismetSystemLibrary_IsInterstitialAdAvailableInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_IsInterstitialAdRequestedInvoker = unsafe extern "C" fn() -> bool;
    pub(super) static mut UKismetSystemLibrary_IsInterstitialAdRequestedInvokerHandler: Option<UKismetSystemLibrary_IsInterstitialAdRequestedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_IsInterstitialAdRequested_handler(handler: UKismetSystemLibrary_IsInterstitialAdRequestedInvoker){
        unsafe{ UKismetSystemLibrary_IsInterstitialAdRequestedInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_IsLoggedInInvoker = unsafe extern "C" fn(*mut APlayerControllerOpaque) -> bool;
    pub(super) static mut UKismetSystemLibrary_IsLoggedInInvokerHandler: Option<UKismetSystemLibrary_IsLoggedInInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_IsLoggedIn_handler(handler: UKismetSystemLibrary_IsLoggedInInvoker){
        unsafe{ UKismetSystemLibrary_IsLoggedInInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_IsPackagedForDistributionInvoker = unsafe extern "C" fn() -> bool;
    pub(super) static mut UKismetSystemLibrary_IsPackagedForDistributionInvokerHandler: Option<UKismetSystemLibrary_IsPackagedForDistributionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_IsPackagedForDistribution_handler(handler: UKismetSystemLibrary_IsPackagedForDistributionInvoker){
        unsafe{ UKismetSystemLibrary_IsPackagedForDistributionInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_IsScreensaverEnabledInvoker = unsafe extern "C" fn() -> bool;
    pub(super) static mut UKismetSystemLibrary_IsScreensaverEnabledInvokerHandler: Option<UKismetSystemLibrary_IsScreensaverEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_IsScreensaverEnabled_handler(handler: UKismetSystemLibrary_IsScreensaverEnabledInvoker){
        unsafe{ UKismetSystemLibrary_IsScreensaverEnabledInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_IsServerInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> bool;
    pub(super) static mut UKismetSystemLibrary_IsServerInvokerHandler: Option<UKismetSystemLibrary_IsServerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_IsServer_handler(handler: UKismetSystemLibrary_IsServerInvoker){
        unsafe{ UKismetSystemLibrary_IsServerInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_IsStandaloneInvoker = unsafe extern "C" fn(*mut UObjectOpaque) -> bool;
    pub(super) static mut UKismetSystemLibrary_IsStandaloneInvokerHandler: Option<UKismetSystemLibrary_IsStandaloneInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_IsStandalone_handler(handler: UKismetSystemLibrary_IsStandaloneInvoker){
        unsafe{ UKismetSystemLibrary_IsStandaloneInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_IsUnattendedInvoker = unsafe extern "C" fn() -> bool;
    pub(super) static mut UKismetSystemLibrary_IsUnattendedInvokerHandler: Option<UKismetSystemLibrary_IsUnattendedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_IsUnattended_handler(handler: UKismetSystemLibrary_IsUnattendedInvoker){
        unsafe{ UKismetSystemLibrary_IsUnattendedInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_K2_ClearTimerInvoker = unsafe extern "C" fn(*mut UObjectOpaque, NativeString);
    pub(super) static mut UKismetSystemLibrary_K2_ClearTimerInvokerHandler: Option<UKismetSystemLibrary_K2_ClearTimerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_K2_ClearTimer_handler(handler: UKismetSystemLibrary_K2_ClearTimerInvoker){
        unsafe{ UKismetSystemLibrary_K2_ClearTimerInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_K2_GetTimerElapsedTimeInvoker = unsafe extern "C" fn(*mut UObjectOpaque, NativeString) -> f32;
    pub(super) static mut UKismetSystemLibrary_K2_GetTimerElapsedTimeInvokerHandler: Option<UKismetSystemLibrary_K2_GetTimerElapsedTimeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_K2_GetTimerElapsedTime_handler(handler: UKismetSystemLibrary_K2_GetTimerElapsedTimeInvoker){
        unsafe{ UKismetSystemLibrary_K2_GetTimerElapsedTimeInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_K2_GetTimerRemainingTimeInvoker = unsafe extern "C" fn(*mut UObjectOpaque, NativeString) -> f32;
    pub(super) static mut UKismetSystemLibrary_K2_GetTimerRemainingTimeInvokerHandler: Option<UKismetSystemLibrary_K2_GetTimerRemainingTimeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_K2_GetTimerRemainingTime_handler(handler: UKismetSystemLibrary_K2_GetTimerRemainingTimeInvoker){
        unsafe{ UKismetSystemLibrary_K2_GetTimerRemainingTimeInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_K2_IsTimerActiveInvoker = unsafe extern "C" fn(*mut UObjectOpaque, NativeString) -> bool;
    pub(super) static mut UKismetSystemLibrary_K2_IsTimerActiveInvokerHandler: Option<UKismetSystemLibrary_K2_IsTimerActiveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_K2_IsTimerActive_handler(handler: UKismetSystemLibrary_K2_IsTimerActiveInvoker){
        unsafe{ UKismetSystemLibrary_K2_IsTimerActiveInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_K2_IsTimerPausedInvoker = unsafe extern "C" fn(*mut UObjectOpaque, NativeString) -> bool;
    pub(super) static mut UKismetSystemLibrary_K2_IsTimerPausedInvokerHandler: Option<UKismetSystemLibrary_K2_IsTimerPausedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_K2_IsTimerPaused_handler(handler: UKismetSystemLibrary_K2_IsTimerPausedInvoker){
        unsafe{ UKismetSystemLibrary_K2_IsTimerPausedInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_K2_PauseTimerInvoker = unsafe extern "C" fn(*mut UObjectOpaque, NativeString);
    pub(super) static mut UKismetSystemLibrary_K2_PauseTimerInvokerHandler: Option<UKismetSystemLibrary_K2_PauseTimerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_K2_PauseTimer_handler(handler: UKismetSystemLibrary_K2_PauseTimerInvoker){
        unsafe{ UKismetSystemLibrary_K2_PauseTimerInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_K2_TimerExistsInvoker = unsafe extern "C" fn(*mut UObjectOpaque, NativeString) -> bool;
    pub(super) static mut UKismetSystemLibrary_K2_TimerExistsInvokerHandler: Option<UKismetSystemLibrary_K2_TimerExistsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_K2_TimerExists_handler(handler: UKismetSystemLibrary_K2_TimerExistsInvoker){
        unsafe{ UKismetSystemLibrary_K2_TimerExistsInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_K2_UnPauseTimerInvoker = unsafe extern "C" fn(*mut UObjectOpaque, NativeString);
    pub(super) static mut UKismetSystemLibrary_K2_UnPauseTimerInvokerHandler: Option<UKismetSystemLibrary_K2_UnPauseTimerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_K2_UnPauseTimer_handler(handler: UKismetSystemLibrary_K2_UnPauseTimerInvoker){
        unsafe{ UKismetSystemLibrary_K2_UnPauseTimerInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_LoadInterstitialAdInvoker = unsafe extern "C" fn(i32);
    pub(super) static mut UKismetSystemLibrary_LoadInterstitialAdInvokerHandler: Option<UKismetSystemLibrary_LoadInterstitialAdInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_LoadInterstitialAd_handler(handler: UKismetSystemLibrary_LoadInterstitialAdInvoker){
        unsafe{ UKismetSystemLibrary_LoadInterstitialAdInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_MakeLiteralBoolInvoker = unsafe extern "C" fn(bool) -> bool;
    pub(super) static mut UKismetSystemLibrary_MakeLiteralBoolInvokerHandler: Option<UKismetSystemLibrary_MakeLiteralBoolInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_MakeLiteralBool_handler(handler: UKismetSystemLibrary_MakeLiteralBoolInvoker){
        unsafe{ UKismetSystemLibrary_MakeLiteralBoolInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_MakeLiteralByteInvoker = unsafe extern "C" fn(u8) -> u8;
    pub(super) static mut UKismetSystemLibrary_MakeLiteralByteInvokerHandler: Option<UKismetSystemLibrary_MakeLiteralByteInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_MakeLiteralByte_handler(handler: UKismetSystemLibrary_MakeLiteralByteInvoker){
        unsafe{ UKismetSystemLibrary_MakeLiteralByteInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_MakeLiteralDoubleInvoker = unsafe extern "C" fn(f64) -> f64;
    pub(super) static mut UKismetSystemLibrary_MakeLiteralDoubleInvokerHandler: Option<UKismetSystemLibrary_MakeLiteralDoubleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_MakeLiteralDouble_handler(handler: UKismetSystemLibrary_MakeLiteralDoubleInvoker){
        unsafe{ UKismetSystemLibrary_MakeLiteralDoubleInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_MakeLiteralIntInvoker = unsafe extern "C" fn(i32) -> i32;
    pub(super) static mut UKismetSystemLibrary_MakeLiteralIntInvokerHandler: Option<UKismetSystemLibrary_MakeLiteralIntInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_MakeLiteralInt_handler(handler: UKismetSystemLibrary_MakeLiteralIntInvoker){
        unsafe{ UKismetSystemLibrary_MakeLiteralIntInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_MakeLiteralInt64Invoker = unsafe extern "C" fn(i64) -> i64;
    pub(super) static mut UKismetSystemLibrary_MakeLiteralInt64InvokerHandler: Option<UKismetSystemLibrary_MakeLiteralInt64Invoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_MakeLiteralInt64_handler(handler: UKismetSystemLibrary_MakeLiteralInt64Invoker){
        unsafe{ UKismetSystemLibrary_MakeLiteralInt64InvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_MakeLiteralNameInvoker = unsafe extern "C" fn(UName) -> UName;
    pub(super) static mut UKismetSystemLibrary_MakeLiteralNameInvokerHandler: Option<UKismetSystemLibrary_MakeLiteralNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_MakeLiteralName_handler(handler: UKismetSystemLibrary_MakeLiteralNameInvoker){
        unsafe{ UKismetSystemLibrary_MakeLiteralNameInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_MakeLiteralStringInvoker = unsafe extern "C" fn(NativeString) -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_MakeLiteralStringInvokerHandler: Option<UKismetSystemLibrary_MakeLiteralStringInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_MakeLiteralString_handler(handler: UKismetSystemLibrary_MakeLiteralStringInvoker){
        unsafe{ UKismetSystemLibrary_MakeLiteralStringInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_MakeLiteralTextInvoker = unsafe extern "C" fn(NativeString) -> *const std::os::raw::c_char;
    pub(super) static mut UKismetSystemLibrary_MakeLiteralTextInvokerHandler: Option<UKismetSystemLibrary_MakeLiteralTextInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_MakeLiteralText_handler(handler: UKismetSystemLibrary_MakeLiteralTextInvoker){
        unsafe{ UKismetSystemLibrary_MakeLiteralTextInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_QuitEditorInvoker = unsafe extern "C" fn();
    pub(super) static mut UKismetSystemLibrary_QuitEditorInvokerHandler: Option<UKismetSystemLibrary_QuitEditorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_QuitEditor_handler(handler: UKismetSystemLibrary_QuitEditorInvoker){
        unsafe{ UKismetSystemLibrary_QuitEditorInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_RegisterForRemoteNotificationsInvoker = unsafe extern "C" fn();
    pub(super) static mut UKismetSystemLibrary_RegisterForRemoteNotificationsInvokerHandler: Option<UKismetSystemLibrary_RegisterForRemoteNotificationsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_RegisterForRemoteNotifications_handler(handler: UKismetSystemLibrary_RegisterForRemoteNotificationsInvoker){
        unsafe{ UKismetSystemLibrary_RegisterForRemoteNotificationsInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_ResetGamepadAssignmentToControllerInvoker = unsafe extern "C" fn(i32);
    pub(super) static mut UKismetSystemLibrary_ResetGamepadAssignmentToControllerInvokerHandler: Option<UKismetSystemLibrary_ResetGamepadAssignmentToControllerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_ResetGamepadAssignmentToController_handler(handler: UKismetSystemLibrary_ResetGamepadAssignmentToControllerInvoker){
        unsafe{ UKismetSystemLibrary_ResetGamepadAssignmentToControllerInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_ResetGamepadAssignmentsInvoker = unsafe extern "C" fn();
    pub(super) static mut UKismetSystemLibrary_ResetGamepadAssignmentsInvokerHandler: Option<UKismetSystemLibrary_ResetGamepadAssignmentsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_ResetGamepadAssignments_handler(handler: UKismetSystemLibrary_ResetGamepadAssignmentsInvoker){
        unsafe{ UKismetSystemLibrary_ResetGamepadAssignmentsInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_SetBoolPropertyByNameInvoker = unsafe extern "C" fn(*mut UObjectOpaque, UName, bool);
    pub(super) static mut UKismetSystemLibrary_SetBoolPropertyByNameInvokerHandler: Option<UKismetSystemLibrary_SetBoolPropertyByNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_SetBoolPropertyByName_handler(handler: UKismetSystemLibrary_SetBoolPropertyByNameInvoker){
        unsafe{ UKismetSystemLibrary_SetBoolPropertyByNameInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_SetBytePropertyByNameInvoker = unsafe extern "C" fn(*mut UObjectOpaque, UName, u8);
    pub(super) static mut UKismetSystemLibrary_SetBytePropertyByNameInvokerHandler: Option<UKismetSystemLibrary_SetBytePropertyByNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_SetBytePropertyByName_handler(handler: UKismetSystemLibrary_SetBytePropertyByNameInvoker){
        unsafe{ UKismetSystemLibrary_SetBytePropertyByNameInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_SetDoublePropertyByNameInvoker = unsafe extern "C" fn(*mut UObjectOpaque, UName, f64);
    pub(super) static mut UKismetSystemLibrary_SetDoublePropertyByNameInvokerHandler: Option<UKismetSystemLibrary_SetDoublePropertyByNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_SetDoublePropertyByName_handler(handler: UKismetSystemLibrary_SetDoublePropertyByNameInvoker){
        unsafe{ UKismetSystemLibrary_SetDoublePropertyByNameInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_SetGamepadsBlockDeviceFeedbackInvoker = unsafe extern "C" fn(bool);
    pub(super) static mut UKismetSystemLibrary_SetGamepadsBlockDeviceFeedbackInvokerHandler: Option<UKismetSystemLibrary_SetGamepadsBlockDeviceFeedbackInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_SetGamepadsBlockDeviceFeedback_handler(handler: UKismetSystemLibrary_SetGamepadsBlockDeviceFeedbackInvoker){
        unsafe{ UKismetSystemLibrary_SetGamepadsBlockDeviceFeedbackInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_SetInt64PropertyByNameInvoker = unsafe extern "C" fn(*mut UObjectOpaque, UName, i64);
    pub(super) static mut UKismetSystemLibrary_SetInt64PropertyByNameInvokerHandler: Option<UKismetSystemLibrary_SetInt64PropertyByNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_SetInt64PropertyByName_handler(handler: UKismetSystemLibrary_SetInt64PropertyByNameInvoker){
        unsafe{ UKismetSystemLibrary_SetInt64PropertyByNameInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_SetIntPropertyByNameInvoker = unsafe extern "C" fn(*mut UObjectOpaque, UName, i32);
    pub(super) static mut UKismetSystemLibrary_SetIntPropertyByNameInvokerHandler: Option<UKismetSystemLibrary_SetIntPropertyByNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_SetIntPropertyByName_handler(handler: UKismetSystemLibrary_SetIntPropertyByNameInvoker){
        unsafe{ UKismetSystemLibrary_SetIntPropertyByNameInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_SetObjectPropertyByNameInvoker = unsafe extern "C" fn(*mut UObjectOpaque, UName, *mut UObjectOpaque);
    pub(super) static mut UKismetSystemLibrary_SetObjectPropertyByNameInvokerHandler: Option<UKismetSystemLibrary_SetObjectPropertyByNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_SetObjectPropertyByName_handler(handler: UKismetSystemLibrary_SetObjectPropertyByNameInvoker){
        unsafe{ UKismetSystemLibrary_SetObjectPropertyByNameInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_SetSuppressViewportTransitionMessageInvoker = unsafe extern "C" fn(*mut UObjectOpaque, bool);
    pub(super) static mut UKismetSystemLibrary_SetSuppressViewportTransitionMessageInvokerHandler: Option<UKismetSystemLibrary_SetSuppressViewportTransitionMessageInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_SetSuppressViewportTransitionMessage_handler(handler: UKismetSystemLibrary_SetSuppressViewportTransitionMessageInvoker){
        unsafe{ UKismetSystemLibrary_SetSuppressViewportTransitionMessageInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_SetVolumeButtonsHandledBySystemInvoker = unsafe extern "C" fn(bool);
    pub(super) static mut UKismetSystemLibrary_SetVolumeButtonsHandledBySystemInvokerHandler: Option<UKismetSystemLibrary_SetVolumeButtonsHandledBySystemInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_SetVolumeButtonsHandledBySystem_handler(handler: UKismetSystemLibrary_SetVolumeButtonsHandledBySystemInvoker){
        unsafe{ UKismetSystemLibrary_SetVolumeButtonsHandledBySystemInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_ShowAdBannerInvoker = unsafe extern "C" fn(i32, bool);
    pub(super) static mut UKismetSystemLibrary_ShowAdBannerInvokerHandler: Option<UKismetSystemLibrary_ShowAdBannerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_ShowAdBanner_handler(handler: UKismetSystemLibrary_ShowAdBannerInvoker){
        unsafe{ UKismetSystemLibrary_ShowAdBannerInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_ShowInterstitialAdInvoker = unsafe extern "C" fn();
    pub(super) static mut UKismetSystemLibrary_ShowInterstitialAdInvokerHandler: Option<UKismetSystemLibrary_ShowInterstitialAdInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_ShowInterstitialAd_handler(handler: UKismetSystemLibrary_ShowInterstitialAdInvoker){
        unsafe{ UKismetSystemLibrary_ShowInterstitialAdInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreenInvoker = unsafe extern "C" fn(*mut APlayerControllerOpaque);
    pub(super) static mut UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreenInvokerHandler: Option<UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreenInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreen_handler(handler: UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreenInvoker){
        unsafe{ UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreenInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_SnapshotObjectInvoker = unsafe extern "C" fn(*mut UObjectOpaque);
    pub(super) static mut UKismetSystemLibrary_SnapshotObjectInvokerHandler: Option<UKismetSystemLibrary_SnapshotObjectInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_SnapshotObject_handler(handler: UKismetSystemLibrary_SnapshotObjectInvoker){
        unsafe{ UKismetSystemLibrary_SnapshotObjectInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_TransactObjectInvoker = unsafe extern "C" fn(*mut UObjectOpaque);
    pub(super) static mut UKismetSystemLibrary_TransactObjectInvokerHandler: Option<UKismetSystemLibrary_TransactObjectInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_TransactObject_handler(handler: UKismetSystemLibrary_TransactObjectInvoker){
        unsafe{ UKismetSystemLibrary_TransactObjectInvokerHandler = Some(handler) };
    }

    type UKismetSystemLibrary_UnregisterForRemoteNotificationsInvoker = unsafe extern "C" fn();
    pub(super) static mut UKismetSystemLibrary_UnregisterForRemoteNotificationsInvokerHandler: Option<UKismetSystemLibrary_UnregisterForRemoteNotificationsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UKismetSystemLibrary_UnregisterForRemoteNotifications_handler(handler: UKismetSystemLibrary_UnregisterForRemoteNotificationsInvoker){
        unsafe{ UKismetSystemLibrary_UnregisterForRemoteNotificationsInvokerHandler = Some(handler) };
    }

    type UAnimMontage_AddAnimCompositeSectionInvoker = unsafe extern "C" fn(*mut c_void, UName, f32) -> i32;
    pub(super) static mut UAnimMontage_AddAnimCompositeSectionInvokerHandler: Option<UAnimMontage_AddAnimCompositeSectionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_AddAnimCompositeSection_handler(handler: UAnimMontage_AddAnimCompositeSectionInvoker){
        unsafe{ UAnimMontage_AddAnimCompositeSectionInvokerHandler = Some(handler) };
    }

    type UAnimMontage_CalculateSequenceLengthInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UAnimMontage_CalculateSequenceLengthInvokerHandler: Option<UAnimMontage_CalculateSequenceLengthInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_CalculateSequenceLength_handler(handler: UAnimMontage_CalculateSequenceLengthInvoker){
        unsafe{ UAnimMontage_CalculateSequenceLengthInvokerHandler = Some(handler) };
    }

    type UAnimMontage_CanBeUsedInCompositionInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UAnimMontage_CanBeUsedInCompositionInvokerHandler: Option<UAnimMontage_CanBeUsedInCompositionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_CanBeUsedInComposition_handler(handler: UAnimMontage_CanBeUsedInCompositionInvoker){
        unsafe{ UAnimMontage_CanBeUsedInCompositionInvokerHandler = Some(handler) };
    }

    type UAnimMontage_CanUseMarkerSyncInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UAnimMontage_CanUseMarkerSyncInvokerHandler: Option<UAnimMontage_CanUseMarkerSyncInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_CanUseMarkerSync_handler(handler: UAnimMontage_CanUseMarkerSyncInvoker){
        unsafe{ UAnimMontage_CanUseMarkerSyncInvokerHandler = Some(handler) };
    }

    type UAnimMontage_CreateSlotAnimationAsDynamicMontageInvoker = unsafe extern "C" fn(*mut UAnimSequenceBaseOpaque, UName, f32, f32, f32, i32, f32, f32) -> *mut UAnimMontageOpaque;
    pub(super) static mut UAnimMontage_CreateSlotAnimationAsDynamicMontageInvokerHandler: Option<UAnimMontage_CreateSlotAnimationAsDynamicMontageInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_CreateSlotAnimationAsDynamicMontage_handler(handler: UAnimMontage_CreateSlotAnimationAsDynamicMontageInvoker){
        unsafe{ UAnimMontage_CreateSlotAnimationAsDynamicMontageInvokerHandler = Some(handler) };
    }

    type UAnimMontage_DeleteAnimCompositeSectionInvoker = unsafe extern "C" fn(*mut c_void, i32) -> bool;
    pub(super) static mut UAnimMontage_DeleteAnimCompositeSectionInvokerHandler: Option<UAnimMontage_DeleteAnimCompositeSectionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_DeleteAnimCompositeSection_handler(handler: UAnimMontage_DeleteAnimCompositeSectionInvoker){
        unsafe{ UAnimMontage_DeleteAnimCompositeSectionInvokerHandler = Some(handler) };
    }

    type UAnimMontage_ExtractRootMotionFromTrackRangeInvoker = unsafe extern "C" fn(*mut c_void, f32, f32) -> Transform;
    pub(super) static mut UAnimMontage_ExtractRootMotionFromTrackRangeInvokerHandler: Option<UAnimMontage_ExtractRootMotionFromTrackRangeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_ExtractRootMotionFromTrackRange_handler(handler: UAnimMontage_ExtractRootMotionFromTrackRangeInvoker){
        unsafe{ UAnimMontage_ExtractRootMotionFromTrackRangeInvokerHandler = Some(handler) };
    }

    type UAnimMontage_GetAnimCompositeSectionIndexFromPosInvoker = unsafe extern "C" fn(*mut c_void, f32, &mut f32) -> i32;
    pub(super) static mut UAnimMontage_GetAnimCompositeSectionIndexFromPosInvokerHandler: Option<UAnimMontage_GetAnimCompositeSectionIndexFromPosInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_GetAnimCompositeSectionIndexFromPos_handler(handler: UAnimMontage_GetAnimCompositeSectionIndexFromPosInvoker){
        unsafe{ UAnimMontage_GetAnimCompositeSectionIndexFromPosInvokerHandler = Some(handler) };
    }

    type UAnimMontage_GetAnimationDataInvoker = unsafe extern "C" fn(*mut c_void, UName) -> *mut FAnimTrackOpaque;
    pub(super) static mut UAnimMontage_GetAnimationDataInvokerHandler: Option<UAnimMontage_GetAnimationDataInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_GetAnimationData_handler(handler: UAnimMontage_GetAnimationDataInvoker){
        unsafe{ UAnimMontage_GetAnimationDataInvokerHandler = Some(handler) };
    }

    type UAnimMontage_GetDefaultBlendInTimeInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UAnimMontage_GetDefaultBlendInTimeInvokerHandler: Option<UAnimMontage_GetDefaultBlendInTimeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_GetDefaultBlendInTime_handler(handler: UAnimMontage_GetDefaultBlendInTimeInvoker){
        unsafe{ UAnimMontage_GetDefaultBlendInTimeInvokerHandler = Some(handler) };
    }

    type UAnimMontage_GetDefaultBlendOutTimeInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UAnimMontage_GetDefaultBlendOutTimeInvokerHandler: Option<UAnimMontage_GetDefaultBlendOutTimeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_GetDefaultBlendOutTime_handler(handler: UAnimMontage_GetDefaultBlendOutTimeInvoker){
        unsafe{ UAnimMontage_GetDefaultBlendOutTimeInvokerHandler = Some(handler) };
    }

    type UAnimMontage_GetGroupNameInvoker = unsafe extern "C" fn(*mut c_void) -> UName;
    pub(super) static mut UAnimMontage_GetGroupNameInvokerHandler: Option<UAnimMontage_GetGroupNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_GetGroupName_handler(handler: UAnimMontage_GetGroupNameInvoker){
        unsafe{ UAnimMontage_GetGroupNameInvokerHandler = Some(handler) };
    }

    type UAnimMontage_GetNumSectionsInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UAnimMontage_GetNumSectionsInvokerHandler: Option<UAnimMontage_GetNumSectionsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_GetNumSections_handler(handler: UAnimMontage_GetNumSectionsInvoker){
        unsafe{ UAnimMontage_GetNumSectionsInvokerHandler = Some(handler) };
    }

    type UAnimMontage_GetSectionIndexInvoker = unsafe extern "C" fn(*mut c_void, UName) -> i32;
    pub(super) static mut UAnimMontage_GetSectionIndexInvokerHandler: Option<UAnimMontage_GetSectionIndexInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_GetSectionIndex_handler(handler: UAnimMontage_GetSectionIndexInvoker){
        unsafe{ UAnimMontage_GetSectionIndexInvokerHandler = Some(handler) };
    }

    type UAnimMontage_GetSectionIndexFromPositionInvoker = unsafe extern "C" fn(*mut c_void, f32) -> i32;
    pub(super) static mut UAnimMontage_GetSectionIndexFromPositionInvokerHandler: Option<UAnimMontage_GetSectionIndexFromPositionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_GetSectionIndexFromPosition_handler(handler: UAnimMontage_GetSectionIndexFromPositionInvoker){
        unsafe{ UAnimMontage_GetSectionIndexFromPositionInvokerHandler = Some(handler) };
    }

    type UAnimMontage_GetSectionLengthInvoker = unsafe extern "C" fn(*mut c_void, i32) -> f32;
    pub(super) static mut UAnimMontage_GetSectionLengthInvokerHandler: Option<UAnimMontage_GetSectionLengthInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_GetSectionLength_handler(handler: UAnimMontage_GetSectionLengthInvoker){
        unsafe{ UAnimMontage_GetSectionLengthInvokerHandler = Some(handler) };
    }

    type UAnimMontage_GetSectionNameInvoker = unsafe extern "C" fn(*mut c_void, i32) -> UName;
    pub(super) static mut UAnimMontage_GetSectionNameInvokerHandler: Option<UAnimMontage_GetSectionNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_GetSectionName_handler(handler: UAnimMontage_GetSectionNameInvoker){
        unsafe{ UAnimMontage_GetSectionNameInvokerHandler = Some(handler) };
    }

    type UAnimMontage_GetSectionStartAndEndTimeInvoker = unsafe extern "C" fn(*mut c_void, i32, &mut f32, &mut f32);
    pub(super) static mut UAnimMontage_GetSectionStartAndEndTimeInvokerHandler: Option<UAnimMontage_GetSectionStartAndEndTimeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_GetSectionStartAndEndTime_handler(handler: UAnimMontage_GetSectionStartAndEndTimeInvoker){
        unsafe{ UAnimMontage_GetSectionStartAndEndTimeInvokerHandler = Some(handler) };
    }

    type UAnimMontage_GetSectionTimeLeftFromPosInvoker = unsafe extern "C" fn(*mut c_void, f32) -> f32;
    pub(super) static mut UAnimMontage_GetSectionTimeLeftFromPosInvokerHandler: Option<UAnimMontage_GetSectionTimeLeftFromPosInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_GetSectionTimeLeftFromPos_handler(handler: UAnimMontage_GetSectionTimeLeftFromPosInvoker){
        unsafe{ UAnimMontage_GetSectionTimeLeftFromPosInvokerHandler = Some(handler) };
    }

    type UAnimMontage_HasRootMotionInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UAnimMontage_HasRootMotionInvokerHandler: Option<UAnimMontage_HasRootMotionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_HasRootMotion_handler(handler: UAnimMontage_HasRootMotionInvoker){
        unsafe{ UAnimMontage_HasRootMotionInvokerHandler = Some(handler) };
    }

    type UAnimMontage_InvalidateRecursiveAssetInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimMontage_InvalidateRecursiveAssetInvokerHandler: Option<UAnimMontage_InvalidateRecursiveAssetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_InvalidateRecursiveAsset_handler(handler: UAnimMontage_InvalidateRecursiveAssetInvoker){
        unsafe{ UAnimMontage_InvalidateRecursiveAssetInvokerHandler = Some(handler) };
    }

    type UAnimMontage_IsValidAdditiveInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UAnimMontage_IsValidAdditiveInvokerHandler: Option<UAnimMontage_IsValidAdditiveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_IsValidAdditive_handler(handler: UAnimMontage_IsValidAdditiveInvoker){
        unsafe{ UAnimMontage_IsValidAdditiveInvokerHandler = Some(handler) };
    }

    type UAnimMontage_IsValidSectionIndexInvoker = unsafe extern "C" fn(*mut c_void, i32) -> bool;
    pub(super) static mut UAnimMontage_IsValidSectionIndexInvokerHandler: Option<UAnimMontage_IsValidSectionIndexInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_IsValidSectionIndex_handler(handler: UAnimMontage_IsValidSectionIndexInvoker){
        unsafe{ UAnimMontage_IsValidSectionIndexInvokerHandler = Some(handler) };
    }

    type UAnimMontage_IsValidSectionNameInvoker = unsafe extern "C" fn(*mut c_void, UName) -> bool;
    pub(super) static mut UAnimMontage_IsValidSectionNameInvokerHandler: Option<UAnimMontage_IsValidSectionNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_IsValidSectionName_handler(handler: UAnimMontage_IsValidSectionNameInvoker){
        unsafe{ UAnimMontage_IsValidSectionNameInvokerHandler = Some(handler) };
    }

    type UAnimMontage_IsValidSlotInvoker = unsafe extern "C" fn(*mut c_void, UName) -> bool;
    pub(super) static mut UAnimMontage_IsValidSlotInvokerHandler: Option<UAnimMontage_IsValidSlotInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_IsValidSlot_handler(handler: UAnimMontage_IsValidSlotInvoker){
        unsafe{ UAnimMontage_IsValidSlotInvokerHandler = Some(handler) };
    }

    type UAnimMontage_PostLoadInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimMontage_PostLoadInvokerHandler: Option<UAnimMontage_PostLoadInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_PostLoad_handler(handler: UAnimMontage_PostLoadInvoker){
        unsafe{ UAnimMontage_PostLoadInvokerHandler = Some(handler) };
    }

    type UAnimMontage_RefreshCacheDataInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimMontage_RefreshCacheDataInvokerHandler: Option<UAnimMontage_RefreshCacheDataInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_RefreshCacheData_handler(handler: UAnimMontage_RefreshCacheDataInvoker){
        unsafe{ UAnimMontage_RefreshCacheDataInvokerHandler = Some(handler) };
    }

    type UAnimMontage_SetCompositeLengthInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UAnimMontage_SetCompositeLengthInvokerHandler: Option<UAnimMontage_SetCompositeLengthInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_SetCompositeLength_handler(handler: UAnimMontage_SetCompositeLengthInvoker){
        unsafe{ UAnimMontage_SetCompositeLengthInvokerHandler = Some(handler) };
    }

    type UAnimMontage_UnregisterOnMontageChangedInvoker = unsafe extern "C" fn(*mut c_void, *mut c_void);
    pub(super) static mut UAnimMontage_UnregisterOnMontageChangedInvokerHandler: Option<UAnimMontage_UnregisterOnMontageChangedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_UnregisterOnMontageChanged_handler(handler: UAnimMontage_UnregisterOnMontageChangedInvoker){
        unsafe{ UAnimMontage_UnregisterOnMontageChangedInvokerHandler = Some(handler) };
    }

    type UAnimMontage_UpdateLinkableElementsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UAnimMontage_UpdateLinkableElementsInvokerHandler: Option<UAnimMontage_UpdateLinkableElementsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_UpdateLinkableElements_handler(handler: UAnimMontage_UpdateLinkableElementsInvoker){
        unsafe{ UAnimMontage_UpdateLinkableElementsInvokerHandler = Some(handler) };
    }

    type UAnimMontage_UpdateLinkableElements2Invoker = unsafe extern "C" fn(*mut c_void, i32, i32);
    pub(super) static mut UAnimMontage_UpdateLinkableElements2InvokerHandler: Option<UAnimMontage_UpdateLinkableElements2Invoker> = None;
    #[no_mangle]
    extern "C" fn set_UAnimMontage_UpdateLinkableElements2_handler(handler: UAnimMontage_UpdateLinkableElements2Invoker){
        unsafe{ UAnimMontage_UpdateLinkableElements2InvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_AddClothCollisionSourceInvoker = unsafe extern "C" fn(*mut c_void, *mut USkeletalMeshComponentOpaque, *mut UPhysicsAssetOpaque);
    pub(super) static mut USkeletalMeshComponent_AddClothCollisionSourceInvokerHandler: Option<USkeletalMeshComponent_AddClothCollisionSourceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_AddClothCollisionSource_handler(handler: USkeletalMeshComponent_AddClothCollisionSourceInvoker){
        unsafe{ USkeletalMeshComponent_AddClothCollisionSourceInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_AddForceToAllBodiesBelowInvoker = unsafe extern "C" fn(*mut c_void, Vector3, UName, bool, bool);
    pub(super) static mut USkeletalMeshComponent_AddForceToAllBodiesBelowInvokerHandler: Option<USkeletalMeshComponent_AddForceToAllBodiesBelowInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_AddForceToAllBodiesBelow_handler(handler: USkeletalMeshComponent_AddForceToAllBodiesBelowInvoker){
        unsafe{ USkeletalMeshComponent_AddForceToAllBodiesBelowInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_AddImpulseToAllBodiesBelowInvoker = unsafe extern "C" fn(*mut c_void, Vector3, UName, bool, bool);
    pub(super) static mut USkeletalMeshComponent_AddImpulseToAllBodiesBelowInvokerHandler: Option<USkeletalMeshComponent_AddImpulseToAllBodiesBelowInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_AddImpulseToAllBodiesBelow_handler(handler: USkeletalMeshComponent_AddImpulseToAllBodiesBelowInvoker){
        unsafe{ USkeletalMeshComponent_AddImpulseToAllBodiesBelowInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_AllocateTransformDataInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_AllocateTransformDataInvokerHandler: Option<USkeletalMeshComponent_AllocateTransformDataInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_AllocateTransformData_handler(handler: USkeletalMeshComponent_AllocateTransformDataInvoker){
        unsafe{ USkeletalMeshComponent_AllocateTransformDataInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_AllowAnimCurveEvaluationInvoker = unsafe extern "C" fn(*mut c_void, UName, bool);
    pub(super) static mut USkeletalMeshComponent_AllowAnimCurveEvaluationInvokerHandler: Option<USkeletalMeshComponent_AllowAnimCurveEvaluationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_AllowAnimCurveEvaluation_handler(handler: USkeletalMeshComponent_AllowAnimCurveEvaluationInvoker){
        unsafe{ USkeletalMeshComponent_AllowAnimCurveEvaluationInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ApplyEditedComponentSpaceTransformsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_ApplyEditedComponentSpaceTransformsInvokerHandler: Option<USkeletalMeshComponent_ApplyEditedComponentSpaceTransformsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ApplyEditedComponentSpaceTransforms_handler(handler: USkeletalMeshComponent_ApplyEditedComponentSpaceTransformsInvoker){
        unsafe{ USkeletalMeshComponent_ApplyEditedComponentSpaceTransformsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_BeginPlayInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_BeginPlayInvokerHandler: Option<USkeletalMeshComponent_BeginPlayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_BeginPlay_handler(handler: USkeletalMeshComponent_BeginPlayInvoker){
        unsafe{ USkeletalMeshComponent_BeginPlayInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_BindClothToLeaderPoseComponentInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_BindClothToLeaderPoseComponentInvokerHandler: Option<USkeletalMeshComponent_BindClothToLeaderPoseComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_BindClothToLeaderPoseComponent_handler(handler: USkeletalMeshComponent_BindClothToLeaderPoseComponentInvoker){
        unsafe{ USkeletalMeshComponent_BindClothToLeaderPoseComponentInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_BreakConstraintInvoker = unsafe extern "C" fn(*mut c_void, Vector3, Vector3, UName);
    pub(super) static mut USkeletalMeshComponent_BreakConstraintInvokerHandler: Option<USkeletalMeshComponent_BreakConstraintInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_BreakConstraint_handler(handler: USkeletalMeshComponent_BreakConstraintInvoker){
        unsafe{ USkeletalMeshComponent_BreakConstraintInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_CalculateMassInvoker = unsafe extern "C" fn(*mut c_void, UName) -> f32;
    pub(super) static mut USkeletalMeshComponent_CalculateMassInvokerHandler: Option<USkeletalMeshComponent_CalculateMassInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_CalculateMass_handler(handler: USkeletalMeshComponent_CalculateMassInvoker){
        unsafe{ USkeletalMeshComponent_CalculateMassInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_CanEditSimulatePhysicsInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_CanEditSimulatePhysicsInvokerHandler: Option<USkeletalMeshComponent_CanEditSimulatePhysicsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_CanEditSimulatePhysics_handler(handler: USkeletalMeshComponent_CanEditSimulatePhysicsInvoker){
        unsafe{ USkeletalMeshComponent_CanEditSimulatePhysicsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_CanHaveStaticMobilityInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_CanHaveStaticMobilityInvokerHandler: Option<USkeletalMeshComponent_CanHaveStaticMobilityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_CanHaveStaticMobility_handler(handler: USkeletalMeshComponent_CanHaveStaticMobilityInvoker){
        unsafe{ USkeletalMeshComponent_CanHaveStaticMobilityInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_CanSimulateClothingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_CanSimulateClothingInvokerHandler: Option<USkeletalMeshComponent_CanSimulateClothingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_CanSimulateClothing_handler(handler: USkeletalMeshComponent_CanSimulateClothingInvoker){
        unsafe{ USkeletalMeshComponent_CanSimulateClothingInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_CheckClothTeleportInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_CheckClothTeleportInvokerHandler: Option<USkeletalMeshComponent_CheckClothTeleportInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_CheckClothTeleport_handler(handler: USkeletalMeshComponent_CheckClothTeleportInvoker){
        unsafe{ USkeletalMeshComponent_CheckClothTeleportInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ClearAnimNotifyErrorsInvoker = unsafe extern "C" fn(*mut c_void, *mut UObjectOpaque);
    pub(super) static mut USkeletalMeshComponent_ClearAnimNotifyErrorsInvokerHandler: Option<USkeletalMeshComponent_ClearAnimNotifyErrorsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ClearAnimNotifyErrors_handler(handler: USkeletalMeshComponent_ClearAnimNotifyErrorsInvoker){
        unsafe{ USkeletalMeshComponent_ClearAnimNotifyErrorsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ClearAnimScriptInstanceInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_ClearAnimScriptInstanceInvokerHandler: Option<USkeletalMeshComponent_ClearAnimScriptInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ClearAnimScriptInstance_handler(handler: USkeletalMeshComponent_ClearAnimScriptInstanceInvoker){
        unsafe{ USkeletalMeshComponent_ClearAnimScriptInstanceInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ClearCachedAnimPropertiesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_ClearCachedAnimPropertiesInvokerHandler: Option<USkeletalMeshComponent_ClearCachedAnimPropertiesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ClearCachedAnimProperties_handler(handler: USkeletalMeshComponent_ClearCachedAnimPropertiesInvoker){
        unsafe{ USkeletalMeshComponent_ClearCachedAnimPropertiesInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ClearMorphTargetsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_ClearMorphTargetsInvokerHandler: Option<USkeletalMeshComponent_ClearMorphTargetsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ClearMorphTargets_handler(handler: USkeletalMeshComponent_ClearMorphTargetsInvoker){
        unsafe{ USkeletalMeshComponent_ClearMorphTargetsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ClearRefPoseOverrideInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_ClearRefPoseOverrideInvokerHandler: Option<USkeletalMeshComponent_ClearRefPoseOverrideInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ClearRefPoseOverride_handler(handler: USkeletalMeshComponent_ClearRefPoseOverrideInvoker){
        unsafe{ USkeletalMeshComponent_ClearRefPoseOverrideInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_CompleteParallelAnimationEvaluationInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USkeletalMeshComponent_CompleteParallelAnimationEvaluationInvokerHandler: Option<USkeletalMeshComponent_CompleteParallelAnimationEvaluationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_CompleteParallelAnimationEvaluation_handler(handler: USkeletalMeshComponent_CompleteParallelAnimationEvaluationInvoker){
        unsafe{ USkeletalMeshComponent_CompleteParallelAnimationEvaluationInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_CompleteParallelClothSimulationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_CompleteParallelClothSimulationInvokerHandler: Option<USkeletalMeshComponent_CompleteParallelClothSimulationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_CompleteParallelClothSimulation_handler(handler: USkeletalMeshComponent_CompleteParallelClothSimulationInvoker){
        unsafe{ USkeletalMeshComponent_CompleteParallelClothSimulationInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ConditionallyDispatchQueuedAnimEventsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_ConditionallyDispatchQueuedAnimEventsInvokerHandler: Option<USkeletalMeshComponent_ConditionallyDispatchQueuedAnimEventsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ConditionallyDispatchQueuedAnimEvents_handler(handler: USkeletalMeshComponent_ConditionallyDispatchQueuedAnimEventsInvoker){
        unsafe{ USkeletalMeshComponent_ConditionallyDispatchQueuedAnimEventsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_DeallocateTransformDataInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_DeallocateTransformDataInvokerHandler: Option<USkeletalMeshComponent_DeallocateTransformDataInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_DeallocateTransformData_handler(handler: USkeletalMeshComponent_DeallocateTransformDataInvoker){
        unsafe{ USkeletalMeshComponent_DeallocateTransformDataInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_DebugDrawClothingInvoker = unsafe extern "C" fn(*mut c_void, *mut FPrimitiveDrawInterfaceOpaque);
    pub(super) static mut USkeletalMeshComponent_DebugDrawClothingInvokerHandler: Option<USkeletalMeshComponent_DebugDrawClothingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_DebugDrawClothing_handler(handler: USkeletalMeshComponent_DebugDrawClothingInvoker){
        unsafe{ USkeletalMeshComponent_DebugDrawClothingInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_DebugDrawClothingTextsInvoker = unsafe extern "C" fn(*mut c_void, *mut FCanvasOpaque, *mut FSceneViewOpaque);
    pub(super) static mut USkeletalMeshComponent_DebugDrawClothingTextsInvokerHandler: Option<USkeletalMeshComponent_DebugDrawClothingTextsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_DebugDrawClothingTexts_handler(handler: USkeletalMeshComponent_DebugDrawClothingTextsInvoker){
        unsafe{ USkeletalMeshComponent_DebugDrawClothingTextsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_FinalizeBoneTransformInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_FinalizeBoneTransformInvokerHandler: Option<USkeletalMeshComponent_FinalizeBoneTransformInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_FinalizeBoneTransform_handler(handler: USkeletalMeshComponent_FinalizeBoneTransformInvoker){
        unsafe{ USkeletalMeshComponent_FinalizeBoneTransformInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_FindConstraintBoneNameInvoker = unsafe extern "C" fn(*mut c_void, i32) -> UName;
    pub(super) static mut USkeletalMeshComponent_FindConstraintBoneNameInvokerHandler: Option<USkeletalMeshComponent_FindConstraintBoneNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_FindConstraintBoneName_handler(handler: USkeletalMeshComponent_FindConstraintBoneNameInvoker){
        unsafe{ USkeletalMeshComponent_FindConstraintBoneNameInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_FindConstraintIndexInvoker = unsafe extern "C" fn(*mut c_void, UName) -> i32;
    pub(super) static mut USkeletalMeshComponent_FindConstraintIndexInvokerHandler: Option<USkeletalMeshComponent_FindConstraintIndexInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_FindConstraintIndex_handler(handler: USkeletalMeshComponent_FindConstraintIndexInvoker){
        unsafe{ USkeletalMeshComponent_FindConstraintIndexInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_FindConstraintInstanceInvoker = unsafe extern "C" fn(*mut c_void, UName) -> *mut FConstraintInstanceOpaque;
    pub(super) static mut USkeletalMeshComponent_FindConstraintInstanceInvokerHandler: Option<USkeletalMeshComponent_FindConstraintInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_FindConstraintInstance_handler(handler: USkeletalMeshComponent_FindConstraintInstanceInvoker){
        unsafe{ USkeletalMeshComponent_FindConstraintInstanceInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_FindRootBodyIndexInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut USkeletalMeshComponent_FindRootBodyIndexInvokerHandler: Option<USkeletalMeshComponent_FindRootBodyIndexInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_FindRootBodyIndex_handler(handler: USkeletalMeshComponent_FindRootBodyIndexInvoker){
        unsafe{ USkeletalMeshComponent_FindRootBodyIndexInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ForceClothNextUpdateTeleportInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_ForceClothNextUpdateTeleportInvokerHandler: Option<USkeletalMeshComponent_ForceClothNextUpdateTeleportInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ForceClothNextUpdateTeleport_handler(handler: USkeletalMeshComponent_ForceClothNextUpdateTeleportInvoker){
        unsafe{ USkeletalMeshComponent_ForceClothNextUpdateTeleportInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ForceClothNextUpdateTeleportAndResetInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_ForceClothNextUpdateTeleportAndResetInvokerHandler: Option<USkeletalMeshComponent_ForceClothNextUpdateTeleportAndResetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ForceClothNextUpdateTeleportAndReset_handler(handler: USkeletalMeshComponent_ForceClothNextUpdateTeleportAndResetInvoker){
        unsafe{ USkeletalMeshComponent_ForceClothNextUpdateTeleportAndResetInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetAllowClothActorsInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_GetAllowClothActorsInvokerHandler: Option<USkeletalMeshComponent_GetAllowClothActorsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetAllowClothActors_handler(handler: USkeletalMeshComponent_GetAllowClothActorsInvoker){
        unsafe{ USkeletalMeshComponent_GetAllowClothActorsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetAllowRigidBodyAnimNodeInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_GetAllowRigidBodyAnimNodeInvokerHandler: Option<USkeletalMeshComponent_GetAllowRigidBodyAnimNodeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetAllowRigidBodyAnimNode_handler(handler: USkeletalMeshComponent_GetAllowRigidBodyAnimNodeInvoker){
        unsafe{ USkeletalMeshComponent_GetAllowRigidBodyAnimNodeInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetAllowedAnimCurveEvaluateInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_GetAllowedAnimCurveEvaluateInvokerHandler: Option<USkeletalMeshComponent_GetAllowedAnimCurveEvaluateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetAllowedAnimCurveEvaluate_handler(handler: USkeletalMeshComponent_GetAllowedAnimCurveEvaluateInvoker){
        unsafe{ USkeletalMeshComponent_GetAllowedAnimCurveEvaluateInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetBodyInstanceInvoker = unsafe extern "C" fn(*mut c_void, UName, bool, i32) -> *mut FBodyInstanceOpaque;
    pub(super) static mut USkeletalMeshComponent_GetBodyInstanceInvokerHandler: Option<USkeletalMeshComponent_GetBodyInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetBodyInstance_handler(handler: USkeletalMeshComponent_GetBodyInstanceInvoker){
        unsafe{ USkeletalMeshComponent_GetBodyInstanceInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetBodySetupInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UBodySetupOpaque;
    pub(super) static mut USkeletalMeshComponent_GetBodySetupInvokerHandler: Option<USkeletalMeshComponent_GetBodySetupInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetBodySetup_handler(handler: USkeletalMeshComponent_GetBodySetupInvoker){
        unsafe{ USkeletalMeshComponent_GetBodySetupInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetBoneMassInvoker = unsafe extern "C" fn(*mut c_void, UName, bool) -> f32;
    pub(super) static mut USkeletalMeshComponent_GetBoneMassInvokerHandler: Option<USkeletalMeshComponent_GetBoneMassInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetBoneMass_handler(handler: USkeletalMeshComponent_GetBoneMassInvoker){
        unsafe{ USkeletalMeshComponent_GetBoneMassInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetClothMaxDistanceScaleInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut USkeletalMeshComponent_GetClothMaxDistanceScaleInvokerHandler: Option<USkeletalMeshComponent_GetClothMaxDistanceScaleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetClothMaxDistanceScale_handler(handler: USkeletalMeshComponent_GetClothMaxDistanceScaleInvoker){
        unsafe{ USkeletalMeshComponent_GetClothMaxDistanceScaleInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetClothingSimulationInvoker = unsafe extern "C" fn(*mut c_void) -> *mut IClothingSimulationOpaque;
    pub(super) static mut USkeletalMeshComponent_GetClothingSimulationInvokerHandler: Option<USkeletalMeshComponent_GetClothingSimulationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetClothingSimulation_handler(handler: USkeletalMeshComponent_GetClothingSimulationInvoker){
        unsafe{ USkeletalMeshComponent_GetClothingSimulationInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetClothingSimulationContextInvoker = unsafe extern "C" fn(*mut c_void) -> *mut IClothingSimulationContextOpaque;
    pub(super) static mut USkeletalMeshComponent_GetClothingSimulationContextInvokerHandler: Option<USkeletalMeshComponent_GetClothingSimulationContextInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetClothingSimulationContext_handler(handler: USkeletalMeshComponent_GetClothingSimulationContextInvoker){
        unsafe{ USkeletalMeshComponent_GetClothingSimulationContextInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetClothingSimulationInteractorInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UClothingSimulationInteractorOpaque;
    pub(super) static mut USkeletalMeshComponent_GetClothingSimulationInteractorInvokerHandler: Option<USkeletalMeshComponent_GetClothingSimulationInteractorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetClothingSimulationInteractor_handler(handler: USkeletalMeshComponent_GetClothingSimulationInteractorInvoker){
        unsafe{ USkeletalMeshComponent_GetClothingSimulationInteractorInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetConstraintInstanceByIndexInvoker = unsafe extern "C" fn(*mut c_void, u32) -> *mut FConstraintInstanceOpaque;
    pub(super) static mut USkeletalMeshComponent_GetConstraintInstanceByIndexInvokerHandler: Option<USkeletalMeshComponent_GetConstraintInstanceByIndexInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetConstraintInstanceByIndex_handler(handler: USkeletalMeshComponent_GetConstraintInstanceByIndexInvoker){
        unsafe{ USkeletalMeshComponent_GetConstraintInstanceByIndexInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetCurrentJointAnglesInvoker = unsafe extern "C" fn(*mut c_void, UName, &mut f32, &mut f32, &mut f32);
    pub(super) static mut USkeletalMeshComponent_GetCurrentJointAnglesInvokerHandler: Option<USkeletalMeshComponent_GetCurrentJointAnglesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetCurrentJointAngles_handler(handler: USkeletalMeshComponent_GetCurrentJointAnglesInvoker){
        unsafe{ USkeletalMeshComponent_GetCurrentJointAnglesInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetDisablePostProcessBlueprintInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_GetDisablePostProcessBlueprintInvokerHandler: Option<USkeletalMeshComponent_GetDisablePostProcessBlueprintInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetDisablePostProcessBlueprint_handler(handler: USkeletalMeshComponent_GetDisablePostProcessBlueprintInvoker){
        unsafe{ USkeletalMeshComponent_GetDisablePostProcessBlueprintInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetLinkedAnimGraphInstanceByTagInvoker = unsafe extern "C" fn(*mut c_void, UName) -> *mut UAnimInstanceOpaque;
    pub(super) static mut USkeletalMeshComponent_GetLinkedAnimGraphInstanceByTagInvokerHandler: Option<USkeletalMeshComponent_GetLinkedAnimGraphInstanceByTagInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetLinkedAnimGraphInstanceByTag_handler(handler: USkeletalMeshComponent_GetLinkedAnimGraphInstanceByTagInvoker){
        unsafe{ USkeletalMeshComponent_GetLinkedAnimGraphInstanceByTagInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetLinkedAnimLayerInstanceByGroupInvoker = unsafe extern "C" fn(*mut c_void, UName) -> *mut UAnimInstanceOpaque;
    pub(super) static mut USkeletalMeshComponent_GetLinkedAnimLayerInstanceByGroupInvokerHandler: Option<USkeletalMeshComponent_GetLinkedAnimLayerInstanceByGroupInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetLinkedAnimLayerInstanceByGroup_handler(handler: USkeletalMeshComponent_GetLinkedAnimLayerInstanceByGroupInvoker){
        unsafe{ USkeletalMeshComponent_GetLinkedAnimLayerInstanceByGroupInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetMassInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut USkeletalMeshComponent_GetMassInvokerHandler: Option<USkeletalMeshComponent_GetMassInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetMass_handler(handler: USkeletalMeshComponent_GetMassInvoker){
        unsafe{ USkeletalMeshComponent_GetMassInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetMorphTargetInvoker = unsafe extern "C" fn(*mut c_void, UName) -> f32;
    pub(super) static mut USkeletalMeshComponent_GetMorphTargetInvokerHandler: Option<USkeletalMeshComponent_GetMorphTargetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetMorphTarget_handler(handler: USkeletalMeshComponent_GetMorphTargetInvoker){
        unsafe{ USkeletalMeshComponent_GetMorphTargetInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetPlayRateInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut USkeletalMeshComponent_GetPlayRateInvokerHandler: Option<USkeletalMeshComponent_GetPlayRateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetPlayRate_handler(handler: USkeletalMeshComponent_GetPlayRateInvoker){
        unsafe{ USkeletalMeshComponent_GetPlayRateInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetPositionInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut USkeletalMeshComponent_GetPositionInvokerHandler: Option<USkeletalMeshComponent_GetPositionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetPosition_handler(handler: USkeletalMeshComponent_GetPositionInvoker){
        unsafe{ USkeletalMeshComponent_GetPositionInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetSingleNodeInstanceInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UAnimSingleNodeInstanceOpaque;
    pub(super) static mut USkeletalMeshComponent_GetSingleNodeInstanceInvokerHandler: Option<USkeletalMeshComponent_GetSingleNodeInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetSingleNodeInstance_handler(handler: USkeletalMeshComponent_GetSingleNodeInstanceInvoker){
        unsafe{ USkeletalMeshComponent_GetSingleNodeInstanceInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetSkeletalCenterOfMassInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut USkeletalMeshComponent_GetSkeletalCenterOfMassInvokerHandler: Option<USkeletalMeshComponent_GetSkeletalCenterOfMassInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetSkeletalCenterOfMass_handler(handler: USkeletalMeshComponent_GetSkeletalCenterOfMassInvoker){
        unsafe{ USkeletalMeshComponent_GetSkeletalCenterOfMassInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetSkeletalMeshAssetInvoker = unsafe extern "C" fn(*mut c_void) -> *mut USkeletalMeshOpaque;
    pub(super) static mut USkeletalMeshComponent_GetSkeletalMeshAssetInvokerHandler: Option<USkeletalMeshComponent_GetSkeletalMeshAssetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetSkeletalMeshAsset_handler(handler: USkeletalMeshComponent_GetSkeletalMeshAssetInvoker){
        unsafe{ USkeletalMeshComponent_GetSkeletalMeshAssetInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetTeleportDistanceThresholdInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut USkeletalMeshComponent_GetTeleportDistanceThresholdInvokerHandler: Option<USkeletalMeshComponent_GetTeleportDistanceThresholdInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetTeleportDistanceThreshold_handler(handler: USkeletalMeshComponent_GetTeleportDistanceThresholdInvoker){
        unsafe{ USkeletalMeshComponent_GetTeleportDistanceThresholdInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetTeleportRotationThresholdInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut USkeletalMeshComponent_GetTeleportRotationThresholdInvokerHandler: Option<USkeletalMeshComponent_GetTeleportRotationThresholdInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetTeleportRotationThreshold_handler(handler: USkeletalMeshComponent_GetTeleportRotationThresholdInvoker){
        unsafe{ USkeletalMeshComponent_GetTeleportRotationThresholdInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetTotalMassBelowBoneInvoker = unsafe extern "C" fn(*mut c_void, UName) -> f32;
    pub(super) static mut USkeletalMeshComponent_GetTotalMassBelowBoneInvokerHandler: Option<USkeletalMeshComponent_GetTotalMassBelowBoneInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetTotalMassBelowBone_handler(handler: USkeletalMeshComponent_GetTotalMassBelowBoneInvoker){
        unsafe{ USkeletalMeshComponent_GetTotalMassBelowBoneInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetUpdateAnimationInEditorInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_GetUpdateAnimationInEditorInvokerHandler: Option<USkeletalMeshComponent_GetUpdateAnimationInEditorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetUpdateAnimationInEditor_handler(handler: USkeletalMeshComponent_GetUpdateAnimationInEditorInvoker){
        unsafe{ USkeletalMeshComponent_GetUpdateAnimationInEditorInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_GetUpdateClothInEditorInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_GetUpdateClothInEditorInvokerHandler: Option<USkeletalMeshComponent_GetUpdateClothInEditorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_GetUpdateClothInEditor_handler(handler: USkeletalMeshComponent_GetUpdateClothInEditorInvoker){
        unsafe{ USkeletalMeshComponent_GetUpdateClothInEditorInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_HandleExistingParallelEvaluationTaskInvoker = unsafe extern "C" fn(*mut c_void, bool, bool) -> bool;
    pub(super) static mut USkeletalMeshComponent_HandleExistingParallelEvaluationTaskInvokerHandler: Option<USkeletalMeshComponent_HandleExistingParallelEvaluationTaskInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_HandleExistingParallelEvaluationTask_handler(handler: USkeletalMeshComponent_HandleExistingParallelEvaluationTaskInvoker){
        unsafe{ USkeletalMeshComponent_HandleExistingParallelEvaluationTaskInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_HasValidAnimationInstanceInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_HasValidAnimationInstanceInvokerHandler: Option<USkeletalMeshComponent_HasValidAnimationInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_HasValidAnimationInstance_handler(handler: USkeletalMeshComponent_HasValidAnimationInstanceInvoker){
        unsafe{ USkeletalMeshComponent_HasValidAnimationInstanceInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_InitAnimInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USkeletalMeshComponent_InitAnimInvokerHandler: Option<USkeletalMeshComponent_InitAnimInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_InitAnim_handler(handler: USkeletalMeshComponent_InitAnimInvoker){
        unsafe{ USkeletalMeshComponent_InitAnimInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_InitArticulatedInvoker = unsafe extern "C" fn(*mut c_void, *mut FPhysSceneOpaque);
    pub(super) static mut USkeletalMeshComponent_InitArticulatedInvokerHandler: Option<USkeletalMeshComponent_InitArticulatedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_InitArticulated_handler(handler: USkeletalMeshComponent_InitArticulatedInvoker){
        unsafe{ USkeletalMeshComponent_InitArticulatedInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_InitCollisionRelationshipsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_InitCollisionRelationshipsInvokerHandler: Option<USkeletalMeshComponent_InitCollisionRelationshipsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_InitCollisionRelationships_handler(handler: USkeletalMeshComponent_InitCollisionRelationshipsInvoker){
        unsafe{ USkeletalMeshComponent_InitCollisionRelationshipsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_InitializeAnimScriptInstanceInvoker = unsafe extern "C" fn(*mut c_void, bool, bool) -> bool;
    pub(super) static mut USkeletalMeshComponent_InitializeAnimScriptInstanceInvokerHandler: Option<USkeletalMeshComponent_InitializeAnimScriptInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_InitializeAnimScriptInstance_handler(handler: USkeletalMeshComponent_InitializeAnimScriptInstanceInvoker){
        unsafe{ USkeletalMeshComponent_InitializeAnimScriptInstanceInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_InitializeComponentInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_InitializeComponentInvokerHandler: Option<USkeletalMeshComponent_InitializeComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_InitializeComponent_handler(handler: USkeletalMeshComponent_InitializeComponentInvoker){
        unsafe{ USkeletalMeshComponent_InitializeComponentInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_IsAnimBlueprintInstancedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_IsAnimBlueprintInstancedInvokerHandler: Option<USkeletalMeshComponent_IsAnimBlueprintInstancedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_IsAnimBlueprintInstanced_handler(handler: USkeletalMeshComponent_IsAnimBlueprintInstancedInvoker){
        unsafe{ USkeletalMeshComponent_IsAnimBlueprintInstancedInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_IsAnyRigidBodyAwakeInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_IsAnyRigidBodyAwakeInvokerHandler: Option<USkeletalMeshComponent_IsAnyRigidBodyAwakeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_IsAnyRigidBodyAwake_handler(handler: USkeletalMeshComponent_IsAnyRigidBodyAwakeInvoker){
        unsafe{ USkeletalMeshComponent_IsAnyRigidBodyAwakeInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_IsAnySimulatingPhysicsInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_IsAnySimulatingPhysicsInvokerHandler: Option<USkeletalMeshComponent_IsAnySimulatingPhysicsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_IsAnySimulatingPhysics_handler(handler: USkeletalMeshComponent_IsAnySimulatingPhysicsInvoker){
        unsafe{ USkeletalMeshComponent_IsAnySimulatingPhysicsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_IsBodyGravityEnabledInvoker = unsafe extern "C" fn(*mut c_void, UName) -> bool;
    pub(super) static mut USkeletalMeshComponent_IsBodyGravityEnabledInvokerHandler: Option<USkeletalMeshComponent_IsBodyGravityEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_IsBodyGravityEnabled_handler(handler: USkeletalMeshComponent_IsBodyGravityEnabledInvoker){
        unsafe{ USkeletalMeshComponent_IsBodyGravityEnabledInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_IsClothBoundToLeaderComponentInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_IsClothBoundToLeaderComponentInvokerHandler: Option<USkeletalMeshComponent_IsClothBoundToLeaderComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_IsClothBoundToLeaderComponent_handler(handler: USkeletalMeshComponent_IsClothBoundToLeaderComponentInvoker){
        unsafe{ USkeletalMeshComponent_IsClothBoundToLeaderComponentInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_IsClothingSimulationSuspendedInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_IsClothingSimulationSuspendedInvokerHandler: Option<USkeletalMeshComponent_IsClothingSimulationSuspendedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_IsClothingSimulationSuspended_handler(handler: USkeletalMeshComponent_IsClothingSimulationSuspendedInvoker){
        unsafe{ USkeletalMeshComponent_IsClothingSimulationSuspendedInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_IsGravityEnabledInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_IsGravityEnabledInvokerHandler: Option<USkeletalMeshComponent_IsGravityEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_IsGravityEnabled_handler(handler: USkeletalMeshComponent_IsGravityEnabledInvoker){
        unsafe{ USkeletalMeshComponent_IsGravityEnabledInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_IsPlayingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_IsPlayingInvokerHandler: Option<USkeletalMeshComponent_IsPlayingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_IsPlaying_handler(handler: USkeletalMeshComponent_IsPlayingInvoker){
        unsafe{ USkeletalMeshComponent_IsPlayingInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_IsPlayingNetworkedRootMotionMontageInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_IsPlayingNetworkedRootMotionMontageInvokerHandler: Option<USkeletalMeshComponent_IsPlayingNetworkedRootMotionMontageInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_IsPlayingNetworkedRootMotionMontage_handler(handler: USkeletalMeshComponent_IsPlayingNetworkedRootMotionMontageInvoker){
        unsafe{ USkeletalMeshComponent_IsPlayingNetworkedRootMotionMontageInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_IsPlayingRootMotionInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_IsPlayingRootMotionInvokerHandler: Option<USkeletalMeshComponent_IsPlayingRootMotionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_IsPlayingRootMotion_handler(handler: USkeletalMeshComponent_IsPlayingRootMotionInvoker){
        unsafe{ USkeletalMeshComponent_IsPlayingRootMotionInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_IsPlayingRootMotionFromEverythingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_IsPlayingRootMotionFromEverythingInvokerHandler: Option<USkeletalMeshComponent_IsPlayingRootMotionFromEverythingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_IsPlayingRootMotionFromEverything_handler(handler: USkeletalMeshComponent_IsPlayingRootMotionFromEverythingInvoker){
        unsafe{ USkeletalMeshComponent_IsPlayingRootMotionFromEverythingInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_IsPostEvaluatingAnimationInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_IsPostEvaluatingAnimationInvokerHandler: Option<USkeletalMeshComponent_IsPostEvaluatingAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_IsPostEvaluatingAnimation_handler(handler: USkeletalMeshComponent_IsPostEvaluatingAnimationInvoker){
        unsafe{ USkeletalMeshComponent_IsPostEvaluatingAnimationInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_IsRunningParallelEvaluationInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_IsRunningParallelEvaluationInvokerHandler: Option<USkeletalMeshComponent_IsRunningParallelEvaluationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_IsRunningParallelEvaluation_handler(handler: USkeletalMeshComponent_IsRunningParallelEvaluationInvoker){
        unsafe{ USkeletalMeshComponent_IsRunningParallelEvaluationInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_IsWindEnabledInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_IsWindEnabledInvokerHandler: Option<USkeletalMeshComponent_IsWindEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_IsWindEnabled_handler(handler: USkeletalMeshComponent_IsWindEnabledInvoker){
        unsafe{ USkeletalMeshComponent_IsWindEnabledInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_NotifySkelControlBeyondLimitInvoker = unsafe extern "C" fn(*mut c_void, *mut USkelControlLookAtOpaque);
    pub(super) static mut USkeletalMeshComponent_NotifySkelControlBeyondLimitInvokerHandler: Option<USkeletalMeshComponent_NotifySkelControlBeyondLimitInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_NotifySkelControlBeyondLimit_handler(handler: USkeletalMeshComponent_NotifySkelControlBeyondLimitInvoker){
        unsafe{ USkeletalMeshComponent_NotifySkelControlBeyondLimitInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_OnComponentCollisionSettingsChangedInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USkeletalMeshComponent_OnComponentCollisionSettingsChangedInvokerHandler: Option<USkeletalMeshComponent_OnComponentCollisionSettingsChangedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_OnComponentCollisionSettingsChanged_handler(handler: USkeletalMeshComponent_OnComponentCollisionSettingsChangedInvoker){
        unsafe{ USkeletalMeshComponent_OnComponentCollisionSettingsChangedInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_OnPreEndOfFrameSyncInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_OnPreEndOfFrameSyncInvokerHandler: Option<USkeletalMeshComponent_OnPreEndOfFrameSyncInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_OnPreEndOfFrameSync_handler(handler: USkeletalMeshComponent_OnPreEndOfFrameSyncInvoker){
        unsafe{ USkeletalMeshComponent_OnPreEndOfFrameSyncInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_OverrideAnimationDataInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimationAssetOpaque, bool, bool, f32, f32);
    pub(super) static mut USkeletalMeshComponent_OverrideAnimationDataInvokerHandler: Option<USkeletalMeshComponent_OverrideAnimationDataInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_OverrideAnimationData_handler(handler: USkeletalMeshComponent_OverrideAnimationDataInvoker){
        unsafe{ USkeletalMeshComponent_OverrideAnimationDataInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ParallelAnimationEvaluationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_ParallelAnimationEvaluationInvokerHandler: Option<USkeletalMeshComponent_ParallelAnimationEvaluationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ParallelAnimationEvaluation_handler(handler: USkeletalMeshComponent_ParallelAnimationEvaluationInvoker){
        unsafe{ USkeletalMeshComponent_ParallelAnimationEvaluationInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_PlayInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USkeletalMeshComponent_PlayInvokerHandler: Option<USkeletalMeshComponent_PlayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_Play_handler(handler: USkeletalMeshComponent_PlayInvoker){
        unsafe{ USkeletalMeshComponent_PlayInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_PlayAnimationInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimationAssetOpaque, bool);
    pub(super) static mut USkeletalMeshComponent_PlayAnimationInvokerHandler: Option<USkeletalMeshComponent_PlayAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_PlayAnimation_handler(handler: USkeletalMeshComponent_PlayAnimationInvoker){
        unsafe{ USkeletalMeshComponent_PlayAnimationInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_PoseTickedThisFrameInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_PoseTickedThisFrameInvokerHandler: Option<USkeletalMeshComponent_PoseTickedThisFrameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_PoseTickedThisFrame_handler(handler: USkeletalMeshComponent_PoseTickedThisFrameInvoker){
        unsafe{ USkeletalMeshComponent_PoseTickedThisFrameInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_PostLoadInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_PostLoadInvokerHandler: Option<USkeletalMeshComponent_PostLoadInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_PostLoad_handler(handler: USkeletalMeshComponent_PostLoadInvoker){
        unsafe{ USkeletalMeshComponent_PostLoadInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_PutAllRigidBodiesToSleepInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_PutAllRigidBodiesToSleepInvokerHandler: Option<USkeletalMeshComponent_PutAllRigidBodiesToSleepInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_PutAllRigidBodiesToSleep_handler(handler: USkeletalMeshComponent_PutAllRigidBodiesToSleepInvoker){
        unsafe{ USkeletalMeshComponent_PutAllRigidBodiesToSleepInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_RecalcRequiredBonesInvoker = unsafe extern "C" fn(*mut c_void, i32);
    pub(super) static mut USkeletalMeshComponent_RecalcRequiredBonesInvokerHandler: Option<USkeletalMeshComponent_RecalcRequiredBonesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_RecalcRequiredBones_handler(handler: USkeletalMeshComponent_RecalcRequiredBonesInvoker){
        unsafe{ USkeletalMeshComponent_RecalcRequiredBonesInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_RecalcRequiredCurvesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_RecalcRequiredCurvesInvokerHandler: Option<USkeletalMeshComponent_RecalcRequiredCurvesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_RecalcRequiredCurves_handler(handler: USkeletalMeshComponent_RecalcRequiredCurvesInvoker){
        unsafe{ USkeletalMeshComponent_RecalcRequiredCurvesInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_RecreateClothingActorsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_RecreateClothingActorsInvokerHandler: Option<USkeletalMeshComponent_RecreateClothingActorsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_RecreateClothingActors_handler(handler: USkeletalMeshComponent_RecreateClothingActorsInvoker){
        unsafe{ USkeletalMeshComponent_RecreateClothingActorsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_RefreshBoneTransformsInvoker = unsafe extern "C" fn(*mut c_void, *mut FActorComponentTickFunctionOpaque);
    pub(super) static mut USkeletalMeshComponent_RefreshBoneTransformsInvokerHandler: Option<USkeletalMeshComponent_RefreshBoneTransformsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_RefreshBoneTransforms_handler(handler: USkeletalMeshComponent_RefreshBoneTransformsInvoker){
        unsafe{ USkeletalMeshComponent_RefreshBoneTransformsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_RegisterClothTickInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USkeletalMeshComponent_RegisterClothTickInvokerHandler: Option<USkeletalMeshComponent_RegisterClothTickInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_RegisterClothTick_handler(handler: USkeletalMeshComponent_RegisterClothTickInvoker){
        unsafe{ USkeletalMeshComponent_RegisterClothTickInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_RegisterEndPhysicsTickInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USkeletalMeshComponent_RegisterEndPhysicsTickInvokerHandler: Option<USkeletalMeshComponent_RegisterEndPhysicsTickInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_RegisterEndPhysicsTick_handler(handler: USkeletalMeshComponent_RegisterEndPhysicsTickInvoker){
        unsafe{ USkeletalMeshComponent_RegisterEndPhysicsTickInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ReleaseAllClothingResourcesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_ReleaseAllClothingResourcesInvokerHandler: Option<USkeletalMeshComponent_ReleaseAllClothingResourcesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ReleaseAllClothingResources_handler(handler: USkeletalMeshComponent_ReleaseAllClothingResourcesInvoker){
        unsafe{ USkeletalMeshComponent_ReleaseAllClothingResourcesInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_RemoveAllClothingActorsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_RemoveAllClothingActorsInvokerHandler: Option<USkeletalMeshComponent_RemoveAllClothingActorsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_RemoveAllClothingActors_handler(handler: USkeletalMeshComponent_RemoveAllClothingActorsInvoker){
        unsafe{ USkeletalMeshComponent_RemoveAllClothingActorsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_RemoveClothCollisionSourceInvoker = unsafe extern "C" fn(*mut c_void, *mut USkeletalMeshComponentOpaque);
    pub(super) static mut USkeletalMeshComponent_RemoveClothCollisionSourceInvokerHandler: Option<USkeletalMeshComponent_RemoveClothCollisionSourceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_RemoveClothCollisionSource_handler(handler: USkeletalMeshComponent_RemoveClothCollisionSourceInvoker){
        unsafe{ USkeletalMeshComponent_RemoveClothCollisionSourceInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_RemoveClothCollisionSource2Invoker = unsafe extern "C" fn(*mut c_void, *mut USkeletalMeshComponentOpaque, *mut UPhysicsAssetOpaque);
    pub(super) static mut USkeletalMeshComponent_RemoveClothCollisionSource2InvokerHandler: Option<USkeletalMeshComponent_RemoveClothCollisionSource2Invoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_RemoveClothCollisionSource2_handler(handler: USkeletalMeshComponent_RemoveClothCollisionSource2Invoker){
        unsafe{ USkeletalMeshComponent_RemoveClothCollisionSource2InvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_RequiresPreEndOfFrameSyncInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_RequiresPreEndOfFrameSyncInvokerHandler: Option<USkeletalMeshComponent_RequiresPreEndOfFrameSyncInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_RequiresPreEndOfFrameSync_handler(handler: USkeletalMeshComponent_RequiresPreEndOfFrameSyncInvoker){
        unsafe{ USkeletalMeshComponent_RequiresPreEndOfFrameSyncInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ResetAllBodiesSimulatePhysicsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_ResetAllBodiesSimulatePhysicsInvokerHandler: Option<USkeletalMeshComponent_ResetAllBodiesSimulatePhysicsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ResetAllBodiesSimulatePhysics_handler(handler: USkeletalMeshComponent_ResetAllBodiesSimulatePhysicsInvoker){
        unsafe{ USkeletalMeshComponent_ResetAllBodiesSimulatePhysicsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ResetAllowedAnimCurveEvaluationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_ResetAllowedAnimCurveEvaluationInvokerHandler: Option<USkeletalMeshComponent_ResetAllowedAnimCurveEvaluationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ResetAllowedAnimCurveEvaluation_handler(handler: USkeletalMeshComponent_ResetAllowedAnimCurveEvaluationInvoker){
        unsafe{ USkeletalMeshComponent_ResetAllowedAnimCurveEvaluationInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ResetClothCollisionSourcesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_ResetClothCollisionSourcesInvokerHandler: Option<USkeletalMeshComponent_ResetClothCollisionSourcesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ResetClothCollisionSources_handler(handler: USkeletalMeshComponent_ResetClothCollisionSourcesInvoker){
        unsafe{ USkeletalMeshComponent_ResetClothCollisionSourcesInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ResetClothTeleportModeInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_ResetClothTeleportModeInvokerHandler: Option<USkeletalMeshComponent_ResetClothTeleportModeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ResetClothTeleportMode_handler(handler: USkeletalMeshComponent_ResetClothTeleportModeInvoker){
        unsafe{ USkeletalMeshComponent_ResetClothTeleportModeInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ResetRootBodyIndexInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_ResetRootBodyIndexInvokerHandler: Option<USkeletalMeshComponent_ResetRootBodyIndexInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ResetRootBodyIndex_handler(handler: USkeletalMeshComponent_ResetRootBodyIndexInvoker){
        unsafe{ USkeletalMeshComponent_ResetRootBodyIndexInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ResumeClothingSimulationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_ResumeClothingSimulationInvokerHandler: Option<USkeletalMeshComponent_ResumeClothingSimulationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ResumeClothingSimulation_handler(handler: USkeletalMeshComponent_ResumeClothingSimulationInvoker){
        unsafe{ USkeletalMeshComponent_ResumeClothingSimulationInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetAllBodiesCollisionObjectTypeInvoker = unsafe extern "C" fn(*mut c_void, ECollisionChannel);
    pub(super) static mut USkeletalMeshComponent_SetAllBodiesCollisionObjectTypeInvokerHandler: Option<USkeletalMeshComponent_SetAllBodiesCollisionObjectTypeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetAllBodiesCollisionObjectType_handler(handler: USkeletalMeshComponent_SetAllBodiesCollisionObjectTypeInvoker){
        unsafe{ USkeletalMeshComponent_SetAllBodiesCollisionObjectTypeInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetAllBodiesNotifyRigidBodyCollisionInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USkeletalMeshComponent_SetAllBodiesNotifyRigidBodyCollisionInvokerHandler: Option<USkeletalMeshComponent_SetAllBodiesNotifyRigidBodyCollisionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetAllBodiesNotifyRigidBodyCollision_handler(handler: USkeletalMeshComponent_SetAllBodiesNotifyRigidBodyCollisionInvoker){
        unsafe{ USkeletalMeshComponent_SetAllBodiesNotifyRigidBodyCollisionInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeightInvoker = unsafe extern "C" fn(*mut c_void, f32, bool);
    pub(super) static mut USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeightInvokerHandler: Option<USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeightInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeight_handler(handler: USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeightInvoker){
        unsafe{ USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeightInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetAllBodiesSimulatePhysicsInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USkeletalMeshComponent_SetAllBodiesSimulatePhysicsInvokerHandler: Option<USkeletalMeshComponent_SetAllBodiesSimulatePhysicsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetAllBodiesSimulatePhysics_handler(handler: USkeletalMeshComponent_SetAllBodiesSimulatePhysicsInvoker){
        unsafe{ USkeletalMeshComponent_SetAllBodiesSimulatePhysicsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetAllMassScaleInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut USkeletalMeshComponent_SetAllMassScaleInvokerHandler: Option<USkeletalMeshComponent_SetAllMassScaleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetAllMassScale_handler(handler: USkeletalMeshComponent_SetAllMassScaleInvoker){
        unsafe{ USkeletalMeshComponent_SetAllMassScaleInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetAllMotorsAngularDriveParamsInvoker = unsafe extern "C" fn(*mut c_void, f32, f32, f32, bool);
    pub(super) static mut USkeletalMeshComponent_SetAllMotorsAngularDriveParamsInvokerHandler: Option<USkeletalMeshComponent_SetAllMotorsAngularDriveParamsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetAllMotorsAngularDriveParams_handler(handler: USkeletalMeshComponent_SetAllMotorsAngularDriveParamsInvoker){
        unsafe{ USkeletalMeshComponent_SetAllMotorsAngularDriveParamsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetAllMotorsAngularPositionDriveInvoker = unsafe extern "C" fn(*mut c_void, bool, bool, bool);
    pub(super) static mut USkeletalMeshComponent_SetAllMotorsAngularPositionDriveInvokerHandler: Option<USkeletalMeshComponent_SetAllMotorsAngularPositionDriveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetAllMotorsAngularPositionDrive_handler(handler: USkeletalMeshComponent_SetAllMotorsAngularPositionDriveInvoker){
        unsafe{ USkeletalMeshComponent_SetAllMotorsAngularPositionDriveInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetAllMotorsAngularVelocityDriveInvoker = unsafe extern "C" fn(*mut c_void, bool, bool, bool);
    pub(super) static mut USkeletalMeshComponent_SetAllMotorsAngularVelocityDriveInvokerHandler: Option<USkeletalMeshComponent_SetAllMotorsAngularVelocityDriveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetAllMotorsAngularVelocityDrive_handler(handler: USkeletalMeshComponent_SetAllMotorsAngularVelocityDriveInvoker){
        unsafe{ USkeletalMeshComponent_SetAllMotorsAngularVelocityDriveInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetAllPhysicsLinearVelocityInvoker = unsafe extern "C" fn(*mut c_void, Vector3, bool);
    pub(super) static mut USkeletalMeshComponent_SetAllPhysicsLinearVelocityInvokerHandler: Option<USkeletalMeshComponent_SetAllPhysicsLinearVelocityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetAllPhysicsLinearVelocity_handler(handler: USkeletalMeshComponent_SetAllPhysicsLinearVelocityInvoker){
        unsafe{ USkeletalMeshComponent_SetAllPhysicsLinearVelocityInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetAllPhysicsPositionInvoker = unsafe extern "C" fn(*mut c_void, Vector3);
    pub(super) static mut USkeletalMeshComponent_SetAllPhysicsPositionInvokerHandler: Option<USkeletalMeshComponent_SetAllPhysicsPositionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetAllPhysicsPosition_handler(handler: USkeletalMeshComponent_SetAllPhysicsPositionInvoker){
        unsafe{ USkeletalMeshComponent_SetAllPhysicsPositionInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetAllPhysicsRotationInvoker = unsafe extern "C" fn(*mut c_void, Rotator);
    pub(super) static mut USkeletalMeshComponent_SetAllPhysicsRotationInvokerHandler: Option<USkeletalMeshComponent_SetAllPhysicsRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetAllPhysicsRotation_handler(handler: USkeletalMeshComponent_SetAllPhysicsRotationInvoker){
        unsafe{ USkeletalMeshComponent_SetAllPhysicsRotationInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetAllUseCCDInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USkeletalMeshComponent_SetAllUseCCDInvokerHandler: Option<USkeletalMeshComponent_SetAllUseCCDInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetAllUseCCD_handler(handler: USkeletalMeshComponent_SetAllUseCCDInvoker){
        unsafe{ USkeletalMeshComponent_SetAllUseCCDInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetAllowAnimCurveEvaluationInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USkeletalMeshComponent_SetAllowAnimCurveEvaluationInvokerHandler: Option<USkeletalMeshComponent_SetAllowAnimCurveEvaluationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetAllowAnimCurveEvaluation_handler(handler: USkeletalMeshComponent_SetAllowAnimCurveEvaluationInvoker){
        unsafe{ USkeletalMeshComponent_SetAllowAnimCurveEvaluationInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetAllowClothActorsInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USkeletalMeshComponent_SetAllowClothActorsInvokerHandler: Option<USkeletalMeshComponent_SetAllowClothActorsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetAllowClothActors_handler(handler: USkeletalMeshComponent_SetAllowClothActorsInvoker){
        unsafe{ USkeletalMeshComponent_SetAllowClothActorsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetAllowRigidBodyAnimNodeInvoker = unsafe extern "C" fn(*mut c_void, bool, bool);
    pub(super) static mut USkeletalMeshComponent_SetAllowRigidBodyAnimNodeInvokerHandler: Option<USkeletalMeshComponent_SetAllowRigidBodyAnimNodeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetAllowRigidBodyAnimNode_handler(handler: USkeletalMeshComponent_SetAllowRigidBodyAnimNodeInvoker){
        unsafe{ USkeletalMeshComponent_SetAllowRigidBodyAnimNodeInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetAngularLimitsInvoker = unsafe extern "C" fn(*mut c_void, UName, f32, f32, f32);
    pub(super) static mut USkeletalMeshComponent_SetAngularLimitsInvokerHandler: Option<USkeletalMeshComponent_SetAngularLimitsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetAngularLimits_handler(handler: USkeletalMeshComponent_SetAngularLimitsInvoker){
        unsafe{ USkeletalMeshComponent_SetAngularLimitsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetAnimationInvoker = unsafe extern "C" fn(*mut c_void, *mut UAnimationAssetOpaque);
    pub(super) static mut USkeletalMeshComponent_SetAnimationInvokerHandler: Option<USkeletalMeshComponent_SetAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetAnimation_handler(handler: USkeletalMeshComponent_SetAnimationInvoker){
        unsafe{ USkeletalMeshComponent_SetAnimationInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetBodyNotifyRigidBodyCollisionInvoker = unsafe extern "C" fn(*mut c_void, bool, UName);
    pub(super) static mut USkeletalMeshComponent_SetBodyNotifyRigidBodyCollisionInvokerHandler: Option<USkeletalMeshComponent_SetBodyNotifyRigidBodyCollisionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetBodyNotifyRigidBodyCollision_handler(handler: USkeletalMeshComponent_SetBodyNotifyRigidBodyCollisionInvoker){
        unsafe{ USkeletalMeshComponent_SetBodyNotifyRigidBodyCollisionInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetClothMaxDistanceScaleInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut USkeletalMeshComponent_SetClothMaxDistanceScaleInvokerHandler: Option<USkeletalMeshComponent_SetClothMaxDistanceScaleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetClothMaxDistanceScale_handler(handler: USkeletalMeshComponent_SetClothMaxDistanceScaleInvoker){
        unsafe{ USkeletalMeshComponent_SetClothMaxDistanceScaleInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetCollisionObjectTypeInvoker = unsafe extern "C" fn(*mut c_void, ECollisionChannel);
    pub(super) static mut USkeletalMeshComponent_SetCollisionObjectTypeInvokerHandler: Option<USkeletalMeshComponent_SetCollisionObjectTypeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetCollisionObjectType_handler(handler: USkeletalMeshComponent_SetCollisionObjectTypeInvoker){
        unsafe{ USkeletalMeshComponent_SetCollisionObjectTypeInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetComponentTickEnabledInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USkeletalMeshComponent_SetComponentTickEnabledInvokerHandler: Option<USkeletalMeshComponent_SetComponentTickEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetComponentTickEnabled_handler(handler: USkeletalMeshComponent_SetComponentTickEnabledInvoker){
        unsafe{ USkeletalMeshComponent_SetComponentTickEnabledInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetConstraintProfileInvoker = unsafe extern "C" fn(*mut c_void, UName, UName, bool);
    pub(super) static mut USkeletalMeshComponent_SetConstraintProfileInvokerHandler: Option<USkeletalMeshComponent_SetConstraintProfileInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetConstraintProfile_handler(handler: USkeletalMeshComponent_SetConstraintProfileInvoker){
        unsafe{ USkeletalMeshComponent_SetConstraintProfileInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetConstraintProfileForAllInvoker = unsafe extern "C" fn(*mut c_void, UName, bool);
    pub(super) static mut USkeletalMeshComponent_SetConstraintProfileForAllInvokerHandler: Option<USkeletalMeshComponent_SetConstraintProfileForAllInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetConstraintProfileForAll_handler(handler: USkeletalMeshComponent_SetConstraintProfileForAllInvoker){
        unsafe{ USkeletalMeshComponent_SetConstraintProfileForAllInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetDisablePostProcessBlueprintInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USkeletalMeshComponent_SetDisablePostProcessBlueprintInvokerHandler: Option<USkeletalMeshComponent_SetDisablePostProcessBlueprintInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetDisablePostProcessBlueprint_handler(handler: USkeletalMeshComponent_SetDisablePostProcessBlueprintInvoker){
        unsafe{ USkeletalMeshComponent_SetDisablePostProcessBlueprintInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetEnableBodyGravityInvoker = unsafe extern "C" fn(*mut c_void, bool, UName);
    pub(super) static mut USkeletalMeshComponent_SetEnableBodyGravityInvokerHandler: Option<USkeletalMeshComponent_SetEnableBodyGravityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetEnableBodyGravity_handler(handler: USkeletalMeshComponent_SetEnableBodyGravityInvoker){
        unsafe{ USkeletalMeshComponent_SetEnableBodyGravityInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetEnableGravityInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USkeletalMeshComponent_SetEnableGravityInvokerHandler: Option<USkeletalMeshComponent_SetEnableGravityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetEnableGravity_handler(handler: USkeletalMeshComponent_SetEnableGravityInvoker){
        unsafe{ USkeletalMeshComponent_SetEnableGravityInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetEnableGravityOnAllBodiesBelowInvoker = unsafe extern "C" fn(*mut c_void, bool, UName, bool);
    pub(super) static mut USkeletalMeshComponent_SetEnableGravityOnAllBodiesBelowInvokerHandler: Option<USkeletalMeshComponent_SetEnableGravityOnAllBodiesBelowInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetEnableGravityOnAllBodiesBelow_handler(handler: USkeletalMeshComponent_SetEnableGravityOnAllBodiesBelowInvoker){
        unsafe{ USkeletalMeshComponent_SetEnableGravityOnAllBodiesBelowInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetEnablePhysicsBlendingInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USkeletalMeshComponent_SetEnablePhysicsBlendingInvokerHandler: Option<USkeletalMeshComponent_SetEnablePhysicsBlendingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetEnablePhysicsBlending_handler(handler: USkeletalMeshComponent_SetEnablePhysicsBlendingInvoker){
        unsafe{ USkeletalMeshComponent_SetEnablePhysicsBlendingInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetForceRefPoseInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USkeletalMeshComponent_SetForceRefPoseInvokerHandler: Option<USkeletalMeshComponent_SetForceRefPoseInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetForceRefPose_handler(handler: USkeletalMeshComponent_SetForceRefPoseInvoker){
        unsafe{ USkeletalMeshComponent_SetForceRefPoseInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetMorphTargetInvoker = unsafe extern "C" fn(*mut c_void, UName, f32, bool);
    pub(super) static mut USkeletalMeshComponent_SetMorphTargetInvokerHandler: Option<USkeletalMeshComponent_SetMorphTargetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetMorphTarget_handler(handler: USkeletalMeshComponent_SetMorphTargetInvoker){
        unsafe{ USkeletalMeshComponent_SetMorphTargetInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetNotifyRigidBodyCollisionInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USkeletalMeshComponent_SetNotifyRigidBodyCollisionInvokerHandler: Option<USkeletalMeshComponent_SetNotifyRigidBodyCollisionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetNotifyRigidBodyCollision_handler(handler: USkeletalMeshComponent_SetNotifyRigidBodyCollisionInvoker){
        unsafe{ USkeletalMeshComponent_SetNotifyRigidBodyCollisionInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetNotifyRigidBodyCollisionBelowInvoker = unsafe extern "C" fn(*mut c_void, bool, UName, bool);
    pub(super) static mut USkeletalMeshComponent_SetNotifyRigidBodyCollisionBelowInvokerHandler: Option<USkeletalMeshComponent_SetNotifyRigidBodyCollisionBelowInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetNotifyRigidBodyCollisionBelow_handler(handler: USkeletalMeshComponent_SetNotifyRigidBodyCollisionBelowInvoker){
        unsafe{ USkeletalMeshComponent_SetNotifyRigidBodyCollisionBelowInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetPhysMaterialOverrideInvoker = unsafe extern "C" fn(*mut c_void, *mut UPhysicalMaterialOpaque);
    pub(super) static mut USkeletalMeshComponent_SetPhysMaterialOverrideInvokerHandler: Option<USkeletalMeshComponent_SetPhysMaterialOverrideInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetPhysMaterialOverride_handler(handler: USkeletalMeshComponent_SetPhysMaterialOverrideInvoker){
        unsafe{ USkeletalMeshComponent_SetPhysMaterialOverrideInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetPhysicsAssetInvoker = unsafe extern "C" fn(*mut c_void, *mut UPhysicsAssetOpaque, bool);
    pub(super) static mut USkeletalMeshComponent_SetPhysicsAssetInvokerHandler: Option<USkeletalMeshComponent_SetPhysicsAssetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetPhysicsAsset_handler(handler: USkeletalMeshComponent_SetPhysicsAssetInvoker){
        unsafe{ USkeletalMeshComponent_SetPhysicsAssetInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetPhysicsBlendWeightInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut USkeletalMeshComponent_SetPhysicsBlendWeightInvokerHandler: Option<USkeletalMeshComponent_SetPhysicsBlendWeightInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetPhysicsBlendWeight_handler(handler: USkeletalMeshComponent_SetPhysicsBlendWeightInvoker){
        unsafe{ USkeletalMeshComponent_SetPhysicsBlendWeightInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetPlayRateInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut USkeletalMeshComponent_SetPlayRateInvokerHandler: Option<USkeletalMeshComponent_SetPlayRateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetPlayRate_handler(handler: USkeletalMeshComponent_SetPlayRateInvoker){
        unsafe{ USkeletalMeshComponent_SetPlayRateInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetPositionInvoker = unsafe extern "C" fn(*mut c_void, f32, bool);
    pub(super) static mut USkeletalMeshComponent_SetPositionInvokerHandler: Option<USkeletalMeshComponent_SetPositionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetPosition_handler(handler: USkeletalMeshComponent_SetPositionInvoker){
        unsafe{ USkeletalMeshComponent_SetPositionInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetPredictedLODLevelInvoker = unsafe extern "C" fn(*mut c_void, i32);
    pub(super) static mut USkeletalMeshComponent_SetPredictedLODLevelInvokerHandler: Option<USkeletalMeshComponent_SetPredictedLODLevelInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetPredictedLODLevel_handler(handler: USkeletalMeshComponent_SetPredictedLODLevelInvoker){
        unsafe{ USkeletalMeshComponent_SetPredictedLODLevelInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetRootBodyIndexInvoker = unsafe extern "C" fn(*mut c_void, i32);
    pub(super) static mut USkeletalMeshComponent_SetRootBodyIndexInvokerHandler: Option<USkeletalMeshComponent_SetRootBodyIndexInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetRootBodyIndex_handler(handler: USkeletalMeshComponent_SetRootBodyIndexInvoker){
        unsafe{ USkeletalMeshComponent_SetRootBodyIndexInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetSimulatePhysicsInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USkeletalMeshComponent_SetSimulatePhysicsInvokerHandler: Option<USkeletalMeshComponent_SetSimulatePhysicsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetSimulatePhysics_handler(handler: USkeletalMeshComponent_SetSimulatePhysicsInvoker){
        unsafe{ USkeletalMeshComponent_SetSimulatePhysicsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetSkeletalMeshAssetInvoker = unsafe extern "C" fn(*mut c_void, *mut USkeletalMeshOpaque);
    pub(super) static mut USkeletalMeshComponent_SetSkeletalMeshAssetInvokerHandler: Option<USkeletalMeshComponent_SetSkeletalMeshAssetInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetSkeletalMeshAsset_handler(handler: USkeletalMeshComponent_SetSkeletalMeshAssetInvoker){
        unsafe{ USkeletalMeshComponent_SetSkeletalMeshAssetInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetSkinnedAssetAndUpdateInvoker = unsafe extern "C" fn(*mut c_void, *mut USkinnedAssetOpaque, bool);
    pub(super) static mut USkeletalMeshComponent_SetSkinnedAssetAndUpdateInvokerHandler: Option<USkeletalMeshComponent_SetSkinnedAssetAndUpdateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetSkinnedAssetAndUpdate_handler(handler: USkeletalMeshComponent_SetSkinnedAssetAndUpdateInvoker){
        unsafe{ USkeletalMeshComponent_SetSkinnedAssetAndUpdateInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetTeleportDistanceThresholdInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut USkeletalMeshComponent_SetTeleportDistanceThresholdInvokerHandler: Option<USkeletalMeshComponent_SetTeleportDistanceThresholdInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetTeleportDistanceThreshold_handler(handler: USkeletalMeshComponent_SetTeleportDistanceThresholdInvoker){
        unsafe{ USkeletalMeshComponent_SetTeleportDistanceThresholdInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetTeleportRotationThresholdInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut USkeletalMeshComponent_SetTeleportRotationThresholdInvokerHandler: Option<USkeletalMeshComponent_SetTeleportRotationThresholdInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetTeleportRotationThreshold_handler(handler: USkeletalMeshComponent_SetTeleportRotationThresholdInvoker){
        unsafe{ USkeletalMeshComponent_SetTeleportRotationThresholdInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetUpdateAnimationInEditorInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USkeletalMeshComponent_SetUpdateAnimationInEditorInvokerHandler: Option<USkeletalMeshComponent_SetUpdateAnimationInEditorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetUpdateAnimationInEditor_handler(handler: USkeletalMeshComponent_SetUpdateAnimationInEditorInvoker){
        unsafe{ USkeletalMeshComponent_SetUpdateAnimationInEditorInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SetUpdateClothInEditorInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USkeletalMeshComponent_SetUpdateClothInEditorInvokerHandler: Option<USkeletalMeshComponent_SetUpdateClothInEditorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SetUpdateClothInEditor_handler(handler: USkeletalMeshComponent_SetUpdateClothInEditorInvoker){
        unsafe{ USkeletalMeshComponent_SetUpdateClothInEditorInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ShouldEvaluatePostProcessInstanceInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_ShouldEvaluatePostProcessInstanceInvokerHandler: Option<USkeletalMeshComponent_ShouldEvaluatePostProcessInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ShouldEvaluatePostProcessInstance_handler(handler: USkeletalMeshComponent_ShouldEvaluatePostProcessInstanceInvoker){
        unsafe{ USkeletalMeshComponent_ShouldEvaluatePostProcessInstanceInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ShouldOnlyTickMontagesInvoker = unsafe extern "C" fn(*mut c_void, f32) -> bool;
    pub(super) static mut USkeletalMeshComponent_ShouldOnlyTickMontagesInvokerHandler: Option<USkeletalMeshComponent_ShouldOnlyTickMontagesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ShouldOnlyTickMontages_handler(handler: USkeletalMeshComponent_ShouldOnlyTickMontagesInvoker){
        unsafe{ USkeletalMeshComponent_ShouldOnlyTickMontagesInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ShouldPostUpdatePostProcessInstanceInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_ShouldPostUpdatePostProcessInstanceInvokerHandler: Option<USkeletalMeshComponent_ShouldPostUpdatePostProcessInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ShouldPostUpdatePostProcessInstance_handler(handler: USkeletalMeshComponent_ShouldPostUpdatePostProcessInstanceInvoker){
        unsafe{ USkeletalMeshComponent_ShouldPostUpdatePostProcessInstanceInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ShouldTickAnimationInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_ShouldTickAnimationInvokerHandler: Option<USkeletalMeshComponent_ShouldTickAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ShouldTickAnimation_handler(handler: USkeletalMeshComponent_ShouldTickAnimationInvoker){
        unsafe{ USkeletalMeshComponent_ShouldTickAnimationInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ShouldTickPoseInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_ShouldTickPoseInvokerHandler: Option<USkeletalMeshComponent_ShouldTickPoseInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ShouldTickPose_handler(handler: USkeletalMeshComponent_ShouldTickPoseInvoker){
        unsafe{ USkeletalMeshComponent_ShouldTickPoseInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ShouldUpdatePostProcessInstanceInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_ShouldUpdatePostProcessInstanceInvokerHandler: Option<USkeletalMeshComponent_ShouldUpdatePostProcessInstanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ShouldUpdatePostProcessInstance_handler(handler: USkeletalMeshComponent_ShouldUpdatePostProcessInstanceInvoker){
        unsafe{ USkeletalMeshComponent_ShouldUpdatePostProcessInstanceInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ShouldUpdateTransformInvoker = unsafe extern "C" fn(*mut c_void, bool) -> bool;
    pub(super) static mut USkeletalMeshComponent_ShouldUpdateTransformInvokerHandler: Option<USkeletalMeshComponent_ShouldUpdateTransformInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ShouldUpdateTransform_handler(handler: USkeletalMeshComponent_ShouldUpdateTransformInvoker){
        unsafe{ USkeletalMeshComponent_ShouldUpdateTransformInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SkelMeshCompOnParticleSystemFinishedInvoker = unsafe extern "C" fn(*mut c_void, *mut UParticleSystemComponentOpaque);
    pub(super) static mut USkeletalMeshComponent_SkelMeshCompOnParticleSystemFinishedInvokerHandler: Option<USkeletalMeshComponent_SkelMeshCompOnParticleSystemFinishedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SkelMeshCompOnParticleSystemFinished_handler(handler: USkeletalMeshComponent_SkelMeshCompOnParticleSystemFinishedInvoker){
        unsafe{ USkeletalMeshComponent_SkelMeshCompOnParticleSystemFinishedInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_StopInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_StopInvokerHandler: Option<USkeletalMeshComponent_StopInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_Stop_handler(handler: USkeletalMeshComponent_StopInvoker){
        unsafe{ USkeletalMeshComponent_StopInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_SuspendClothingSimulationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_SuspendClothingSimulationInvokerHandler: Option<USkeletalMeshComponent_SuspendClothingSimulationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_SuspendClothingSimulation_handler(handler: USkeletalMeshComponent_SuspendClothingSimulationInvoker){
        unsafe{ USkeletalMeshComponent_SuspendClothingSimulationInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_TermArticulatedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_TermArticulatedInvokerHandler: Option<USkeletalMeshComponent_TermArticulatedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_TermArticulated_handler(handler: USkeletalMeshComponent_TermArticulatedInvoker){
        unsafe{ USkeletalMeshComponent_TermArticulatedInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_TermBodiesBelowInvoker = unsafe extern "C" fn(*mut c_void, UName);
    pub(super) static mut USkeletalMeshComponent_TermBodiesBelowInvokerHandler: Option<USkeletalMeshComponent_TermBodiesBelowInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_TermBodiesBelow_handler(handler: USkeletalMeshComponent_TermBodiesBelowInvoker){
        unsafe{ USkeletalMeshComponent_TermBodiesBelowInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_TermCollisionRelationshipsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_TermCollisionRelationshipsInvokerHandler: Option<USkeletalMeshComponent_TermCollisionRelationshipsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_TermCollisionRelationships_handler(handler: USkeletalMeshComponent_TermCollisionRelationshipsInvoker){
        unsafe{ USkeletalMeshComponent_TermCollisionRelationshipsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_TickAnimInstancesInvoker = unsafe extern "C" fn(*mut c_void, f32, bool);
    pub(super) static mut USkeletalMeshComponent_TickAnimInstancesInvokerHandler: Option<USkeletalMeshComponent_TickAnimInstancesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_TickAnimInstances_handler(handler: USkeletalMeshComponent_TickAnimInstancesInvoker){
        unsafe{ USkeletalMeshComponent_TickAnimInstancesInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_TickAnimationInvoker = unsafe extern "C" fn(*mut c_void, f32, bool);
    pub(super) static mut USkeletalMeshComponent_TickAnimationInvokerHandler: Option<USkeletalMeshComponent_TickAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_TickAnimation_handler(handler: USkeletalMeshComponent_TickAnimationInvoker){
        unsafe{ USkeletalMeshComponent_TickAnimationInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_TickPoseInvoker = unsafe extern "C" fn(*mut c_void, f32, bool);
    pub(super) static mut USkeletalMeshComponent_TickPoseInvokerHandler: Option<USkeletalMeshComponent_TickPoseInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_TickPose_handler(handler: USkeletalMeshComponent_TickPoseInvoker){
        unsafe{ USkeletalMeshComponent_TickPoseInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ToggleDisablePostProcessBlueprintInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_ToggleDisablePostProcessBlueprintInvokerHandler: Option<USkeletalMeshComponent_ToggleDisablePostProcessBlueprintInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ToggleDisablePostProcessBlueprint_handler(handler: USkeletalMeshComponent_ToggleDisablePostProcessBlueprintInvoker){
        unsafe{ USkeletalMeshComponent_ToggleDisablePostProcessBlueprintInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_UnHideBoneInvoker = unsafe extern "C" fn(*mut c_void, i32);
    pub(super) static mut USkeletalMeshComponent_UnHideBoneInvokerHandler: Option<USkeletalMeshComponent_UnHideBoneInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_UnHideBone_handler(handler: USkeletalMeshComponent_UnHideBoneInvoker){
        unsafe{ USkeletalMeshComponent_UnHideBoneInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_UnbindClothFromLeaderPoseComponentInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut USkeletalMeshComponent_UnbindClothFromLeaderPoseComponentInvokerHandler: Option<USkeletalMeshComponent_UnbindClothFromLeaderPoseComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_UnbindClothFromLeaderPoseComponent_handler(handler: USkeletalMeshComponent_UnbindClothFromLeaderPoseComponentInvoker){
        unsafe{ USkeletalMeshComponent_UnbindClothFromLeaderPoseComponentInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_UpdateBoneBodyMappingInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_UpdateBoneBodyMappingInvokerHandler: Option<USkeletalMeshComponent_UpdateBoneBodyMappingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_UpdateBoneBodyMapping_handler(handler: USkeletalMeshComponent_UpdateBoneBodyMappingInvoker){
        unsafe{ USkeletalMeshComponent_UpdateBoneBodyMappingInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_UpdateClothTransformInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_UpdateClothTransformInvokerHandler: Option<USkeletalMeshComponent_UpdateClothTransformInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_UpdateClothTransform_handler(handler: USkeletalMeshComponent_UpdateClothTransformInvoker){
        unsafe{ USkeletalMeshComponent_UpdateClothTransformInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_UpdateCollisionProfileInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_UpdateCollisionProfileInvokerHandler: Option<USkeletalMeshComponent_UpdateCollisionProfileInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_UpdateCollisionProfile_handler(handler: USkeletalMeshComponent_UpdateCollisionProfileInvoker){
        unsafe{ USkeletalMeshComponent_UpdateCollisionProfileInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_UpdateFollowerComponentInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_UpdateFollowerComponentInvokerHandler: Option<USkeletalMeshComponent_UpdateFollowerComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_UpdateFollowerComponent_handler(handler: USkeletalMeshComponent_UpdateFollowerComponentInvoker){
        unsafe{ USkeletalMeshComponent_UpdateFollowerComponentInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_UpdateHasValidBodiesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_UpdateHasValidBodiesInvokerHandler: Option<USkeletalMeshComponent_UpdateHasValidBodiesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_UpdateHasValidBodies_handler(handler: USkeletalMeshComponent_UpdateHasValidBodiesInvoker){
        unsafe{ USkeletalMeshComponent_UpdateHasValidBodiesInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_UpdateLODStatusInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut USkeletalMeshComponent_UpdateLODStatusInvokerHandler: Option<USkeletalMeshComponent_UpdateLODStatusInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_UpdateLODStatus_handler(handler: USkeletalMeshComponent_UpdateLODStatusInvoker){
        unsafe{ USkeletalMeshComponent_UpdateLODStatusInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_UpdateMeshForBrokenConstraintsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_UpdateMeshForBrokenConstraintsInvokerHandler: Option<USkeletalMeshComponent_UpdateMeshForBrokenConstraintsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_UpdateMeshForBrokenConstraints_handler(handler: USkeletalMeshComponent_UpdateMeshForBrokenConstraintsInvoker){
        unsafe{ USkeletalMeshComponent_UpdateMeshForBrokenConstraintsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_UpdateOverlapsImplInvoker = unsafe extern "C" fn(*mut c_void, *mut TOverlapArrayViewOpaque, bool, *mut TOverlapArrayViewOpaque) -> bool;
    pub(super) static mut USkeletalMeshComponent_UpdateOverlapsImplInvokerHandler: Option<USkeletalMeshComponent_UpdateOverlapsImplInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_UpdateOverlapsImpl_handler(handler: USkeletalMeshComponent_UpdateOverlapsImplInvoker){
        unsafe{ USkeletalMeshComponent_UpdateOverlapsImplInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_UpdatePhysicsToRBChannelsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_UpdatePhysicsToRBChannelsInvokerHandler: Option<USkeletalMeshComponent_UpdatePhysicsToRBChannelsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_UpdatePhysicsToRBChannels_handler(handler: USkeletalMeshComponent_UpdatePhysicsToRBChannelsInvoker){
        unsafe{ USkeletalMeshComponent_UpdatePhysicsToRBChannelsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_UpdatePoseWatchesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_UpdatePoseWatchesInvokerHandler: Option<USkeletalMeshComponent_UpdatePoseWatchesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_UpdatePoseWatches_handler(handler: USkeletalMeshComponent_UpdatePoseWatchesInvoker){
        unsafe{ USkeletalMeshComponent_UpdatePoseWatchesInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_UpdateRBJointMotorsInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_UpdateRBJointMotorsInvokerHandler: Option<USkeletalMeshComponent_UpdateRBJointMotorsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_UpdateRBJointMotors_handler(handler: USkeletalMeshComponent_UpdateRBJointMotorsInvoker){
        unsafe{ USkeletalMeshComponent_UpdateRBJointMotorsInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_ValidateAnimationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_ValidateAnimationInvokerHandler: Option<USkeletalMeshComponent_ValidateAnimationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_ValidateAnimation_handler(handler: USkeletalMeshComponent_ValidateAnimationInvoker){
        unsafe{ USkeletalMeshComponent_ValidateAnimationInvokerHandler = Some(handler) };
    }

    type USkeletalMeshComponent_WakeAllRigidBodiesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut USkeletalMeshComponent_WakeAllRigidBodiesInvokerHandler: Option<USkeletalMeshComponent_WakeAllRigidBodiesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_USkeletalMeshComponent_WakeAllRigidBodies_handler(handler: USkeletalMeshComponent_WakeAllRigidBodiesInvoker){
        unsafe{ USkeletalMeshComponent_WakeAllRigidBodiesInvokerHandler = Some(handler) };
    }

    type UCapsuleComponent_CalcBoundingCylinderInvoker = unsafe extern "C" fn(*mut c_void, &mut f32, &mut f32);
    pub(super) static mut UCapsuleComponent_CalcBoundingCylinderInvokerHandler: Option<UCapsuleComponent_CalcBoundingCylinderInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCapsuleComponent_CalcBoundingCylinder_handler(handler: UCapsuleComponent_CalcBoundingCylinderInvoker){
        unsafe{ UCapsuleComponent_CalcBoundingCylinderInvokerHandler = Some(handler) };
    }

    type UCapsuleComponent_CreateSceneProxyInvoker = unsafe extern "C" fn(*mut c_void) -> *mut FPrimitiveSceneProxyOpaque;
    pub(super) static mut UCapsuleComponent_CreateSceneProxyInvokerHandler: Option<UCapsuleComponent_CreateSceneProxyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCapsuleComponent_CreateSceneProxy_handler(handler: UCapsuleComponent_CreateSceneProxyInvoker){
        unsafe{ UCapsuleComponent_CreateSceneProxyInvokerHandler = Some(handler) };
    }

    type UCapsuleComponent_GetCollisionShapeInvoker = unsafe extern "C" fn(*mut c_void, f32) -> CollisionShape;
    pub(super) static mut UCapsuleComponent_GetCollisionShapeInvokerHandler: Option<UCapsuleComponent_GetCollisionShapeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCapsuleComponent_GetCollisionShape_handler(handler: UCapsuleComponent_GetCollisionShapeInvoker){
        unsafe{ UCapsuleComponent_GetCollisionShapeInvokerHandler = Some(handler) };
    }

    type UCapsuleComponent_GetScaledCapsuleHalfHeightInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCapsuleComponent_GetScaledCapsuleHalfHeightInvokerHandler: Option<UCapsuleComponent_GetScaledCapsuleHalfHeightInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCapsuleComponent_GetScaledCapsuleHalfHeight_handler(handler: UCapsuleComponent_GetScaledCapsuleHalfHeightInvoker){
        unsafe{ UCapsuleComponent_GetScaledCapsuleHalfHeightInvokerHandler = Some(handler) };
    }

    type UCapsuleComponent_GetScaledCapsuleHalfHeight_WithoutHemisphereInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCapsuleComponent_GetScaledCapsuleHalfHeight_WithoutHemisphereInvokerHandler: Option<UCapsuleComponent_GetScaledCapsuleHalfHeight_WithoutHemisphereInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCapsuleComponent_GetScaledCapsuleHalfHeight_WithoutHemisphere_handler(handler: UCapsuleComponent_GetScaledCapsuleHalfHeight_WithoutHemisphereInvoker){
        unsafe{ UCapsuleComponent_GetScaledCapsuleHalfHeight_WithoutHemisphereInvokerHandler = Some(handler) };
    }

    type UCapsuleComponent_GetScaledCapsuleRadiusInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCapsuleComponent_GetScaledCapsuleRadiusInvokerHandler: Option<UCapsuleComponent_GetScaledCapsuleRadiusInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCapsuleComponent_GetScaledCapsuleRadius_handler(handler: UCapsuleComponent_GetScaledCapsuleRadiusInvoker){
        unsafe{ UCapsuleComponent_GetScaledCapsuleRadiusInvokerHandler = Some(handler) };
    }

    type UCapsuleComponent_GetScaledCapsuleSizeInvoker = unsafe extern "C" fn(*mut c_void, &mut f32, &mut f32);
    pub(super) static mut UCapsuleComponent_GetScaledCapsuleSizeInvokerHandler: Option<UCapsuleComponent_GetScaledCapsuleSizeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCapsuleComponent_GetScaledCapsuleSize_handler(handler: UCapsuleComponent_GetScaledCapsuleSizeInvoker){
        unsafe{ UCapsuleComponent_GetScaledCapsuleSizeInvokerHandler = Some(handler) };
    }

    type UCapsuleComponent_GetScaledCapsuleSize_WithoutHemisphereInvoker = unsafe extern "C" fn(*mut c_void, &mut f32, &mut f32);
    pub(super) static mut UCapsuleComponent_GetScaledCapsuleSize_WithoutHemisphereInvokerHandler: Option<UCapsuleComponent_GetScaledCapsuleSize_WithoutHemisphereInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCapsuleComponent_GetScaledCapsuleSize_WithoutHemisphere_handler(handler: UCapsuleComponent_GetScaledCapsuleSize_WithoutHemisphereInvoker){
        unsafe{ UCapsuleComponent_GetScaledCapsuleSize_WithoutHemisphereInvokerHandler = Some(handler) };
    }

    type UCapsuleComponent_GetShapeScaleInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCapsuleComponent_GetShapeScaleInvokerHandler: Option<UCapsuleComponent_GetShapeScaleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCapsuleComponent_GetShapeScale_handler(handler: UCapsuleComponent_GetShapeScaleInvoker){
        unsafe{ UCapsuleComponent_GetShapeScaleInvokerHandler = Some(handler) };
    }

    type UCapsuleComponent_GetUnscaledCapsuleHalfHeightInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCapsuleComponent_GetUnscaledCapsuleHalfHeightInvokerHandler: Option<UCapsuleComponent_GetUnscaledCapsuleHalfHeightInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCapsuleComponent_GetUnscaledCapsuleHalfHeight_handler(handler: UCapsuleComponent_GetUnscaledCapsuleHalfHeightInvoker){
        unsafe{ UCapsuleComponent_GetUnscaledCapsuleHalfHeightInvokerHandler = Some(handler) };
    }

    type UCapsuleComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphereInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCapsuleComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphereInvokerHandler: Option<UCapsuleComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphereInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCapsuleComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphere_handler(handler: UCapsuleComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphereInvoker){
        unsafe{ UCapsuleComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphereInvokerHandler = Some(handler) };
    }

    type UCapsuleComponent_GetUnscaledCapsuleRadiusInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCapsuleComponent_GetUnscaledCapsuleRadiusInvokerHandler: Option<UCapsuleComponent_GetUnscaledCapsuleRadiusInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCapsuleComponent_GetUnscaledCapsuleRadius_handler(handler: UCapsuleComponent_GetUnscaledCapsuleRadiusInvoker){
        unsafe{ UCapsuleComponent_GetUnscaledCapsuleRadiusInvokerHandler = Some(handler) };
    }

    type UCapsuleComponent_GetUnscaledCapsuleSizeInvoker = unsafe extern "C" fn(*mut c_void, &mut f32, &mut f32);
    pub(super) static mut UCapsuleComponent_GetUnscaledCapsuleSizeInvokerHandler: Option<UCapsuleComponent_GetUnscaledCapsuleSizeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCapsuleComponent_GetUnscaledCapsuleSize_handler(handler: UCapsuleComponent_GetUnscaledCapsuleSizeInvoker){
        unsafe{ UCapsuleComponent_GetUnscaledCapsuleSizeInvokerHandler = Some(handler) };
    }

    type UCapsuleComponent_GetUnscaledCapsuleSize_WithoutHemisphereInvoker = unsafe extern "C" fn(*mut c_void, &mut f32, &mut f32);
    pub(super) static mut UCapsuleComponent_GetUnscaledCapsuleSize_WithoutHemisphereInvokerHandler: Option<UCapsuleComponent_GetUnscaledCapsuleSize_WithoutHemisphereInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCapsuleComponent_GetUnscaledCapsuleSize_WithoutHemisphere_handler(handler: UCapsuleComponent_GetUnscaledCapsuleSize_WithoutHemisphereInvoker){
        unsafe{ UCapsuleComponent_GetUnscaledCapsuleSize_WithoutHemisphereInvokerHandler = Some(handler) };
    }

    type UCapsuleComponent_InitCapsuleSizeInvoker = unsafe extern "C" fn(*mut c_void, f32, f32);
    pub(super) static mut UCapsuleComponent_InitCapsuleSizeInvokerHandler: Option<UCapsuleComponent_InitCapsuleSizeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCapsuleComponent_InitCapsuleSize_handler(handler: UCapsuleComponent_InitCapsuleSizeInvoker){
        unsafe{ UCapsuleComponent_InitCapsuleSizeInvokerHandler = Some(handler) };
    }

    type UCapsuleComponent_IsZeroExtentInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCapsuleComponent_IsZeroExtentInvokerHandler: Option<UCapsuleComponent_IsZeroExtentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCapsuleComponent_IsZeroExtent_handler(handler: UCapsuleComponent_IsZeroExtentInvoker){
        unsafe{ UCapsuleComponent_IsZeroExtentInvokerHandler = Some(handler) };
    }

    type UCapsuleComponent_PostLoadInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCapsuleComponent_PostLoadInvokerHandler: Option<UCapsuleComponent_PostLoadInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCapsuleComponent_PostLoad_handler(handler: UCapsuleComponent_PostLoadInvoker){
        unsafe{ UCapsuleComponent_PostLoadInvokerHandler = Some(handler) };
    }

    type UCapsuleComponent_SetCapsuleHalfHeightInvoker = unsafe extern "C" fn(*mut c_void, f32, bool);
    pub(super) static mut UCapsuleComponent_SetCapsuleHalfHeightInvokerHandler: Option<UCapsuleComponent_SetCapsuleHalfHeightInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCapsuleComponent_SetCapsuleHalfHeight_handler(handler: UCapsuleComponent_SetCapsuleHalfHeightInvoker){
        unsafe{ UCapsuleComponent_SetCapsuleHalfHeightInvokerHandler = Some(handler) };
    }

    type UCapsuleComponent_SetCapsuleRadiusInvoker = unsafe extern "C" fn(*mut c_void, f32, bool);
    pub(super) static mut UCapsuleComponent_SetCapsuleRadiusInvokerHandler: Option<UCapsuleComponent_SetCapsuleRadiusInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCapsuleComponent_SetCapsuleRadius_handler(handler: UCapsuleComponent_SetCapsuleRadiusInvoker){
        unsafe{ UCapsuleComponent_SetCapsuleRadiusInvokerHandler = Some(handler) };
    }

    type UCapsuleComponent_SetCapsuleSizeInvoker = unsafe extern "C" fn(*mut c_void, f32, f32, bool);
    pub(super) static mut UCapsuleComponent_SetCapsuleSizeInvokerHandler: Option<UCapsuleComponent_SetCapsuleSizeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCapsuleComponent_SetCapsuleSize_handler(handler: UCapsuleComponent_SetCapsuleSizeInvoker){
        unsafe{ UCapsuleComponent_SetCapsuleSizeInvokerHandler = Some(handler) };
    }

    type UCapsuleComponent_UpdateBodySetupInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCapsuleComponent_UpdateBodySetupInvokerHandler: Option<UCapsuleComponent_UpdateBodySetupInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCapsuleComponent_UpdateBodySetup_handler(handler: UCapsuleComponent_UpdateBodySetupInvoker){
        unsafe{ UCapsuleComponent_UpdateBodySetupInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_AddForceInvoker = unsafe extern "C" fn(*mut c_void, Vector3);
    pub(super) static mut UCharacterMovementComponent_AddForceInvokerHandler: Option<UCharacterMovementComponent_AddForceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_AddForce_handler(handler: UCharacterMovementComponent_AddForceInvoker){
        unsafe{ UCharacterMovementComponent_AddForceInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_AddImpulseInvoker = unsafe extern "C" fn(*mut c_void, Vector3, bool);
    pub(super) static mut UCharacterMovementComponent_AddImpulseInvokerHandler: Option<UCharacterMovementComponent_AddImpulseInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_AddImpulse_handler(handler: UCharacterMovementComponent_AddImpulseInvoker){
        unsafe{ UCharacterMovementComponent_AddImpulseInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_AdjustFloorHeightInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_AdjustFloorHeightInvokerHandler: Option<UCharacterMovementComponent_AdjustFloorHeightInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_AdjustFloorHeight_handler(handler: UCharacterMovementComponent_AdjustFloorHeightInvoker){
        unsafe{ UCharacterMovementComponent_AdjustFloorHeightInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_ApplyAccumulatedForcesInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UCharacterMovementComponent_ApplyAccumulatedForcesInvokerHandler: Option<UCharacterMovementComponent_ApplyAccumulatedForcesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_ApplyAccumulatedForces_handler(handler: UCharacterMovementComponent_ApplyAccumulatedForcesInvoker){
        unsafe{ UCharacterMovementComponent_ApplyAccumulatedForcesInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_ApplyDownwardForceInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UCharacterMovementComponent_ApplyDownwardForceInvokerHandler: Option<UCharacterMovementComponent_ApplyDownwardForceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_ApplyDownwardForce_handler(handler: UCharacterMovementComponent_ApplyDownwardForceInvoker){
        unsafe{ UCharacterMovementComponent_ApplyDownwardForceInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_ApplyNetworkMovementModeInvoker = unsafe extern "C" fn(*mut c_void, u8);
    pub(super) static mut UCharacterMovementComponent_ApplyNetworkMovementModeInvokerHandler: Option<UCharacterMovementComponent_ApplyNetworkMovementModeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_ApplyNetworkMovementMode_handler(handler: UCharacterMovementComponent_ApplyNetworkMovementModeInvoker){
        unsafe{ UCharacterMovementComponent_ApplyNetworkMovementModeInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_ApplyRepulsionForceInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UCharacterMovementComponent_ApplyRepulsionForceInvokerHandler: Option<UCharacterMovementComponent_ApplyRepulsionForceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_ApplyRepulsionForce_handler(handler: UCharacterMovementComponent_ApplyRepulsionForceInvoker){
        unsafe{ UCharacterMovementComponent_ApplyRepulsionForceInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_BeginDestroyInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_BeginDestroyInvokerHandler: Option<UCharacterMovementComponent_BeginDestroyInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_BeginDestroy_handler(handler: UCharacterMovementComponent_BeginDestroyInvoker){
        unsafe{ UCharacterMovementComponent_BeginDestroyInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_BeginPlayInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_BeginPlayInvokerHandler: Option<UCharacterMovementComponent_BeginPlayInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_BeginPlay_handler(handler: UCharacterMovementComponent_BeginPlayInvoker){
        unsafe{ UCharacterMovementComponent_BeginPlayInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_CalcAvoidanceVelocityInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UCharacterMovementComponent_CalcAvoidanceVelocityInvokerHandler: Option<UCharacterMovementComponent_CalcAvoidanceVelocityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_CalcAvoidanceVelocity_handler(handler: UCharacterMovementComponent_CalcAvoidanceVelocityInvoker){
        unsafe{ UCharacterMovementComponent_CalcAvoidanceVelocityInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_CalcVelocityInvoker = unsafe extern "C" fn(*mut c_void, f32, f32, bool, f32);
    pub(super) static mut UCharacterMovementComponent_CalcVelocityInvokerHandler: Option<UCharacterMovementComponent_CalcVelocityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_CalcVelocity_handler(handler: UCharacterMovementComponent_CalcVelocityInvoker){
        unsafe{ UCharacterMovementComponent_CalcVelocityInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_CanAttemptJumpInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_CanAttemptJumpInvokerHandler: Option<UCharacterMovementComponent_CanAttemptJumpInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_CanAttemptJump_handler(handler: UCharacterMovementComponent_CanAttemptJumpInvoker){
        unsafe{ UCharacterMovementComponent_CanAttemptJumpInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_CanCrouchInCurrentStateInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_CanCrouchInCurrentStateInvokerHandler: Option<UCharacterMovementComponent_CanCrouchInCurrentStateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_CanCrouchInCurrentState_handler(handler: UCharacterMovementComponent_CanCrouchInCurrentStateInvoker){
        unsafe{ UCharacterMovementComponent_CanCrouchInCurrentStateInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_CanStartPathFollowingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_CanStartPathFollowingInvokerHandler: Option<UCharacterMovementComponent_CanStartPathFollowingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_CanStartPathFollowing_handler(handler: UCharacterMovementComponent_CanStartPathFollowingInvoker){
        unsafe{ UCharacterMovementComponent_CanStartPathFollowingInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_CanStopPathFollowingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_CanStopPathFollowingInvokerHandler: Option<UCharacterMovementComponent_CanStopPathFollowingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_CanStopPathFollowing_handler(handler: UCharacterMovementComponent_CanStopPathFollowingInvoker){
        unsafe{ UCharacterMovementComponent_CanStopPathFollowingInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_CanWalkOffLedgesInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_CanWalkOffLedgesInvokerHandler: Option<UCharacterMovementComponent_CanWalkOffLedgesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_CanWalkOffLedges_handler(handler: UCharacterMovementComponent_CanWalkOffLedgesInvoker){
        unsafe{ UCharacterMovementComponent_CanWalkOffLedgesInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_ClearAccumulatedForcesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_ClearAccumulatedForcesInvokerHandler: Option<UCharacterMovementComponent_ClearAccumulatedForcesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_ClearAccumulatedForces_handler(handler: UCharacterMovementComponent_ClearAccumulatedForcesInvoker){
        unsafe{ UCharacterMovementComponent_ClearAccumulatedForcesInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_ClientAckGoodMoveInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UCharacterMovementComponent_ClientAckGoodMoveInvokerHandler: Option<UCharacterMovementComponent_ClientAckGoodMoveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_ClientAckGoodMove_handler(handler: UCharacterMovementComponent_ClientAckGoodMoveInvoker){
        unsafe{ UCharacterMovementComponent_ClientAckGoodMoveInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_ClientAckGoodMove_ImplementationInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UCharacterMovementComponent_ClientAckGoodMove_ImplementationInvokerHandler: Option<UCharacterMovementComponent_ClientAckGoodMove_ImplementationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_ClientAckGoodMove_Implementation_handler(handler: UCharacterMovementComponent_ClientAckGoodMove_ImplementationInvoker){
        unsafe{ UCharacterMovementComponent_ClientAckGoodMove_ImplementationInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_ClientAdjustPositionInvoker = unsafe extern "C" fn(*mut c_void, f32, Vector3, Vector3, *mut UPrimitiveComponentOpaque, UName, bool, bool, u8);
    pub(super) static mut UCharacterMovementComponent_ClientAdjustPositionInvokerHandler: Option<UCharacterMovementComponent_ClientAdjustPositionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_ClientAdjustPosition_handler(handler: UCharacterMovementComponent_ClientAdjustPositionInvoker){
        unsafe{ UCharacterMovementComponent_ClientAdjustPositionInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_ClientVeryShortAdjustPositionInvoker = unsafe extern "C" fn(*mut c_void, f32, Vector3, *mut UPrimitiveComponentOpaque, UName, bool, bool, u8);
    pub(super) static mut UCharacterMovementComponent_ClientVeryShortAdjustPositionInvokerHandler: Option<UCharacterMovementComponent_ClientVeryShortAdjustPositionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_ClientVeryShortAdjustPosition_handler(handler: UCharacterMovementComponent_ClientVeryShortAdjustPositionInvoker){
        unsafe{ UCharacterMovementComponent_ClientVeryShortAdjustPositionInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_ClientVeryShortAdjustPosition_ImplementationInvoker = unsafe extern "C" fn(*mut c_void, f32, Vector3, *mut UPrimitiveComponentOpaque, UName, bool, bool, u8);
    pub(super) static mut UCharacterMovementComponent_ClientVeryShortAdjustPosition_ImplementationInvokerHandler: Option<UCharacterMovementComponent_ClientVeryShortAdjustPosition_ImplementationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_ClientVeryShortAdjustPosition_Implementation_handler(handler: UCharacterMovementComponent_ClientVeryShortAdjustPosition_ImplementationInvoker){
        unsafe{ UCharacterMovementComponent_ClientVeryShortAdjustPosition_ImplementationInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_CrouchInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UCharacterMovementComponent_CrouchInvokerHandler: Option<UCharacterMovementComponent_CrouchInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_Crouch_handler(handler: UCharacterMovementComponent_CrouchInvoker){
        unsafe{ UCharacterMovementComponent_CrouchInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_DeactivateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_DeactivateInvokerHandler: Option<UCharacterMovementComponent_DeactivateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_Deactivate_handler(handler: UCharacterMovementComponent_DeactivateInvoker){
        unsafe{ UCharacterMovementComponent_DeactivateInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_DisableMovementInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_DisableMovementInvokerHandler: Option<UCharacterMovementComponent_DisableMovementInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_DisableMovement_handler(handler: UCharacterMovementComponent_DisableMovementInvoker){
        unsafe{ UCharacterMovementComponent_DisableMovementInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_DoJumpInvoker = unsafe extern "C" fn(*mut c_void, bool) -> bool;
    pub(super) static mut UCharacterMovementComponent_DoJumpInvokerHandler: Option<UCharacterMovementComponent_DoJumpInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_DoJump_handler(handler: UCharacterMovementComponent_DoJumpInvoker){
        unsafe{ UCharacterMovementComponent_DoJumpInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_FindWaterLineInvoker = unsafe extern "C" fn(*mut c_void, Vector3, Vector3) -> Vector3;
    pub(super) static mut UCharacterMovementComponent_FindWaterLineInvokerHandler: Option<UCharacterMovementComponent_FindWaterLineInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_FindWaterLine_handler(handler: UCharacterMovementComponent_FindWaterLineInvoker){
        unsafe{ UCharacterMovementComponent_FindWaterLineInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_FlushServerMovesInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_FlushServerMovesInvokerHandler: Option<UCharacterMovementComponent_FlushServerMovesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_FlushServerMoves_handler(handler: UCharacterMovementComponent_FlushServerMovesInvoker){
        unsafe{ UCharacterMovementComponent_FlushServerMovesInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_ForceClientAdjustmentInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_ForceClientAdjustmentInvokerHandler: Option<UCharacterMovementComponent_ForceClientAdjustmentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_ForceClientAdjustment_handler(handler: UCharacterMovementComponent_ForceClientAdjustmentInvoker){
        unsafe{ UCharacterMovementComponent_ForceClientAdjustmentInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_ForcePositionUpdateInvoker = unsafe extern "C" fn(*mut c_void, f32) -> bool;
    pub(super) static mut UCharacterMovementComponent_ForcePositionUpdateInvokerHandler: Option<UCharacterMovementComponent_ForcePositionUpdateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_ForcePositionUpdate_handler(handler: UCharacterMovementComponent_ForcePositionUpdateInvoker){
        unsafe{ UCharacterMovementComponent_ForcePositionUpdateInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_ForceReplicationUpdateInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_ForceReplicationUpdateInvokerHandler: Option<UCharacterMovementComponent_ForceReplicationUpdateInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_ForceReplicationUpdate_handler(handler: UCharacterMovementComponent_ForceReplicationUpdateInvoker){
        unsafe{ UCharacterMovementComponent_ForceReplicationUpdateInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetAnalogInputModifierInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_GetAnalogInputModifierInvokerHandler: Option<UCharacterMovementComponent_GetAnalogInputModifierInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetAnalogInputModifier_handler(handler: UCharacterMovementComponent_GetAnalogInputModifierInvoker){
        unsafe{ UCharacterMovementComponent_GetAnalogInputModifierInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetAvoidanceGroupMaskInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UCharacterMovementComponent_GetAvoidanceGroupMaskInvokerHandler: Option<UCharacterMovementComponent_GetAvoidanceGroupMaskInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetAvoidanceGroupMask_handler(handler: UCharacterMovementComponent_GetAvoidanceGroupMaskInvoker){
        unsafe{ UCharacterMovementComponent_GetAvoidanceGroupMaskInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetBestDirectionOffActorInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque) -> Vector3;
    pub(super) static mut UCharacterMovementComponent_GetBestDirectionOffActorInvokerHandler: Option<UCharacterMovementComponent_GetBestDirectionOffActorInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetBestDirectionOffActor_handler(handler: UCharacterMovementComponent_GetBestDirectionOffActorInvoker){
        unsafe{ UCharacterMovementComponent_GetBestDirectionOffActorInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetCharacterOwnerInvoker = unsafe extern "C" fn(*mut c_void) -> *mut ACharacterOpaque;
    pub(super) static mut UCharacterMovementComponent_GetCharacterOwnerInvokerHandler: Option<UCharacterMovementComponent_GetCharacterOwnerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetCharacterOwner_handler(handler: UCharacterMovementComponent_GetCharacterOwnerInvoker){
        unsafe{ UCharacterMovementComponent_GetCharacterOwnerInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetCrouchedHalfHeightInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_GetCrouchedHalfHeightInvokerHandler: Option<UCharacterMovementComponent_GetCrouchedHalfHeightInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetCrouchedHalfHeight_handler(handler: UCharacterMovementComponent_GetCrouchedHalfHeightInvoker){
        unsafe{ UCharacterMovementComponent_GetCrouchedHalfHeightInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetCurrentAccelerationInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut UCharacterMovementComponent_GetCurrentAccelerationInvokerHandler: Option<UCharacterMovementComponent_GetCurrentAccelerationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetCurrentAcceleration_handler(handler: UCharacterMovementComponent_GetCurrentAccelerationInvoker){
        unsafe{ UCharacterMovementComponent_GetCurrentAccelerationInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetCurrentReplayedSavedMoveInvoker = unsafe extern "C" fn(*mut c_void) -> *mut FSavedMove_CharacterOpaque;
    pub(super) static mut UCharacterMovementComponent_GetCurrentReplayedSavedMoveInvokerHandler: Option<UCharacterMovementComponent_GetCurrentReplayedSavedMoveInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetCurrentReplayedSavedMove_handler(handler: UCharacterMovementComponent_GetCurrentReplayedSavedMoveInvoker){
        unsafe{ UCharacterMovementComponent_GetCurrentReplayedSavedMoveInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetDeltaRotationInvoker = unsafe extern "C" fn(*mut c_void, f32) -> Rotator;
    pub(super) static mut UCharacterMovementComponent_GetDeltaRotationInvokerHandler: Option<UCharacterMovementComponent_GetDeltaRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetDeltaRotation_handler(handler: UCharacterMovementComponent_GetDeltaRotationInvoker){
        unsafe{ UCharacterMovementComponent_GetDeltaRotationInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetFallingLateralAccelerationInvoker = unsafe extern "C" fn(*mut c_void, f32) -> Vector3;
    pub(super) static mut UCharacterMovementComponent_GetFallingLateralAccelerationInvokerHandler: Option<UCharacterMovementComponent_GetFallingLateralAccelerationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetFallingLateralAcceleration_handler(handler: UCharacterMovementComponent_GetFallingLateralAccelerationInvoker){
        unsafe{ UCharacterMovementComponent_GetFallingLateralAccelerationInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetGravityZInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_GetGravityZInvokerHandler: Option<UCharacterMovementComponent_GetGravityZInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetGravityZ_handler(handler: UCharacterMovementComponent_GetGravityZInvoker){
        unsafe{ UCharacterMovementComponent_GetGravityZInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetGroupsToAvoidMaskInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UCharacterMovementComponent_GetGroupsToAvoidMaskInvokerHandler: Option<UCharacterMovementComponent_GetGroupsToAvoidMaskInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetGroupsToAvoidMask_handler(handler: UCharacterMovementComponent_GetGroupsToAvoidMaskInvoker){
        unsafe{ UCharacterMovementComponent_GetGroupsToAvoidMaskInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetGroupsToIgnoreMaskInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UCharacterMovementComponent_GetGroupsToIgnoreMaskInvokerHandler: Option<UCharacterMovementComponent_GetGroupsToIgnoreMaskInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetGroupsToIgnoreMask_handler(handler: UCharacterMovementComponent_GetGroupsToIgnoreMaskInvoker){
        unsafe{ UCharacterMovementComponent_GetGroupsToIgnoreMaskInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetImpartedMovementBaseVelocityInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut UCharacterMovementComponent_GetImpartedMovementBaseVelocityInvokerHandler: Option<UCharacterMovementComponent_GetImpartedMovementBaseVelocityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetImpartedMovementBaseVelocity_handler(handler: UCharacterMovementComponent_GetImpartedMovementBaseVelocityInvoker){
        unsafe{ UCharacterMovementComponent_GetImpartedMovementBaseVelocityInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetLastUpdateLocationInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut UCharacterMovementComponent_GetLastUpdateLocationInvokerHandler: Option<UCharacterMovementComponent_GetLastUpdateLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetLastUpdateLocation_handler(handler: UCharacterMovementComponent_GetLastUpdateLocationInvoker){
        unsafe{ UCharacterMovementComponent_GetLastUpdateLocationInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetLastUpdateQuatInvoker = unsafe extern "C" fn(*mut c_void) -> Quaternion;
    pub(super) static mut UCharacterMovementComponent_GetLastUpdateQuatInvokerHandler: Option<UCharacterMovementComponent_GetLastUpdateQuatInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetLastUpdateQuat_handler(handler: UCharacterMovementComponent_GetLastUpdateQuatInvoker){
        unsafe{ UCharacterMovementComponent_GetLastUpdateQuatInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetLastUpdateRequestedVelocityInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut UCharacterMovementComponent_GetLastUpdateRequestedVelocityInvokerHandler: Option<UCharacterMovementComponent_GetLastUpdateRequestedVelocityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetLastUpdateRequestedVelocity_handler(handler: UCharacterMovementComponent_GetLastUpdateRequestedVelocityInvoker){
        unsafe{ UCharacterMovementComponent_GetLastUpdateRequestedVelocityInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetLastUpdateRotationInvoker = unsafe extern "C" fn(*mut c_void) -> Rotator;
    pub(super) static mut UCharacterMovementComponent_GetLastUpdateRotationInvokerHandler: Option<UCharacterMovementComponent_GetLastUpdateRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetLastUpdateRotation_handler(handler: UCharacterMovementComponent_GetLastUpdateRotationInvoker){
        unsafe{ UCharacterMovementComponent_GetLastUpdateRotationInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetLastUpdateVelocityInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut UCharacterMovementComponent_GetLastUpdateVelocityInvokerHandler: Option<UCharacterMovementComponent_GetLastUpdateVelocityInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetLastUpdateVelocity_handler(handler: UCharacterMovementComponent_GetLastUpdateVelocityInvoker){
        unsafe{ UCharacterMovementComponent_GetLastUpdateVelocityInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetMaxAccelerationInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_GetMaxAccelerationInvokerHandler: Option<UCharacterMovementComponent_GetMaxAccelerationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetMaxAcceleration_handler(handler: UCharacterMovementComponent_GetMaxAccelerationInvoker){
        unsafe{ UCharacterMovementComponent_GetMaxAccelerationInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetMaxBrakingDecelerationInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_GetMaxBrakingDecelerationInvokerHandler: Option<UCharacterMovementComponent_GetMaxBrakingDecelerationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetMaxBrakingDeceleration_handler(handler: UCharacterMovementComponent_GetMaxBrakingDecelerationInvoker){
        unsafe{ UCharacterMovementComponent_GetMaxBrakingDecelerationInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetMaxJumpHeightInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_GetMaxJumpHeightInvokerHandler: Option<UCharacterMovementComponent_GetMaxJumpHeightInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetMaxJumpHeight_handler(handler: UCharacterMovementComponent_GetMaxJumpHeightInvoker){
        unsafe{ UCharacterMovementComponent_GetMaxJumpHeightInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetMaxJumpHeightWithJumpTimeInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_GetMaxJumpHeightWithJumpTimeInvokerHandler: Option<UCharacterMovementComponent_GetMaxJumpHeightWithJumpTimeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetMaxJumpHeightWithJumpTime_handler(handler: UCharacterMovementComponent_GetMaxJumpHeightWithJumpTimeInvoker){
        unsafe{ UCharacterMovementComponent_GetMaxJumpHeightWithJumpTimeInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetMaxSpeedInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_GetMaxSpeedInvokerHandler: Option<UCharacterMovementComponent_GetMaxSpeedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetMaxSpeed_handler(handler: UCharacterMovementComponent_GetMaxSpeedInvoker){
        unsafe{ UCharacterMovementComponent_GetMaxSpeedInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetMinAnalogSpeedInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_GetMinAnalogSpeedInvokerHandler: Option<UCharacterMovementComponent_GetMinAnalogSpeedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetMinAnalogSpeed_handler(handler: UCharacterMovementComponent_GetMinAnalogSpeedInvoker){
        unsafe{ UCharacterMovementComponent_GetMinAnalogSpeedInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetMovementBaseInvoker = unsafe extern "C" fn(*mut c_void) -> *mut UPrimitiveComponentOpaque;
    pub(super) static mut UCharacterMovementComponent_GetMovementBaseInvokerHandler: Option<UCharacterMovementComponent_GetMovementBaseInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetMovementBase_handler(handler: UCharacterMovementComponent_GetMovementBaseInvoker){
        unsafe{ UCharacterMovementComponent_GetMovementBaseInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetMovementNameInvoker = unsafe extern "C" fn(*mut c_void) -> *const std::os::raw::c_char;
    pub(super) static mut UCharacterMovementComponent_GetMovementNameInvokerHandler: Option<UCharacterMovementComponent_GetMovementNameInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetMovementName_handler(handler: UCharacterMovementComponent_GetMovementNameInvoker){
        unsafe{ UCharacterMovementComponent_GetMovementNameInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetNetworkSafeRandomAngleDegreesInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_GetNetworkSafeRandomAngleDegreesInvokerHandler: Option<UCharacterMovementComponent_GetNetworkSafeRandomAngleDegreesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetNetworkSafeRandomAngleDegrees_handler(handler: UCharacterMovementComponent_GetNetworkSafeRandomAngleDegreesInvoker){
        unsafe{ UCharacterMovementComponent_GetNetworkSafeRandomAngleDegreesInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetPathFollowingBrakingDistanceInvoker = unsafe extern "C" fn(*mut c_void, f32) -> f32;
    pub(super) static mut UCharacterMovementComponent_GetPathFollowingBrakingDistanceInvokerHandler: Option<UCharacterMovementComponent_GetPathFollowingBrakingDistanceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetPathFollowingBrakingDistance_handler(handler: UCharacterMovementComponent_GetPathFollowingBrakingDistanceInvoker){
        unsafe{ UCharacterMovementComponent_GetPathFollowingBrakingDistanceInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetPerchRadiusThresholdInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_GetPerchRadiusThresholdInvokerHandler: Option<UCharacterMovementComponent_GetPerchRadiusThresholdInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetPerchRadiusThreshold_handler(handler: UCharacterMovementComponent_GetPerchRadiusThresholdInvoker){
        unsafe{ UCharacterMovementComponent_GetPerchRadiusThresholdInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetPredictionData_ClientInvoker = unsafe extern "C" fn(*mut c_void) -> *mut FNetworkPredictionData_ClientOpaque;
    pub(super) static mut UCharacterMovementComponent_GetPredictionData_ClientInvokerHandler: Option<UCharacterMovementComponent_GetPredictionData_ClientInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetPredictionData_Client_handler(handler: UCharacterMovementComponent_GetPredictionData_ClientInvoker){
        unsafe{ UCharacterMovementComponent_GetPredictionData_ClientInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetPredictionData_Client_CharacterInvoker = unsafe extern "C" fn(*mut c_void) -> *mut FNetworkPredictionData_Client_CharacterOpaque;
    pub(super) static mut UCharacterMovementComponent_GetPredictionData_Client_CharacterInvokerHandler: Option<UCharacterMovementComponent_GetPredictionData_Client_CharacterInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetPredictionData_Client_Character_handler(handler: UCharacterMovementComponent_GetPredictionData_Client_CharacterInvoker){
        unsafe{ UCharacterMovementComponent_GetPredictionData_Client_CharacterInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetPredictionData_ServerInvoker = unsafe extern "C" fn(*mut c_void) -> *mut FNetworkPredictionData_ServerOpaque;
    pub(super) static mut UCharacterMovementComponent_GetPredictionData_ServerInvokerHandler: Option<UCharacterMovementComponent_GetPredictionData_ServerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetPredictionData_Server_handler(handler: UCharacterMovementComponent_GetPredictionData_ServerInvoker){
        unsafe{ UCharacterMovementComponent_GetPredictionData_ServerInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetPredictionData_Server_CharacterInvoker = unsafe extern "C" fn(*mut c_void) -> *mut FNetworkPredictionData_Server_CharacterOpaque;
    pub(super) static mut UCharacterMovementComponent_GetPredictionData_Server_CharacterInvokerHandler: Option<UCharacterMovementComponent_GetPredictionData_Server_CharacterInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetPredictionData_Server_Character_handler(handler: UCharacterMovementComponent_GetPredictionData_Server_CharacterInvoker){
        unsafe{ UCharacterMovementComponent_GetPredictionData_Server_CharacterInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetRVOAvoidanceConsiderationRadiusInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_GetRVOAvoidanceConsiderationRadiusInvokerHandler: Option<UCharacterMovementComponent_GetRVOAvoidanceConsiderationRadiusInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetRVOAvoidanceConsiderationRadius_handler(handler: UCharacterMovementComponent_GetRVOAvoidanceConsiderationRadiusInvoker){
        unsafe{ UCharacterMovementComponent_GetRVOAvoidanceConsiderationRadiusInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetRVOAvoidanceHeightInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_GetRVOAvoidanceHeightInvokerHandler: Option<UCharacterMovementComponent_GetRVOAvoidanceHeightInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetRVOAvoidanceHeight_handler(handler: UCharacterMovementComponent_GetRVOAvoidanceHeightInvoker){
        unsafe{ UCharacterMovementComponent_GetRVOAvoidanceHeightInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetRVOAvoidanceOriginInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut UCharacterMovementComponent_GetRVOAvoidanceOriginInvokerHandler: Option<UCharacterMovementComponent_GetRVOAvoidanceOriginInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetRVOAvoidanceOrigin_handler(handler: UCharacterMovementComponent_GetRVOAvoidanceOriginInvoker){
        unsafe{ UCharacterMovementComponent_GetRVOAvoidanceOriginInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetRVOAvoidanceRadiusInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_GetRVOAvoidanceRadiusInvokerHandler: Option<UCharacterMovementComponent_GetRVOAvoidanceRadiusInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetRVOAvoidanceRadius_handler(handler: UCharacterMovementComponent_GetRVOAvoidanceRadiusInvoker){
        unsafe{ UCharacterMovementComponent_GetRVOAvoidanceRadiusInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetRVOAvoidanceUIDInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UCharacterMovementComponent_GetRVOAvoidanceUIDInvokerHandler: Option<UCharacterMovementComponent_GetRVOAvoidanceUIDInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetRVOAvoidanceUID_handler(handler: UCharacterMovementComponent_GetRVOAvoidanceUIDInvoker){
        unsafe{ UCharacterMovementComponent_GetRVOAvoidanceUIDInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetRVOAvoidanceUIDFastInvoker = unsafe extern "C" fn(*mut c_void) -> i32;
    pub(super) static mut UCharacterMovementComponent_GetRVOAvoidanceUIDFastInvokerHandler: Option<UCharacterMovementComponent_GetRVOAvoidanceUIDFastInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetRVOAvoidanceUIDFast_handler(handler: UCharacterMovementComponent_GetRVOAvoidanceUIDFastInvoker){
        unsafe{ UCharacterMovementComponent_GetRVOAvoidanceUIDFastInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetRVOAvoidanceWeightInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_GetRVOAvoidanceWeightInvokerHandler: Option<UCharacterMovementComponent_GetRVOAvoidanceWeightInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetRVOAvoidanceWeight_handler(handler: UCharacterMovementComponent_GetRVOAvoidanceWeightInvoker){
        unsafe{ UCharacterMovementComponent_GetRVOAvoidanceWeightInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetServerLastTransformUpdateTimeStampInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_GetServerLastTransformUpdateTimeStampInvokerHandler: Option<UCharacterMovementComponent_GetServerLastTransformUpdateTimeStampInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetServerLastTransformUpdateTimeStamp_handler(handler: UCharacterMovementComponent_GetServerLastTransformUpdateTimeStampInvoker){
        unsafe{ UCharacterMovementComponent_GetServerLastTransformUpdateTimeStampInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetSimulationTimeStepInvoker = unsafe extern "C" fn(*mut c_void, f32, i32) -> f32;
    pub(super) static mut UCharacterMovementComponent_GetSimulationTimeStepInvokerHandler: Option<UCharacterMovementComponent_GetSimulationTimeStepInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetSimulationTimeStep_handler(handler: UCharacterMovementComponent_GetSimulationTimeStepInvoker){
        unsafe{ UCharacterMovementComponent_GetSimulationTimeStepInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetValidPerchRadiusInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_GetValidPerchRadiusInvokerHandler: Option<UCharacterMovementComponent_GetValidPerchRadiusInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetValidPerchRadius_handler(handler: UCharacterMovementComponent_GetValidPerchRadiusInvoker){
        unsafe{ UCharacterMovementComponent_GetValidPerchRadiusInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetVelocityForRVOConsiderationInvoker = unsafe extern "C" fn(*mut c_void) -> Vector3;
    pub(super) static mut UCharacterMovementComponent_GetVelocityForRVOConsiderationInvokerHandler: Option<UCharacterMovementComponent_GetVelocityForRVOConsiderationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetVelocityForRVOConsideration_handler(handler: UCharacterMovementComponent_GetVelocityForRVOConsiderationInvoker){
        unsafe{ UCharacterMovementComponent_GetVelocityForRVOConsiderationInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetWalkableFloorAngleInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_GetWalkableFloorAngleInvokerHandler: Option<UCharacterMovementComponent_GetWalkableFloorAngleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetWalkableFloorAngle_handler(handler: UCharacterMovementComponent_GetWalkableFloorAngleInvoker){
        unsafe{ UCharacterMovementComponent_GetWalkableFloorAngleInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_GetWalkableFloorZInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_GetWalkableFloorZInvokerHandler: Option<UCharacterMovementComponent_GetWalkableFloorZInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_GetWalkableFloorZ_handler(handler: UCharacterMovementComponent_GetWalkableFloorZInvoker){
        unsafe{ UCharacterMovementComponent_GetWalkableFloorZInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_HandlePendingLaunchInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_HandlePendingLaunchInvokerHandler: Option<UCharacterMovementComponent_HandlePendingLaunchInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_HandlePendingLaunch_handler(handler: UCharacterMovementComponent_HandlePendingLaunchInvoker){
        unsafe{ UCharacterMovementComponent_HandlePendingLaunchInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_HasAnimRootMotionInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_HasAnimRootMotionInvokerHandler: Option<UCharacterMovementComponent_HasAnimRootMotionInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_HasAnimRootMotion_handler(handler: UCharacterMovementComponent_HasAnimRootMotionInvoker){
        unsafe{ UCharacterMovementComponent_HasAnimRootMotionInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_HasPredictionData_ClientInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_HasPredictionData_ClientInvokerHandler: Option<UCharacterMovementComponent_HasPredictionData_ClientInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_HasPredictionData_Client_handler(handler: UCharacterMovementComponent_HasPredictionData_ClientInvoker){
        unsafe{ UCharacterMovementComponent_HasPredictionData_ClientInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_HasPredictionData_ServerInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_HasPredictionData_ServerInvokerHandler: Option<UCharacterMovementComponent_HasPredictionData_ServerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_HasPredictionData_Server_handler(handler: UCharacterMovementComponent_HasPredictionData_ServerInvoker){
        unsafe{ UCharacterMovementComponent_HasPredictionData_ServerInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_HasRootMotionSourcesInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_HasRootMotionSourcesInvokerHandler: Option<UCharacterMovementComponent_HasRootMotionSourcesInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_HasRootMotionSources_handler(handler: UCharacterMovementComponent_HasRootMotionSourcesInvoker){
        unsafe{ UCharacterMovementComponent_HasRootMotionSourcesInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_HasValidDataInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_HasValidDataInvokerHandler: Option<UCharacterMovementComponent_HasValidDataInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_HasValidData_handler(handler: UCharacterMovementComponent_HasValidDataInvoker){
        unsafe{ UCharacterMovementComponent_HasValidDataInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_ImmersionDepthInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_ImmersionDepthInvokerHandler: Option<UCharacterMovementComponent_ImmersionDepthInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_ImmersionDepth_handler(handler: UCharacterMovementComponent_ImmersionDepthInvoker){
        unsafe{ UCharacterMovementComponent_ImmersionDepthInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_IsCrouchingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_IsCrouchingInvokerHandler: Option<UCharacterMovementComponent_IsCrouchingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_IsCrouching_handler(handler: UCharacterMovementComponent_IsCrouchingInvoker){
        unsafe{ UCharacterMovementComponent_IsCrouchingInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_IsFallingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_IsFallingInvokerHandler: Option<UCharacterMovementComponent_IsFallingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_IsFalling_handler(handler: UCharacterMovementComponent_IsFallingInvoker){
        unsafe{ UCharacterMovementComponent_IsFallingInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_IsFlyingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_IsFlyingInvokerHandler: Option<UCharacterMovementComponent_IsFlyingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_IsFlying_handler(handler: UCharacterMovementComponent_IsFlyingInvoker){
        unsafe{ UCharacterMovementComponent_IsFlyingInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_IsMovementInProgressInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_IsMovementInProgressInvokerHandler: Option<UCharacterMovementComponent_IsMovementInProgressInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_IsMovementInProgress_handler(handler: UCharacterMovementComponent_IsMovementInProgressInvoker){
        unsafe{ UCharacterMovementComponent_IsMovementInProgressInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_IsMovingOnGroundInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_IsMovingOnGroundInvokerHandler: Option<UCharacterMovementComponent_IsMovingOnGroundInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_IsMovingOnGround_handler(handler: UCharacterMovementComponent_IsMovingOnGroundInvoker){
        unsafe{ UCharacterMovementComponent_IsMovingOnGroundInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_IsSwimmingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_IsSwimmingInvokerHandler: Option<UCharacterMovementComponent_IsSwimmingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_IsSwimming_handler(handler: UCharacterMovementComponent_IsSwimmingInvoker){
        unsafe{ UCharacterMovementComponent_IsSwimmingInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_IsWalkingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_IsWalkingInvokerHandler: Option<UCharacterMovementComponent_IsWalkingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_IsWalking_handler(handler: UCharacterMovementComponent_IsWalkingInvoker){
        unsafe{ UCharacterMovementComponent_IsWalkingInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_JumpOffInvoker = unsafe extern "C" fn(*mut c_void, *mut AActorOpaque);
    pub(super) static mut UCharacterMovementComponent_JumpOffInvokerHandler: Option<UCharacterMovementComponent_JumpOffInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_JumpOff_handler(handler: UCharacterMovementComponent_JumpOffInvoker){
        unsafe{ UCharacterMovementComponent_JumpOffInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_JumpOutOfWaterInvoker = unsafe extern "C" fn(*mut c_void, Vector3);
    pub(super) static mut UCharacterMovementComponent_JumpOutOfWaterInvokerHandler: Option<UCharacterMovementComponent_JumpOutOfWaterInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_JumpOutOfWater_handler(handler: UCharacterMovementComponent_JumpOutOfWaterInvoker){
        unsafe{ UCharacterMovementComponent_JumpOutOfWaterInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_K2_GetWalkableFloorAngleInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_K2_GetWalkableFloorAngleInvokerHandler: Option<UCharacterMovementComponent_K2_GetWalkableFloorAngleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_K2_GetWalkableFloorAngle_handler(handler: UCharacterMovementComponent_K2_GetWalkableFloorAngleInvoker){
        unsafe{ UCharacterMovementComponent_K2_GetWalkableFloorAngleInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_K2_GetWalkableFloorZInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_K2_GetWalkableFloorZInvokerHandler: Option<UCharacterMovementComponent_K2_GetWalkableFloorZInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_K2_GetWalkableFloorZ_handler(handler: UCharacterMovementComponent_K2_GetWalkableFloorZInvoker){
        unsafe{ UCharacterMovementComponent_K2_GetWalkableFloorZInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_MaybeSaveBaseLocationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_MaybeSaveBaseLocationInvokerHandler: Option<UCharacterMovementComponent_MaybeSaveBaseLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_MaybeSaveBaseLocation_handler(handler: UCharacterMovementComponent_MaybeSaveBaseLocationInvoker){
        unsafe{ UCharacterMovementComponent_MaybeSaveBaseLocationInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_MaybeUpdateBasedMovementInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UCharacterMovementComponent_MaybeUpdateBasedMovementInvokerHandler: Option<UCharacterMovementComponent_MaybeUpdateBasedMovementInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_MaybeUpdateBasedMovement_handler(handler: UCharacterMovementComponent_MaybeUpdateBasedMovementInvoker){
        unsafe{ UCharacterMovementComponent_MaybeUpdateBasedMovementInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_NotifyBumpedPawnInvoker = unsafe extern "C" fn(*mut c_void, *mut APawnOpaque);
    pub(super) static mut UCharacterMovementComponent_NotifyBumpedPawnInvokerHandler: Option<UCharacterMovementComponent_NotifyBumpedPawnInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_NotifyBumpedPawn_handler(handler: UCharacterMovementComponent_NotifyBumpedPawnInvoker){
        unsafe{ UCharacterMovementComponent_NotifyBumpedPawnInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_NotifyJumpApexInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_NotifyJumpApexInvokerHandler: Option<UCharacterMovementComponent_NotifyJumpApexInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_NotifyJumpApex_handler(handler: UCharacterMovementComponent_NotifyJumpApexInvoker){
        unsafe{ UCharacterMovementComponent_NotifyJumpApexInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_OnRegisterInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_OnRegisterInvokerHandler: Option<UCharacterMovementComponent_OnRegisterInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_OnRegister_handler(handler: UCharacterMovementComponent_OnRegisterInvoker){
        unsafe{ UCharacterMovementComponent_OnRegisterInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_OnRootMotionSourceBeingAppliedInvoker = unsafe extern "C" fn(*mut c_void, *mut FRootMotionSourceOpaque);
    pub(super) static mut UCharacterMovementComponent_OnRootMotionSourceBeingAppliedInvokerHandler: Option<UCharacterMovementComponent_OnRootMotionSourceBeingAppliedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_OnRootMotionSourceBeingApplied_handler(handler: UCharacterMovementComponent_OnRootMotionSourceBeingAppliedInvoker){
        unsafe{ UCharacterMovementComponent_OnRootMotionSourceBeingAppliedInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_OnTeleportedInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_OnTeleportedInvokerHandler: Option<UCharacterMovementComponent_OnTeleportedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_OnTeleported_handler(handler: UCharacterMovementComponent_OnTeleportedInvoker){
        unsafe{ UCharacterMovementComponent_OnTeleportedInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_PackNetworkMovementModeInvoker = unsafe extern "C" fn(*mut c_void) -> u8;
    pub(super) static mut UCharacterMovementComponent_PackNetworkMovementModeInvokerHandler: Option<UCharacterMovementComponent_PackNetworkMovementModeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_PackNetworkMovementMode_handler(handler: UCharacterMovementComponent_PackNetworkMovementModeInvoker){
        unsafe{ UCharacterMovementComponent_PackNetworkMovementModeInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_PackYawAndPitchTo32Invoker = unsafe extern "C" fn(f32, f32) -> u32;
    pub(super) static mut UCharacterMovementComponent_PackYawAndPitchTo32InvokerHandler: Option<UCharacterMovementComponent_PackYawAndPitchTo32Invoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_PackYawAndPitchTo32_handler(handler: UCharacterMovementComponent_PackYawAndPitchTo32Invoker){
        unsafe{ UCharacterMovementComponent_PackYawAndPitchTo32InvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_PerformAirControlForPathFollowingInvoker = unsafe extern "C" fn(*mut c_void, Vector3, f32);
    pub(super) static mut UCharacterMovementComponent_PerformAirControlForPathFollowingInvokerHandler: Option<UCharacterMovementComponent_PerformAirControlForPathFollowingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_PerformAirControlForPathFollowing_handler(handler: UCharacterMovementComponent_PerformAirControlForPathFollowingInvoker){
        unsafe{ UCharacterMovementComponent_PerformAirControlForPathFollowingInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_PhysFallingInvoker = unsafe extern "C" fn(*mut c_void, f32, i32);
    pub(super) static mut UCharacterMovementComponent_PhysFallingInvokerHandler: Option<UCharacterMovementComponent_PhysFallingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_PhysFalling_handler(handler: UCharacterMovementComponent_PhysFallingInvoker){
        unsafe{ UCharacterMovementComponent_PhysFallingInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_PhysicsRotationInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UCharacterMovementComponent_PhysicsRotationInvokerHandler: Option<UCharacterMovementComponent_PhysicsRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_PhysicsRotation_handler(handler: UCharacterMovementComponent_PhysicsRotationInvoker){
        unsafe{ UCharacterMovementComponent_PhysicsRotationInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_PhysicsVolumeChangedInvoker = unsafe extern "C" fn(*mut c_void, *mut APhysicsVolumeOpaque);
    pub(super) static mut UCharacterMovementComponent_PhysicsVolumeChangedInvokerHandler: Option<UCharacterMovementComponent_PhysicsVolumeChangedInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_PhysicsVolumeChanged_handler(handler: UCharacterMovementComponent_PhysicsVolumeChangedInvoker){
        unsafe{ UCharacterMovementComponent_PhysicsVolumeChangedInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_PostLoadInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_PostLoadInvokerHandler: Option<UCharacterMovementComponent_PostLoadInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_PostLoad_handler(handler: UCharacterMovementComponent_PostLoadInvoker){
        unsafe{ UCharacterMovementComponent_PostLoadInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_RegisterComponentTickFunctionsInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UCharacterMovementComponent_RegisterComponentTickFunctionsInvokerHandler: Option<UCharacterMovementComponent_RegisterComponentTickFunctionsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_RegisterComponentTickFunctions_handler(handler: UCharacterMovementComponent_RegisterComponentTickFunctionsInvoker){
        unsafe{ UCharacterMovementComponent_RegisterComponentTickFunctionsInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_RemoveRootMotionSourceInvoker = unsafe extern "C" fn(*mut c_void, UName);
    pub(super) static mut UCharacterMovementComponent_RemoveRootMotionSourceInvokerHandler: Option<UCharacterMovementComponent_RemoveRootMotionSourceInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_RemoveRootMotionSource_handler(handler: UCharacterMovementComponent_RemoveRootMotionSourceInvoker){
        unsafe{ UCharacterMovementComponent_RemoveRootMotionSourceInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_RemoveRootMotionSourceByIDInvoker = unsafe extern "C" fn(*mut c_void, u16);
    pub(super) static mut UCharacterMovementComponent_RemoveRootMotionSourceByIDInvokerHandler: Option<UCharacterMovementComponent_RemoveRootMotionSourceByIDInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_RemoveRootMotionSourceByID_handler(handler: UCharacterMovementComponent_RemoveRootMotionSourceByIDInvoker){
        unsafe{ UCharacterMovementComponent_RemoveRootMotionSourceByIDInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_ResetPredictionData_ClientInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_ResetPredictionData_ClientInvokerHandler: Option<UCharacterMovementComponent_ResetPredictionData_ClientInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_ResetPredictionData_Client_handler(handler: UCharacterMovementComponent_ResetPredictionData_ClientInvoker){
        unsafe{ UCharacterMovementComponent_ResetPredictionData_ClientInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_ResetPredictionData_ServerInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_ResetPredictionData_ServerInvokerHandler: Option<UCharacterMovementComponent_ResetPredictionData_ServerInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_ResetPredictionData_Server_handler(handler: UCharacterMovementComponent_ResetPredictionData_ServerInvoker){
        unsafe{ UCharacterMovementComponent_ResetPredictionData_ServerInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_RoundAccelerationInvoker = unsafe extern "C" fn(*mut c_void, Vector3) -> Vector3;
    pub(super) static mut UCharacterMovementComponent_RoundAccelerationInvokerHandler: Option<UCharacterMovementComponent_RoundAccelerationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_RoundAcceleration_handler(handler: UCharacterMovementComponent_RoundAccelerationInvoker){
        unsafe{ UCharacterMovementComponent_RoundAccelerationInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_SaveBaseLocationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_SaveBaseLocationInvokerHandler: Option<UCharacterMovementComponent_SaveBaseLocationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_SaveBaseLocation_handler(handler: UCharacterMovementComponent_SaveBaseLocationInvoker){
        unsafe{ UCharacterMovementComponent_SaveBaseLocationInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_SendClientAdjustmentInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_SendClientAdjustmentInvokerHandler: Option<UCharacterMovementComponent_SendClientAdjustmentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_SendClientAdjustment_handler(handler: UCharacterMovementComponent_SendClientAdjustmentInvoker){
        unsafe{ UCharacterMovementComponent_SendClientAdjustmentInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_SetAvoidanceEnabledInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UCharacterMovementComponent_SetAvoidanceEnabledInvokerHandler: Option<UCharacterMovementComponent_SetAvoidanceEnabledInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_SetAvoidanceEnabled_handler(handler: UCharacterMovementComponent_SetAvoidanceEnabledInvoker){
        unsafe{ UCharacterMovementComponent_SetAvoidanceEnabledInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_SetAvoidanceGroupInvoker = unsafe extern "C" fn(*mut c_void, i32);
    pub(super) static mut UCharacterMovementComponent_SetAvoidanceGroupInvokerHandler: Option<UCharacterMovementComponent_SetAvoidanceGroupInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_SetAvoidanceGroup_handler(handler: UCharacterMovementComponent_SetAvoidanceGroupInvoker){
        unsafe{ UCharacterMovementComponent_SetAvoidanceGroupInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_SetAvoidanceVelocityLockInvoker = unsafe extern "C" fn(*mut c_void, *mut UAvoidanceManagerOpaque, f32);
    pub(super) static mut UCharacterMovementComponent_SetAvoidanceVelocityLockInvokerHandler: Option<UCharacterMovementComponent_SetAvoidanceVelocityLockInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_SetAvoidanceVelocityLock_handler(handler: UCharacterMovementComponent_SetAvoidanceVelocityLockInvoker){
        unsafe{ UCharacterMovementComponent_SetAvoidanceVelocityLockInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_SetBaseInvoker = unsafe extern "C" fn(*mut c_void, *mut UPrimitiveComponentOpaque, UName, bool);
    pub(super) static mut UCharacterMovementComponent_SetBaseInvokerHandler: Option<UCharacterMovementComponent_SetBaseInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_SetBase_handler(handler: UCharacterMovementComponent_SetBaseInvoker){
        unsafe{ UCharacterMovementComponent_SetBaseInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_SetCrouchedHalfHeightInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UCharacterMovementComponent_SetCrouchedHalfHeightInvokerHandler: Option<UCharacterMovementComponent_SetCrouchedHalfHeightInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_SetCrouchedHalfHeight_handler(handler: UCharacterMovementComponent_SetCrouchedHalfHeightInvoker){
        unsafe{ UCharacterMovementComponent_SetCrouchedHalfHeightInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_SetDefaultMovementModeInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_SetDefaultMovementModeInvokerHandler: Option<UCharacterMovementComponent_SetDefaultMovementModeInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_SetDefaultMovementMode_handler(handler: UCharacterMovementComponent_SetDefaultMovementModeInvoker){
        unsafe{ UCharacterMovementComponent_SetDefaultMovementModeInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_SetGroupsToAvoidInvoker = unsafe extern "C" fn(*mut c_void, i32);
    pub(super) static mut UCharacterMovementComponent_SetGroupsToAvoidInvokerHandler: Option<UCharacterMovementComponent_SetGroupsToAvoidInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_SetGroupsToAvoid_handler(handler: UCharacterMovementComponent_SetGroupsToAvoidInvoker){
        unsafe{ UCharacterMovementComponent_SetGroupsToAvoidInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_SetGroupsToIgnoreInvoker = unsafe extern "C" fn(*mut c_void, i32);
    pub(super) static mut UCharacterMovementComponent_SetGroupsToIgnoreInvokerHandler: Option<UCharacterMovementComponent_SetGroupsToIgnoreInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_SetGroupsToIgnore_handler(handler: UCharacterMovementComponent_SetGroupsToIgnoreInvoker){
        unsafe{ UCharacterMovementComponent_SetGroupsToIgnoreInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_SetRVOAvoidanceUIDInvoker = unsafe extern "C" fn(*mut c_void, i32);
    pub(super) static mut UCharacterMovementComponent_SetRVOAvoidanceUIDInvokerHandler: Option<UCharacterMovementComponent_SetRVOAvoidanceUIDInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_SetRVOAvoidanceUID_handler(handler: UCharacterMovementComponent_SetRVOAvoidanceUIDInvoker){
        unsafe{ UCharacterMovementComponent_SetRVOAvoidanceUIDInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_SetRVOAvoidanceWeightInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UCharacterMovementComponent_SetRVOAvoidanceWeightInvokerHandler: Option<UCharacterMovementComponent_SetRVOAvoidanceWeightInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_SetRVOAvoidanceWeight_handler(handler: UCharacterMovementComponent_SetRVOAvoidanceWeightInvoker){
        unsafe{ UCharacterMovementComponent_SetRVOAvoidanceWeightInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_SetUpdatedComponentInvoker = unsafe extern "C" fn(*mut c_void, *mut USceneComponentOpaque);
    pub(super) static mut UCharacterMovementComponent_SetUpdatedComponentInvokerHandler: Option<UCharacterMovementComponent_SetUpdatedComponentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_SetUpdatedComponent_handler(handler: UCharacterMovementComponent_SetUpdatedComponentInvoker){
        unsafe{ UCharacterMovementComponent_SetUpdatedComponentInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_SetWalkableFloorAngleInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UCharacterMovementComponent_SetWalkableFloorAngleInvokerHandler: Option<UCharacterMovementComponent_SetWalkableFloorAngleInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_SetWalkableFloorAngle_handler(handler: UCharacterMovementComponent_SetWalkableFloorAngleInvoker){
        unsafe{ UCharacterMovementComponent_SetWalkableFloorAngleInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_SetWalkableFloorZInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UCharacterMovementComponent_SetWalkableFloorZInvokerHandler: Option<UCharacterMovementComponent_SetWalkableFloorZInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_SetWalkableFloorZ_handler(handler: UCharacterMovementComponent_SetWalkableFloorZInvoker){
        unsafe{ UCharacterMovementComponent_SetWalkableFloorZInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_ShouldCorrectRotationInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_ShouldCorrectRotationInvokerHandler: Option<UCharacterMovementComponent_ShouldCorrectRotationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_ShouldCorrectRotation_handler(handler: UCharacterMovementComponent_ShouldCorrectRotationInvoker){
        unsafe{ UCharacterMovementComponent_ShouldCorrectRotationInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_ShouldPerformAirControlForPathFollowingInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_ShouldPerformAirControlForPathFollowingInvokerHandler: Option<UCharacterMovementComponent_ShouldPerformAirControlForPathFollowingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_ShouldPerformAirControlForPathFollowing_handler(handler: UCharacterMovementComponent_ShouldPerformAirControlForPathFollowingInvoker){
        unsafe{ UCharacterMovementComponent_ShouldPerformAirControlForPathFollowingInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_ShouldRemainVerticalInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_ShouldRemainVerticalInvokerHandler: Option<UCharacterMovementComponent_ShouldRemainVerticalInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_ShouldRemainVertical_handler(handler: UCharacterMovementComponent_ShouldRemainVerticalInvoker){
        unsafe{ UCharacterMovementComponent_ShouldRemainVerticalInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_ShouldUsePackedMovementRPCsInvoker = unsafe extern "C" fn(*mut c_void) -> bool;
    pub(super) static mut UCharacterMovementComponent_ShouldUsePackedMovementRPCsInvokerHandler: Option<UCharacterMovementComponent_ShouldUsePackedMovementRPCsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_ShouldUsePackedMovementRPCs_handler(handler: UCharacterMovementComponent_ShouldUsePackedMovementRPCsInvoker){
        unsafe{ UCharacterMovementComponent_ShouldUsePackedMovementRPCsInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_StartNewPhysicsInvoker = unsafe extern "C" fn(*mut c_void, f32, i32);
    pub(super) static mut UCharacterMovementComponent_StartNewPhysicsInvokerHandler: Option<UCharacterMovementComponent_StartNewPhysicsInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_StartNewPhysics_handler(handler: UCharacterMovementComponent_StartNewPhysicsInvoker){
        unsafe{ UCharacterMovementComponent_StartNewPhysicsInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_StartSwimmingInvoker = unsafe extern "C" fn(*mut c_void, Vector3, Vector3, f32, f32, i32);
    pub(super) static mut UCharacterMovementComponent_StartSwimmingInvokerHandler: Option<UCharacterMovementComponent_StartSwimmingInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_StartSwimming_handler(handler: UCharacterMovementComponent_StartSwimmingInvoker){
        unsafe{ UCharacterMovementComponent_StartSwimmingInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_StopActiveMovementInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_StopActiveMovementInvokerHandler: Option<UCharacterMovementComponent_StopActiveMovementInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_StopActiveMovement_handler(handler: UCharacterMovementComponent_StopActiveMovementInvoker){
        unsafe{ UCharacterMovementComponent_StopActiveMovementInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_UnCrouchInvoker = unsafe extern "C" fn(*mut c_void, bool);
    pub(super) static mut UCharacterMovementComponent_UnCrouchInvokerHandler: Option<UCharacterMovementComponent_UnCrouchInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_UnCrouch_handler(handler: UCharacterMovementComponent_UnCrouchInvoker){
        unsafe{ UCharacterMovementComponent_UnCrouchInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_UpdateBasedMovementInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UCharacterMovementComponent_UpdateBasedMovementInvokerHandler: Option<UCharacterMovementComponent_UpdateBasedMovementInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_UpdateBasedMovement_handler(handler: UCharacterMovementComponent_UpdateBasedMovementInvoker){
        unsafe{ UCharacterMovementComponent_UpdateBasedMovementInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_UpdateCharacterStateAfterMovementInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UCharacterMovementComponent_UpdateCharacterStateAfterMovementInvokerHandler: Option<UCharacterMovementComponent_UpdateCharacterStateAfterMovementInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_UpdateCharacterStateAfterMovement_handler(handler: UCharacterMovementComponent_UpdateCharacterStateAfterMovementInvoker){
        unsafe{ UCharacterMovementComponent_UpdateCharacterStateAfterMovementInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_UpdateCharacterStateBeforeMovementInvoker = unsafe extern "C" fn(*mut c_void, f32);
    pub(super) static mut UCharacterMovementComponent_UpdateCharacterStateBeforeMovementInvokerHandler: Option<UCharacterMovementComponent_UpdateCharacterStateBeforeMovementInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_UpdateCharacterStateBeforeMovement_handler(handler: UCharacterMovementComponent_UpdateCharacterStateBeforeMovementInvoker){
        unsafe{ UCharacterMovementComponent_UpdateCharacterStateBeforeMovementInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_UpdateFloorFromAdjustmentInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_UpdateFloorFromAdjustmentInvokerHandler: Option<UCharacterMovementComponent_UpdateFloorFromAdjustmentInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_UpdateFloorFromAdjustment_handler(handler: UCharacterMovementComponent_UpdateFloorFromAdjustmentInvoker){
        unsafe{ UCharacterMovementComponent_UpdateFloorFromAdjustmentInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_UpdateProxyAccelerationInvoker = unsafe extern "C" fn(*mut c_void);
    pub(super) static mut UCharacterMovementComponent_UpdateProxyAccelerationInvokerHandler: Option<UCharacterMovementComponent_UpdateProxyAccelerationInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_UpdateProxyAcceleration_handler(handler: UCharacterMovementComponent_UpdateProxyAccelerationInvoker){
        unsafe{ UCharacterMovementComponent_UpdateProxyAccelerationInvokerHandler = Some(handler) };
    }

    type UCharacterMovementComponent_VisualizeMovementInvoker = unsafe extern "C" fn(*mut c_void) -> f32;
    pub(super) static mut UCharacterMovementComponent_VisualizeMovementInvokerHandler: Option<UCharacterMovementComponent_VisualizeMovementInvoker> = None;
    #[no_mangle]
    extern "C" fn set_UCharacterMovementComponent_VisualizeMovement_handler(handler: UCharacterMovementComponent_VisualizeMovementInvoker){
        unsafe{ UCharacterMovementComponent_VisualizeMovementInvokerHandler = Some(handler) };
    }
}